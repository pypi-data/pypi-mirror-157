{# ----------------------------------------------------------------------------
 # SymForce - Copyright 2022, Skydio, Inc.
 # This source code is under the Apache 2.0 license found in the LICENSE file.
 # ---------------------------------------------------------------------------- #}

{# ------------------------------------------------------------------------- #}
{# Utilities for Python code generation templates.                           #}
{# ------------------------------------------------------------------------- #}

{# Matrix type of a given dimension
 #
 # Args:
 #     rows (int):
 #     cols (int):
 #     is_input (bool): Is this an input argument or return value?
 #}
{%- macro matrix_type(rows, cols, is_input) -%}
    {%- if cols == 1 -%}
        T.{%- if is_input -%}Sequence{%- else -%}List{%- endif -%}[float]
    {%- else -%}
        numpy.ndarray
    {%- endif -%}
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Convert a class to the emitted string
 #
 # Args:
 #     T_or_value (type or Element):
 #     name (str): Name in case type is a generated struct
 #     is_input (bool): Is this an input argument or return value?
 #     defined_class (Optional[type]): Do not prefix the emitted string with sym. if
 #       type is defined_class
 #}
{%- macro format_typename(T_or_value, name, is_input, defined_class = None) %}
    {%- set T = python_util.get_type(T_or_value) -%}
    {%- if T.__name__ == 'DataBuffer' -%}
        numpy.ndarray
    {%- elif T.__name__ == 'Symbol' or is_symbolic(T_or_value) -%}
        float
    {%- elif T.__name__ == 'NoneType' -%}
        None
    {%- elif issubclass(T, Matrix) -%}
        {{ matrix_type(T_or_value.shape[0], T_or_value.shape[1], is_input) }}
    {%- elif issubclass(T, Values) -%}
        {#- TODO(aaron): We don't currently know where to import lcmtypes from or what they should be
         # called, at some point we should fix this and do something like
         # {{ spec.namespaces_dict[name] }}.{{ spec.typenames_dict[name] }}
        -#}
        T.Any
    {%- elif is_sequence(T_or_value) -%}
        {%- if is_input -%}
            T.Sequence[{{ format_typename(T_or_value[0], name, is_input) }}]
        {%- else -%}
            T.List[float]
        {%- endif -%}
    {%- else -%}
        {%- if T != defined_class and ("geo" in T.__module__ or "cam" in T.__module__) -%}
            sym.
        {%- endif -%}
        {{- T.__name__ -}}
    {%- endif -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Get the type of the object in the ouput Values with key given by spec.return_key
 #
 # Args:
 #     spec (Codegen):
 #     defined_class (Optional[type]): Do not prefix the emitted string with sym. if
 #       type is defined_class
 #}
{%- macro get_return_type(spec, defined_class = None) %}
    {%- if spec.outputs.keys() | length == 1 -%}
        {%- set name, type = spec.outputs.items() | first -%}
        {{ format_typename(type, name, is_input=False, defined_class=defined_class) }}
    {%- elif spec.outputs -%}
        T.Tuple[
        {%- for name, type in spec.outputs.items() -%}
        {{ format_typename(type, name, is_input=False, defined_class=defined_class) }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}]
    {%- else -%}
        None
    {%- endif -%}
{% endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Format function docstring
 #
 # Args:
 #     docstring (str):
 #}
{% macro print_docstring(docstring) %}
"""
{%- for line in docstring.split('\n') %}
{{ '{}'.format(line) }}
{% endfor -%}
"""
{% endmacro %}

{# ------------------------------------------------------------------------- #}
{# Generate function name and arguments:
 #
 # Args:
 #     spec (Codegen):
 #}
{%- macro function_name_and_args(spec) -%}
{{ camelcase_to_snakecase(spec.name) }}(
{%- for name in spec.inputs.keys() -%}
{{ name }}{% if not loop.last %}, {% endif %}
{%- endfor -%})
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate function declaration
 #
 # Args:
 #     spec (Codegen):
 #     defined_class (Optional[type]): If function is a method of a class, set
 #       defined_class to the class
 #}
{%- macro function_declaration(spec, defined_class = None) -%}
def {{ function_name_and_args(spec) }}:
    # type: (
    {%- for name, type in spec.inputs.items() -%}
    {{ format_typename(type, name, is_input=True, defined_class=defined_class) }}{% if not loop.last %}, {% endif %}
    {%- endfor -%}) -> {{ get_return_type(spec, defined_class=defined_class) }}
{%- endmacro -%}

{# ------------------------------------------------------------------------- #}

{# Generate inner code for computing the given expression.
 #
 # Args:
 #     spec (Codegen):
 #}
{% macro expr_code(spec) %}
    # Total ops: {{ spec.print_code_results.total_ops }}

    # Input arrays
    {% for name, type in spec.inputs.items() %}
        {% set T = python_util.get_type(type) %}
        {% if not issubclass(T, Values) and not issubclass(T, Matrix) and not is_symbolic(type) and not is_sequence(type) %}
    _{{ name }} = {{ name }}.data
        {% endif %}
    {% endfor %}

    # Intermediate terms ({{ spec.print_code_results.intermediate_terms | length }})
    {% for lhs, rhs in spec.print_code_results.intermediate_terms %}
    {{ lhs }} = {{ rhs }}
    {% endfor %}

    # Output terms
    {# Render all non-sparse terms -#}
    {% for name, type, terms in spec.print_code_results.dense_terms %}
        {%- set T = python_util.get_type(type) -%}
        {% if issubclass(T, Matrix) and type.shape[1] > 1 %}
            {% set rows = type.shape[0] %}
            {% set cols = type.shape[1] %}
    _{{ name }} = numpy.zeros(({{ rows }}, {{ cols }}))
            {% set ns = namespace(iter=0) %}
            {# NOTE(brad): The order of the terms is the storage order of geo.Matrix. If the
            storage order of geo.Matrix is changed (i.e., from column major to row major), the
            following for loops will have to be changed to match that order. #}
            {% for j in range(cols) %}
                {% for i in range(rows) %}
    _{{ name }}[{{ i }}, {{ j }}] = {{ terms[ns.iter][1] }}
                    {% set ns.iter = ns.iter + 1 %}
                {% endfor %}
            {% endfor %}
        {% elif not is_symbolic(type) %}
            {% set dims = ops.StorageOps.storage_dim(type) %}
    _{{name}} = [0.] * {{ dims }}
            {% for i in range(dims) %}
    _{{ name }}[{{ i }}] = {{ terms[i][1] }}
            {% endfor %}
        {% else %}
    _{{name}} = {{ terms[0][1] }}
        {% endif %}
    {% endfor %}

    {#- Render all sparse terms -#}
    {% for name, type, terms in spec.print_code_results.sparse_terms %}
        {% set csc_format = spec.sparse_mat_data[name] %}

    _{{ name }} = sparse.csc_matrix(({{ csc_format.kRows }}, {{ csc_format.kCols }}))
    _{{ name }}.data = numpy.empty({{ csc_format.kNumNonZero }})
    _{{ name }}.indices = numpy.empty({{ csc_format.kRowIndices | length }}, dtype=numpy.int32)
    _{{ name }}.indptr = numpy.empty({{ csc_format.kColPtrs | length }}, dtype=numpy.int32)
        {% for _, non_zero in terms %}
    _{{ name }}.data[{{ loop.index0 }}] = {{ non_zero }}
        {% endfor %}
        {% for index in csc_format.kRowIndices %}
    _{{ name }}.indices[{{ loop.index0 }}] = {{ index }}
        {% endfor %}
        {% for ptr in csc_format.kColPtrs %}
    _{{ name }}.indptr[{{ loop.index0 }}] = {{ ptr }}
        {% endfor %}
    {% endfor %}
    return
    {%- for name, type in spec.outputs.items() %}
        {% set T = python_util.get_type(type) %}
        {% if issubclass(T, (Matrix, Values)) or is_sequence(type) or is_symbolic(type) %}
 _{{name}}
        {%- else %}
 sym.{{T.__name__}}.from_storage(_{{name}})
        {%- endif %}
        {%- if not loop.last %}, {% endif %}
    {%- endfor -%}
{% endmacro %}
