Metadata-Version: 2.1
Name: diffReport
Version: 0.0.4
Summary: File comparison and report differences
Home-page: https://github.com/vish-nu-ram/diffReport
Author: Vishnuram
Author-email: vishnu.ram@hotmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fuzzywuzzy
Requires-Dist: pandas
Requires-Dist: pdfminer
Requires-Dist: python-Levenshtein

# diffReport
Python Package to report the differences between two files

## Installation

Run the following to install:

```python
pip install diffReport
```

## Usage

```python
from diffReport import diffReport

html = diffReport("file_path_a","file_path_b")
```

## Modules
NAME
    diffReport

FUNCTIONS
    diffReport(path_file_a, path_file_b, path_file_output='', html_return=True, partial_ratio='tokenSortRatio')
        :param path_file_a: Path for the File A to be compared.
        :param path_file_b: Path for the File B to be compared.
        :param path_file_output: Path of the directory where the output HTML file needs to be saved. (Default: 'Output/')
        :param html_return: Boolean to select if the function returns HTML of the report. (True by default)
        :param partial_ratio: Partial Ratio Type, Accepted Values are ("Ratio", "qRatio", "wRatio", "ratio_2", "tokenSetRatio", "tokenSortRatio", "partialTokenSortRatio", "default")
        :return: HTML for the report if html_return is set to True.  If set to false, it will return the DataFrame.
        
        Function takes two PDF file paths as input, and generates a difference report with the lines that are different
        in the two files, and also highlighting the differences in an HTML table with colors to represent content that
        was Added, Removed or changed.
        
        Any text that is present in File_a but not File_b is marked in Red.
        Any text that is present in File_b but not File_a is marked in Green.
        Any text that is neither present in string_a but nor string_b is marked in Yellow.
    
    html_output(df, path_file_output)
        :param df: Data Frame to be displayed as an HTM Table
        :param path_file_output: Path of the directory where the output HTML file needs to be saved. (Default: 'Output/')
        :return: Returns the HTML for the table generated.
        
        The function accepts the Data frame as an argument to iterate through the rows and generate an HTML table with

NAME
    markUp

FUNCTIONS
    markUpDifferences(string_a, string_b)
        :param string_a: String one to compare
        :param string_b: String two to compare :return: String A, String B after
        marking both strings with <insert>,<replace> and <delete> tags by comparing the differences between the two
        strings.
        
        Any text that is present in string_a but not string_b is marked with a <delete> markup tag.
        Any text that is present in string_b but not string_a is marked with a <insert> markup tag.
        Any text that is neither present in string_a but nor string_b is marked with a <replace> markup tag.
    
    mark_green(string)
        :param string: String to be marked
        :return: returns a String with markup tags
        
        Function appends <insert></insert> markup tags to the input strings as prefix and suffix to return a marked string.
    
    mark_red(string)
        :param string: String to be marked
        :return: returns a String with markup tags
        
        Function appends <delete></delete> markup tags to the input strings as prefix and suffix to return a marked string.
    
    mark_yellow(string)
        :param string: String to be marked
        :return: returns a String with markup tags
        
        Function appends <replace></replace> markup tags to the input strings as prefix and suffix to return a marked string.

NAME
    fuzzyCompare

FUNCTIONS
    partialRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the Partial Ratio score etween the two given text
        
        Function to calculate the ratio of the most similar substring as a number between 0 and 100.
        
        Example : "" and "" returns a score of :
    
    partialTokenSortRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the Partial Token Sort Ratio score between the two given text
        
        Function to calculate the ratio of??????????????????????????
        
        Example : "" and "" returns a score of :
    
     qRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the Q Ratio score between the two given text
        
        Function to calculate the ratio of??????????????????????????
        
        Example : "" and "" returns a score of :
    
    ratio(t1, t2, ratio_type='default')
    
    tokenSetRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the Token Set Ratio score between the two given text
        
        Function to calculate the ratio of??????????????????????????
        
        Example : "" and "" returns a score of :
    
    tokenSortRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the Token Sort Ratio score between the two given text
        
        Function to calculate the ratio of??????????????????????????
        
        Example : "" and "" returns a score of :
    
    wRatio(t1, t2)
        :param t1: Text string 1
        :param t2: Text String 2
        :return: Returns the W Ratio score between the two given text
        
        Function to calculate the ratio of??????????????????????????
        
        Example : "" and "" returns a score of :


NAME
    pdfParser

FUNCTIONS
    pdfparser(path)
        Function that takes a path of a PDF file as input and extracts the text within the file as a string



