:py:mod:`rhino_health.lib.endpoints.aimodel.aimodel_dataclass`
==============================================================

.. py:module:: rhino_health.lib.endpoints.aimodel.aimodel_dataclass

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rhino_health.lib.endpoints.aimodel.aimodel_dataclass.ModelTypes
   rhino_health.lib.endpoints.aimodel.aimodel_dataclass.AIModel
   rhino_health.lib.endpoints.aimodel.aimodel_dataclass.AIModelRunInput
   rhino_health.lib.endpoints.aimodel.aimodel_dataclass.AIModelTrainInput




.. py:class:: ModelTypes

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   
   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: CLARA_TRAIN
      :annotation: = Clara Train

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: GENERALIZED_COMPUTE
      :annotation: = Generalized Compute

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: NVIDIA_FLARE
      :annotation: = NVIDIA FLARE

      
















      ..
          !! processed by numpydoc !!


.. py:class:: AIModel(*args, **kwargs)

   Bases: :py:obj:`AIModelCreateInput`

   

















   ..
       !! processed by numpydoc !!
   .. py:attribute:: uid
      :annotation: :str

      
       The unique ID of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: created_at
      :annotation: :str

      
       When this AIModel was added
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: name
      :annotation: :str

      
       The name of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: description
      :annotation: :str

      
       The description of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: version
      :annotation: :int

      
       The version of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: base_version_uid
      :annotation: :Optional[str] = 

      
       The first version of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: input_data_schema
      :annotation: :str

      
       The schema pre-run of the input cohorts
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: output_data_schema
      :annotation: :str

      
       The schema post-run of the output cohorts
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: project_uid
      :annotation: :typing_extensions.Annotated[str, Field(alias='project')]

      
       The AIModel project
















      ..
          !! processed by numpydoc !!


.. py:class:: AIModelRunInput(*args, **kwargs)

   Bases: :py:obj:`rhino_health.lib.dataclass.RhinoBaseModel`

   

















   ..
       !! processed by numpydoc !!
   .. py:attribute:: aimodel_uid
      :annotation: :str

      
       The unique ID of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: input_cohort_uids
      :annotation: :List[str]

      
       A list of the input cohort uids
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: output_cohort_names_suffix
      :annotation: :str

      
       The suffix given to all output cohorts
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: run_params
      :annotation: :Optional[str] = {}

      
       The run params code you want to run on the cohorts
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: timeout_seconds
      :annotation: :Optional[int] = 600

      
       The time before a timeout is declared for the run
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: sync
      :annotation: :Optional[bool] = True

      
       If True wait for run to end if False let it run in the background
















      ..
          !! processed by numpydoc !!


.. py:class:: AIModelTrainInput(**data)

   Bases: :py:obj:`rhino_health.lib.dataclass.RhinoBaseModel`

   

















   ..
       !! processed by numpydoc !!
   .. py:attribute:: aimodel_uid
      :annotation: :str

      
      The unique ID of the AIModel
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: input_cohort_uids
      :annotation: :List[str]

      
      A list of the input cohort uids
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: validation_cohort_uids
      :annotation: :List[str]

      
      A list of the cohort uids for validation
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: validation_cohorts_inference_suffix
      :annotation: :str

      
      The suffix given to all output cohorts
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: config_fed_server
      :annotation: :str

      
      The config for the federated server
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: config_fed_client
      :annotation: :str

      
      The config for the federated client
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: timeout_seconds
      :annotation: :int

      
      The time before a timeout is declared for the run
















      ..
          !! processed by numpydoc !!


