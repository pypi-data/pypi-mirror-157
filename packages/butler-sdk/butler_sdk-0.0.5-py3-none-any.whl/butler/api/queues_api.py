"""
    Butler REST API Documentation

           Welcome to Butler API Documentation and Explorer       Butler API is built on and conforms to Open API 3.0 spec.       This enables you to automatically generate language specific clients for       languages/frameworks listed here: https://openapi-generator.tech/docs/generators/#client-generators         # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from butler.api_client import ApiClient, Endpoint as _Endpoint
from butler.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from butler.model.extraction_results_dto import ExtractionResultsDto
from butler.model.extraction_results_sort_by import ExtractionResultsSortBy
from butler.model.paginated_extraction_results_dto import PaginatedExtractionResultsDto
from butler.model.sort_order import SortOrder
from butler.model.upload_documents_upload_response_dto import UploadDocumentsUploadResponseDto


class QueuesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __extract_document(
            self,
            queue_id,
            **kwargs
        ):
            """Upload a single document to the queue specified by <queueId> and returns the extracted results  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.extract_document(queue_id, async_req=True)
            >>> result = thread.get()

            Args:
                queue_id (str): ID of the queue

            Keyword Args:
                file (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExtractionResultsDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['queue_id'] = \
                queue_id
            return self.call_with_http_info(**kwargs)

        self.extract_document = _Endpoint(
            settings={
                'response_type': (ExtractionResultsDto,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/queues/{queueId}/documents',
                'operation_id': 'extract_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'queue_id',
                    'file',
                ],
                'required': [
                    'queue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'queue_id':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'queue_id': 'queueId',
                    'file': 'file',
                },
                'location_map': {
                    'queue_id': 'path',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__extract_document
        )

        def __get_extraction_results(
            self,
            queue_id,
            upload_id,
            **kwargs
        ):
            """Get paginated list of extraction results for documents matching the query params  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_extraction_results(queue_id, upload_id, async_req=True)
            >>> result = thread.get()

            Args:
                queue_id (str): ID of the queue
                upload_id (str): ID of an upload

            Keyword Args:
                after_id (str): Fetch a page of results after this ID. [optional]
                before_id (str): Fetch a page of results before this ID. [optional]
                limit (float): Number of results per page. [optional]
                sort_order (SortOrder): Sort order. Default is ascending order.. [optional]
                extra_results ([str]): Which extra results you want to load, if any. These are lower-level results that you may use in your own post-processing. Omitted by default. [optional]
                sort_by (ExtractionResultsSortBy): Attribute to sort by. Default is DocumentId. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedExtractionResultsDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['queue_id'] = \
                queue_id
            kwargs['upload_id'] = \
                upload_id
            return self.call_with_http_info(**kwargs)

        self.get_extraction_results = _Endpoint(
            settings={
                'response_type': (PaginatedExtractionResultsDto,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/queues/{queueId}/extraction_results',
                'operation_id': 'get_extraction_results',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'queue_id',
                    'upload_id',
                    'after_id',
                    'before_id',
                    'limit',
                    'sort_order',
                    'extra_results',
                    'sort_by',
                ],
                'required': [
                    'queue_id',
                    'upload_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'extra_results',
                ],
                'validation': [
                    'extra_results',
                ]
            },
            root_map={
                'validations': {
                    ('extra_results',): {

                    },
                },
                'allowed_values': {
                    ('extra_results',): {

                        "LINEBLOCKS": "LineBlocks",
                        "FORMFIELDS": "FormFields",
                        "TABLES": "Tables"
                    },
                },
                'openapi_types': {
                    'queue_id':
                        (str,),
                    'upload_id':
                        (str,),
                    'after_id':
                        (str,),
                    'before_id':
                        (str,),
                    'limit':
                        (float,),
                    'sort_order':
                        (SortOrder,),
                    'extra_results':
                        ([str],),
                    'sort_by':
                        (ExtractionResultsSortBy,),
                },
                'attribute_map': {
                    'queue_id': 'queueId',
                    'upload_id': 'uploadId',
                    'after_id': 'afterId',
                    'before_id': 'beforeId',
                    'limit': 'limit',
                    'sort_order': 'sortOrder',
                    'extra_results': 'extraResults',
                    'sort_by': 'sortBy',
                },
                'location_map': {
                    'queue_id': 'path',
                    'upload_id': 'query',
                    'after_id': 'query',
                    'before_id': 'query',
                    'limit': 'query',
                    'sort_order': 'query',
                    'extra_results': 'query',
                    'sort_by': 'query',
                },
                'collection_format_map': {
                    'extra_results': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_extraction_results
        )

        def __upload_documents_to_queue(
            self,
            queue_id,
            **kwargs
        ):
            """Upload documents to the queue specified by <queueId> for processing  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_documents_to_queue(queue_id, async_req=True)
            >>> result = thread.get()

            Args:
                queue_id (str): ID of the queue

            Keyword Args:
                files ([file_type]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UploadDocumentsUploadResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['queue_id'] = \
                queue_id
            return self.call_with_http_info(**kwargs)

        self.upload_documents_to_queue = _Endpoint(
            settings={
                'response_type': (UploadDocumentsUploadResponseDto,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/queues/{queueId}/uploads',
                'operation_id': 'upload_documents_to_queue',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'queue_id',
                    'files',
                ],
                'required': [
                    'queue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'queue_id':
                        (str,),
                    'files':
                        ([file_type],),
                },
                'attribute_map': {
                    'queue_id': 'queueId',
                    'files': 'files',
                },
                'location_map': {
                    'queue_id': 'path',
                    'files': 'form',
                },
                'collection_format_map': {
                    'files': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__upload_documents_to_queue
        )
