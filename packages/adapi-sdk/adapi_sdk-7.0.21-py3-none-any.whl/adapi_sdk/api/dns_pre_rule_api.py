# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class DnsPreRuleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_dns_pre_rule_list(self, dns_pre_rule_config, **kwargs):  # noqa: E501
        """create new dns-pre-rule  # noqa: E501

        新建优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_pre_rule_list(dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_pre_rule_list_with_http_info(dns_pre_rule_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_pre_rule_list_with_http_info(dns_pre_rule_config, **kwargs)  # noqa: E501
            return data

    def add_dns_pre_rule_list_with_http_info(self, dns_pre_rule_config, **kwargs):  # noqa: E501
        """create new dns-pre-rule  # noqa: E501

        新建优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_pre_rule_list_with_http_info(dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_pre_rule_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_pre_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_pre_rule_config' is set
        if ('dns_pre_rule_config' not in params or
                params['dns_pre_rule_config'] is None):
            raise ValueError("Missing the required parameter `dns_pre_rule_config` when calling `add_dns_pre_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_pre_rule_config' in params:
            body_params = params['dns_pre_rule_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_pre_rule(self, name, dns_pre_rule_config, **kwargs):  # noqa: E501
        """create new dns-pre-rule  # noqa: E501

        新建优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_pre_rule(name, dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_pre_rule_with_http_info(name, dns_pre_rule_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_pre_rule_with_http_info(name, dns_pre_rule_config, **kwargs)  # noqa: E501
            return data

    def create_dns_pre_rule_with_http_info(self, name, dns_pre_rule_config, **kwargs):  # noqa: E501
        """create new dns-pre-rule  # noqa: E501

        新建优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_pre_rule_with_http_info(name, dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_pre_rule_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_pre_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_pre_rule`")  # noqa: E501
        # verify the required parameter 'dns_pre_rule_config' is set
        if ('dns_pre_rule_config' not in params or
                params['dns_pre_rule_config'] is None):
            raise ValueError("Missing the required parameter `dns_pre_rule_config` when calling `create_dns_pre_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_pre_rule_config' in params:
            body_params = params['dns_pre_rule_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_pre_rule(self, name, **kwargs):  # noqa: E501
        """delete specific dns-pre-rule  # noqa: E501

        删除优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_pre_rule(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_pre_rule_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_pre_rule_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_pre_rule_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-pre-rule  # noqa: E501

        删除优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_pre_rule_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_pre_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_pre_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_pre_rule(self, name, dns_pre_rule_property, **kwargs):  # noqa: E501
        """modify specific dns-pre-rule  # noqa: E501

        更新优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_pre_rule(name, dns_pre_rule_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_pre_rule_with_http_info(name, dns_pre_rule_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_pre_rule_with_http_info(name, dns_pre_rule_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_pre_rule_with_http_info(self, name, dns_pre_rule_property, **kwargs):  # noqa: E501
        """modify specific dns-pre-rule  # noqa: E501

        更新优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_pre_rule_with_http_info(name, dns_pre_rule_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_pre_rule_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_pre_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_pre_rule`")  # noqa: E501
        # verify the required parameter 'dns_pre_rule_property' is set
        if ('dns_pre_rule_property' not in params or
                params['dns_pre_rule_property'] is None):
            raise ValueError("Missing the required parameter `dns_pre_rule_property` when calling `edit_dns_pre_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_pre_rule_property' in params:
            body_params = params['dns_pre_rule_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_pre_rule(self, name, **kwargs):  # noqa: E501
        """get specific dns-pre-rule  # noqa: E501

        查看优先代理策略信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_pre_rule(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_pre_rule_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_pre_rule_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_pre_rule_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-pre-rule  # noqa: E501

        查看优先代理策略信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_pre_rule_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_pre_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_pre_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_pre_rule_list(self, **kwargs):  # noqa: E501
        """get all dns-pre-rule  # noqa: E501

        查看优先代理策略信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_pre_rule_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsPreRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_pre_rule_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_pre_rule_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_pre_rule_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-pre-rule  # noqa: E501

        查看优先代理策略信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_pre_rule_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsPreRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_pre_rule_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_pre_rule(self, name, dns_pre_rule_config, **kwargs):  # noqa: E501
        """replace specific dns-pre-rule  # noqa: E501

        更新优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_pre_rule(name, dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_pre_rule_with_http_info(name, dns_pre_rule_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_pre_rule_with_http_info(name, dns_pre_rule_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_pre_rule_with_http_info(self, name, dns_pre_rule_config, **kwargs):  # noqa: E501
        """replace specific dns-pre-rule  # noqa: E501

        更新优先代理策略配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_pre_rule_with_http_info(name, dns_pre_rule_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsPreRule dns_pre_rule_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsPreRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_pre_rule_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_pre_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_pre_rule`")  # noqa: E501
        # verify the required parameter 'dns_pre_rule_config' is set
        if ('dns_pre_rule_config' not in params or
                params['dns_pre_rule_config'] is None):
            raise ValueError("Missing the required parameter `dns_pre_rule_config` when calling `replace_dns_pre_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_pre_rule_config' in params:
            body_params = params['dns_pre_rule_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-pre-rule/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsPreRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
