# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class SessionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def remove_session(self, session_clear_parameter, **kwargs):  # noqa: E501
        """remove session  # noqa: E501

        清理系统会话记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_session(session_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugSessionClearParameter session_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_session_with_http_info(session_clear_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_session_with_http_info(session_clear_parameter, **kwargs)  # noqa: E501
            return data

    def remove_session_with_http_info(self, session_clear_parameter, **kwargs):  # noqa: E501
        """remove session  # noqa: E501

        清理系统会话记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_session_with_http_info(session_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugSessionClearParameter session_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_clear_parameter', 'x_token_sangforad']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_clear_parameter' is set
        if ('session_clear_parameter' not in params or
                params['session_clear_parameter'] is None):
            raise ValueError("Missing the required parameter `session_clear_parameter` when calling `remove_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'session_clear_parameter' in params:
            body_params = params['session_clear_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/net/session/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_session(self, **kwargs):  # noqa: E501
        """retrieve session  # noqa: E501

        查询系统会话记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str address: ip地址
        :param str srcaddr: 可选参数；指定源IP地址，可以为单个IP地址，IP地址范围
        :param str dstaddr: 可选参数；指定目的IP地址，可以为单个IP地址，IP地址范围
        :param str srcport: 可选参数；指定源端口，可以为单个端口，端口范围
        :param str dstport: 可选参数；指定目的端口，可以为单个端口，端口范围
        :param str protocol: 可选参数；指定协议类型，可以为协议名称，协议号
        :param str virtual_service: 可选参数；指定虚拟服务
        :param int session_id: 可选参数；指定session_id
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_session_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve session  # noqa: E501

        查询系统会话记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str address: ip地址
        :param str srcaddr: 可选参数；指定源IP地址，可以为单个IP地址，IP地址范围
        :param str dstaddr: 可选参数；指定目的IP地址，可以为单个IP地址，IP地址范围
        :param str srcport: 可选参数；指定源端口，可以为单个端口，端口范围
        :param str dstport: 可选参数；指定目的端口，可以为单个端口，端口范围
        :param str protocol: 可选参数；指定协议类型，可以为协议名称，协议号
        :param str virtual_service: 可选参数；指定虚拟服务
        :param int session_id: 可选参数；指定session_id
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'address', 'srcaddr', 'dstaddr', 'srcport', 'dstport', 'protocol', 'virtual_service', 'session_id', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'srcaddr' in params:
            query_params.append(('srcaddr', params['srcaddr']))  # noqa: E501
        if 'dstaddr' in params:
            query_params.append(('dstaddr', params['dstaddr']))  # noqa: E501
        if 'srcport' in params:
            query_params.append(('srcport', params['srcport']))  # noqa: E501
        if 'dstport' in params:
            query_params.append(('dstport', params['dstport']))  # noqa: E501
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))  # noqa: E501
        if 'virtual_service' in params:
            query_params.append(('virtual_service', params['virtual_service']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/net/session/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
