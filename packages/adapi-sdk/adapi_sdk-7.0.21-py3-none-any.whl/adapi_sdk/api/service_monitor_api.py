# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class ServiceMonitorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_service_monitor_connect_ssl_list(self, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-ssl  # noqa: E501

        新建一个监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_ssl_list(service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_connect_ssl_list_with_http_info(service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_connect_ssl_list_with_http_info(service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_connect_ssl_list_with_http_info(self, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-ssl  # noqa: E501

        新建一个监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_ssl_list_with_http_info(service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_connect_ssl_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_connect_ssl_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_connect_ssl_config' is set
        if ('service_monitor_connect_ssl_config' not in params or
                params['service_monitor_connect_ssl_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_ssl_config` when calling `add_service_monitor_connect_ssl_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_ssl_config' in params:
            body_params = params['service_monitor_connect_ssl_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_connect_tcp_list(self, service_monitor_connect_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-tcp  # noqa: E501

        新建一个监视器（CONNECT-TCP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_tcp_list(service_monitor_connect_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectTcp service_monitor_connect_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_connect_tcp_list_with_http_info(service_monitor_connect_tcp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_connect_tcp_list_with_http_info(service_monitor_connect_tcp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_connect_tcp_list_with_http_info(self, service_monitor_connect_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-tcp  # noqa: E501

        新建一个监视器（CONNECT-TCP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_tcp_list_with_http_info(service_monitor_connect_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectTcp service_monitor_connect_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_connect_tcp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_connect_tcp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_connect_tcp_config' is set
        if ('service_monitor_connect_tcp_config' not in params or
                params['service_monitor_connect_tcp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_tcp_config` when calling `add_service_monitor_connect_tcp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_tcp_config' in params:
            body_params = params['service_monitor_connect_tcp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-tcp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_connect_udp_list(self, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-udp  # noqa: E501

        新建一个监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_udp_list(service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_connect_udp_list_with_http_info(service_monitor_connect_udp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_connect_udp_list_with_http_info(service_monitor_connect_udp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_connect_udp_list_with_http_info(self, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-udp  # noqa: E501

        新建一个监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_connect_udp_list_with_http_info(service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_connect_udp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_connect_udp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_connect_udp_config' is set
        if ('service_monitor_connect_udp_config' not in params or
                params['service_monitor_connect_udp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_udp_config` when calling `add_service_monitor_connect_udp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_udp_config' in params:
            body_params = params['service_monitor_connect_udp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_dns_list(self, service_monitor_dns_config, **kwargs):  # noqa: E501
        """create new service-monitor-dns  # noqa: E501

        新建一个监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_dns_list(service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_dns_list_with_http_info(service_monitor_dns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_dns_list_with_http_info(service_monitor_dns_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_dns_list_with_http_info(self, service_monitor_dns_config, **kwargs):  # noqa: E501
        """create new service-monitor-dns  # noqa: E501

        新建一个监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_dns_list_with_http_info(service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_dns_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_dns_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_dns_config' is set
        if ('service_monitor_dns_config' not in params or
                params['service_monitor_dns_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_dns_config` when calling `add_service_monitor_dns_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_dns_config' in params:
            body_params = params['service_monitor_dns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_external_monitor_list(self, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """create new service-monitor-external-monitor  # noqa: E501

        新建一个监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_external_monitor_list(service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_external_monitor_list_with_http_info(service_monitor_external_monitor_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_external_monitor_list_with_http_info(service_monitor_external_monitor_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_external_monitor_list_with_http_info(self, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """create new service-monitor-external-monitor  # noqa: E501

        新建一个监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_external_monitor_list_with_http_info(service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_external_monitor_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_external_monitor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_external_monitor_config' is set
        if ('service_monitor_external_monitor_config' not in params or
                params['service_monitor_external_monitor_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_external_monitor_config` when calling `add_service_monitor_external_monitor_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_external_monitor_config' in params:
            body_params = params['service_monitor_external_monitor_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_ftp_list(self, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """create new service-monitor-ftp  # noqa: E501

        新建一个监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_ftp_list(service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_ftp_list_with_http_info(service_monitor_ftp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_ftp_list_with_http_info(service_monitor_ftp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_ftp_list_with_http_info(self, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """create new service-monitor-ftp  # noqa: E501

        新建一个监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_ftp_list_with_http_info(service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_ftp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_ftp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_ftp_config' is set
        if ('service_monitor_ftp_config' not in params or
                params['service_monitor_ftp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ftp_config` when calling `add_service_monitor_ftp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ftp_config' in params:
            body_params = params['service_monitor_ftp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_http_list(self, service_monitor_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-http  # noqa: E501

        新建一个监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_http_list(service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_http_list_with_http_info(service_monitor_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_http_list_with_http_info(service_monitor_http_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_http_list_with_http_info(self, service_monitor_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-http  # noqa: E501

        新建一个监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_http_list_with_http_info(service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_http_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_http_config' is set
        if ('service_monitor_http_config' not in params or
                params['service_monitor_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_http_config` when calling `add_service_monitor_http_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_http_config' in params:
            body_params = params['service_monitor_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_https_list(self, service_monitor_https_config, **kwargs):  # noqa: E501
        """create new service-monitor-https  # noqa: E501

        新建一个监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_https_list(service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_https_list_with_http_info(service_monitor_https_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_https_list_with_http_info(service_monitor_https_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_https_list_with_http_info(self, service_monitor_https_config, **kwargs):  # noqa: E501
        """create new service-monitor-https  # noqa: E501

        新建一个监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_https_list_with_http_info(service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_https_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_https_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_https_config' is set
        if ('service_monitor_https_config' not in params or
                params['service_monitor_https_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_https_config` when calling `add_service_monitor_https_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_https_config' in params:
            body_params = params['service_monitor_https_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_icmp_list(self, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmp  # noqa: E501

        新建一个监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_icmp_list(service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_icmp_list_with_http_info(service_monitor_icmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_icmp_list_with_http_info(service_monitor_icmp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_icmp_list_with_http_info(self, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmp  # noqa: E501

        新建一个监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_icmp_list_with_http_info(service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_icmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_icmp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_icmp_config' is set
        if ('service_monitor_icmp_config' not in params or
                params['service_monitor_icmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmp_config` when calling `add_service_monitor_icmp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmp_config' in params:
            body_params = params['service_monitor_icmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_icmpv6_list(self, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmpv6  # noqa: E501

        新建一个监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_icmpv6_list(service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_icmpv6_list_with_http_info(service_monitor_icmpv6_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_icmpv6_list_with_http_info(service_monitor_icmpv6_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_icmpv6_list_with_http_info(self, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmpv6  # noqa: E501

        新建一个监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_icmpv6_list_with_http_info(service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_icmpv6_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_icmpv6_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_icmpv6_config' is set
        if ('service_monitor_icmpv6_config' not in params or
                params['service_monitor_icmpv6_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmpv6_config` when calling `add_service_monitor_icmpv6_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmpv6_config' in params:
            body_params = params['service_monitor_icmpv6_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_ldap_list(self, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """create new service-monitor-ldap  # noqa: E501

        新建一个监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_ldap_list(service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_ldap_list_with_http_info(service_monitor_ldap_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_ldap_list_with_http_info(service_monitor_ldap_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_ldap_list_with_http_info(self, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """create new service-monitor-ldap  # noqa: E501

        新建一个监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_ldap_list_with_http_info(service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_ldap_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_ldap_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_ldap_config' is set
        if ('service_monitor_ldap_config' not in params or
                params['service_monitor_ldap_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ldap_config` when calling `add_service_monitor_ldap_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ldap_config' in params:
            body_params = params['service_monitor_ldap_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_monitor_expression_list(self, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """create new service-monitor-monitor-expression  # noqa: E501

        新建一个监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_monitor_expression_list(service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_monitor_expression_list_with_http_info(service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_monitor_expression_list_with_http_info(service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_monitor_expression_list_with_http_info(self, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """create new service-monitor-monitor-expression  # noqa: E501

        新建一个监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_monitor_expression_list_with_http_info(service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_monitor_expression_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_monitor_expression_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_monitor_expression_config' is set
        if ('service_monitor_monitor_expression_config' not in params or
                params['service_monitor_monitor_expression_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_monitor_expression_config` when calling `add_service_monitor_monitor_expression_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_monitor_expression_config' in params:
            body_params = params['service_monitor_monitor_expression_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_mssql_database_list(self, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mssql-database  # noqa: E501

        新建一个监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_mssql_database_list(service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_mssql_database_list_with_http_info(service_monitor_mssql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_mssql_database_list_with_http_info(service_monitor_mssql_database_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_mssql_database_list_with_http_info(self, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mssql-database  # noqa: E501

        新建一个监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_mssql_database_list_with_http_info(service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_mssql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_mssql_database_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_mssql_database_config' is set
        if ('service_monitor_mssql_database_config' not in params or
                params['service_monitor_mssql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mssql_database_config` when calling `add_service_monitor_mssql_database_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mssql_database_config' in params:
            body_params = params['service_monitor_mssql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_mysql_database_list(self, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mysql-database  # noqa: E501

        新建一个监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_mysql_database_list(service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_mysql_database_list_with_http_info(service_monitor_mysql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_mysql_database_list_with_http_info(service_monitor_mysql_database_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_mysql_database_list_with_http_info(self, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mysql-database  # noqa: E501

        新建一个监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_mysql_database_list_with_http_info(service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_mysql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_mysql_database_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_mysql_database_config' is set
        if ('service_monitor_mysql_database_config' not in params or
                params['service_monitor_mysql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mysql_database_config` when calling `add_service_monitor_mysql_database_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mysql_database_config' in params:
            body_params = params['service_monitor_mysql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_oracle_database_list(self, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-oracle-database  # noqa: E501

        新建一个监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_oracle_database_list(service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_oracle_database_list_with_http_info(service_monitor_oracle_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_oracle_database_list_with_http_info(service_monitor_oracle_database_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_oracle_database_list_with_http_info(self, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-oracle-database  # noqa: E501

        新建一个监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_oracle_database_list_with_http_info(service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_oracle_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_oracle_database_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_oracle_database_config' is set
        if ('service_monitor_oracle_database_config' not in params or
                params['service_monitor_oracle_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_oracle_database_config` when calling `add_service_monitor_oracle_database_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_oracle_database_config' in params:
            body_params = params['service_monitor_oracle_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_passive_http_list(self, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-http  # noqa: E501

        新建一个监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_passive_http_list(service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_passive_http_list_with_http_info(service_monitor_passive_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_passive_http_list_with_http_info(service_monitor_passive_http_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_passive_http_list_with_http_info(self, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-http  # noqa: E501

        新建一个监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_passive_http_list_with_http_info(service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_passive_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_passive_http_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_passive_http_config' is set
        if ('service_monitor_passive_http_config' not in params or
                params['service_monitor_passive_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_http_config` when calling `add_service_monitor_passive_http_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_http_config' in params:
            body_params = params['service_monitor_passive_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_passive_tcp_list(self, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-tcp  # noqa: E501

        新建一个监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_passive_tcp_list(service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_passive_tcp_list_with_http_info(service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_passive_tcp_list_with_http_info(service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_passive_tcp_list_with_http_info(self, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-tcp  # noqa: E501

        新建一个监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_passive_tcp_list_with_http_info(service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_passive_tcp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_passive_tcp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_passive_tcp_config' is set
        if ('service_monitor_passive_tcp_config' not in params or
                params['service_monitor_passive_tcp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_tcp_config` when calling `add_service_monitor_passive_tcp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_tcp_config' in params:
            body_params = params['service_monitor_passive_tcp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_radius_list(self, service_monitor_radius_config, **kwargs):  # noqa: E501
        """create new service-monitor-radius  # noqa: E501

        新建一个监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_radius_list(service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_radius_list_with_http_info(service_monitor_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_radius_list_with_http_info(service_monitor_radius_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_radius_list_with_http_info(self, service_monitor_radius_config, **kwargs):  # noqa: E501
        """create new service-monitor-radius  # noqa: E501

        新建一个监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_radius_list_with_http_info(service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_radius_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_radius_config' is set
        if ('service_monitor_radius_config' not in params or
                params['service_monitor_radius_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_radius_config` when calling `add_service_monitor_radius_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_radius_config' in params:
            body_params = params['service_monitor_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_sip_list(self, service_monitor_sip_config, **kwargs):  # noqa: E501
        """create new service-monitor-sip  # noqa: E501

        新建一个监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_sip_list(service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_sip_list_with_http_info(service_monitor_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_sip_list_with_http_info(service_monitor_sip_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_sip_list_with_http_info(self, service_monitor_sip_config, **kwargs):  # noqa: E501
        """create new service-monitor-sip  # noqa: E501

        新建一个监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_sip_list_with_http_info(service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_sip_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_sip_config' is set
        if ('service_monitor_sip_config' not in params or
                params['service_monitor_sip_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_sip_config` when calling `add_service_monitor_sip_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_sip_config' in params:
            body_params = params['service_monitor_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_snmp_list(self, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-snmp  # noqa: E501

        新建一个监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_snmp_list(service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_snmp_list_with_http_info(service_monitor_snmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_snmp_list_with_http_info(service_monitor_snmp_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_snmp_list_with_http_info(self, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-snmp  # noqa: E501

        新建一个监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_snmp_list_with_http_info(service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_snmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_snmp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_snmp_config' is set
        if ('service_monitor_snmp_config' not in params or
                params['service_monitor_snmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_snmp_config` when calling `add_service_monitor_snmp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_snmp_config' in params:
            body_params = params['service_monitor_snmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_monitor_tcp_half_open_list(self, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """create new service-monitor-tcp-half-open  # noqa: E501

        新建一个监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_tcp_half_open_list(service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_monitor_tcp_half_open_list_with_http_info(service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_monitor_tcp_half_open_list_with_http_info(service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
            return data

    def add_service_monitor_tcp_half_open_list_with_http_info(self, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """create new service-monitor-tcp-half-open  # noqa: E501

        新建一个监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_monitor_tcp_half_open_list_with_http_info(service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_monitor_tcp_half_open_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_monitor_tcp_half_open_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_monitor_tcp_half_open_config' is set
        if ('service_monitor_tcp_half_open_config' not in params or
                params['service_monitor_tcp_half_open_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_tcp_half_open_config` when calling `add_service_monitor_tcp_half_open_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_tcp_half_open_config' in params:
            body_params = params['service_monitor_tcp_half_open_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_connect_ssl(self, name, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-ssl  # noqa: E501

        新建指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_connect_ssl(name, service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_connect_ssl_with_http_info(self, name, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-ssl  # noqa: E501

        新建指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_ssl_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_connect_ssl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_connect_ssl`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_ssl_config' is set
        if ('service_monitor_connect_ssl_config' not in params or
                params['service_monitor_connect_ssl_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_ssl_config` when calling `create_service_monitor_connect_ssl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_ssl_config' in params:
            body_params = params['service_monitor_connect_ssl_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_connect_udp(self, name, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_connect_udp(name, service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_connect_udp_with_http_info(self, name, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """create new service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_udp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_connect_udp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_connect_udp`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_udp_config' is set
        if ('service_monitor_connect_udp_config' not in params or
                params['service_monitor_connect_udp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_udp_config` when calling `create_service_monitor_connect_udp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_udp_config' in params:
            body_params = params['service_monitor_connect_udp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_dns(self, name, service_monitor_dns_config, **kwargs):  # noqa: E501
        """create new service-monitor-dns  # noqa: E501

        新建指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_dns(name, service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_dns_with_http_info(name, service_monitor_dns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_dns_with_http_info(name, service_monitor_dns_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_dns_with_http_info(self, name, service_monitor_dns_config, **kwargs):  # noqa: E501
        """create new service-monitor-dns  # noqa: E501

        新建指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_dns_with_http_info(name, service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_dns_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_dns`")  # noqa: E501
        # verify the required parameter 'service_monitor_dns_config' is set
        if ('service_monitor_dns_config' not in params or
                params['service_monitor_dns_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_dns_config` when calling `create_service_monitor_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_dns_config' in params:
            body_params = params['service_monitor_dns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_external_monitor(self, name, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """create new service-monitor-external-monitor  # noqa: E501

        新建指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_external_monitor(name, service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_external_monitor_with_http_info(self, name, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """create new service-monitor-external-monitor  # noqa: E501

        新建指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_external_monitor_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_external_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_external_monitor`")  # noqa: E501
        # verify the required parameter 'service_monitor_external_monitor_config' is set
        if ('service_monitor_external_monitor_config' not in params or
                params['service_monitor_external_monitor_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_external_monitor_config` when calling `create_service_monitor_external_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_external_monitor_config' in params:
            body_params = params['service_monitor_external_monitor_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_ftp(self, name, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """create new service-monitor-ftp  # noqa: E501

        新建指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_ftp(name, service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_ftp_with_http_info(self, name, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """create new service-monitor-ftp  # noqa: E501

        新建指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ftp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_ftp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_ftp`")  # noqa: E501
        # verify the required parameter 'service_monitor_ftp_config' is set
        if ('service_monitor_ftp_config' not in params or
                params['service_monitor_ftp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ftp_config` when calling `create_service_monitor_ftp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ftp_config' in params:
            body_params = params['service_monitor_ftp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_http(self, name, service_monitor_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-http  # noqa: E501

        新建指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_http(name, service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_http_with_http_info(name, service_monitor_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_http_with_http_info(name, service_monitor_http_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_http_with_http_info(self, name, service_monitor_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-http  # noqa: E501

        新建指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_http_with_http_info(name, service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_http_config' is set
        if ('service_monitor_http_config' not in params or
                params['service_monitor_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_http_config` when calling `create_service_monitor_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_http_config' in params:
            body_params = params['service_monitor_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_https(self, name, service_monitor_https_config, **kwargs):  # noqa: E501
        """create new service-monitor-https  # noqa: E501

        新建指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_https(name, service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_https_with_http_info(name, service_monitor_https_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_https_with_http_info(name, service_monitor_https_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_https_with_http_info(self, name, service_monitor_https_config, **kwargs):  # noqa: E501
        """create new service-monitor-https  # noqa: E501

        新建指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_https_with_http_info(name, service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_https_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_https" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_https`")  # noqa: E501
        # verify the required parameter 'service_monitor_https_config' is set
        if ('service_monitor_https_config' not in params or
                params['service_monitor_https_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_https_config` when calling `create_service_monitor_https`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_https_config' in params:
            body_params = params['service_monitor_https_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_icmp(self, name, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmp  # noqa: E501

        新建指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_icmp(name, service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_icmp_with_http_info(self, name, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmp  # noqa: E501

        新建指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_icmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_icmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmp_config' is set
        if ('service_monitor_icmp_config' not in params or
                params['service_monitor_icmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmp_config` when calling `create_service_monitor_icmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmp_config' in params:
            body_params = params['service_monitor_icmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_icmpv6(self, name, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmpv6  # noqa: E501

        新建指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_icmpv6(name, service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_icmpv6_with_http_info(self, name, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """create new service-monitor-icmpv6  # noqa: E501

        新建指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmpv6_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_icmpv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_icmpv6`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmpv6_config' is set
        if ('service_monitor_icmpv6_config' not in params or
                params['service_monitor_icmpv6_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmpv6_config` when calling `create_service_monitor_icmpv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmpv6_config' in params:
            body_params = params['service_monitor_icmpv6_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_ldap(self, name, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """create new service-monitor-ldap  # noqa: E501

        新建指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_ldap(name, service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_ldap_with_http_info(self, name, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """create new service-monitor-ldap  # noqa: E501

        新建指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ldap_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_ldap`")  # noqa: E501
        # verify the required parameter 'service_monitor_ldap_config' is set
        if ('service_monitor_ldap_config' not in params or
                params['service_monitor_ldap_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ldap_config` when calling `create_service_monitor_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ldap_config' in params:
            body_params = params['service_monitor_ldap_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_monitor_expression(self, name, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """create new service-monitor-monitor-expression  # noqa: E501

        新建指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_monitor_expression(name, service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_monitor_expression_with_http_info(self, name, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """create new service-monitor-monitor-expression  # noqa: E501

        新建指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_monitor_expression_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_monitor_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_monitor_expression`")  # noqa: E501
        # verify the required parameter 'service_monitor_monitor_expression_config' is set
        if ('service_monitor_monitor_expression_config' not in params or
                params['service_monitor_monitor_expression_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_monitor_expression_config` when calling `create_service_monitor_monitor_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_monitor_expression_config' in params:
            body_params = params['service_monitor_monitor_expression_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_mssql_database(self, name, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mssql-database  # noqa: E501

        新建指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_mssql_database(name, service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_mssql_database_with_http_info(self, name, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mssql-database  # noqa: E501

        新建指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mssql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_mssql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_mssql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mssql_database_config' is set
        if ('service_monitor_mssql_database_config' not in params or
                params['service_monitor_mssql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mssql_database_config` when calling `create_service_monitor_mssql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mssql_database_config' in params:
            body_params = params['service_monitor_mssql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_mysql_database(self, name, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mysql-database  # noqa: E501

        新建指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_mysql_database(name, service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_mysql_database_with_http_info(self, name, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-mysql-database  # noqa: E501

        新建指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mysql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_mysql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_mysql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mysql_database_config' is set
        if ('service_monitor_mysql_database_config' not in params or
                params['service_monitor_mysql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mysql_database_config` when calling `create_service_monitor_mysql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mysql_database_config' in params:
            body_params = params['service_monitor_mysql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_oracle_database(self, name, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-oracle-database  # noqa: E501

        新建指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_oracle_database(name, service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_oracle_database_with_http_info(self, name, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """create new service-monitor-oracle-database  # noqa: E501

        新建指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_oracle_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_oracle_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_oracle_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_oracle_database_config' is set
        if ('service_monitor_oracle_database_config' not in params or
                params['service_monitor_oracle_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_oracle_database_config` when calling `create_service_monitor_oracle_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_oracle_database_config' in params:
            body_params = params['service_monitor_oracle_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_passive_http(self, name, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-http  # noqa: E501

        新建指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_passive_http(name, service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_passive_http_with_http_info(self, name, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-http  # noqa: E501

        新建指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_passive_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_passive_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_http_config' is set
        if ('service_monitor_passive_http_config' not in params or
                params['service_monitor_passive_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_http_config` when calling `create_service_monitor_passive_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_http_config' in params:
            body_params = params['service_monitor_passive_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_passive_tcp(self, name, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-tcp  # noqa: E501

        新建指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_passive_tcp(name, service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_passive_tcp_with_http_info(self, name, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """create new service-monitor-passive-tcp  # noqa: E501

        新建指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_tcp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_passive_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_passive_tcp`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_tcp_config' is set
        if ('service_monitor_passive_tcp_config' not in params or
                params['service_monitor_passive_tcp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_tcp_config` when calling `create_service_monitor_passive_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_tcp_config' in params:
            body_params = params['service_monitor_passive_tcp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_radius(self, name, service_monitor_radius_config, **kwargs):  # noqa: E501
        """create new service-monitor-radius  # noqa: E501

        新建指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_radius(name, service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_radius_with_http_info(name, service_monitor_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_radius_with_http_info(name, service_monitor_radius_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_radius_with_http_info(self, name, service_monitor_radius_config, **kwargs):  # noqa: E501
        """create new service-monitor-radius  # noqa: E501

        新建指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_radius_with_http_info(name, service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_radius`")  # noqa: E501
        # verify the required parameter 'service_monitor_radius_config' is set
        if ('service_monitor_radius_config' not in params or
                params['service_monitor_radius_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_radius_config` when calling `create_service_monitor_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_radius_config' in params:
            body_params = params['service_monitor_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_sip(self, name, service_monitor_sip_config, **kwargs):  # noqa: E501
        """create new service-monitor-sip  # noqa: E501

        新建指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_sip(name, service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_sip_with_http_info(name, service_monitor_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_sip_with_http_info(name, service_monitor_sip_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_sip_with_http_info(self, name, service_monitor_sip_config, **kwargs):  # noqa: E501
        """create new service-monitor-sip  # noqa: E501

        新建指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_sip_with_http_info(name, service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_sip`")  # noqa: E501
        # verify the required parameter 'service_monitor_sip_config' is set
        if ('service_monitor_sip_config' not in params or
                params['service_monitor_sip_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_sip_config` when calling `create_service_monitor_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_sip_config' in params:
            body_params = params['service_monitor_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_snmp(self, name, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-snmp  # noqa: E501

        新建指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_snmp(name, service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_snmp_with_http_info(self, name, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """create new service-monitor-snmp  # noqa: E501

        新建指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_snmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_snmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_snmp_config' is set
        if ('service_monitor_snmp_config' not in params or
                params['service_monitor_snmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_snmp_config` when calling `create_service_monitor_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_snmp_config' in params:
            body_params = params['service_monitor_snmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_service_monitor_tcp_half_open(self, name, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """create new service-monitor-tcp-half-open  # noqa: E501

        新建指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_tcp_half_open(name, service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
            return data

    def create_service_monitor_tcp_half_open_with_http_info(self, name, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """create new service-monitor-tcp-half-open  # noqa: E501

        新建指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_tcp_half_open_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_monitor_tcp_half_open" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_service_monitor_tcp_half_open`")  # noqa: E501
        # verify the required parameter 'service_monitor_tcp_half_open_config' is set
        if ('service_monitor_tcp_half_open_config' not in params or
                params['service_monitor_tcp_half_open_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_tcp_half_open_config` when calling `create_service_monitor_tcp_half_open`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_tcp_half_open_config' in params:
            body_params = params['service_monitor_tcp_half_open_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_connect_ssl(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-connect-ssl  # noqa: E501

        删除指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_connect_ssl(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_connect_ssl_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_connect_ssl_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_connect_ssl_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-connect-ssl  # noqa: E501

        删除指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_connect_ssl_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_connect_ssl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_connect_ssl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_connect_udp(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-connect-udp  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_connect_udp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_connect_udp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_connect_udp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_connect_udp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-connect-udp  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_connect_udp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_connect_udp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_connect_udp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_dns(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-dns  # noqa: E501

        删除指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_dns(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_dns_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_dns_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_dns_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-dns  # noqa: E501

        删除指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_dns_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_external_monitor(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-external-monitor  # noqa: E501

        删除指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_external_monitor(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_external_monitor_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_external_monitor_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_external_monitor_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-external-monitor  # noqa: E501

        删除指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_external_monitor_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_external_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_external_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_ftp(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-ftp  # noqa: E501

        删除指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_ftp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_ftp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_ftp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_ftp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-ftp  # noqa: E501

        删除指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_ftp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_ftp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_ftp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_http(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-http  # noqa: E501

        删除指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_http(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_http_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_http_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_http_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-http  # noqa: E501

        删除指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_http_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_https(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-https  # noqa: E501

        删除指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_https(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_https_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_https_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_https_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-https  # noqa: E501

        删除指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_https_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_https" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_https`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_icmp(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-icmp  # noqa: E501

        删除指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_icmp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_icmp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_icmp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_icmp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-icmp  # noqa: E501

        删除指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_icmp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_icmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_icmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_icmpv6(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-icmpv6  # noqa: E501

        删除指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_icmpv6(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_icmpv6_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_icmpv6_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_icmpv6_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-icmpv6  # noqa: E501

        删除指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_icmpv6_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_icmpv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_icmpv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_ldap(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-ldap  # noqa: E501

        删除指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_ldap(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_ldap_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_ldap_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_ldap_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-ldap  # noqa: E501

        删除指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_ldap_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_monitor_expression(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-monitor-expression  # noqa: E501

        删除指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_monitor_expression(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_monitor_expression_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_monitor_expression_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_monitor_expression_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-monitor-expression  # noqa: E501

        删除指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_monitor_expression_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_monitor_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_monitor_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_mssql_database(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-mssql-database  # noqa: E501

        删除指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_mssql_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_mssql_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_mssql_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_mssql_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-mssql-database  # noqa: E501

        删除指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_mssql_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_mssql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_mssql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_mysql_database(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-mysql-database  # noqa: E501

        删除指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_mysql_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_mysql_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_mysql_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_mysql_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-mysql-database  # noqa: E501

        删除指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_mysql_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_mysql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_mysql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_oracle_database(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-oracle-database  # noqa: E501

        删除指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_oracle_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_oracle_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_oracle_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_oracle_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-oracle-database  # noqa: E501

        删除指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_oracle_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_oracle_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_oracle_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_passive_http(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-passive-http  # noqa: E501

        删除指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_passive_http(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_passive_http_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_passive_http_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_passive_http_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-passive-http  # noqa: E501

        删除指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_passive_http_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_passive_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_passive_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_passive_tcp(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-passive-tcp  # noqa: E501

        删除指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_passive_tcp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_passive_tcp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_passive_tcp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_passive_tcp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-passive-tcp  # noqa: E501

        删除指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_passive_tcp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_passive_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_passive_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_radius(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-radius  # noqa: E501

        删除指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_radius(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_radius_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_radius_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_radius_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-radius  # noqa: E501

        删除指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_radius_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_sip(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-sip  # noqa: E501

        删除指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_sip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_sip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_sip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_sip_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-sip  # noqa: E501

        删除指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_sip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_snmp(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-snmp  # noqa: E501

        删除指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_snmp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_snmp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_snmp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_snmp_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-snmp  # noqa: E501

        删除指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_snmp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_monitor_tcp_half_open(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-tcp-half-open  # noqa: E501

        删除指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_tcp_half_open(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_monitor_tcp_half_open_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_monitor_tcp_half_open_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_service_monitor_tcp_half_open_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific service-monitor-tcp-half-open  # noqa: E501

        删除指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_monitor_tcp_half_open_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_monitor_tcp_half_open" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_service_monitor_tcp_half_open`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_connect_ssl(self, name, service_monitor_connect_ssl_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-connect-ssl  # noqa: E501

        修改指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_connect_ssl(name, service_monitor_connect_ssl_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_connect_ssl_with_http_info(self, name, service_monitor_connect_ssl_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-connect-ssl  # noqa: E501

        修改指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_ssl_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_connect_ssl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_connect_ssl`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_ssl_property' is set
        if ('service_monitor_connect_ssl_property' not in params or
                params['service_monitor_connect_ssl_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_ssl_property` when calling `edit_service_monitor_connect_ssl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_ssl_property' in params:
            body_params = params['service_monitor_connect_ssl_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_connect_udp(self, name, service_monitor_connect_udp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-connect-udp  # noqa: E501

        删除指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_connect_udp(name, service_monitor_connect_udp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_connect_udp_with_http_info(self, name, service_monitor_connect_udp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-connect-udp  # noqa: E501

        删除指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_udp_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_connect_udp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_connect_udp`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_udp_property' is set
        if ('service_monitor_connect_udp_property' not in params or
                params['service_monitor_connect_udp_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_udp_property` when calling `edit_service_monitor_connect_udp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_udp_property' in params:
            body_params = params['service_monitor_connect_udp_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_dns(self, name, service_monitor_dns_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-dns  # noqa: E501

        修改指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_dns(name, service_monitor_dns_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_dns_with_http_info(name, service_monitor_dns_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_dns_with_http_info(name, service_monitor_dns_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_dns_with_http_info(self, name, service_monitor_dns_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-dns  # noqa: E501

        修改指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_dns_with_http_info(name, service_monitor_dns_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_dns_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_dns`")  # noqa: E501
        # verify the required parameter 'service_monitor_dns_property' is set
        if ('service_monitor_dns_property' not in params or
                params['service_monitor_dns_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_dns_property` when calling `edit_service_monitor_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_dns_property' in params:
            body_params = params['service_monitor_dns_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_external_monitor(self, name, service_monitor_external_monitor_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-external-monitor  # noqa: E501

        修改指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_external_monitor(name, service_monitor_external_monitor_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_external_monitor_with_http_info(self, name, service_monitor_external_monitor_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-external-monitor  # noqa: E501

        修改指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_external_monitor_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_external_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_external_monitor`")  # noqa: E501
        # verify the required parameter 'service_monitor_external_monitor_property' is set
        if ('service_monitor_external_monitor_property' not in params or
                params['service_monitor_external_monitor_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_external_monitor_property` when calling `edit_service_monitor_external_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_external_monitor_property' in params:
            body_params = params['service_monitor_external_monitor_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_ftp(self, name, service_monitor_ftp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-ftp  # noqa: E501

        修改指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_ftp(name, service_monitor_ftp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_ftp_with_http_info(name, service_monitor_ftp_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_ftp_with_http_info(name, service_monitor_ftp_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_ftp_with_http_info(self, name, service_monitor_ftp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-ftp  # noqa: E501

        修改指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_ftp_with_http_info(name, service_monitor_ftp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ftp_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_ftp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_ftp`")  # noqa: E501
        # verify the required parameter 'service_monitor_ftp_property' is set
        if ('service_monitor_ftp_property' not in params or
                params['service_monitor_ftp_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ftp_property` when calling `edit_service_monitor_ftp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ftp_property' in params:
            body_params = params['service_monitor_ftp_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_http(self, name, service_monitor_http_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-http  # noqa: E501

        修改指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_http(name, service_monitor_http_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_http_with_http_info(name, service_monitor_http_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_http_with_http_info(name, service_monitor_http_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_http_with_http_info(self, name, service_monitor_http_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-http  # noqa: E501

        修改指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_http_with_http_info(name, service_monitor_http_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_http_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_http_property' is set
        if ('service_monitor_http_property' not in params or
                params['service_monitor_http_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_http_property` when calling `edit_service_monitor_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_http_property' in params:
            body_params = params['service_monitor_http_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_https(self, name, service_monitor_https_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-https  # noqa: E501

        修改指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_https(name, service_monitor_https_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_https_with_http_info(name, service_monitor_https_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_https_with_http_info(name, service_monitor_https_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_https_with_http_info(self, name, service_monitor_https_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-https  # noqa: E501

        修改指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_https_with_http_info(name, service_monitor_https_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_https_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_https" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_https`")  # noqa: E501
        # verify the required parameter 'service_monitor_https_property' is set
        if ('service_monitor_https_property' not in params or
                params['service_monitor_https_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_https_property` when calling `edit_service_monitor_https`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_https_property' in params:
            body_params = params['service_monitor_https_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_icmp(self, name, service_monitor_icmp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-icmp  # noqa: E501

        修改指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_icmp(name, service_monitor_icmp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_icmp_with_http_info(name, service_monitor_icmp_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_icmp_with_http_info(name, service_monitor_icmp_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_icmp_with_http_info(self, name, service_monitor_icmp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-icmp  # noqa: E501

        修改指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_icmp_with_http_info(name, service_monitor_icmp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmp_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_icmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_icmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmp_property' is set
        if ('service_monitor_icmp_property' not in params or
                params['service_monitor_icmp_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmp_property` when calling `edit_service_monitor_icmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmp_property' in params:
            body_params = params['service_monitor_icmp_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_icmpv6(self, name, service_monitor_icmpv6_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-icmpv6  # noqa: E501

        修改指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_icmpv6(name, service_monitor_icmpv6_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_icmpv6_with_http_info(self, name, service_monitor_icmpv6_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-icmpv6  # noqa: E501

        修改指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmpv6_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_icmpv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_icmpv6`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmpv6_property' is set
        if ('service_monitor_icmpv6_property' not in params or
                params['service_monitor_icmpv6_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmpv6_property` when calling `edit_service_monitor_icmpv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmpv6_property' in params:
            body_params = params['service_monitor_icmpv6_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_ldap(self, name, service_monitor_ldap_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-ldap  # noqa: E501

        修改指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_ldap(name, service_monitor_ldap_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_ldap_with_http_info(name, service_monitor_ldap_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_ldap_with_http_info(name, service_monitor_ldap_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_ldap_with_http_info(self, name, service_monitor_ldap_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-ldap  # noqa: E501

        修改指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_ldap_with_http_info(name, service_monitor_ldap_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ldap_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_ldap`")  # noqa: E501
        # verify the required parameter 'service_monitor_ldap_property' is set
        if ('service_monitor_ldap_property' not in params or
                params['service_monitor_ldap_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ldap_property` when calling `edit_service_monitor_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ldap_property' in params:
            body_params = params['service_monitor_ldap_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_monitor_expression(self, name, service_monitor_monitor_expression_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-monitor-expression  # noqa: E501

        修改指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_monitor_expression(name, service_monitor_monitor_expression_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_monitor_expression_with_http_info(self, name, service_monitor_monitor_expression_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-monitor-expression  # noqa: E501

        修改指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_monitor_expression_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_monitor_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_monitor_expression`")  # noqa: E501
        # verify the required parameter 'service_monitor_monitor_expression_property' is set
        if ('service_monitor_monitor_expression_property' not in params or
                params['service_monitor_monitor_expression_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_monitor_expression_property` when calling `edit_service_monitor_monitor_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_monitor_expression_property' in params:
            body_params = params['service_monitor_monitor_expression_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_mssql_database(self, name, service_monitor_mssql_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-mssql-database  # noqa: E501

        修改指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_mssql_database(name, service_monitor_mssql_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_mssql_database_with_http_info(self, name, service_monitor_mssql_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-mssql-database  # noqa: E501

        修改指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mssql_database_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_mssql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_mssql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mssql_database_property' is set
        if ('service_monitor_mssql_database_property' not in params or
                params['service_monitor_mssql_database_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mssql_database_property` when calling `edit_service_monitor_mssql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mssql_database_property' in params:
            body_params = params['service_monitor_mssql_database_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_mysql_database(self, name, service_monitor_mysql_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-mysql-database  # noqa: E501

        修改指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_mysql_database(name, service_monitor_mysql_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_mysql_database_with_http_info(self, name, service_monitor_mysql_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-mysql-database  # noqa: E501

        修改指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mysql_database_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_mysql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_mysql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mysql_database_property' is set
        if ('service_monitor_mysql_database_property' not in params or
                params['service_monitor_mysql_database_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mysql_database_property` when calling `edit_service_monitor_mysql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mysql_database_property' in params:
            body_params = params['service_monitor_mysql_database_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_oracle_database(self, name, service_monitor_oracle_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-oracle-database  # noqa: E501

        修改指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_oracle_database(name, service_monitor_oracle_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_oracle_database_with_http_info(self, name, service_monitor_oracle_database_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-oracle-database  # noqa: E501

        修改指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_oracle_database_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_oracle_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_oracle_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_oracle_database_property' is set
        if ('service_monitor_oracle_database_property' not in params or
                params['service_monitor_oracle_database_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_oracle_database_property` when calling `edit_service_monitor_oracle_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_oracle_database_property' in params:
            body_params = params['service_monitor_oracle_database_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_passive_http(self, name, service_monitor_passive_http_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-passive-http  # noqa: E501

        修改指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_passive_http(name, service_monitor_passive_http_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_passive_http_with_http_info(self, name, service_monitor_passive_http_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-passive-http  # noqa: E501

        修改指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_http_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_passive_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_passive_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_http_property' is set
        if ('service_monitor_passive_http_property' not in params or
                params['service_monitor_passive_http_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_http_property` when calling `edit_service_monitor_passive_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_http_property' in params:
            body_params = params['service_monitor_passive_http_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_passive_tcp(self, name, service_monitor_passive_tcp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-passive-tcp  # noqa: E501

        修改指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_passive_tcp(name, service_monitor_passive_tcp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_passive_tcp_with_http_info(self, name, service_monitor_passive_tcp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-passive-tcp  # noqa: E501

        修改指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_tcp_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_passive_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_passive_tcp`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_tcp_property' is set
        if ('service_monitor_passive_tcp_property' not in params or
                params['service_monitor_passive_tcp_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_tcp_property` when calling `edit_service_monitor_passive_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_tcp_property' in params:
            body_params = params['service_monitor_passive_tcp_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_radius(self, name, service_monitor_radius_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-radius  # noqa: E501

        修改指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_radius(name, service_monitor_radius_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_radius_with_http_info(name, service_monitor_radius_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_radius_with_http_info(name, service_monitor_radius_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_radius_with_http_info(self, name, service_monitor_radius_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-radius  # noqa: E501

        修改指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_radius_with_http_info(name, service_monitor_radius_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_radius_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_radius`")  # noqa: E501
        # verify the required parameter 'service_monitor_radius_property' is set
        if ('service_monitor_radius_property' not in params or
                params['service_monitor_radius_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_radius_property` when calling `edit_service_monitor_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_radius_property' in params:
            body_params = params['service_monitor_radius_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_sip(self, name, service_monitor_sip_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-sip  # noqa: E501

        修改指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_sip(name, service_monitor_sip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_sip_with_http_info(name, service_monitor_sip_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_sip_with_http_info(name, service_monitor_sip_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_sip_with_http_info(self, name, service_monitor_sip_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-sip  # noqa: E501

        修改指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_sip_with_http_info(name, service_monitor_sip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_sip_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_sip`")  # noqa: E501
        # verify the required parameter 'service_monitor_sip_property' is set
        if ('service_monitor_sip_property' not in params or
                params['service_monitor_sip_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_sip_property` when calling `edit_service_monitor_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_sip_property' in params:
            body_params = params['service_monitor_sip_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_snmp(self, name, service_monitor_snmp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-snmp  # noqa: E501

        修改指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_snmp(name, service_monitor_snmp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_snmp_with_http_info(name, service_monitor_snmp_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_snmp_with_http_info(name, service_monitor_snmp_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_snmp_with_http_info(self, name, service_monitor_snmp_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-snmp  # noqa: E501

        修改指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_snmp_with_http_info(name, service_monitor_snmp_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_snmp_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_snmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_snmp_property' is set
        if ('service_monitor_snmp_property' not in params or
                params['service_monitor_snmp_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_snmp_property` when calling `edit_service_monitor_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_snmp_property' in params:
            body_params = params['service_monitor_snmp_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_service_monitor_tcp_half_open(self, name, service_monitor_tcp_half_open_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-tcp-half-open  # noqa: E501

        修改指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_tcp_half_open(name, service_monitor_tcp_half_open_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_property, **kwargs)  # noqa: E501
            return data

    def edit_service_monitor_tcp_half_open_with_http_info(self, name, service_monitor_tcp_half_open_property, **kwargs):  # noqa: E501
        """modify specific service-monitor-tcp-half-open  # noqa: E501

        修改指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_tcp_half_open_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_service_monitor_tcp_half_open" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_service_monitor_tcp_half_open`")  # noqa: E501
        # verify the required parameter 'service_monitor_tcp_half_open_property' is set
        if ('service_monitor_tcp_half_open_property' not in params or
                params['service_monitor_tcp_half_open_property'] is None):
            raise ValueError("Missing the required parameter `service_monitor_tcp_half_open_property` when calling `edit_service_monitor_tcp_half_open`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_tcp_half_open_property' in params:
            body_params = params['service_monitor_tcp_half_open_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/all/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_connect_ssl(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-connect-ssl  # noqa: E501

        查看指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_ssl(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_connect_ssl_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_connect_ssl_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_connect_ssl_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-connect-ssl  # noqa: E501

        查看指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_ssl_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_connect_ssl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_connect_ssl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_connect_ssl_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-ssl  # noqa: E501

        查看当前已有的监视器（CONNECT-SSL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_ssl_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectSslList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_connect_ssl_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_connect_ssl_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_connect_ssl_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-ssl  # noqa: E501

        查看当前已有的监视器（CONNECT-SSL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_ssl_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectSslList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_connect_ssl_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSslList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_connect_tcp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-tcp  # noqa: E501

        查看当前已有的监视器（CONNECT-TCP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_tcp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectTcpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_connect_tcp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_connect_tcp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_connect_tcp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-tcp  # noqa: E501

        查看当前已有的监视器（CONNECT-TCP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_tcp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectTcpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_connect_tcp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-tcp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectTcpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_connect_udp(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_udp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_connect_udp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_connect_udp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_connect_udp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_udp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_connect_udp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_connect_udp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_connect_udp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-udp  # noqa: E501

        查看当前已有的监视器（CONNECT-UDP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_udp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectUdpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_connect_udp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_connect_udp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_connect_udp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-connect-udp  # noqa: E501

        查看当前已有的监视器（CONNECT-UDP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_connect_udp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorConnectUdpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_connect_udp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_dns(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-dns  # noqa: E501

        查看指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_dns(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_dns_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_dns_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_dns_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-dns  # noqa: E501

        查看指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_dns_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_dns_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-dns  # noqa: E501

        查看当前已有的监视器（DNS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_dns_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorDnsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_dns_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_dns_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_dns_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-dns  # noqa: E501

        查看当前已有的监视器（DNS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_dns_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorDnsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_dns_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDnsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_external_monitor(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-external-monitor  # noqa: E501

        查看指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_external_monitor(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_external_monitor_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_external_monitor_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_external_monitor_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-external-monitor  # noqa: E501

        查看指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_external_monitor_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_external_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_external_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_external_monitor_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-external-monitor  # noqa: E501

        查看当前已有的监视器（外部监视器）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_external_monitor_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorExternalMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_external_monitor_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_external_monitor_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_external_monitor_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-external-monitor  # noqa: E501

        查看当前已有的监视器（外部监视器）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_external_monitor_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorExternalMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_external_monitor_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_ftp(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-ftp  # noqa: E501

        查看指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ftp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_ftp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_ftp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_ftp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-ftp  # noqa: E501

        查看指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ftp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_ftp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_ftp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_ftp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-ftp  # noqa: E501

        查看当前已有的监视器（FTP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ftp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorFtpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_ftp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_ftp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_ftp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-ftp  # noqa: E501

        查看当前已有的监视器（FTP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ftp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorFtpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_ftp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_http(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-http  # noqa: E501

        查看指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_http(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_http_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_http_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_http_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-http  # noqa: E501

        查看指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_http_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_http_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-http  # noqa: E501

        查看当前已有的监视器（HTTP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_http_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorHttpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_http_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_http_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_http_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-http  # noqa: E501

        查看当前已有的监视器（HTTP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_http_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorHttpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_http_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_https(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-https  # noqa: E501

        查看指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_https(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_https_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_https_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_https_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-https  # noqa: E501

        查看指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_https_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_https" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_https`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_https_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-https  # noqa: E501

        查看当前已有的监视器（HTTPS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_https_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorHttpsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_https_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_https_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_https_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-https  # noqa: E501

        查看当前已有的监视器（HTTPS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_https_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorHttpsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_https_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttpsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_icmp(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-icmp  # noqa: E501

        查看指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_icmp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_icmp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_icmp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-icmp  # noqa: E501

        查看指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_icmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_icmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_icmp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-icmp  # noqa: E501

        查看当前已有的监视器（ICMP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorIcmpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_icmp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_icmp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_icmp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-icmp  # noqa: E501

        查看当前已有的监视器（ICMP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorIcmpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_icmp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_icmpv6(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-icmpv6  # noqa: E501

        查看指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmpv6(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_icmpv6_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_icmpv6_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_icmpv6_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-icmpv6  # noqa: E501

        查看指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmpv6_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_icmpv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_icmpv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_icmpv6_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-icmpv6  # noqa: E501

        查看当前已有的监视器（ICMPV6）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmpv6_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorIcmpv6List
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_icmpv6_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_icmpv6_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_icmpv6_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-icmpv6  # noqa: E501

        查看当前已有的监视器（ICMPV6）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_icmpv6_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorIcmpv6List
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_icmpv6_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6List',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_ldap(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-ldap  # noqa: E501

        查看指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ldap(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_ldap_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_ldap_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_ldap_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-ldap  # noqa: E501

        查看指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ldap_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_ldap_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-ldap  # noqa: E501

        查看当前已有的监视器（LDAP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ldap_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorLdapList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_ldap_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_ldap_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_ldap_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-ldap  # noqa: E501

        查看当前已有的监视器（LDAP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_ldap_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorLdapList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_ldap_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdapList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_list(self, **kwargs):  # noqa: E501
        """get all service-monitor  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/all/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_monitor_expression(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-monitor-expression  # noqa: E501

        查看指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_monitor_expression(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_monitor_expression_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_monitor_expression_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_monitor_expression_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-monitor-expression  # noqa: E501

        查看指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_monitor_expression_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_monitor_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_monitor_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_monitor_expression_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-monitor-expression  # noqa: E501

        查看当前已有的监视器（复合监视器）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_monitor_expression_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMonitorExpressionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_monitor_expression_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_monitor_expression_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_monitor_expression_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-monitor-expression  # noqa: E501

        查看当前已有的监视器（复合监视器）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_monitor_expression_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMonitorExpressionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_monitor_expression_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpressionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_mssql_database(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-mssql-database  # noqa: E501

        查看指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mssql_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_mssql_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_mssql_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_mssql_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-mssql-database  # noqa: E501

        查看指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mssql_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_mssql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_mssql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_mssql_database_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-mssql-database  # noqa: E501

        查看当前已有的监视器（MSSQL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mssql_database_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMssqlDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_mssql_database_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_mssql_database_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_mssql_database_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-mssql-database  # noqa: E501

        查看当前已有的监视器（MSSQL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mssql_database_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMssqlDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_mssql_database_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabaseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_mysql_database(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-mysql-database  # noqa: E501

        查看指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mysql_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_mysql_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_mysql_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_mysql_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-mysql-database  # noqa: E501

        查看指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mysql_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_mysql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_mysql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_mysql_database_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-mysql-database  # noqa: E501

        查看当前已有的监视器（MYSQL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mysql_database_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMysqlDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_mysql_database_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_mysql_database_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_mysql_database_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-mysql-database  # noqa: E501

        查看当前已有的监视器（MYSQL）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_mysql_database_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorMysqlDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_mysql_database_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabaseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_oracle_database(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-oracle-database  # noqa: E501

        查看指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_oracle_database(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_oracle_database_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_oracle_database_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_oracle_database_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-oracle-database  # noqa: E501

        查看指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_oracle_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_oracle_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_oracle_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_oracle_database_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-oracle-database  # noqa: E501

        查看当前已有的监视器（ORACLE）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_oracle_database_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorOracleDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_oracle_database_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_oracle_database_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_oracle_database_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-oracle-database  # noqa: E501

        查看当前已有的监视器（ORACLE）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_oracle_database_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorOracleDatabaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_oracle_database_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabaseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_passive_http(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-passive-http  # noqa: E501

        查看指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_http(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_passive_http_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_passive_http_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_passive_http_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-passive-http  # noqa: E501

        查看指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_http_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_passive_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_passive_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_passive_http_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-passive-http  # noqa: E501

        查看当前已有的监视器（HTTP被动）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_http_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_passive_http_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_passive_http_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_passive_http_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-passive-http  # noqa: E501

        查看当前已有的监视器（HTTP被动）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_http_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_passive_http_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_passive_tcp(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-passive-tcp  # noqa: E501

        查看指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_tcp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_passive_tcp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_passive_tcp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_passive_tcp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-passive-tcp  # noqa: E501

        查看指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_tcp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_passive_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_passive_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_passive_tcp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-passive-tcp  # noqa: E501

        查看当前已有的监视器（TCP被动）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_tcp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorPassiveTcpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_passive_tcp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_passive_tcp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_passive_tcp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-passive-tcp  # noqa: E501

        查看当前已有的监视器（TCP被动）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_passive_tcp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorPassiveTcpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_passive_tcp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_radius(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-radius  # noqa: E501

        查看指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_radius(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_radius_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_radius_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_radius_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-radius  # noqa: E501

        查看指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_radius_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_radius_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-radius  # noqa: E501

        查看当前已有的监视器（RADIUS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_radius_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorRadiusList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_radius_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_radius_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_radius_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-radius  # noqa: E501

        查看当前已有的监视器（RADIUS）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_radius_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorRadiusList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_radius_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadiusList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_sip(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-sip  # noqa: E501

        查看指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_sip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_sip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_sip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_sip_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-sip  # noqa: E501

        查看指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_sip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_sip_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-sip  # noqa: E501

        查看当前已有的监视器（SIP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_sip_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorSipList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_sip_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_sip_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_sip_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-sip  # noqa: E501

        查看当前已有的监视器（SIP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_sip_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorSipList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_sip_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSipList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_snmp(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-snmp  # noqa: E501

        查看指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_snmp(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_snmp_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_snmp_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_snmp_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-snmp  # noqa: E501

        查看指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_snmp_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_snmp_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-snmp  # noqa: E501

        查看当前已有的监视器（SNMP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_snmp_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorSnmpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_snmp_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_snmp_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_snmp_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-snmp  # noqa: E501

        查看当前已有的监视器（SNMP）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_snmp_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorSnmpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_snmp_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_tcp_half_open(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-tcp-half-open  # noqa: E501

        查看指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_tcp_half_open(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_tcp_half_open_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_tcp_half_open_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_service_monitor_tcp_half_open_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific service-monitor-tcp-half-open  # noqa: E501

        查看指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_tcp_half_open_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_tcp_half_open" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_service_monitor_tcp_half_open`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_monitor_tcp_half_open_list(self, **kwargs):  # noqa: E501
        """get all service-monitor-tcp-half-open  # noqa: E501

        查看当前已有的监视器（TCP半连接）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_tcp_half_open_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorTcpHalfOpenList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_monitor_tcp_half_open_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_monitor_tcp_half_open_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_monitor_tcp_half_open_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all service-monitor-tcp-half-open  # noqa: E501

        查看当前已有的监视器（TCP半连接）配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_monitor_tcp_half_open_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigServiceMonitorTcpHalfOpenList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_monitor_tcp_half_open_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpenList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_connect_ssl(self, name, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-connect-ssl  # noqa: E501

        修改指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_connect_ssl(name, service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_connect_ssl_with_http_info(self, name, service_monitor_connect_ssl_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-connect-ssl  # noqa: E501

        修改指定的监视器（CONNECT-SSL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_connect_ssl_with_http_info(name, service_monitor_connect_ssl_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectSsl service_monitor_connect_ssl_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectSsl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_ssl_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_connect_ssl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_connect_ssl`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_ssl_config' is set
        if ('service_monitor_connect_ssl_config' not in params or
                params['service_monitor_connect_ssl_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_ssl_config` when calling `replace_service_monitor_connect_ssl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_ssl_config' in params:
            body_params = params['service_monitor_connect_ssl_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-ssl/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectSsl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_connect_udp(self, name, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_connect_udp(name, service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_connect_udp_with_http_info(self, name, service_monitor_connect_udp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-connect-udp  # noqa: E501

        修改指定的监视器（CONNECT-UDP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_connect_udp_with_http_info(name, service_monitor_connect_udp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorConnectUdp service_monitor_connect_udp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorConnectUdp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_connect_udp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_connect_udp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_connect_udp`")  # noqa: E501
        # verify the required parameter 'service_monitor_connect_udp_config' is set
        if ('service_monitor_connect_udp_config' not in params or
                params['service_monitor_connect_udp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_connect_udp_config` when calling `replace_service_monitor_connect_udp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_connect_udp_config' in params:
            body_params = params['service_monitor_connect_udp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/connect-udp/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorConnectUdp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_dns(self, name, service_monitor_dns_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-dns  # noqa: E501

        修改指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_dns(name, service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_dns_with_http_info(name, service_monitor_dns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_dns_with_http_info(name, service_monitor_dns_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_dns_with_http_info(self, name, service_monitor_dns_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-dns  # noqa: E501

        修改指定的监视器（DNS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_dns_with_http_info(name, service_monitor_dns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorDns service_monitor_dns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_dns_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_dns`")  # noqa: E501
        # verify the required parameter 'service_monitor_dns_config' is set
        if ('service_monitor_dns_config' not in params or
                params['service_monitor_dns_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_dns_config` when calling `replace_service_monitor_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_dns_config' in params:
            body_params = params['service_monitor_dns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/dns/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_external_monitor(self, name, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-external-monitor  # noqa: E501

        修改指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_external_monitor(name, service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_external_monitor_with_http_info(self, name, service_monitor_external_monitor_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-external-monitor  # noqa: E501

        修改指定的监视器（外部监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_external_monitor_with_http_info(name, service_monitor_external_monitor_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorExternalMonitor service_monitor_external_monitor_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorExternalMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_external_monitor_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_external_monitor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_external_monitor`")  # noqa: E501
        # verify the required parameter 'service_monitor_external_monitor_config' is set
        if ('service_monitor_external_monitor_config' not in params or
                params['service_monitor_external_monitor_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_external_monitor_config` when calling `replace_service_monitor_external_monitor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_external_monitor_config' in params:
            body_params = params['service_monitor_external_monitor_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/external-monitor/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorExternalMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_ftp(self, name, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-ftp  # noqa: E501

        修改指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_ftp(name, service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_ftp_with_http_info(self, name, service_monitor_ftp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-ftp  # noqa: E501

        修改指定的监视器（FTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_ftp_with_http_info(name, service_monitor_ftp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorFtp service_monitor_ftp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorFtp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ftp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_ftp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_ftp`")  # noqa: E501
        # verify the required parameter 'service_monitor_ftp_config' is set
        if ('service_monitor_ftp_config' not in params or
                params['service_monitor_ftp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ftp_config` when calling `replace_service_monitor_ftp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ftp_config' in params:
            body_params = params['service_monitor_ftp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ftp/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorFtp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_http(self, name, service_monitor_http_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-http  # noqa: E501

        修改指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_http(name, service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_http_with_http_info(name, service_monitor_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_http_with_http_info(name, service_monitor_http_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_http_with_http_info(self, name, service_monitor_http_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-http  # noqa: E501

        修改指定的监视器（HTTP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_http_with_http_info(name, service_monitor_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttp service_monitor_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_http_config' is set
        if ('service_monitor_http_config' not in params or
                params['service_monitor_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_http_config` when calling `replace_service_monitor_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_http_config' in params:
            body_params = params['service_monitor_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/http/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_https(self, name, service_monitor_https_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-https  # noqa: E501

        修改指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_https(name, service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_https_with_http_info(name, service_monitor_https_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_https_with_http_info(name, service_monitor_https_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_https_with_http_info(self, name, service_monitor_https_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-https  # noqa: E501

        修改指定的监视器（HTTPS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_https_with_http_info(name, service_monitor_https_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorHttps service_monitor_https_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorHttps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_https_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_https" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_https`")  # noqa: E501
        # verify the required parameter 'service_monitor_https_config' is set
        if ('service_monitor_https_config' not in params or
                params['service_monitor_https_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_https_config` when calling `replace_service_monitor_https`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_https_config' in params:
            body_params = params['service_monitor_https_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/https/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorHttps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_icmp(self, name, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-icmp  # noqa: E501

        修改指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_icmp(name, service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_icmp_with_http_info(self, name, service_monitor_icmp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-icmp  # noqa: E501

        修改指定的监视器（ICMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_icmp_with_http_info(name, service_monitor_icmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmp service_monitor_icmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_icmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_icmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmp_config' is set
        if ('service_monitor_icmp_config' not in params or
                params['service_monitor_icmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmp_config` when calling `replace_service_monitor_icmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmp_config' in params:
            body_params = params['service_monitor_icmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmp/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_icmpv6(self, name, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-icmpv6  # noqa: E501

        修改指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_icmpv6(name, service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_icmpv6_with_http_info(self, name, service_monitor_icmpv6_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-icmpv6  # noqa: E501

        修改指定的监视器（ICMPV6）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_icmpv6_with_http_info(name, service_monitor_icmpv6_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorIcmpv6 service_monitor_icmpv6_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorIcmpv6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_icmpv6_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_icmpv6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_icmpv6`")  # noqa: E501
        # verify the required parameter 'service_monitor_icmpv6_config' is set
        if ('service_monitor_icmpv6_config' not in params or
                params['service_monitor_icmpv6_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_icmpv6_config` when calling `replace_service_monitor_icmpv6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_icmpv6_config' in params:
            body_params = params['service_monitor_icmpv6_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/icmpv6/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorIcmpv6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_ldap(self, name, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-ldap  # noqa: E501

        修改指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_ldap(name, service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_ldap_with_http_info(self, name, service_monitor_ldap_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-ldap  # noqa: E501

        修改指定的监视器（LDAP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_ldap_with_http_info(name, service_monitor_ldap_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorLdap service_monitor_ldap_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_ldap_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_ldap`")  # noqa: E501
        # verify the required parameter 'service_monitor_ldap_config' is set
        if ('service_monitor_ldap_config' not in params or
                params['service_monitor_ldap_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_ldap_config` when calling `replace_service_monitor_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_ldap_config' in params:
            body_params = params['service_monitor_ldap_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/ldap/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorLdap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_monitor_expression(self, name, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-monitor-expression  # noqa: E501

        修改指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_monitor_expression(name, service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_monitor_expression_with_http_info(self, name, service_monitor_monitor_expression_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-monitor-expression  # noqa: E501

        修改指定的监视器（复合监视器）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_monitor_expression_with_http_info(name, service_monitor_monitor_expression_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMonitorExpression service_monitor_monitor_expression_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMonitorExpression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_monitor_expression_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_monitor_expression" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_monitor_expression`")  # noqa: E501
        # verify the required parameter 'service_monitor_monitor_expression_config' is set
        if ('service_monitor_monitor_expression_config' not in params or
                params['service_monitor_monitor_expression_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_monitor_expression_config` when calling `replace_service_monitor_monitor_expression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_monitor_expression_config' in params:
            body_params = params['service_monitor_monitor_expression_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/monitor-expression/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMonitorExpression',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_mssql_database(self, name, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-mssql-database  # noqa: E501

        修改指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_mssql_database(name, service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_mssql_database_with_http_info(self, name, service_monitor_mssql_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-mssql-database  # noqa: E501

        修改指定的监视器（MSSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_mssql_database_with_http_info(name, service_monitor_mssql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMssqlDatabase service_monitor_mssql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMssqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mssql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_mssql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_mssql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mssql_database_config' is set
        if ('service_monitor_mssql_database_config' not in params or
                params['service_monitor_mssql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mssql_database_config` when calling `replace_service_monitor_mssql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mssql_database_config' in params:
            body_params = params['service_monitor_mssql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mssql-database/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMssqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_mysql_database(self, name, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-mysql-database  # noqa: E501

        修改指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_mysql_database(name, service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_mysql_database_with_http_info(self, name, service_monitor_mysql_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-mysql-database  # noqa: E501

        修改指定的监视器（MYSQL）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_mysql_database_with_http_info(name, service_monitor_mysql_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorMysqlDatabase service_monitor_mysql_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorMysqlDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_mysql_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_mysql_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_mysql_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_mysql_database_config' is set
        if ('service_monitor_mysql_database_config' not in params or
                params['service_monitor_mysql_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_mysql_database_config` when calling `replace_service_monitor_mysql_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_mysql_database_config' in params:
            body_params = params['service_monitor_mysql_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/mysql-database/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorMysqlDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_oracle_database(self, name, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-oracle-database  # noqa: E501

        修改指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_oracle_database(name, service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_oracle_database_with_http_info(self, name, service_monitor_oracle_database_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-oracle-database  # noqa: E501

        修改指定的监视器（ORACLE）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_oracle_database_with_http_info(name, service_monitor_oracle_database_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorOracleDatabase service_monitor_oracle_database_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorOracleDatabase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_oracle_database_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_oracle_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_oracle_database`")  # noqa: E501
        # verify the required parameter 'service_monitor_oracle_database_config' is set
        if ('service_monitor_oracle_database_config' not in params or
                params['service_monitor_oracle_database_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_oracle_database_config` when calling `replace_service_monitor_oracle_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_oracle_database_config' in params:
            body_params = params['service_monitor_oracle_database_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/oracle-database/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorOracleDatabase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_passive_http(self, name, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-passive-http  # noqa: E501

        修改指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_passive_http(name, service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_passive_http_with_http_info(self, name, service_monitor_passive_http_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-passive-http  # noqa: E501

        修改指定的监视器（HTTP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_passive_http_with_http_info(name, service_monitor_passive_http_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveHttp service_monitor_passive_http_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveHttp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_http_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_passive_http" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_passive_http`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_http_config' is set
        if ('service_monitor_passive_http_config' not in params or
                params['service_monitor_passive_http_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_http_config` when calling `replace_service_monitor_passive_http`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_http_config' in params:
            body_params = params['service_monitor_passive_http_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-http/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveHttp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_passive_tcp(self, name, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-passive-tcp  # noqa: E501

        修改指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_passive_tcp(name, service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_passive_tcp_with_http_info(self, name, service_monitor_passive_tcp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-passive-tcp  # noqa: E501

        修改指定的监视器（TCP被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_passive_tcp_with_http_info(name, service_monitor_passive_tcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorPassiveTcp service_monitor_passive_tcp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorPassiveTcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_passive_tcp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_passive_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_passive_tcp`")  # noqa: E501
        # verify the required parameter 'service_monitor_passive_tcp_config' is set
        if ('service_monitor_passive_tcp_config' not in params or
                params['service_monitor_passive_tcp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_passive_tcp_config` when calling `replace_service_monitor_passive_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_passive_tcp_config' in params:
            body_params = params['service_monitor_passive_tcp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/passive-tcp/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorPassiveTcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_radius(self, name, service_monitor_radius_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-radius  # noqa: E501

        修改指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_radius(name, service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_radius_with_http_info(name, service_monitor_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_radius_with_http_info(name, service_monitor_radius_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_radius_with_http_info(self, name, service_monitor_radius_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-radius  # noqa: E501

        修改指定的监视器（RADIUS）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_radius_with_http_info(name, service_monitor_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorRadius service_monitor_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_radius`")  # noqa: E501
        # verify the required parameter 'service_monitor_radius_config' is set
        if ('service_monitor_radius_config' not in params or
                params['service_monitor_radius_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_radius_config` when calling `replace_service_monitor_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_radius_config' in params:
            body_params = params['service_monitor_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/radius/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_sip(self, name, service_monitor_sip_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-sip  # noqa: E501

        修改指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_sip(name, service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_sip_with_http_info(name, service_monitor_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_sip_with_http_info(name, service_monitor_sip_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_sip_with_http_info(self, name, service_monitor_sip_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-sip  # noqa: E501

        修改指定的监视器（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_sip_with_http_info(name, service_monitor_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSip service_monitor_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_sip`")  # noqa: E501
        # verify the required parameter 'service_monitor_sip_config' is set
        if ('service_monitor_sip_config' not in params or
                params['service_monitor_sip_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_sip_config` when calling `replace_service_monitor_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_sip_config' in params:
            body_params = params['service_monitor_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/sip/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_snmp(self, name, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-snmp  # noqa: E501

        修改指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_snmp(name, service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_snmp_with_http_info(self, name, service_monitor_snmp_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-snmp  # noqa: E501

        修改指定的监视器（SNMP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_snmp_with_http_info(name, service_monitor_snmp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorSnmp service_monitor_snmp_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorSnmp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_snmp_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_snmp`")  # noqa: E501
        # verify the required parameter 'service_monitor_snmp_config' is set
        if ('service_monitor_snmp_config' not in params or
                params['service_monitor_snmp_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_snmp_config` when calling `replace_service_monitor_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_snmp_config' in params:
            body_params = params['service_monitor_snmp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/snmp/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorSnmp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_service_monitor_tcp_half_open(self, name, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-tcp-half-open  # noqa: E501

        修改指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_tcp_half_open(name, service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, **kwargs)  # noqa: E501
            return data

    def replace_service_monitor_tcp_half_open_with_http_info(self, name, service_monitor_tcp_half_open_config, **kwargs):  # noqa: E501
        """replace specific service-monitor-tcp-half-open  # noqa: E501

        修改指定的监视器（TCP半连接）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_service_monitor_tcp_half_open_with_http_info(name, service_monitor_tcp_half_open_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigServiceMonitorTcpHalfOpen service_monitor_tcp_half_open_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigServiceMonitorTcpHalfOpen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'service_monitor_tcp_half_open_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_service_monitor_tcp_half_open" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_service_monitor_tcp_half_open`")  # noqa: E501
        # verify the required parameter 'service_monitor_tcp_half_open_config' is set
        if ('service_monitor_tcp_half_open_config' not in params or
                params['service_monitor_tcp_half_open_config'] is None):
            raise ValueError("Missing the required parameter `service_monitor_tcp_half_open_config` when calling `replace_service_monitor_tcp_half_open`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'service_monitor_tcp_half_open_config' in params:
            body_params = params['service_monitor_tcp_half_open_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/service-monitor/tcp-half-open/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigServiceMonitorTcpHalfOpen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
