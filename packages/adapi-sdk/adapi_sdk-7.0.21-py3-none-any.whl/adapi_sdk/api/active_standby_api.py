# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class ActiveStandbyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edit_active_standby(self, active_standby_property, **kwargs):  # noqa: E501
        """modify active-standby  # noqa: E501

        修改双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_active_standby(active_standby_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigActiveStandby active_standby_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_active_standby_with_http_info(active_standby_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_active_standby_with_http_info(active_standby_property, **kwargs)  # noqa: E501
            return data

    def edit_active_standby_with_http_info(self, active_standby_property, **kwargs):  # noqa: E501
        """modify active-standby  # noqa: E501

        修改双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_active_standby_with_http_info(active_standby_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigActiveStandby active_standby_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['active_standby_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_active_standby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'active_standby_property' is set
        if ('active_standby_property' not in params or
                params['active_standby_property'] is None):
            raise ValueError("Missing the required parameter `active_standby_property` when calling `edit_active_standby`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'active_standby_property' in params:
            body_params = params['active_standby_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/ha/active-standby', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigActiveStandby',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_standby(self, **kwargs):  # noqa: E501
        """get active-standby  # noqa: E501

        获取当前双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_standby(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_standby_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_active_standby_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_active_standby_with_http_info(self, **kwargs):  # noqa: E501
        """get active-standby  # noqa: E501

        获取当前双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_standby_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_standby" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/ha/active-standby', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigActiveStandby',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_active_standby(self, active_standby_config, **kwargs):  # noqa: E501
        """replace active-standby  # noqa: E501

        修改双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_active_standby(active_standby_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigActiveStandby active_standby_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_active_standby_with_http_info(active_standby_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_active_standby_with_http_info(active_standby_config, **kwargs)  # noqa: E501
            return data

    def replace_active_standby_with_http_info(self, active_standby_config, **kwargs):  # noqa: E501
        """replace active-standby  # noqa: E501

        修改双机配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_active_standby_with_http_info(active_standby_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigActiveStandby active_standby_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigActiveStandby
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['active_standby_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_active_standby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'active_standby_config' is set
        if ('active_standby_config' not in params or
                params['active_standby_config'] is None):
            raise ValueError("Missing the required parameter `active_standby_config` when calling `replace_active_standby`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'active_standby_config' in params:
            body_params = params['active_standby_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/ha/active-standby', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigActiveStandby',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_failsafe_status(self, device, **kwargs):  # noqa: E501
        """reset failsafe status of device  # noqa: E501

        重置零流量检测故障状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_failsafe_status(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device location on Active Standby Mode (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbyResetFailureStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_failsafe_status_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_failsafe_status_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def reset_failsafe_status_with_http_info(self, device, **kwargs):  # noqa: E501
        """reset failsafe status of device  # noqa: E501

        重置零流量检测故障状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_failsafe_status_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device location on Active Standby Mode (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbyResetFailureStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_failsafe_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `reset_failsafe_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/ha/active-standby/reset_failsafe_status/{device}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugActiveStandbyResetFailureStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_failure_status(self, **kwargs):  # noqa: E501
        """reset failure status of device  # noqa: E501

        重置备机故障状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_failure_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbyResetFailureStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_failure_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_failure_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_failure_status_with_http_info(self, **kwargs):  # noqa: E501
        """reset failure status of device  # noqa: E501

        重置备机故障状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_failure_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbyResetFailureStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_failure_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/ha/active-standby/reset_failure_status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugActiveStandbyResetFailureStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def switch_active_standby(self, **kwargs):  # noqa: E501
        """switch active-standby  # noqa: E501

        切换双机主备  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.switch_active_standby(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbySwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.switch_active_standby_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.switch_active_standby_with_http_info(**kwargs)  # noqa: E501
            return data

    def switch_active_standby_with_http_info(self, **kwargs):  # noqa: E501
        """switch active-standby  # noqa: E501

        切换双机主备  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.switch_active_standby_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: DebugActiveStandbySwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method switch_active_standby" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/ha/active-standby/switch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugActiveStandbySwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
