# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class ServiceLogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_service_log(self, verify_operator, **kwargs):  # noqa: E501
        """clear service-log  # noqa: E501

        清除服务日志  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_service_log(verify_operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugVerifyOperator verify_operator: JSON VERIFY-INFORMATION (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_service_log_with_http_info(verify_operator, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_service_log_with_http_info(verify_operator, **kwargs)  # noqa: E501
            return data

    def clear_service_log_with_http_info(self, verify_operator, **kwargs):  # noqa: E501
        """clear service-log  # noqa: E501

        清除服务日志  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_service_log_with_http_info(verify_operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugVerifyOperator verify_operator: JSON VERIFY-INFORMATION (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verify_operator', 'x_token_sangforad']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_service_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'verify_operator' is set
        if ('verify_operator' not in params or
                params['verify_operator'] is None):
            raise ValueError("Missing the required parameter `verify_operator` when calling `clear_service_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'verify_operator' in params:
            body_params = params['verify_operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/log/service-log/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_service_log_list(self, module, **kwargs):  # noqa: E501
        """retrieve service-log  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_service_log_list(module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module: Module name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :param str search: 对API目标数据进行按关键字搜索
        :param str _from: 可选参数；起始时间；格式: YYYY-MM-DD
        :param str to: 可选参数；结束时间；不填写时，默认在起始时间后加7天；格式: YYYY-MM-DD
        :param list[str] level: 可选参数；查看日志的级别，无选项时全部输出
        :return: DebugServiceLogList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_service_log_list_with_http_info(module, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_service_log_list_with_http_info(module, **kwargs)  # noqa: E501
            return data

    def retrieve_service_log_list_with_http_info(self, module, **kwargs):  # noqa: E501
        """retrieve service-log  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_service_log_list_with_http_info(module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module: Module name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :param str search: 对API目标数据进行按关键字搜索
        :param str _from: 可选参数；起始时间；格式: YYYY-MM-DD
        :param str to: 可选参数；结束时间；不填写时，默认在起始时间后加7天；格式: YYYY-MM-DD
        :param list[str] level: 可选参数；查看日志的级别，无选项时全部输出
        :return: DebugServiceLogList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module', 'x_token_sangforad', 'select', 'skip', 'top', 'search', '_from', 'to', 'level']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_service_log_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module' is set
        if ('module' not in params or
                params['module'] is None):
            raise ValueError("Missing the required parameter `module` when calling `retrieve_service_log_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module' in params:
            path_params['module'] = params['module']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
            collection_formats['level'] = 'csv'  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/log/service-log/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugServiceLogList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
