# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class NodeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_node_list(self, pool_name, node_config, **kwargs):  # noqa: E501
        """create new node  # noqa: E501

        新建一个节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_list(pool_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_node_list_with_http_info(pool_name, node_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_list_with_http_info(pool_name, node_config, **kwargs)  # noqa: E501
            return data

    def add_node_list_with_http_info(self, pool_name, node_config, **kwargs):  # noqa: E501
        """create new node  # noqa: E501

        新建一个节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_list_with_http_info(pool_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `add_node_list`")  # noqa: E501
        # verify the required parameter 'node_config' is set
        if ('node_config' not in params or
                params['node_config'] is None):
            raise ValueError("Missing the required parameter `node_config` when calling `add_node_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_config' in params:
            body_params = params['node_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node(self, pool_name, node_name, node_config, **kwargs):  # noqa: E501
        """create new node  # noqa: E501

        新建指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node(pool_name, node_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_with_http_info(pool_name, node_name, node_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_node_with_http_info(pool_name, node_name, node_config, **kwargs)  # noqa: E501
            return data

    def create_node_with_http_info(self, pool_name, node_name, node_config, **kwargs):  # noqa: E501
        """create new node  # noqa: E501

        新建指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_with_http_info(pool_name, node_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'node_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `create_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `create_node`")  # noqa: E501
        # verify the required parameter 'node_config' is set
        if ('node_config' not in params or
                params['node_config'] is None):
            raise ValueError("Missing the required parameter `node_config` when calling `create_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_config' in params:
            body_params = params['node_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes/{node_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node(self, pool_name, node_name, **kwargs):  # noqa: E501
        """delete specific node  # noqa: E501

        删除指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
            return data

    def delete_node_with_http_info(self, pool_name, node_name, **kwargs):  # noqa: E501
        """delete specific node  # noqa: E501

        删除指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_with_http_info(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `delete_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `delete_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes/{node_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_node(self, pool_name, node_name, node_property, **kwargs):  # noqa: E501
        """modify specific node  # noqa: E501

        修改指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_node(pool_name, node_name, node_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_node_with_http_info(pool_name, node_name, node_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_node_with_http_info(pool_name, node_name, node_property, **kwargs)  # noqa: E501
            return data

    def edit_node_with_http_info(self, pool_name, node_name, node_property, **kwargs):  # noqa: E501
        """modify specific node  # noqa: E501

        修改指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_node_with_http_info(pool_name, node_name, node_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'node_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `edit_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `edit_node`")  # noqa: E501
        # verify the required parameter 'node_property' is set
        if ('node_property' not in params or
                params['node_property'] is None):
            raise ValueError("Missing the required parameter `node_property` when calling `edit_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_property' in params:
            body_params = params['node_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes/{node_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_health_status_of_node_list(self, **kwargs):  # noqa: E501
        """get all nodes health  # noqa: E501

        获取节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_status_of_node_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: StatNodeDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_health_status_of_node_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_health_status_of_node_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_health_status_of_node_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all nodes health  # noqa: E501

        获取节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_status_of_node_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: StatNodeDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_health_status_of_node_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/stat/slb/nodes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatNodeDetailList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node(self, pool_name, node_name, **kwargs):  # noqa: E501
        """get specific node  # noqa: E501

        查看指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
            return data

    def get_node_with_http_info(self, pool_name, node_name, **kwargs):  # noqa: E501
        """get specific node  # noqa: E501

        查看指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_with_http_info(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `get_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `get_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes/{node_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_list(self, pool_name, **kwargs):  # noqa: E501
        """get all nodes  # noqa: E501

        查看当前已有的节点配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_list(pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigNodeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_list_with_http_info(pool_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_list_with_http_info(pool_name, **kwargs)  # noqa: E501
            return data

    def get_node_list_with_http_info(self, pool_name, **kwargs):  # noqa: E501
        """get all nodes  # noqa: E501

        查看当前已有的节点配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_list_with_http_info(pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigNodeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `get_node_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNodeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statistics_of_node(self, pool_name, node_name, **kwargs):  # noqa: E501
        """get specific node statistics  # noqa: E501

        获取指定节点池内的指定节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_node(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: StatNodeDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statistics_of_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statistics_of_node_with_http_info(pool_name, node_name, **kwargs)  # noqa: E501
            return data

    def get_statistics_of_node_with_http_info(self, pool_name, node_name, **kwargs):  # noqa: E501
        """get specific node statistics  # noqa: E501

        获取指定节点池内的指定节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_node_with_http_info(pool_name, node_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: StatNodeDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'x_token_sangforad', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_of_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `get_statistics_of_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `get_statistics_of_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/stat/slb/pool/{pool_name}/nodes/{node_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatNodeDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statistics_of_node_list(self, pool_name, **kwargs):  # noqa: E501
        """get all node statistics  # noqa: E501

        获取指定节点池的节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_node_list(pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: StatNodeDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statistics_of_node_list_with_http_info(pool_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statistics_of_node_list_with_http_info(pool_name, **kwargs)  # noqa: E501
            return data

    def get_statistics_of_node_list_with_http_info(self, pool_name, **kwargs):  # noqa: E501
        """get all node statistics  # noqa: E501

        获取指定节点池的节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_node_list_with_http_info(pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: StatNodeDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_of_node_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `get_statistics_of_node_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/stat/slb/pool/{pool_name}/nodes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatNodeDetailList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statistics_of_pool_node_trend(self, pool_name, node_name, item, **kwargs):  # noqa: E501
        """get specific pool node statistics  # noqa: E501

        获取指定节点池内的指定节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_pool_node_trend(pool_name, node_name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str item: 节点状态统计信息（health/节点健康状态,connection/并发连接数,connection-rate/新建连接速率,http_request_rate/HTTP请求速率,upstream_throughput/上行吞吐速率,downstream_throughput/下行吞吐速率,general_throughput/总吞吐速率) (required)
        :param str x_token_sangforad: AD会话令牌
        :param str trend: 统计趋势的查询区间（last-hour最近60分钟/last-day最近24小时/last-week最近7天）
        :return: StatStatisticTrend
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statistics_of_pool_node_trend_with_http_info(pool_name, node_name, item, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statistics_of_pool_node_trend_with_http_info(pool_name, node_name, item, **kwargs)  # noqa: E501
            return data

    def get_statistics_of_pool_node_trend_with_http_info(self, pool_name, node_name, item, **kwargs):  # noqa: E501
        """get specific pool node statistics  # noqa: E501

        获取指定节点池内的指定节点状态信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_of_pool_node_trend_with_http_info(pool_name, node_name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param str item: 节点状态统计信息（health/节点健康状态,connection/并发连接数,connection-rate/新建连接速率,http_request_rate/HTTP请求速率,upstream_throughput/上行吞吐速率,downstream_throughput/下行吞吐速率,general_throughput/总吞吐速率) (required)
        :param str x_token_sangforad: AD会话令牌
        :param str trend: 统计趋势的查询区间（last-hour最近60分钟/last-day最近24小时/last-week最近7天）
        :return: StatStatisticTrend
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'item', 'x_token_sangforad', 'trend']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_of_pool_node_trend" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `get_statistics_of_pool_node_trend`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `get_statistics_of_pool_node_trend`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `get_statistics_of_pool_node_trend`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501
        if 'item' in params:
            path_params['item'] = params['item']  # noqa: E501

        query_params = []
        if 'trend' in params:
            query_params.append(('trend', params['trend']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/stat/slb/pool/{pool_name}/nodes/{node_name}/{item}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatStatisticTrend',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_node(self, pool_name, node_name, node_config, **kwargs):  # noqa: E501
        """replace specific node  # noqa: E501

        修改指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_node(pool_name, node_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_node_with_http_info(pool_name, node_name, node_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_node_with_http_info(pool_name, node_name, node_config, **kwargs)  # noqa: E501
            return data

    def replace_node_with_http_info(self, pool_name, node_name, node_config, **kwargs):  # noqa: E501
        """replace specific node  # noqa: E501

        修改指定的节点配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_node_with_http_info(pool_name, node_name, node_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_name: config pool name (required)
        :param str node_name: config node name (required)
        :param ConfigNode node_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_name', 'node_name', 'node_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `replace_node`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if ('node_name' not in params or
                params['node_name'] is None):
            raise ValueError("Missing the required parameter `node_name` when calling `replace_node`")  # noqa: E501
        # verify the required parameter 'node_config' is set
        if ('node_config' not in params or
                params['node_config'] is None):
            raise ValueError("Missing the required parameter `node_config` when calling `replace_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501
        if 'node_name' in params:
            path_params['node_name'] = params['node_name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_config' in params:
            body_params = params['node_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/pool/{pool_name}/nodes/{node_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
