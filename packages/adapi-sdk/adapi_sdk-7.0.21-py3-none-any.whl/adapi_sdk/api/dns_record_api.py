# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class DnsRecordApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_dns_record_a_list(self, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """create new dns-record-a  # noqa: E501

        创建一个A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_a_list(dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_a_list_with_http_info(dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_a_list_with_http_info(dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_a_list_with_http_info(self, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """create new dns-record-a  # noqa: E501

        创建一个A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_a_list_with_http_info(dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_a_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_a_list`")  # noqa: E501
        # verify the required parameter 'dns_record_a_config' is set
        if ('dns_record_a_config' not in params or
                params['dns_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_a_config` when calling `add_dns_record_a_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_a_config' in params:
            body_params = params['dns_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_aaaa_list(self, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-record-aaaa  # noqa: E501

        创建AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_aaaa_list(dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_aaaa_list_with_http_info(dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_aaaa_list_with_http_info(dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_aaaa_list_with_http_info(self, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-record-aaaa  # noqa: E501

        创建AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_aaaa_list_with_http_info(dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_aaaa_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_aaaa_list`")  # noqa: E501
        # verify the required parameter 'dns_record_aaaa_config' is set
        if ('dns_record_aaaa_config' not in params or
                params['dns_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_aaaa_config` when calling `add_dns_record_aaaa_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_aaaa_config' in params:
            body_params = params['dns_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_caa_list(self, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """create new dns-record-caa  # noqa: E501

        创建CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_caa_list(dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_caa_list_with_http_info(dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_caa_list_with_http_info(dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_caa_list_with_http_info(self, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """create new dns-record-caa  # noqa: E501

        创建CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_caa_list_with_http_info(dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_caa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_caa_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_caa_list`")  # noqa: E501
        # verify the required parameter 'dns_record_caa_config' is set
        if ('dns_record_caa_config' not in params or
                params['dns_record_caa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_caa_config` when calling `add_dns_record_caa_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_caa_config' in params:
            body_params = params['dns_record_caa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_cname_list(self, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-record-cname  # noqa: E501

        创建一个CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_cname_list(dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_cname_list_with_http_info(dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_cname_list_with_http_info(dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_cname_list_with_http_info(self, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-record-cname  # noqa: E501

        创建一个CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_cname_list_with_http_info(dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_cname_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_cname_list`")  # noqa: E501
        # verify the required parameter 'dns_record_cname_config' is set
        if ('dns_record_cname_config' not in params or
                params['dns_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_cname_config` when calling `add_dns_record_cname_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_cname_config' in params:
            body_params = params['dns_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_dname_list(self, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """create new dns-record-dname  # noqa: E501

        创建一个DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_dname_list(dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_dname_list_with_http_info(dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_dname_list_with_http_info(dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_dname_list_with_http_info(self, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """create new dns-record-dname  # noqa: E501

        创建一个DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_dname_list_with_http_info(dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_dname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_dname_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_dname_list`")  # noqa: E501
        # verify the required parameter 'dns_record_dname_config' is set
        if ('dns_record_dname_config' not in params or
                params['dns_record_dname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_dname_config` when calling `add_dns_record_dname_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_dname_config' in params:
            body_params = params['dns_record_dname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_ds_list(self, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """create new dns-record-ds  # noqa: E501

        创建一个DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ds_list(dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_ds_list_with_http_info(dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_ds_list_with_http_info(dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_ds_list_with_http_info(self, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """create new dns-record-ds  # noqa: E501

        创建一个DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ds_list_with_http_info(dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_ds_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_ds_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_ds_list`")  # noqa: E501
        # verify the required parameter 'dns_record_ds_config' is set
        if ('dns_record_ds_config' not in params or
                params['dns_record_ds_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ds_config` when calling `add_dns_record_ds_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ds_config' in params:
            body_params = params['dns_record_ds_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_hinfo_list(self, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """create new dns-record-hinfo  # noqa: E501

        创建HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_hinfo_list(dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_hinfo_list_with_http_info(dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_hinfo_list_with_http_info(dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_hinfo_list_with_http_info(self, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """create new dns-record-hinfo  # noqa: E501

        创建HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_hinfo_list_with_http_info(dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_hinfo_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_hinfo_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_hinfo_list`")  # noqa: E501
        # verify the required parameter 'dns_record_hinfo_config' is set
        if ('dns_record_hinfo_config' not in params or
                params['dns_record_hinfo_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_hinfo_config` when calling `add_dns_record_hinfo_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_hinfo_config' in params:
            body_params = params['dns_record_hinfo_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_mx_list(self, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-record-mx  # noqa: E501

        创建MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_mx_list(dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_mx_list_with_http_info(dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_mx_list_with_http_info(dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_mx_list_with_http_info(self, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-record-mx  # noqa: E501

        创建MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_mx_list_with_http_info(dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_mx_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_mx_list`")  # noqa: E501
        # verify the required parameter 'dns_record_mx_config' is set
        if ('dns_record_mx_config' not in params or
                params['dns_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_mx_config` when calling `add_dns_record_mx_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_mx_config' in params:
            body_params = params['dns_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_naptr_list(self, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """create new dns-record-naptr  # noqa: E501

        创建NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_naptr_list(dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_naptr_list_with_http_info(dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_naptr_list_with_http_info(dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_naptr_list_with_http_info(self, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """create new dns-record-naptr  # noqa: E501

        创建NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_naptr_list_with_http_info(dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_naptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_naptr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_naptr_list`")  # noqa: E501
        # verify the required parameter 'dns_record_naptr_config' is set
        if ('dns_record_naptr_config' not in params or
                params['dns_record_naptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_naptr_config` when calling `add_dns_record_naptr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_naptr_config' in params:
            body_params = params['dns_record_naptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_ns_list(self, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """create new dns-record-ns  # noqa: E501

        创建NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ns_list(dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_ns_list_with_http_info(dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_ns_list_with_http_info(dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_ns_list_with_http_info(self, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """create new dns-record-ns  # noqa: E501

        创建NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ns_list_with_http_info(dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_ns_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_ns_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_ns_list`")  # noqa: E501
        # verify the required parameter 'dns_record_ns_config' is set
        if ('dns_record_ns_config' not in params or
                params['dns_record_ns_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ns_config` when calling `add_dns_record_ns_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ns_config' in params:
            body_params = params['dns_record_ns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_ptr_list(self, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """create new dns-record-ptr  # noqa: E501

        创建PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ptr_list(dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_ptr_list_with_http_info(dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_ptr_list_with_http_info(dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_ptr_list_with_http_info(self, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """create new dns-record-ptr  # noqa: E501

        创建PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_ptr_list_with_http_info(dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_ptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_ptr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_ptr_list`")  # noqa: E501
        # verify the required parameter 'dns_record_ptr_config' is set
        if ('dns_record_ptr_config' not in params or
                params['dns_record_ptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ptr_config` when calling `add_dns_record_ptr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ptr_config' in params:
            body_params = params['dns_record_ptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_srv_list(self, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """create new dns-record-srv  # noqa: E501

        创建SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_srv_list(dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_srv_list_with_http_info(dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_srv_list_with_http_info(dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_srv_list_with_http_info(self, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """create new dns-record-srv  # noqa: E501

        创建SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_srv_list_with_http_info(dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_srv_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_srv_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_srv_list`")  # noqa: E501
        # verify the required parameter 'dns_record_srv_config' is set
        if ('dns_record_srv_config' not in params or
                params['dns_record_srv_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_srv_config` when calling `add_dns_record_srv_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_srv_config' in params:
            body_params = params['dns_record_srv_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_record_txt_list(self, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-record-txt  # noqa: E501

        创建TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_txt_list(dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_record_txt_list_with_http_info(dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_record_txt_list_with_http_info(dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
            return data

    def add_dns_record_txt_list_with_http_info(self, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-record-txt  # noqa: E501

        创建TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_record_txt_list_with_http_info(dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_record_txt_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dns_record_txt_list`")  # noqa: E501
        # verify the required parameter 'dns_record_txt_config' is set
        if ('dns_record_txt_config' not in params or
                params['dns_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_txt_config` when calling `add_dns_record_txt_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_txt_config' in params:
            body_params = params['dns_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_a(self, name, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """create new dns-record-a  # noqa: E501

        创建一个A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_a(name, dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_a_with_http_info(self, name, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """create new dns-record-a  # noqa: E501

        创建一个A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_record_a_config' is set
        if ('dns_record_a_config' not in params or
                params['dns_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_a_config` when calling `create_dns_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_a_config' in params:
            body_params = params['dns_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_aaaa(self, name, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-record-aaaa  # noqa: E501

        创建一个AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_aaaa(name, dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_aaaa_with_http_info(self, name, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-record-aaaa  # noqa: E501

        创建一个AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_record_aaaa_config' is set
        if ('dns_record_aaaa_config' not in params or
                params['dns_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_aaaa_config` when calling `create_dns_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_aaaa_config' in params:
            body_params = params['dns_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_caa(self, name, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """create new dns-record-caa  # noqa: E501

        创建一个CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_caa(name, dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_caa_with_http_info(self, name, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """create new dns-record-caa  # noqa: E501

        创建一个CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_caa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_caa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_record_caa_config' is set
        if ('dns_record_caa_config' not in params or
                params['dns_record_caa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_caa_config` when calling `create_dns_record_caa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_caa_config' in params:
            body_params = params['dns_record_caa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_cname(self, name, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-record-cname  # noqa: E501

        创建一个CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_cname(name, dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_cname_with_http_info(self, name, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-record-cname  # noqa: E501

        创建一个CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_record_cname_config' is set
        if ('dns_record_cname_config' not in params or
                params['dns_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_cname_config` when calling `create_dns_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_cname_config' in params:
            body_params = params['dns_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_dname(self, name, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """create new dns-record-dname  # noqa: E501

        创建一个DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_dname(name, dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_dname_with_http_info(self, name, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """create new dns-record-dname  # noqa: E501

        创建一个DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_dname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_dname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_record_dname_config' is set
        if ('dns_record_dname_config' not in params or
                params['dns_record_dname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_dname_config` when calling `create_dns_record_dname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_dname_config' in params:
            body_params = params['dns_record_dname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_ds(self, name, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """create new dns-record-ds  # noqa: E501

        创建一个DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ds(name, dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_ds_with_http_info(self, name, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """create new dns-record-ds  # noqa: E501

        创建一个DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ds_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_record_ds_config' is set
        if ('dns_record_ds_config' not in params or
                params['dns_record_ds_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ds_config` when calling `create_dns_record_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ds_config' in params:
            body_params = params['dns_record_ds_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_hinfo(self, name, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """create new dns-record-hinfo  # noqa: E501

        创建一个HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_hinfo(name, dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_hinfo_with_http_info(self, name, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """create new dns-record-hinfo  # noqa: E501

        创建一个HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_hinfo_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_hinfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_record_hinfo_config' is set
        if ('dns_record_hinfo_config' not in params or
                params['dns_record_hinfo_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_hinfo_config` when calling `create_dns_record_hinfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_hinfo_config' in params:
            body_params = params['dns_record_hinfo_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_mx(self, name, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-record-mx  # noqa: E501

        创建一个MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_mx(name, dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_mx_with_http_info(self, name, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-record-mx  # noqa: E501

        创建一个MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_record_mx_config' is set
        if ('dns_record_mx_config' not in params or
                params['dns_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_mx_config` when calling `create_dns_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_mx_config' in params:
            body_params = params['dns_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_naptr(self, name, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """create new dns-record-naptr  # noqa: E501

        创建一个NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_naptr(name, dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_naptr_with_http_info(self, name, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """create new dns-record-naptr  # noqa: E501

        创建一个NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_naptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_naptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_record_naptr_config' is set
        if ('dns_record_naptr_config' not in params or
                params['dns_record_naptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_naptr_config` when calling `create_dns_record_naptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_naptr_config' in params:
            body_params = params['dns_record_naptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_ns(self, name, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """create new dns-record-ns  # noqa: E501

        创建一个NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ns(name, dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_ns_with_http_info(self, name, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """create new dns-record-ns  # noqa: E501

        创建一个NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ns_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_ns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_record_ns_config' is set
        if ('dns_record_ns_config' not in params or
                params['dns_record_ns_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ns_config` when calling `create_dns_record_ns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ns_config' in params:
            body_params = params['dns_record_ns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_ptr(self, name, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """create new dns-record-ptr  # noqa: E501

        创建一个PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ptr(name, dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_ptr_with_http_info(self, name, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """create new dns-record-ptr  # noqa: E501

        创建一个PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_ptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_record_ptr_config' is set
        if ('dns_record_ptr_config' not in params or
                params['dns_record_ptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ptr_config` when calling `create_dns_record_ptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ptr_config' in params:
            body_params = params['dns_record_ptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_srv(self, name, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """create new dns-record-srv  # noqa: E501

        创建一个SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_srv(name, dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_srv_with_http_info(self, name, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """create new dns-record-srv  # noqa: E501

        创建一个SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_srv_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_srv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_record_srv_config' is set
        if ('dns_record_srv_config' not in params or
                params['dns_record_srv_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_srv_config` when calling `create_dns_record_srv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_srv_config' in params:
            body_params = params['dns_record_srv_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_record_txt(self, name, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-record-txt  # noqa: E501

        创建一个TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_txt(name, dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
            return data

    def create_dns_record_txt_with_http_info(self, name, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-record-txt  # noqa: E501

        创建一个TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_record_txt_config' is set
        if ('dns_record_txt_config' not in params or
                params['dns_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_txt_config` when calling `create_dns_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_txt_config' in params:
            body_params = params['dns_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_a(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-a  # noqa: E501

        删除指定的A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_a(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_a_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_a_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_a_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-a  # noqa: E501

        删除指定的A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_a_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_aaaa(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-aaaa  # noqa: E501

        删除指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_aaaa(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_aaaa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_aaaa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_aaaa_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-aaaa  # noqa: E501

        删除指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_aaaa_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_caa(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-caa  # noqa: E501

        删除指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_caa(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_caa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_caa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_caa_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-caa  # noqa: E501

        删除指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_caa_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_caa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_caa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_cname(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-cname  # noqa: E501

        删除指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_cname(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_cname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_cname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_cname_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-cname  # noqa: E501

        删除指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_cname_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_dname(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-dname  # noqa: E501

        删除指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_dname(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_dname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_dname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_dname_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-dname  # noqa: E501

        删除指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_dname_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_dname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_dname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_ds(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ds  # noqa: E501

        删除指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ds(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_ds_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_ds_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_ds_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ds  # noqa: E501

        删除指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ds_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_hinfo(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-hinfo  # noqa: E501

        删除指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_hinfo(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_hinfo_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_hinfo_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_hinfo_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-hinfo  # noqa: E501

        删除指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_hinfo_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_hinfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_hinfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_mx(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-mx  # noqa: E501

        删除指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_mx(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_mx_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_mx_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_mx_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-mx  # noqa: E501

        删除指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_mx_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_naptr(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-naptr  # noqa: E501

        删除指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_naptr(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_naptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_naptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_naptr_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-naptr  # noqa: E501

        删除指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_naptr_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_naptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_naptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_ns(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ns  # noqa: E501

        删除指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ns(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_ns_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_ns_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_ns_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ns  # noqa: E501

        删除指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ns_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_ns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_ns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_ptr(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ptr  # noqa: E501

        删除指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ptr(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_ptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_ptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_ptr_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-ptr  # noqa: E501

        删除指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_ptr_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_ptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_ptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_srv(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-srv  # noqa: E501

        删除指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_srv(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_srv_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_srv_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_srv_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-srv  # noqa: E501

        删除指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_srv_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_srv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_srv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_record_txt(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-txt  # noqa: E501

        删除指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_txt(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_record_txt_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_record_txt_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dns_record_txt_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dns-record-txt  # noqa: E501

        删除指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_record_txt_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dns_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_a(self, name, dns_config_area, dns_record_a_property, **kwargs):  # noqa: E501
        """modify specific dns-record-a  # noqa: E501

        增量修改指定A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_a(name, dns_config_area, dns_record_a_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_a_with_http_info(self, name, dns_config_area, dns_record_a_property, **kwargs):  # noqa: E501
        """modify specific dns-record-a  # noqa: E501

        增量修改指定A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_a_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_record_a_property' is set
        if ('dns_record_a_property' not in params or
                params['dns_record_a_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_a_property` when calling `edit_dns_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_a_property' in params:
            body_params = params['dns_record_a_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_aaaa(self, name, dns_config_area, dns_record_aaaa_property, **kwargs):  # noqa: E501
        """modify specific dns-record-aaaa  # noqa: E501

        增量修改指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_aaaa(name, dns_config_area, dns_record_aaaa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_aaaa_with_http_info(self, name, dns_config_area, dns_record_aaaa_property, **kwargs):  # noqa: E501
        """modify specific dns-record-aaaa  # noqa: E501

        增量修改指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_aaaa_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_record_aaaa_property' is set
        if ('dns_record_aaaa_property' not in params or
                params['dns_record_aaaa_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_aaaa_property` when calling `edit_dns_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_aaaa_property' in params:
            body_params = params['dns_record_aaaa_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_caa(self, name, dns_config_area, dns_record_caa_property, **kwargs):  # noqa: E501
        """modify specific dns-record-caa  # noqa: E501

        增量修改指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_caa(name, dns_config_area, dns_record_caa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_caa_with_http_info(self, name, dns_config_area, dns_record_caa_property, **kwargs):  # noqa: E501
        """modify specific dns-record-caa  # noqa: E501

        增量修改指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_caa_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_caa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_record_caa_property' is set
        if ('dns_record_caa_property' not in params or
                params['dns_record_caa_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_caa_property` when calling `edit_dns_record_caa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_caa_property' in params:
            body_params = params['dns_record_caa_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_cname(self, name, dns_config_area, dns_record_cname_property, **kwargs):  # noqa: E501
        """modify specific dns-record-cname  # noqa: E501

        增量修改指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_cname(name, dns_config_area, dns_record_cname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_property: 域名CNAME记录属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_cname_with_http_info(self, name, dns_config_area, dns_record_cname_property, **kwargs):  # noqa: E501
        """modify specific dns-record-cname  # noqa: E501

        增量修改指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_property: 域名CNAME记录属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_cname_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_record_cname_property' is set
        if ('dns_record_cname_property' not in params or
                params['dns_record_cname_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_cname_property` when calling `edit_dns_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_cname_property' in params:
            body_params = params['dns_record_cname_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_dname(self, name, dns_config_area, dns_record_dname_property, **kwargs):  # noqa: E501
        """modify specific dns-record-dname  # noqa: E501

        增量修改指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_dname(name, dns_config_area, dns_record_dname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_dname_with_http_info(self, name, dns_config_area, dns_record_dname_property, **kwargs):  # noqa: E501
        """modify specific dns-record-dname  # noqa: E501

        增量修改指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_dname_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_dname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_record_dname_property' is set
        if ('dns_record_dname_property' not in params or
                params['dns_record_dname_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_dname_property` when calling `edit_dns_record_dname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_dname_property' in params:
            body_params = params['dns_record_dname_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_ds(self, name, dns_config_area, dns_record_ds_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ds  # noqa: E501

        增量修改指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ds(name, dns_config_area, dns_record_ds_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_ds_with_http_info(self, name, dns_config_area, dns_record_ds_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ds  # noqa: E501

        增量修改指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ds_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_record_ds_property' is set
        if ('dns_record_ds_property' not in params or
                params['dns_record_ds_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_ds_property` when calling `edit_dns_record_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ds_property' in params:
            body_params = params['dns_record_ds_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_hinfo(self, name, dns_config_area, dns_record_hinfo_property, **kwargs):  # noqa: E501
        """modify specific dns-record-hinfo  # noqa: E501

        增量修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_hinfo(name, dns_config_area, dns_record_hinfo_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_hinfo_with_http_info(self, name, dns_config_area, dns_record_hinfo_property, **kwargs):  # noqa: E501
        """modify specific dns-record-hinfo  # noqa: E501

        增量修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_hinfo_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_hinfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_record_hinfo_property' is set
        if ('dns_record_hinfo_property' not in params or
                params['dns_record_hinfo_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_hinfo_property` when calling `edit_dns_record_hinfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_hinfo_property' in params:
            body_params = params['dns_record_hinfo_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_mx(self, name, dns_config_area, dns_record_mx_property, **kwargs):  # noqa: E501
        """modify specific dns-record-mx  # noqa: E501

        增量修改指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_mx(name, dns_config_area, dns_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_mx_with_http_info(self, name, dns_config_area, dns_record_mx_property, **kwargs):  # noqa: E501
        """modify specific dns-record-mx  # noqa: E501

        增量修改指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_mx_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_record_mx_property' is set
        if ('dns_record_mx_property' not in params or
                params['dns_record_mx_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_mx_property` when calling `edit_dns_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_mx_property' in params:
            body_params = params['dns_record_mx_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_naptr(self, name, dns_config_area, dns_record_naptr_property, **kwargs):  # noqa: E501
        """modify specific dns-record-naptr  # noqa: E501

        增量修改指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_naptr(name, dns_config_area, dns_record_naptr_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_naptr_with_http_info(self, name, dns_config_area, dns_record_naptr_property, **kwargs):  # noqa: E501
        """modify specific dns-record-naptr  # noqa: E501

        增量修改指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_naptr_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_naptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_record_naptr_property' is set
        if ('dns_record_naptr_property' not in params or
                params['dns_record_naptr_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_naptr_property` when calling `edit_dns_record_naptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_naptr_property' in params:
            body_params = params['dns_record_naptr_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_ns(self, name, dns_config_area, dns_record_ns_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ns  # noqa: E501

        增量修改指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ns(name, dns_config_area, dns_record_ns_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_ns_with_http_info(self, name, dns_config_area, dns_record_ns_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ns  # noqa: E501

        增量修改指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ns_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_ns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_record_ns_property' is set
        if ('dns_record_ns_property' not in params or
                params['dns_record_ns_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_ns_property` when calling `edit_dns_record_ns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ns_property' in params:
            body_params = params['dns_record_ns_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_ptr(self, name, dns_config_area, dns_record_ptr_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ptr  # noqa: E501

        增量修改指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ptr(name, dns_config_area, dns_record_ptr_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_ptr_with_http_info(self, name, dns_config_area, dns_record_ptr_property, **kwargs):  # noqa: E501
        """modify specific dns-record-ptr  # noqa: E501

        增量修改指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ptr_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_ptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_record_ptr_property' is set
        if ('dns_record_ptr_property' not in params or
                params['dns_record_ptr_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_ptr_property` when calling `edit_dns_record_ptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ptr_property' in params:
            body_params = params['dns_record_ptr_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_srv(self, name, dns_config_area, dns_record_srv_property, **kwargs):  # noqa: E501
        """modify specific dns-record-srv  # noqa: E501

        增量修改指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_srv(name, dns_config_area, dns_record_srv_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_srv_with_http_info(self, name, dns_config_area, dns_record_srv_property, **kwargs):  # noqa: E501
        """modify specific dns-record-srv  # noqa: E501

        增量修改指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_srv_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_srv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_record_srv_property' is set
        if ('dns_record_srv_property' not in params or
                params['dns_record_srv_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_srv_property` when calling `edit_dns_record_srv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_srv_property' in params:
            body_params = params['dns_record_srv_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_record_txt(self, name, dns_config_area, dns_record_txt_property, **kwargs):  # noqa: E501
        """modify specific dns-record-txt  # noqa: E501

        增量修改指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_txt(name, dns_config_area, dns_record_txt_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_record_txt_with_http_info(self, name, dns_config_area, dns_record_txt_property, **kwargs):  # noqa: E501
        """modify specific dns-record-txt  # noqa: E501

        增量修改指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_txt_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_record_txt_property' is set
        if ('dns_record_txt_property' not in params or
                params['dns_record_txt_property'] is None):
            raise ValueError("Missing the required parameter `dns_record_txt_property` when calling `edit_dns_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_txt_property' in params:
            body_params = params['dns_record_txt_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_a(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-a  # noqa: E501

        查看指定的A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_a(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_a_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_a_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_a_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-a  # noqa: E501

        查看指定的A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_a_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_a_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-a  # noqa: E501

        查看A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_a_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_a_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_a_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_a_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-a  # noqa: E501

        查看A记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_a_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_a_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_a_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_aaaa(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-aaaa  # noqa: E501

        查看指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_aaaa(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_aaaa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_aaaa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_aaaa_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-aaaa  # noqa: E501

        查看指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_aaaa_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_aaaa_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-aaaa  # noqa: E501

        查看AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_aaaa_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAaaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_aaaa_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_aaaa_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_aaaa_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-aaaa  # noqa: E501

        查看AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_aaaa_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAaaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_aaaa_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_aaaa_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaaList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_all_list(self, dns_config_area, dns_record_type_search, dns_zone_search, **kwargs):  # noqa: E501
        """get all dns-record-all  # noqa: E501

        查看所有记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_all_list(dns_config_area, dns_record_type_search, dns_zone_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str dns_record_type_search: 提供DNS记录类型筛选，ALL代表所有类型。 注意【DNS记录类型筛选】和【域筛选】二者取交集；而自定义搜索是独立的 (required)
        :param list[str] dns_zone_search: 对DNS记录按域筛选,以及域删除时使用 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAllList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_all_list_with_http_info(dns_config_area, dns_record_type_search, dns_zone_search, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_all_list_with_http_info(dns_config_area, dns_record_type_search, dns_zone_search, **kwargs)  # noqa: E501
            return data

    def get_dns_record_all_list_with_http_info(self, dns_config_area, dns_record_type_search, dns_zone_search, **kwargs):  # noqa: E501
        """get all dns-record-all  # noqa: E501

        查看所有记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_all_list_with_http_info(dns_config_area, dns_record_type_search, dns_zone_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str dns_record_type_search: 提供DNS记录类型筛选，ALL代表所有类型。 注意【DNS记录类型筛选】和【域筛选】二者取交集；而自定义搜索是独立的 (required)
        :param list[str] dns_zone_search: 对DNS记录按域筛选,以及域删除时使用 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordAllList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dns_record_type_search', 'dns_zone_search', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_all_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_all_list`")  # noqa: E501
        # verify the required parameter 'dns_record_type_search' is set
        if ('dns_record_type_search' not in params or
                params['dns_record_type_search'] is None):
            raise ValueError("Missing the required parameter `dns_record_type_search` when calling `get_dns_record_all_list`")  # noqa: E501
        # verify the required parameter 'dns_zone_search' is set
        if ('dns_zone_search' not in params or
                params['dns_zone_search'] is None):
            raise ValueError("Missing the required parameter `dns_zone_search` when calling `get_dns_record_all_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501
        if 'dns_record_type_search' in params:
            path_params['dns_record_type_search'] = params['dns_record_type_search']  # noqa: E501
        if 'dns_zone_search' in params:
            path_params['dns_zone_search'] = params['dns_zone_search']  # noqa: E501
            collection_formats['dns_zone_search'] = 'csv'  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/all/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAllList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_caa(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-caa  # noqa: E501

        查看指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_caa(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_caa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_caa_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_caa_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-caa  # noqa: E501

        查看指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_caa_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_caa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_caa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_caa_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-caa  # noqa: E501

        查看CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_caa_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordCaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_caa_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_caa_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_caa_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-caa  # noqa: E501

        查看CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_caa_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordCaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_caa_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_caa_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaaList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_cname(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-cname  # noqa: E501

        查看指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_cname(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_cname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_cname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_cname_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-cname  # noqa: E501

        查看指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_cname_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_cname_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-cname  # noqa: E501

        查看CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_cname_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordCnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_cname_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_cname_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_cname_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-cname  # noqa: E501

        查看CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_cname_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordCnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_cname_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_cname_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCnameList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_dname(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-dname  # noqa: E501

        查看指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_dname(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_dname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_dname_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_dname_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-dname  # noqa: E501

        查看指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_dname_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_dname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_dname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_dname_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-dname  # noqa: E501

        查看DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_dname_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordDnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_dname_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_dname_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_dname_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-dname  # noqa: E501

        查看DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_dname_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordDnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_dname_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_dname_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDnameList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ds(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ds  # noqa: E501

        查看指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ds(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ds_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ds_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ds_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ds  # noqa: E501

        查看指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ds_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ds_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ds  # noqa: E501

        查看DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ds_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordDsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ds_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ds_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ds_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ds  # noqa: E501

        查看DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ds_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordDsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ds_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ds_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_hinfo(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-hinfo  # noqa: E501

        修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_hinfo(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_hinfo_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_hinfo_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_hinfo_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-hinfo  # noqa: E501

        修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_hinfo_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_hinfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_hinfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_hinfo_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-hinfo  # noqa: E501

        查看HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_hinfo_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordHinfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_hinfo_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_hinfo_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_hinfo_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-hinfo  # noqa: E501

        查看HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_hinfo_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordHinfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_hinfo_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_hinfo_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfoList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_mx(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-mx  # noqa: E501

        查看指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_mx(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_mx_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_mx_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_mx_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-mx  # noqa: E501

        查看指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_mx_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_mx_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-mx  # noqa: E501

        查看MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_mx_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_mx_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_mx_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_mx_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-mx  # noqa: E501

        查看MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_mx_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_mx_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_mx_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMxList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_naptr(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-naptr  # noqa: E501

        查看指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_naptr(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_naptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_naptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_naptr_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-naptr  # noqa: E501

        查看指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_naptr_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_naptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_naptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_naptr_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-naptr  # noqa: E501

        查看NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_naptr_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordNaptrList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_naptr_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_naptr_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_naptr_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-naptr  # noqa: E501

        查看NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_naptr_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordNaptrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_naptr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_naptr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptrList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ns(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ns  # noqa: E501

        查看指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ns(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ns_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ns_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ns_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ns  # noqa: E501

        查看指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ns_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ns_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ns  # noqa: E501

        查看NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ns_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordNsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ns_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ns_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ns_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ns  # noqa: E501

        查看NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ns_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordNsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ns_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ns_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ptr(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ptr  # noqa: E501

        查看指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ptr(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ptr_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ptr_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-ptr  # noqa: E501

        查看指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ptr_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_ptr_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ptr  # noqa: E501

        查看PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ptr_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordPtrList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_ptr_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_ptr_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_ptr_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-ptr  # noqa: E501

        查看PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_ptr_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordPtrList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_ptr_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_ptr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtrList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_srv(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-srv  # noqa: E501

        查看指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_srv(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_srv_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_srv_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_srv_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-srv  # noqa: E501

        查看指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_srv_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_srv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_srv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_srv_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-srv  # noqa: E501

        查看SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_srv_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordSrvList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_srv_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_srv_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_srv_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-srv  # noqa: E501

        查看SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_srv_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordSrvList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_srv_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_srv_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrvList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_txt(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-txt  # noqa: E501

        查看指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_txt(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_txt_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_txt_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_txt_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dns-record-txt  # noqa: E501

        查看指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_txt_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record_txt_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-txt  # noqa: E501

        查看TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_txt_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordTxtList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_txt_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_txt_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dns_record_txt_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dns-record-txt  # noqa: E501

        查看TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_txt_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsRecordTxtList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record_txt_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dns_record_txt_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxtList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_a(self, name, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """replace specific dns-record-a  # noqa: E501

        修改指定A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_a(name, dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_a_with_http_info(self, name, dns_config_area, dns_record_a_config, **kwargs):  # noqa: E501
        """replace specific dns-record-a  # noqa: E501

        修改指定A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_a_with_http_info(name, dns_config_area, dns_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordA dns_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_a`")  # noqa: E501
        # verify the required parameter 'dns_record_a_config' is set
        if ('dns_record_a_config' not in params or
                params['dns_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_a_config` when calling `replace_dns_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_a_config' in params:
            body_params = params['dns_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/a/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_aaaa(self, name, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """replace specific dns-record-aaaa  # noqa: E501

        修改指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_aaaa(name, dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_aaaa_with_http_info(self, name, dns_config_area, dns_record_aaaa_config, **kwargs):  # noqa: E501
        """replace specific dns-record-aaaa  # noqa: E501

        修改指定的AAAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_aaaa_with_http_info(name, dns_config_area, dns_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordAaaa dns_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_record_aaaa_config' is set
        if ('dns_record_aaaa_config' not in params or
                params['dns_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_aaaa_config` when calling `replace_dns_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_aaaa_config' in params:
            body_params = params['dns_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/aaaa/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_caa(self, name, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """replace specific dns-record-caa  # noqa: E501

        修改指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_caa(name, dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_caa_with_http_info(self, name, dns_config_area, dns_record_caa_config, **kwargs):  # noqa: E501
        """replace specific dns-record-caa  # noqa: E501

        修改指定的CAA记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_caa_with_http_info(name, dns_config_area, dns_record_caa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCaa dns_record_caa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_caa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_caa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_caa`")  # noqa: E501
        # verify the required parameter 'dns_record_caa_config' is set
        if ('dns_record_caa_config' not in params or
                params['dns_record_caa_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_caa_config` when calling `replace_dns_record_caa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_caa_config' in params:
            body_params = params['dns_record_caa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/caa/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_cname(self, name, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """replace specific dns-record-cname  # noqa: E501

        修改指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_cname(name, dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_cname_with_http_info(self, name, dns_config_area, dns_record_cname_config, **kwargs):  # noqa: E501
        """replace specific dns-record-cname  # noqa: E501

        修改指定的CNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_cname_with_http_info(name, dns_config_area, dns_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordCname dns_record_cname_config: 域名CNAME记录配置 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_record_cname_config' is set
        if ('dns_record_cname_config' not in params or
                params['dns_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_cname_config` when calling `replace_dns_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_cname_config' in params:
            body_params = params['dns_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/cname/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_dname(self, name, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """replace specific dns-record-dname  # noqa: E501

        修改指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_dname(name, dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_dname_with_http_info(self, name, dns_config_area, dns_record_dname_config, **kwargs):  # noqa: E501
        """replace specific dns-record-dname  # noqa: E501

        修改指定的DNAME记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_dname_with_http_info(name, dns_config_area, dns_record_dname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDname dns_record_dname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_dname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_dname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_dname`")  # noqa: E501
        # verify the required parameter 'dns_record_dname_config' is set
        if ('dns_record_dname_config' not in params or
                params['dns_record_dname_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_dname_config` when calling `replace_dns_record_dname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_dname_config' in params:
            body_params = params['dns_record_dname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/dname/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_ds(self, name, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ds  # noqa: E501

        修改指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ds(name, dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_ds_with_http_info(self, name, dns_config_area, dns_record_ds_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ds  # noqa: E501

        修改指定的DS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ds_with_http_info(name, dns_config_area, dns_record_ds_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordDs dns_record_ds_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordDs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ds_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_ds`")  # noqa: E501
        # verify the required parameter 'dns_record_ds_config' is set
        if ('dns_record_ds_config' not in params or
                params['dns_record_ds_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ds_config` when calling `replace_dns_record_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ds_config' in params:
            body_params = params['dns_record_ds_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ds/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordDs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_hinfo(self, name, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """replace specific dns-record-hinfo  # noqa: E501

        修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_hinfo(name, dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_hinfo_with_http_info(self, name, dns_config_area, dns_record_hinfo_config, **kwargs):  # noqa: E501
        """replace specific dns-record-hinfo  # noqa: E501

        修改指定的HINFO记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_hinfo_with_http_info(name, dns_config_area, dns_record_hinfo_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordHinfo dns_record_hinfo_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordHinfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_hinfo_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_hinfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_hinfo`")  # noqa: E501
        # verify the required parameter 'dns_record_hinfo_config' is set
        if ('dns_record_hinfo_config' not in params or
                params['dns_record_hinfo_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_hinfo_config` when calling `replace_dns_record_hinfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_hinfo_config' in params:
            body_params = params['dns_record_hinfo_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/hinfo/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordHinfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_mx(self, name, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """replace specific dns-record-mx  # noqa: E501

        修改指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_mx(name, dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_mx_with_http_info(self, name, dns_config_area, dns_record_mx_config, **kwargs):  # noqa: E501
        """replace specific dns-record-mx  # noqa: E501

        修改指定的MX记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_mx_with_http_info(name, dns_config_area, dns_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordMx dns_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_record_mx_config' is set
        if ('dns_record_mx_config' not in params or
                params['dns_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_mx_config` when calling `replace_dns_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_mx_config' in params:
            body_params = params['dns_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/mx/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_naptr(self, name, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """replace specific dns-record-naptr  # noqa: E501

        修改指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_naptr(name, dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_naptr_with_http_info(self, name, dns_config_area, dns_record_naptr_config, **kwargs):  # noqa: E501
        """replace specific dns-record-naptr  # noqa: E501

        修改指定的NAPTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_naptr_with_http_info(name, dns_config_area, dns_record_naptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNaptr dns_record_naptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNaptr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_naptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_naptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_naptr`")  # noqa: E501
        # verify the required parameter 'dns_record_naptr_config' is set
        if ('dns_record_naptr_config' not in params or
                params['dns_record_naptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_naptr_config` when calling `replace_dns_record_naptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_naptr_config' in params:
            body_params = params['dns_record_naptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/naptr/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNaptr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_ns(self, name, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ns  # noqa: E501

        修改指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ns(name, dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_ns_with_http_info(self, name, dns_config_area, dns_record_ns_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ns  # noqa: E501

        修改指定的NS记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ns_with_http_info(name, dns_config_area, dns_record_ns_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordNs dns_record_ns_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordNs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ns_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_ns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_ns`")  # noqa: E501
        # verify the required parameter 'dns_record_ns_config' is set
        if ('dns_record_ns_config' not in params or
                params['dns_record_ns_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ns_config` when calling `replace_dns_record_ns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ns_config' in params:
            body_params = params['dns_record_ns_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ns/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordNs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_ptr(self, name, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ptr  # noqa: E501

        修改指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ptr(name, dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_ptr_with_http_info(self, name, dns_config_area, dns_record_ptr_config, **kwargs):  # noqa: E501
        """replace specific dns-record-ptr  # noqa: E501

        修改指定的PTR记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_ptr_with_http_info(name, dns_config_area, dns_record_ptr_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordPtr dns_record_ptr_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordPtr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_ptr_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_ptr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_ptr`")  # noqa: E501
        # verify the required parameter 'dns_record_ptr_config' is set
        if ('dns_record_ptr_config' not in params or
                params['dns_record_ptr_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_ptr_config` when calling `replace_dns_record_ptr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_ptr_config' in params:
            body_params = params['dns_record_ptr_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/ptr/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordPtr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_srv(self, name, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """replace specific dns-record-srv  # noqa: E501

        修改指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_srv(name, dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_srv_with_http_info(self, name, dns_config_area, dns_record_srv_config, **kwargs):  # noqa: E501
        """replace specific dns-record-srv  # noqa: E501

        修改指定的SRV记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_srv_with_http_info(name, dns_config_area, dns_record_srv_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordSrv dns_record_srv_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordSrv
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_srv_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_srv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_srv`")  # noqa: E501
        # verify the required parameter 'dns_record_srv_config' is set
        if ('dns_record_srv_config' not in params or
                params['dns_record_srv_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_srv_config` when calling `replace_dns_record_srv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_srv_config' in params:
            body_params = params['dns_record_srv_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/srv/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordSrv',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_record_txt(self, name, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """replace specific dns-record-txt  # noqa: E501

        修改指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_txt(name, dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_record_txt_with_http_info(self, name, dns_config_area, dns_record_txt_config, **kwargs):  # noqa: E501
        """replace specific dns-record-txt  # noqa: E501

        修改指定的TXT记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_record_txt_with_http_info(name, dns_config_area, dns_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnsRecordTxt dns_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dns_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dns_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_record_txt_config' is set
        if ('dns_record_txt_config' not in params or
                params['dns_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_record_txt_config` when calling `replace_dns_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_record_txt_config' in params:
            body_params = params['dns_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dns-records/txt/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
