# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class DnsIntranetRecordApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_dns_intranet_record_a_list(self, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-a  # noqa: E501

        新建DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_a_list(dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_intranet_record_a_list_with_http_info(dns_intranet_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_intranet_record_a_list_with_http_info(dns_intranet_record_a_config, **kwargs)  # noqa: E501
            return data

    def add_dns_intranet_record_a_list_with_http_info(self, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-a  # noqa: E501

        新建DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_a_list_with_http_info(dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_intranet_record_a_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_a_config' is set
        if ('dns_intranet_record_a_config' not in params or
                params['dns_intranet_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_a_config` when calling `add_dns_intranet_record_a_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_a_config' in params:
            body_params = params['dns_intranet_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_intranet_record_aaaa_list(self, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-aaaa  # noqa: E501

        新建DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_aaaa_list(dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_intranet_record_aaaa_list_with_http_info(dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_intranet_record_aaaa_list_with_http_info(dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def add_dns_intranet_record_aaaa_list_with_http_info(self, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-aaaa  # noqa: E501

        新建DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_aaaa_list_with_http_info(dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_intranet_record_aaaa_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_aaaa_config' is set
        if ('dns_intranet_record_aaaa_config' not in params or
                params['dns_intranet_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_aaaa_config` when calling `add_dns_intranet_record_aaaa_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_aaaa_config' in params:
            body_params = params['dns_intranet_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_intranet_record_cname_list(self, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-cname  # noqa: E501

        新建DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_cname_list(dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_intranet_record_cname_list_with_http_info(dns_intranet_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_intranet_record_cname_list_with_http_info(dns_intranet_record_cname_config, **kwargs)  # noqa: E501
            return data

    def add_dns_intranet_record_cname_list_with_http_info(self, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-cname  # noqa: E501

        新建DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_cname_list_with_http_info(dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_intranet_record_cname_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_cname_config' is set
        if ('dns_intranet_record_cname_config' not in params or
                params['dns_intranet_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_cname_config` when calling `add_dns_intranet_record_cname_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_cname_config' in params:
            body_params = params['dns_intranet_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_intranet_record_mx_list(self, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-mx  # noqa: E501

        新建DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_mx_list(dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_config, **kwargs)  # noqa: E501
            return data

    def add_dns_intranet_record_mx_list_with_http_info(self, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-mx  # noqa: E501

        新建DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_intranet_record_mx_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_mx_config' is set
        if ('dns_intranet_record_mx_config' not in params or
                params['dns_intranet_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_mx_config` when calling `add_dns_intranet_record_mx_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_mx_config' in params:
            body_params = params['dns_intranet_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_dns_intranet_record_txt_list(self, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-txt  # noqa: E501

        新建DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_txt_list(dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dns_intranet_record_txt_list_with_http_info(dns_intranet_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dns_intranet_record_txt_list_with_http_info(dns_intranet_record_txt_config, **kwargs)  # noqa: E501
            return data

    def add_dns_intranet_record_txt_list_with_http_info(self, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-txt  # noqa: E501

        新建DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dns_intranet_record_txt_list_with_http_info(dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dns_intranet_record_txt_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_txt_config' is set
        if ('dns_intranet_record_txt_config' not in params or
                params['dns_intranet_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_txt_config` when calling `add_dns_intranet_record_txt_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_txt_config' in params:
            body_params = params['dns_intranet_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_intranet_record_a(self, name, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-a  # noqa: E501

        新建DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_a(name, dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, **kwargs)  # noqa: E501
            return data

    def create_dns_intranet_record_a_with_http_info(self, name, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-a  # noqa: E501

        新建DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_intranet_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_intranet_record_a`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_a_config' is set
        if ('dns_intranet_record_a_config' not in params or
                params['dns_intranet_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_a_config` when calling `create_dns_intranet_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_a_config' in params:
            body_params = params['dns_intranet_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_intranet_record_aaaa(self, name, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-aaaa  # noqa: E501

        新建DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_aaaa(name, dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def create_dns_intranet_record_aaaa_with_http_info(self, name, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-aaaa  # noqa: E501

        新建DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_intranet_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_intranet_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_aaaa_config' is set
        if ('dns_intranet_record_aaaa_config' not in params or
                params['dns_intranet_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_aaaa_config` when calling `create_dns_intranet_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_aaaa_config' in params:
            body_params = params['dns_intranet_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_intranet_record_cname(self, name, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-cname  # noqa: E501

        新建DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_cname(name, dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, **kwargs)  # noqa: E501
            return data

    def create_dns_intranet_record_cname_with_http_info(self, name, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-cname  # noqa: E501

        新建DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_intranet_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_intranet_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_cname_config' is set
        if ('dns_intranet_record_cname_config' not in params or
                params['dns_intranet_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_cname_config` when calling `create_dns_intranet_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_cname_config' in params:
            body_params = params['dns_intranet_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_intranet_record_mx(self, name, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-mx  # noqa: E501

        新建DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_mx(name, dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, **kwargs)  # noqa: E501
            return data

    def create_dns_intranet_record_mx_with_http_info(self, name, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-mx  # noqa: E501

        新建DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_intranet_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_intranet_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_mx_config' is set
        if ('dns_intranet_record_mx_config' not in params or
                params['dns_intranet_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_mx_config` when calling `create_dns_intranet_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_mx_config' in params:
            body_params = params['dns_intranet_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_intranet_record_txt(self, name, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-txt  # noqa: E501

        新建DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_txt(name, dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, **kwargs)  # noqa: E501
            return data

    def create_dns_intranet_record_txt_with_http_info(self, name, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """create new dns-intranet-record-txt  # noqa: E501

        新建DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_intranet_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dns_intranet_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_txt_config' is set
        if ('dns_intranet_record_txt_config' not in params or
                params['dns_intranet_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_txt_config` when calling `create_dns_intranet_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_txt_config' in params:
            body_params = params['dns_intranet_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_intranet_record_a(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-a  # noqa: E501

        删除DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_a(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_intranet_record_a_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_intranet_record_a_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_intranet_record_a_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-a  # noqa: E501

        删除DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_a_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_intranet_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_intranet_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_intranet_record_aaaa(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-aaaa  # noqa: E501

        删除DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_aaaa(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_intranet_record_aaaa_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_intranet_record_aaaa_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_intranet_record_aaaa_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-aaaa  # noqa: E501

        删除DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_aaaa_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_intranet_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_intranet_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_intranet_record_cname(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-cname  # noqa: E501

        删除DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_cname(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_intranet_record_cname_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_intranet_record_cname_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_intranet_record_cname_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-cname  # noqa: E501

        删除DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_cname_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_intranet_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_intranet_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_intranet_record_mx(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-mx  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_mx(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_intranet_record_mx_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_intranet_record_mx_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_intranet_record_mx_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-mx  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_mx_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_intranet_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_intranet_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_intranet_record_txt(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-txt  # noqa: E501

        删除DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_txt(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_intranet_record_txt_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_intranet_record_txt_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_dns_intranet_record_txt_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific dns-intranet-record-txt  # noqa: E501

        删除DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_intranet_record_txt_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_intranet_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dns_intranet_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_a(self, name, dns_intranet_record_a_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-a  # noqa: E501

        更新DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_a(name, dns_intranet_record_a_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_a_with_http_info(self, name, dns_intranet_record_a_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-a  # noqa: E501

        更新DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_a_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_intranet_record_a`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_a_property' is set
        if ('dns_intranet_record_a_property' not in params or
                params['dns_intranet_record_a_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_a_property` when calling `edit_dns_intranet_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_a_property' in params:
            body_params = params['dns_intranet_record_a_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_aaaa(self, name, dns_intranet_record_aaaa_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-aaaa  # noqa: E501

        更新DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_aaaa(name, dns_intranet_record_aaaa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_aaaa_with_http_info(self, name, dns_intranet_record_aaaa_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-aaaa  # noqa: E501

        更新DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_aaaa_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_intranet_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_aaaa_property' is set
        if ('dns_intranet_record_aaaa_property' not in params or
                params['dns_intranet_record_aaaa_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_aaaa_property` when calling `edit_dns_intranet_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_aaaa_property' in params:
            body_params = params['dns_intranet_record_aaaa_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_cname(self, name, dns_intranet_record_cname_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-cname  # noqa: E501

        更新DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_cname(name, dns_intranet_record_cname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_cname_with_http_info(self, name, dns_intranet_record_cname_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-cname  # noqa: E501

        更新DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_cname_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_intranet_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_cname_property' is set
        if ('dns_intranet_record_cname_property' not in params or
                params['dns_intranet_record_cname_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_cname_property` when calling `edit_dns_intranet_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_cname_property' in params:
            body_params = params['dns_intranet_record_cname_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_mx(self, name, dns_intranet_record_mx_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-mx  # noqa: E501

        更新DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_mx(name, dns_intranet_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_mx_with_http_info(self, name, dns_intranet_record_mx_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-mx  # noqa: E501

        更新DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_mx_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_intranet_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_mx_property' is set
        if ('dns_intranet_record_mx_property' not in params or
                params['dns_intranet_record_mx_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_mx_property` when calling `edit_dns_intranet_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_mx_property' in params:
            body_params = params['dns_intranet_record_mx_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_mx_list(self, dns_intranet_record_mx_property, **kwargs):  # noqa: E501
        """modify dns-intranet-record-mx  # noqa: E501

        The PATCH method updates specific properties of one config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_mx_list(dns_intranet_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_mx_list_with_http_info(self, dns_intranet_record_mx_property, **kwargs):  # noqa: E501
        """modify dns-intranet-record-mx  # noqa: E501

        The PATCH method updates specific properties of one config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_mx_list_with_http_info(dns_intranet_record_mx_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_intranet_record_mx_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_mx_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_intranet_record_mx_property' is set
        if ('dns_intranet_record_mx_property' not in params or
                params['dns_intranet_record_mx_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_mx_property` when calling `edit_dns_intranet_record_mx_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_mx_property' in params:
            body_params = params['dns_intranet_record_mx_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMxList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dns_intranet_record_txt(self, name, dns_intranet_record_txt_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-txt  # noqa: E501

        更新DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_txt(name, dns_intranet_record_txt_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_property, **kwargs)  # noqa: E501
            return data

    def edit_dns_intranet_record_txt_with_http_info(self, name, dns_intranet_record_txt_property, **kwargs):  # noqa: E501
        """modify specific dns-intranet-record-txt  # noqa: E501

        更新DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_txt_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dns_intranet_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dns_intranet_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_txt_property' is set
        if ('dns_intranet_record_txt_property' not in params or
                params['dns_intranet_record_txt_property'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_txt_property` when calling `edit_dns_intranet_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_txt_property' in params:
            body_params = params['dns_intranet_record_txt_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_a(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-a  # noqa: E501

        查看单个DNS A记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_a(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_a_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_a_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_a_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-a  # noqa: E501

        查看单个DNS A记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_a_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_intranet_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_a_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-a  # noqa: E501

        查看DNS A记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_a_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordAList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_a_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_a_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_a_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-a  # noqa: E501

        查看DNS A记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_a_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordAList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_a_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_aaaa(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-aaaa  # noqa: E501

        查看DNS AAAA记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_aaaa(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_aaaa_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_aaaa_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_aaaa_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-aaaa  # noqa: E501

        查看DNS AAAA记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_aaaa_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_intranet_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_aaaa_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-aaaa  # noqa: E501

        查看DNS AAAA记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_aaaa_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordAaaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_aaaa_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_aaaa_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_aaaa_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-aaaa  # noqa: E501

        查看DNS AAAA记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_aaaa_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordAaaaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_aaaa_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaaList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_cname(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-cname  # noqa: E501

        查看单个DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_cname(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_cname_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_cname_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_cname_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-cname  # noqa: E501

        查看单个DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_cname_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_intranet_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_cname_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-cname  # noqa: E501

        查看DNS CNAME记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_cname_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordCnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_cname_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_cname_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_cname_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-cname  # noqa: E501

        查看DNS CNAME记录配置信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_cname_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordCnameList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_cname_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCnameList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record  # noqa: E501

        查看DNS 所有配置记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record  # noqa: E501

        查看DNS 所有配置记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/all/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_mx(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-mx  # noqa: E501

        查看DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_mx(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_mx_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_mx_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_mx_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-mx  # noqa: E501

        查看DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_mx_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_intranet_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_mx_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-mx  # noqa: E501

        查看DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_mx_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_mx_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_mx_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_mx_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-mx  # noqa: E501

        查看DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_mx_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordMxList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_mx_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMxList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_txt(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-txt  # noqa: E501

        查看DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_txt(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_txt_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_txt_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_txt_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record-txt  # noqa: E501

        查看DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_txt_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_intranet_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_intranet_record_txt_list(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-txt  # noqa: E501

        查看DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_txt_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordTxtList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_intranet_record_txt_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_intranet_record_txt_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_intranet_record_txt_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all dns-intranet-record-txt  # noqa: E501

        查看DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_intranet_record_txt_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnsIntranetRecordTxtList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_intranet_record_txt_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxtList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_record(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record  # noqa: E501

        查看单个DNS 配置记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_record_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_record_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_dns_record_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific dns-intranet-record  # noqa: E501

        查看单个DNS 配置记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_record_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dns_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/all/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_intranet_record_a(self, name, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-a  # noqa: E501

        更新DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_a(name, dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_intranet_record_a_with_http_info(self, name, dns_intranet_record_a_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-a  # noqa: E501

        更新DNS A记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_a_with_http_info(name, dns_intranet_record_a_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordA dns_intranet_record_a_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordA
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_a_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_intranet_record_a" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_intranet_record_a`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_a_config' is set
        if ('dns_intranet_record_a_config' not in params or
                params['dns_intranet_record_a_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_a_config` when calling `replace_dns_intranet_record_a`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_a_config' in params:
            body_params = params['dns_intranet_record_a_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/a/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordA',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_intranet_record_aaaa(self, name, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-aaaa  # noqa: E501

        更新DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_aaaa(name, dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_intranet_record_aaaa_with_http_info(self, name, dns_intranet_record_aaaa_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-aaaa  # noqa: E501

        更新DNS AAAA记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_aaaa_with_http_info(name, dns_intranet_record_aaaa_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordAaaa dns_intranet_record_aaaa_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordAaaa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_aaaa_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_intranet_record_aaaa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_intranet_record_aaaa`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_aaaa_config' is set
        if ('dns_intranet_record_aaaa_config' not in params or
                params['dns_intranet_record_aaaa_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_aaaa_config` when calling `replace_dns_intranet_record_aaaa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_aaaa_config' in params:
            body_params = params['dns_intranet_record_aaaa_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/aaaa/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordAaaa',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_intranet_record_cname(self, name, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-cname  # noqa: E501

        更新DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_cname(name, dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_intranet_record_cname_with_http_info(self, name, dns_intranet_record_cname_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-cname  # noqa: E501

        更新DNS CNAME记录配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_cname_with_http_info(name, dns_intranet_record_cname_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordCname dns_intranet_record_cname_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordCname
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_cname_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_intranet_record_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_intranet_record_cname`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_cname_config' is set
        if ('dns_intranet_record_cname_config' not in params or
                params['dns_intranet_record_cname_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_cname_config` when calling `replace_dns_intranet_record_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_cname_config' in params:
            body_params = params['dns_intranet_record_cname_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/cname/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordCname',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_intranet_record_mx(self, name, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-mx  # noqa: E501

        更新DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_mx(name, dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_intranet_record_mx_with_http_info(self, name, dns_intranet_record_mx_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-mx  # noqa: E501

        更新DNS mx记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_mx_with_http_info(name, dns_intranet_record_mx_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordMx dns_intranet_record_mx_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordMx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_mx_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_intranet_record_mx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_intranet_record_mx`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_mx_config' is set
        if ('dns_intranet_record_mx_config' not in params or
                params['dns_intranet_record_mx_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_mx_config` when calling `replace_dns_intranet_record_mx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_mx_config' in params:
            body_params = params['dns_intranet_record_mx_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/mx/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordMx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dns_intranet_record_txt(self, name, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-txt  # noqa: E501

        更新DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_txt(name, dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, **kwargs)  # noqa: E501
            return data

    def replace_dns_intranet_record_txt_with_http_info(self, name, dns_intranet_record_txt_config, **kwargs):  # noqa: E501
        """replace specific dns-intranet-record-txt  # noqa: E501

        更新DNS txt记录信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dns_intranet_record_txt_with_http_info(name, dns_intranet_record_txt_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigDnsIntranetRecordTxt dns_intranet_record_txt_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnsIntranetRecordTxt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_intranet_record_txt_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dns_intranet_record_txt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dns_intranet_record_txt`")  # noqa: E501
        # verify the required parameter 'dns_intranet_record_txt_config' is set
        if ('dns_intranet_record_txt_config' not in params or
                params['dns_intranet_record_txt_config'] is None):
            raise ValueError("Missing the required parameter `dns_intranet_record_txt_config` when calling `replace_dns_intranet_record_txt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dns_intranet_record_txt_config' in params:
            body_params = params['dns_intranet_record_txt_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/lc/dns-intranet-record/txt/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnsIntranetRecordTxt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
