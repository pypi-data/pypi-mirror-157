# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class HttpCacheApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_http_cache_list(self, virtual_service_name, **kwargs):  # noqa: E501
        """clear all http-cache  # noqa: E501

        清除虚拟服务HTTP缓存操作  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_http_cache_list(virtual_service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_http_cache_list_with_http_info(virtual_service_name, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_http_cache_list_with_http_info(virtual_service_name, **kwargs)  # noqa: E501
            return data

    def clear_http_cache_list_with_http_info(self, virtual_service_name, **kwargs):  # noqa: E501
        """clear all http-cache  # noqa: E501

        清除虚拟服务HTTP缓存操作  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_http_cache_list_with_http_info(virtual_service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_service_name', 'x_token_sangforad', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_http_cache_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_service_name' is set
        if ('virtual_service_name' not in params or
                params['virtual_service_name'] is None):
            raise ValueError("Missing the required parameter `virtual_service_name` when calling `clear_http_cache_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtual_service_name' in params:
            path_params['virtual_service_name'] = params['virtual_service_name']  # noqa: E501

        query_params = []
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{virtual_service_name}/http-cache/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_http_cache_defect_analysis_result(self, name, **kwargs):  # noqa: E501
        """get http-cache defect-analysis result  # noqa: E501

        获取虚拟服务HTTP缓存缺失分析结果  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_http_cache_defect_analysis_result(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: DebugHttpCacheDefectAnalysisList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_http_cache_defect_analysis_result_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_http_cache_defect_analysis_result_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_http_cache_defect_analysis_result_with_http_info(self, name, **kwargs):  # noqa: E501
        """get http-cache defect-analysis result  # noqa: E501

        获取虚拟服务HTTP缓存缺失分析结果  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_http_cache_defect_analysis_result_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: DebugHttpCacheDefectAnalysisList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_http_cache_defect_analysis_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_http_cache_defect_analysis_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{name}/http-cache/defect-analysis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugHttpCacheDefectAnalysisList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_http_cache_list(self, virtual_service_name, **kwargs):  # noqa: E501
        """retrieve all http-cache  # noqa: E501

        查询虚拟服务所有HTTP缓存  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_http_cache_list(virtual_service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugHttpCacheList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_http_cache_list_with_http_info(virtual_service_name, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_http_cache_list_with_http_info(virtual_service_name, **kwargs)  # noqa: E501
            return data

    def retrieve_http_cache_list_with_http_info(self, virtual_service_name, **kwargs):  # noqa: E501
        """retrieve all http-cache  # noqa: E501

        查询虚拟服务所有HTTP缓存  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_http_cache_list_with_http_info(virtual_service_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugHttpCacheList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_service_name', 'x_token_sangforad', 'netns', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_http_cache_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_service_name' is set
        if ('virtual_service_name' not in params or
                params['virtual_service_name'] is None):
            raise ValueError("Missing the required parameter `virtual_service_name` when calling `retrieve_http_cache_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtual_service_name' in params:
            path_params['virtual_service_name'] = params['virtual_service_name']  # noqa: E501

        query_params = []
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{virtual_service_name}/http-cache/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugHttpCacheList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_http_cache_list_0(self, virtual_service_name, cache_id, **kwargs):  # noqa: E501
        """retrieve all http-cache  # noqa: E501

        查询虚拟服务具体HTTP缓存  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_http_cache_list_0(virtual_service_name, cache_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param int cache_id: 缓存id (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: CgiFileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_http_cache_list_0_with_http_info(virtual_service_name, cache_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_http_cache_list_0_with_http_info(virtual_service_name, cache_id, **kwargs)  # noqa: E501
            return data

    def retrieve_http_cache_list_0_with_http_info(self, virtual_service_name, cache_id, **kwargs):  # noqa: E501
        """retrieve all http-cache  # noqa: E501

        查询虚拟服务具体HTTP缓存  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_http_cache_list_0_with_http_info(virtual_service_name, cache_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param int cache_id: 缓存id (required)
        :param str x_token_sangforad: AD会话令牌
        :param str netns: mynetns, netns-default, project-common
        :return: CgiFileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_service_name', 'cache_id', 'x_token_sangforad', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_http_cache_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_service_name' is set
        if ('virtual_service_name' not in params or
                params['virtual_service_name'] is None):
            raise ValueError("Missing the required parameter `virtual_service_name` when calling `retrieve_http_cache_list_0`")  # noqa: E501
        # verify the required parameter 'cache_id' is set
        if ('cache_id' not in params or
                params['cache_id'] is None):
            raise ValueError("Missing the required parameter `cache_id` when calling `retrieve_http_cache_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtual_service_name' in params:
            path_params['virtual_service_name'] = params['virtual_service_name']  # noqa: E501
        if 'cache_id' in params:
            path_params['cache_id'] = params['cache_id']  # noqa: E501

        query_params = []
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{virtual_service_name}/http-cache/{cache_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CgiFileResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_http_cache_defect_analysis(self, name, http_cache_analysis_debug, **kwargs):  # noqa: E501
        """start http-cache defect-analysis  # noqa: E501

        启动虚拟服务HTTP缓存缺失分析任务  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_http_cache_defect_analysis(name, http_cache_analysis_debug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param DebugHttpCacheDefectAnalysisParameter http_cache_analysis_debug: JSON Debug (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_http_cache_defect_analysis_with_http_info(name, http_cache_analysis_debug, **kwargs)  # noqa: E501
        else:
            (data) = self.start_http_cache_defect_analysis_with_http_info(name, http_cache_analysis_debug, **kwargs)  # noqa: E501
            return data

    def start_http_cache_defect_analysis_with_http_info(self, name, http_cache_analysis_debug, **kwargs):  # noqa: E501
        """start http-cache defect-analysis  # noqa: E501

        启动虚拟服务HTTP缓存缺失分析任务  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_http_cache_defect_analysis_with_http_info(name, http_cache_analysis_debug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param DebugHttpCacheDefectAnalysisParameter http_cache_analysis_debug: JSON Debug (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'http_cache_analysis_debug', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_http_cache_defect_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `start_http_cache_defect_analysis`")  # noqa: E501
        # verify the required parameter 'http_cache_analysis_debug' is set
        if ('http_cache_analysis_debug' not in params or
                params['http_cache_analysis_debug'] is None):
            raise ValueError("Missing the required parameter `http_cache_analysis_debug` when calling `start_http_cache_defect_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'http_cache_analysis_debug' in params:
            body_params = params['http_cache_analysis_debug']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{name}/http-cache/defect-analysis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_http_cache_defect_analysis(self, name, **kwargs):  # noqa: E501
        """stop http-cache defect-analysis  # noqa: E501

        停止虚拟服务HTTP缓存缺失分析任务  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_http_cache_defect_analysis(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_http_cache_defect_analysis_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_http_cache_defect_analysis_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def stop_http_cache_defect_analysis_with_http_info(self, name, **kwargs):  # noqa: E501
        """stop http-cache defect-analysis  # noqa: E501

        停止虚拟服务HTTP缓存缺失分析任务  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_http_cache_defect_analysis_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_http_cache_defect_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `stop_http_cache_defect_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{name}/http-cache/defect-analysis', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
