# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class PersistApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_persist_cookie_insert_cookie_insert_list(self, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """create new persist-cookie-insert-cookie-insert  # noqa: E501

        新建会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_insert_cookie_insert_list(persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_cookie_insert_cookie_insert_list_with_http_info(persist_cookie_insert_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_cookie_insert_cookie_insert_list_with_http_info(persist_cookie_insert_config, **kwargs)  # noqa: E501
            return data

    def add_persist_cookie_insert_cookie_insert_list_with_http_info(self, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """create new persist-cookie-insert-cookie-insert  # noqa: E501

        新建会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_insert_cookie_insert_list_with_http_info(persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_cookie_insert_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_cookie_insert_cookie_insert_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_cookie_insert_config' is set
        if ('persist_cookie_insert_config' not in params or
                params['persist_cookie_insert_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_insert_config` when calling `add_persist_cookie_insert_cookie_insert_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_insert_config' in params:
            body_params = params['persist_cookie_insert_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_cookie_rewrite_cookie_rewrite_list(self, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """create new persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        新建会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_rewrite_cookie_rewrite_list(persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(persist_cookie_rewrite_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(persist_cookie_rewrite_config, **kwargs)  # noqa: E501
            return data

    def add_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(self, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """create new persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        新建会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_cookie_rewrite_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_cookie_rewrite_cookie_rewrite_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_cookie_rewrite_config' is set
        if ('persist_cookie_rewrite_config' not in params or
                params['persist_cookie_rewrite_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_rewrite_config` when calling `add_persist_cookie_rewrite_cookie_rewrite_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_rewrite_config' in params:
            body_params = params['persist_cookie_rewrite_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_cookie_study_list(self, persist_cookie_study_config, **kwargs):  # noqa: E501
        """create new persist-cookie-study  # noqa: E501

        新建会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_study_list(persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_cookie_study_list_with_http_info(persist_cookie_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_cookie_study_list_with_http_info(persist_cookie_study_config, **kwargs)  # noqa: E501
            return data

    def add_persist_cookie_study_list_with_http_info(self, persist_cookie_study_config, **kwargs):  # noqa: E501
        """create new persist-cookie-study  # noqa: E501

        新建会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_cookie_study_list_with_http_info(persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_cookie_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_cookie_study_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_cookie_study_config' is set
        if ('persist_cookie_study_config' not in params or
                params['persist_cookie_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_study_config` when calling `add_persist_cookie_study_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_study_config' in params:
            body_params = params['persist_cookie_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_http_request_study_list(self, persist_http_request_study_config, **kwargs):  # noqa: E501
        """create new persist-http-request-study  # noqa: E501

        新建会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_http_request_study_list(persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_http_request_study_list_with_http_info(persist_http_request_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_http_request_study_list_with_http_info(persist_http_request_study_config, **kwargs)  # noqa: E501
            return data

    def add_persist_http_request_study_list_with_http_info(self, persist_http_request_study_config, **kwargs):  # noqa: E501
        """create new persist-http-request-study  # noqa: E501

        新建会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_http_request_study_list_with_http_info(persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_http_request_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_http_request_study_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_http_request_study_config' is set
        if ('persist_http_request_study_config' not in params or
                params['persist_http_request_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_request_study_config` when calling `add_persist_http_request_study_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_request_study_config' in params:
            body_params = params['persist_http_request_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_http_response_study_list(self, persist_http_response_study_config, **kwargs):  # noqa: E501
        """create new persist-http-response-study  # noqa: E501

        新建会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_http_response_study_list(persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_http_response_study_list_with_http_info(persist_http_response_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_http_response_study_list_with_http_info(persist_http_response_study_config, **kwargs)  # noqa: E501
            return data

    def add_persist_http_response_study_list_with_http_info(self, persist_http_response_study_config, **kwargs):  # noqa: E501
        """create new persist-http-response-study  # noqa: E501

        新建会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_http_response_study_list_with_http_info(persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_http_response_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_http_response_study_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_http_response_study_config' is set
        if ('persist_http_response_study_config' not in params or
                params['persist_http_response_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_response_study_config` when calling `add_persist_http_response_study_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_response_study_config' in params:
            body_params = params['persist_http_response_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_radius_list(self, persist_radius_config, **kwargs):  # noqa: E501
        """create new persist-radius  # noqa: E501

        新建会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_radius_list(persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_radius_list_with_http_info(persist_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_radius_list_with_http_info(persist_radius_config, **kwargs)  # noqa: E501
            return data

    def add_persist_radius_list_with_http_info(self, persist_radius_config, **kwargs):  # noqa: E501
        """create new persist-radius  # noqa: E501

        新建会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_radius_list_with_http_info(persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_radius_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_radius_config' is set
        if ('persist_radius_config' not in params or
                params['persist_radius_config'] is None):
            raise ValueError("Missing the required parameter `persist_radius_config` when calling `add_persist_radius_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_radius_config' in params:
            body_params = params['persist_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_sip_list(self, persist_sip_config, **kwargs):  # noqa: E501
        """create new persist-sip  # noqa: E501

        新建会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_sip_list(persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_sip_list_with_http_info(persist_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_sip_list_with_http_info(persist_sip_config, **kwargs)  # noqa: E501
            return data

    def add_persist_sip_list_with_http_info(self, persist_sip_config, **kwargs):  # noqa: E501
        """create new persist-sip  # noqa: E501

        新建会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_sip_list_with_http_info(persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_sip_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_sip_config' is set
        if ('persist_sip_config' not in params or
                params['persist_sip_config'] is None):
            raise ValueError("Missing the required parameter `persist_sip_config` when calling `add_persist_sip_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_sip_config' in params:
            body_params = params['persist_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_source_ip_list(self, persist_source_ip_config, **kwargs):  # noqa: E501
        """create new persist-source-ip  # noqa: E501

        新建会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_source_ip_list(persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_source_ip_list_with_http_info(persist_source_ip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_source_ip_list_with_http_info(persist_source_ip_config, **kwargs)  # noqa: E501
            return data

    def add_persist_source_ip_list_with_http_info(self, persist_source_ip_config, **kwargs):  # noqa: E501
        """create new persist-source-ip  # noqa: E501

        新建会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_source_ip_list_with_http_info(persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_source_ip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_source_ip_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_source_ip_config' is set
        if ('persist_source_ip_config' not in params or
                params['persist_source_ip_config'] is None):
            raise ValueError("Missing the required parameter `persist_source_ip_config` when calling `add_persist_source_ip_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_source_ip_config' in params:
            body_params = params['persist_source_ip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_persist_ssl_sessionid_list(self, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """create new persist-ssl-sessionid  # noqa: E501

        新建会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_ssl_sessionid_list(persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_persist_ssl_sessionid_list_with_http_info(persist_ssl_sessionid_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_persist_ssl_sessionid_list_with_http_info(persist_ssl_sessionid_config, **kwargs)  # noqa: E501
            return data

    def add_persist_ssl_sessionid_list_with_http_info(self, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """create new persist-ssl-sessionid  # noqa: E501

        新建会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_persist_ssl_sessionid_list_with_http_info(persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_ssl_sessionid_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_persist_ssl_sessionid_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_ssl_sessionid_config' is set
        if ('persist_ssl_sessionid_config' not in params or
                params['persist_ssl_sessionid_config'] is None):
            raise ValueError("Missing the required parameter `persist_ssl_sessionid_config` when calling `add_persist_ssl_sessionid_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_ssl_sessionid_config' in params:
            body_params = params['persist_ssl_sessionid_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_persist(self, persist_clear_parameter, **kwargs):  # noqa: E501
        """clear persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_persist(persist_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugPersistClear persist_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_persist_with_http_info(persist_clear_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_persist_with_http_info(persist_clear_parameter, **kwargs)  # noqa: E501
            return data

    def clear_persist_with_http_info(self, persist_clear_parameter, **kwargs):  # noqa: E501
        """clear persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_persist_with_http_info(persist_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugPersistClear persist_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist_clear_parameter', 'x_token_sangforad']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_persist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'persist_clear_parameter' is set
        if ('persist_clear_parameter' not in params or
                params['persist_clear_parameter'] is None):
            raise ValueError("Missing the required parameter `persist_clear_parameter` when calling `clear_persist`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_clear_parameter' in params:
            body_params = params['persist_clear_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/lc/persist/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_slb_persist(self, slb_persist_clear_parameter, **kwargs):  # noqa: E501
        """clear slb persist  # noqa: E501

        清除虚拟服务会话保持记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_slb_persist(slb_persist_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugSlbPersistClear slb_persist_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_slb_persist_with_http_info(slb_persist_clear_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_slb_persist_with_http_info(slb_persist_clear_parameter, **kwargs)  # noqa: E501
            return data

    def clear_slb_persist_with_http_info(self, slb_persist_clear_parameter, **kwargs):  # noqa: E501
        """clear slb persist  # noqa: E501

        清除虚拟服务会话保持记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_slb_persist_with_http_info(slb_persist_clear_parameter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DebugSlbPersistClear slb_persist_clear_parameter: (required)
        :param str x_token_sangforad: AD会话令牌
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slb_persist_clear_parameter', 'x_token_sangforad']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_slb_persist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slb_persist_clear_parameter' is set
        if ('slb_persist_clear_parameter' not in params or
                params['slb_persist_clear_parameter'] is None):
            raise ValueError("Missing the required parameter `slb_persist_clear_parameter` when calling `clear_slb_persist`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'slb_persist_clear_parameter' in params:
            body_params = params['slb_persist_clear_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/persist/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_cookie_insert_cookie_insert(self, name, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """create new persist-cookie-insert-cookie-insert  # noqa: E501

        新建会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_insert_cookie_insert(name, persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, **kwargs)  # noqa: E501
            return data

    def create_persist_cookie_insert_cookie_insert_with_http_info(self, name, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """create new persist-cookie-insert-cookie-insert  # noqa: E501

        新建会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_insert_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_cookie_insert_cookie_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_cookie_insert_cookie_insert`")  # noqa: E501
        # verify the required parameter 'persist_cookie_insert_config' is set
        if ('persist_cookie_insert_config' not in params or
                params['persist_cookie_insert_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_insert_config` when calling `create_persist_cookie_insert_cookie_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_insert_config' in params:
            body_params = params['persist_cookie_insert_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_cookie_rewrite_cookie_rewrite(self, name, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """create new persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        新建会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_rewrite_cookie_rewrite(name, persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, **kwargs)  # noqa: E501
            return data

    def create_persist_cookie_rewrite_cookie_rewrite_with_http_info(self, name, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """create new persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        新建会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_rewrite_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_cookie_rewrite_cookie_rewrite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501
        # verify the required parameter 'persist_cookie_rewrite_config' is set
        if ('persist_cookie_rewrite_config' not in params or
                params['persist_cookie_rewrite_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_rewrite_config` when calling `create_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_rewrite_config' in params:
            body_params = params['persist_cookie_rewrite_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_cookie_study(self, name, persist_cookie_study_config, **kwargs):  # noqa: E501
        """create new persist-cookie-study  # noqa: E501

        新建会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_study(name, persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_cookie_study_with_http_info(name, persist_cookie_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_cookie_study_with_http_info(name, persist_cookie_study_config, **kwargs)  # noqa: E501
            return data

    def create_persist_cookie_study_with_http_info(self, name, persist_cookie_study_config, **kwargs):  # noqa: E501
        """create new persist-cookie-study  # noqa: E501

        新建会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_cookie_study_with_http_info(name, persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_cookie_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_cookie_study`")  # noqa: E501
        # verify the required parameter 'persist_cookie_study_config' is set
        if ('persist_cookie_study_config' not in params or
                params['persist_cookie_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_study_config` when calling `create_persist_cookie_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_study_config' in params:
            body_params = params['persist_cookie_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_http_request_study(self, name, persist_http_request_study_config, **kwargs):  # noqa: E501
        """create new persist-http-request-study  # noqa: E501

        新建会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_http_request_study(name, persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_http_request_study_with_http_info(name, persist_http_request_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_http_request_study_with_http_info(name, persist_http_request_study_config, **kwargs)  # noqa: E501
            return data

    def create_persist_http_request_study_with_http_info(self, name, persist_http_request_study_config, **kwargs):  # noqa: E501
        """create new persist-http-request-study  # noqa: E501

        新建会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_http_request_study_with_http_info(name, persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_request_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_http_request_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_http_request_study`")  # noqa: E501
        # verify the required parameter 'persist_http_request_study_config' is set
        if ('persist_http_request_study_config' not in params or
                params['persist_http_request_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_request_study_config` when calling `create_persist_http_request_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_request_study_config' in params:
            body_params = params['persist_http_request_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_http_response_study(self, name, persist_http_response_study_config, **kwargs):  # noqa: E501
        """create new persist-http-response-study  # noqa: E501

        新建会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_http_response_study(name, persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_http_response_study_with_http_info(name, persist_http_response_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_http_response_study_with_http_info(name, persist_http_response_study_config, **kwargs)  # noqa: E501
            return data

    def create_persist_http_response_study_with_http_info(self, name, persist_http_response_study_config, **kwargs):  # noqa: E501
        """create new persist-http-response-study  # noqa: E501

        新建会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_http_response_study_with_http_info(name, persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_response_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_http_response_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_http_response_study`")  # noqa: E501
        # verify the required parameter 'persist_http_response_study_config' is set
        if ('persist_http_response_study_config' not in params or
                params['persist_http_response_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_response_study_config` when calling `create_persist_http_response_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_response_study_config' in params:
            body_params = params['persist_http_response_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_radius(self, name, persist_radius_config, **kwargs):  # noqa: E501
        """create new persist-radius  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_radius(name, persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_radius_with_http_info(name, persist_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_radius_with_http_info(name, persist_radius_config, **kwargs)  # noqa: E501
            return data

    def create_persist_radius_with_http_info(self, name, persist_radius_config, **kwargs):  # noqa: E501
        """create new persist-radius  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_radius_with_http_info(name, persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_radius`")  # noqa: E501
        # verify the required parameter 'persist_radius_config' is set
        if ('persist_radius_config' not in params or
                params['persist_radius_config'] is None):
            raise ValueError("Missing the required parameter `persist_radius_config` when calling `create_persist_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_radius_config' in params:
            body_params = params['persist_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_sip(self, name, persist_sip_config, **kwargs):  # noqa: E501
        """create new persist-sip  # noqa: E501

        新建会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_sip(name, persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_sip_with_http_info(name, persist_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_sip_with_http_info(name, persist_sip_config, **kwargs)  # noqa: E501
            return data

    def create_persist_sip_with_http_info(self, name, persist_sip_config, **kwargs):  # noqa: E501
        """create new persist-sip  # noqa: E501

        新建会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_sip_with_http_info(name, persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_sip`")  # noqa: E501
        # verify the required parameter 'persist_sip_config' is set
        if ('persist_sip_config' not in params or
                params['persist_sip_config'] is None):
            raise ValueError("Missing the required parameter `persist_sip_config` when calling `create_persist_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_sip_config' in params:
            body_params = params['persist_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_source_ip(self, name, persist_source_ip_config, **kwargs):  # noqa: E501
        """create new persist-source-ip  # noqa: E501

        新建会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_source_ip(name, persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_source_ip_with_http_info(name, persist_source_ip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_source_ip_with_http_info(name, persist_source_ip_config, **kwargs)  # noqa: E501
            return data

    def create_persist_source_ip_with_http_info(self, name, persist_source_ip_config, **kwargs):  # noqa: E501
        """create new persist-source-ip  # noqa: E501

        新建会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_source_ip_with_http_info(name, persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_source_ip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_source_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_source_ip`")  # noqa: E501
        # verify the required parameter 'persist_source_ip_config' is set
        if ('persist_source_ip_config' not in params or
                params['persist_source_ip_config'] is None):
            raise ValueError("Missing the required parameter `persist_source_ip_config` when calling `create_persist_source_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_source_ip_config' in params:
            body_params = params['persist_source_ip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_persist_ssl_sessionid(self, name, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """create new persist-ssl-sessionid  # noqa: E501

        新建会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_ssl_sessionid(name, persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, **kwargs)  # noqa: E501
            return data

    def create_persist_ssl_sessionid_with_http_info(self, name, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """create new persist-ssl-sessionid  # noqa: E501

        新建会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_ssl_sessionid_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_persist_ssl_sessionid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_persist_ssl_sessionid`")  # noqa: E501
        # verify the required parameter 'persist_ssl_sessionid_config' is set
        if ('persist_ssl_sessionid_config' not in params or
                params['persist_ssl_sessionid_config'] is None):
            raise ValueError("Missing the required parameter `persist_ssl_sessionid_config` when calling `create_persist_ssl_sessionid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_ssl_sessionid_config' in params:
            body_params = params['persist_ssl_sessionid_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_cookie_insert_cookie_insert(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-insert-cookie-insert  # noqa: E501

        删除指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_insert_cookie_insert(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_cookie_insert_cookie_insert_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_cookie_insert_cookie_insert_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_cookie_insert_cookie_insert_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-insert-cookie-insert  # noqa: E501

        删除指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_insert_cookie_insert_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_cookie_insert_cookie_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_cookie_insert_cookie_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_cookie_rewrite_cookie_rewrite(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        删除指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_rewrite_cookie_rewrite(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_cookie_rewrite_cookie_rewrite_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        删除指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_cookie_rewrite_cookie_rewrite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_cookie_study(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-study  # noqa: E501

        删除指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_cookie_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_cookie_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_cookie_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-cookie-study  # noqa: E501

        删除指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_cookie_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_cookie_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_cookie_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_http_request_study(self, name, **kwargs):  # noqa: E501
        """delete specific persist-http-request-study  # noqa: E501

        删除指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_http_request_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_http_request_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_http_request_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_http_request_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-http-request-study  # noqa: E501

        删除指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_http_request_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_http_request_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_http_request_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_http_response_study(self, name, **kwargs):  # noqa: E501
        """delete specific persist-http-response-study  # noqa: E501

        删除指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_http_response_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_http_response_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_http_response_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_http_response_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-http-response-study  # noqa: E501

        删除指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_http_response_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_http_response_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_http_response_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_radius(self, name, **kwargs):  # noqa: E501
        """delete specific persist-radius  # noqa: E501

        删除指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_radius(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_radius_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_radius_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_radius_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-radius  # noqa: E501

        删除指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_radius_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_sip(self, name, **kwargs):  # noqa: E501
        """delete specific persist-sip  # noqa: E501

        删除指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_sip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_sip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_sip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_sip_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-sip  # noqa: E501

        删除指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_sip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_source_ip(self, name, **kwargs):  # noqa: E501
        """delete specific persist-source-ip  # noqa: E501

        删除指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_source_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_source_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_source_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_source_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-source-ip  # noqa: E501

        删除指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_source_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_source_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_source_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_persist_ssl_sessionid(self, name, **kwargs):  # noqa: E501
        """delete specific persist-ssl-sessionid  # noqa: E501

        删除指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_ssl_sessionid(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persist_ssl_sessionid_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persist_ssl_sessionid_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_persist_ssl_sessionid_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete specific persist-ssl-sessionid  # noqa: E501

        删除指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persist_ssl_sessionid_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persist_ssl_sessionid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_persist_ssl_sessionid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_cookie_insert_cookie_insert(self, name, persist_cookie_insert_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-insert-cookie-insert  # noqa: E501

        修改指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_insert_cookie_insert(name, persist_cookie_insert_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_property: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_cookie_insert_cookie_insert_with_http_info(self, name, persist_cookie_insert_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-insert-cookie-insert  # noqa: E501

        修改指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_property: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_insert_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_cookie_insert_cookie_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_cookie_insert_cookie_insert`")  # noqa: E501
        # verify the required parameter 'persist_cookie_insert_property' is set
        if ('persist_cookie_insert_property' not in params or
                params['persist_cookie_insert_property'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_insert_property` when calling `edit_persist_cookie_insert_cookie_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_insert_property' in params:
            body_params = params['persist_cookie_insert_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_cookie_rewrite_cookie_rewrite(self, name, persist_cookie_rewrite_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        修改指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_rewrite_cookie_rewrite(name, persist_cookie_rewrite_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_property: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_cookie_rewrite_cookie_rewrite_with_http_info(self, name, persist_cookie_rewrite_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        修改指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_property: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_rewrite_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_cookie_rewrite_cookie_rewrite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501
        # verify the required parameter 'persist_cookie_rewrite_property' is set
        if ('persist_cookie_rewrite_property' not in params or
                params['persist_cookie_rewrite_property'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_rewrite_property` when calling `edit_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_rewrite_property' in params:
            body_params = params['persist_cookie_rewrite_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_cookie_study(self, name, persist_cookie_study_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-study  # noqa: E501

        修改指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_study(name, persist_cookie_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_cookie_study_with_http_info(name, persist_cookie_study_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_cookie_study_with_http_info(name, persist_cookie_study_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_cookie_study_with_http_info(self, name, persist_cookie_study_property, **kwargs):  # noqa: E501
        """modify specific persist-cookie-study  # noqa: E501

        修改指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_cookie_study_with_http_info(name, persist_cookie_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_study_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_cookie_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_cookie_study`")  # noqa: E501
        # verify the required parameter 'persist_cookie_study_property' is set
        if ('persist_cookie_study_property' not in params or
                params['persist_cookie_study_property'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_study_property` when calling `edit_persist_cookie_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_study_property' in params:
            body_params = params['persist_cookie_study_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_http_request_study(self, name, persist_http_request_study_property, **kwargs):  # noqa: E501
        """modify specific persist-http-request-study  # noqa: E501

        修改指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_http_request_study(name, persist_http_request_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_http_request_study_with_http_info(name, persist_http_request_study_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_http_request_study_with_http_info(name, persist_http_request_study_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_http_request_study_with_http_info(self, name, persist_http_request_study_property, **kwargs):  # noqa: E501
        """modify specific persist-http-request-study  # noqa: E501

        修改指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_http_request_study_with_http_info(name, persist_http_request_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_request_study_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_http_request_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_http_request_study`")  # noqa: E501
        # verify the required parameter 'persist_http_request_study_property' is set
        if ('persist_http_request_study_property' not in params or
                params['persist_http_request_study_property'] is None):
            raise ValueError("Missing the required parameter `persist_http_request_study_property` when calling `edit_persist_http_request_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_request_study_property' in params:
            body_params = params['persist_http_request_study_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_http_response_study(self, name, persist_http_response_study_property, **kwargs):  # noqa: E501
        """modify specific persist-http-response-study  # noqa: E501

        修改指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_http_response_study(name, persist_http_response_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_http_response_study_with_http_info(name, persist_http_response_study_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_http_response_study_with_http_info(name, persist_http_response_study_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_http_response_study_with_http_info(self, name, persist_http_response_study_property, **kwargs):  # noqa: E501
        """modify specific persist-http-response-study  # noqa: E501

        修改指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_http_response_study_with_http_info(name, persist_http_response_study_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_response_study_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_http_response_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_http_response_study`")  # noqa: E501
        # verify the required parameter 'persist_http_response_study_property' is set
        if ('persist_http_response_study_property' not in params or
                params['persist_http_response_study_property'] is None):
            raise ValueError("Missing the required parameter `persist_http_response_study_property` when calling `edit_persist_http_response_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_response_study_property' in params:
            body_params = params['persist_http_response_study_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_radius(self, name, persist_radius_property, **kwargs):  # noqa: E501
        """modify specific persist-radius  # noqa: E501

        修改指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_radius(name, persist_radius_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_radius_with_http_info(name, persist_radius_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_radius_with_http_info(name, persist_radius_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_radius_with_http_info(self, name, persist_radius_property, **kwargs):  # noqa: E501
        """modify specific persist-radius  # noqa: E501

        修改指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_radius_with_http_info(name, persist_radius_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_radius_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_radius`")  # noqa: E501
        # verify the required parameter 'persist_radius_property' is set
        if ('persist_radius_property' not in params or
                params['persist_radius_property'] is None):
            raise ValueError("Missing the required parameter `persist_radius_property` when calling `edit_persist_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_radius_property' in params:
            body_params = params['persist_radius_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_sip(self, name, persist_sip_property, **kwargs):  # noqa: E501
        """modify specific persist-sip  # noqa: E501

        修改指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_sip(name, persist_sip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_sip_with_http_info(name, persist_sip_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_sip_with_http_info(name, persist_sip_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_sip_with_http_info(self, name, persist_sip_property, **kwargs):  # noqa: E501
        """modify specific persist-sip  # noqa: E501

        修改指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_sip_with_http_info(name, persist_sip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_sip_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_sip`")  # noqa: E501
        # verify the required parameter 'persist_sip_property' is set
        if ('persist_sip_property' not in params or
                params['persist_sip_property'] is None):
            raise ValueError("Missing the required parameter `persist_sip_property` when calling `edit_persist_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_sip_property' in params:
            body_params = params['persist_sip_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_source_ip(self, name, persist_source_ip_property, **kwargs):  # noqa: E501
        """modify specific persist-source-ip  # noqa: E501

        修改指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_source_ip(name, persist_source_ip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_source_ip_with_http_info(name, persist_source_ip_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_source_ip_with_http_info(name, persist_source_ip_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_source_ip_with_http_info(self, name, persist_source_ip_property, **kwargs):  # noqa: E501
        """modify specific persist-source-ip  # noqa: E501

        修改指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_source_ip_with_http_info(name, persist_source_ip_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_source_ip_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_source_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_source_ip`")  # noqa: E501
        # verify the required parameter 'persist_source_ip_property' is set
        if ('persist_source_ip_property' not in params or
                params['persist_source_ip_property'] is None):
            raise ValueError("Missing the required parameter `persist_source_ip_property` when calling `edit_persist_source_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_source_ip_property' in params:
            body_params = params['persist_source_ip_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_persist_ssl_sessionid(self, name, persist_ssl_sessionid_property, **kwargs):  # noqa: E501
        """modify specific persist-ssl-sessionid  # noqa: E501

        修改指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_ssl_sessionid(name, persist_ssl_sessionid_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_property, **kwargs)  # noqa: E501
            return data

    def edit_persist_ssl_sessionid_with_http_info(self, name, persist_ssl_sessionid_property, **kwargs):  # noqa: E501
        """modify specific persist-ssl-sessionid  # noqa: E501

        修改指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_ssl_sessionid_property', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_persist_ssl_sessionid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_persist_ssl_sessionid`")  # noqa: E501
        # verify the required parameter 'persist_ssl_sessionid_property' is set
        if ('persist_ssl_sessionid_property' not in params or
                params['persist_ssl_sessionid_property'] is None):
            raise ValueError("Missing the required parameter `persist_ssl_sessionid_property` when calling `edit_persist_ssl_sessionid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_ssl_sessionid_property' in params:
            body_params = params['persist_ssl_sessionid_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist(self, **kwargs):  # noqa: E501
        """get persist  # noqa: E501

        查询智能能路由会话保持  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str address: ip地址
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_with_http_info(self, **kwargs):  # noqa: E501
        """get persist  # noqa: E501

        查询智能能路由会话保持  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str address: ip地址
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'address', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/lc/persist/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugPersistList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_0(self, name, **kwargs):  # noqa: E501
        """get specific persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_0(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_0_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_0_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_0_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_0_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/all/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_insert_cookie_insert(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-insert-cookie-insert  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_insert_cookie_insert(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_insert_cookie_insert_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_insert_cookie_insert_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_cookie_insert_cookie_insert_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-insert-cookie-insert  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_insert_cookie_insert_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_insert_cookie_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_cookie_insert_cookie_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_insert_cookie_insert_list(self, **kwargs):  # noqa: E501
        """get all persist-cookie-insert-cookie-insert  # noqa: E501

        查看已有会话保持（插入cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_insert_cookie_insert_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieInsertList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_insert_cookie_insert_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_insert_cookie_insert_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_cookie_insert_cookie_insert_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-cookie-insert-cookie-insert  # noqa: E501

        查看已有会话保持（插入cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_insert_cookie_insert_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieInsertList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_insert_cookie_insert_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsertList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_rewrite_cookie_rewrite(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        查看指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_rewrite_cookie_rewrite(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_cookie_rewrite_cookie_rewrite_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        查看指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_rewrite_cookie_rewrite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_rewrite_cookie_rewrite_list(self, **kwargs):  # noqa: E501
        """get all persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        查看已有会话保持（改写cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_rewrite_cookie_rewrite_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieRewriteList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        查看已有会话保持（改写cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_rewrite_cookie_rewrite_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieRewriteList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_rewrite_cookie_rewrite_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewriteList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_study(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-study  # noqa: E501

        查看指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_cookie_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-cookie-study  # noqa: E501

        查看指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_cookie_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_cookie_study_list(self, **kwargs):  # noqa: E501
        """get all persist-cookie-study  # noqa: E501

        查看已有会话保持（被动cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_study_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_cookie_study_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_cookie_study_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_cookie_study_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-cookie-study  # noqa: E501

        查看已有会话保持（被动cookie）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_cookie_study_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistCookieStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_cookie_study_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_http_request_study(self, name, **kwargs):  # noqa: E501
        """get specific persist-http-request-study  # noqa: E501

        查看指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_request_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_http_request_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_http_request_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_http_request_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-http-request-study  # noqa: E501

        查看指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_request_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_http_request_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_http_request_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_http_request_study_list(self, **kwargs):  # noqa: E501
        """get all persist-http-request-study  # noqa: E501

        查看已有会话保持（HTTP请求被动）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_request_study_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistHttpRequestStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_http_request_study_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_http_request_study_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_http_request_study_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-http-request-study  # noqa: E501

        查看已有会话保持（HTTP请求被动）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_request_study_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistHttpRequestStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_http_request_study_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_http_response_study(self, name, **kwargs):  # noqa: E501
        """get specific persist-http-response-study  # noqa: E501

        查看指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_response_study(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_http_response_study_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_http_response_study_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_http_response_study_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-http-response-study  # noqa: E501

        查看指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_response_study_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_http_response_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_http_response_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_http_response_study_list(self, **kwargs):  # noqa: E501
        """get all persist-http-response-study  # noqa: E501

        查看已有会话保持（HTTP应答被动）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_response_study_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistHttpResponseStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_http_response_study_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_http_response_study_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_http_response_study_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-http-response-study  # noqa: E501

        查看已有会话保持（HTTP应答被动）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_http_response_study_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistHttpResponseStudyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_http_response_study_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_list(self, **kwargs):  # noqa: E501
        """get all persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/all/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_radius(self, name, **kwargs):  # noqa: E501
        """get specific persist-radius  # noqa: E501

        查看指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_radius(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_radius_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_radius_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_radius_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-radius  # noqa: E501

        查看指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_radius_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_radius_list(self, **kwargs):  # noqa: E501
        """get all persist-radius  # noqa: E501

        查看已有会话保持（radius）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_radius_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistRadiusList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_radius_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_radius_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_radius_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-radius  # noqa: E501

        查看已有会话保持（radius）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_radius_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistRadiusList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_radius_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadiusList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_sip(self, name, **kwargs):  # noqa: E501
        """get specific persist-sip  # noqa: E501

        查看指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_sip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_sip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_sip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_sip_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-sip  # noqa: E501

        查看指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_sip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_sip_list(self, **kwargs):  # noqa: E501
        """get all persist-sip  # noqa: E501

        查看已有会话保持（SIP）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_sip_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSipList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_sip_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_sip_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_sip_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-sip  # noqa: E501

        查看已有会话保持（SIP）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_sip_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param str filter: 数据查询条件
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSipList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_sip_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSipList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_source_ip(self, name, **kwargs):  # noqa: E501
        """get specific persist-source-ip  # noqa: E501

        查看指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_source_ip(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_source_ip_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_source_ip_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_source_ip_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-source-ip  # noqa: E501

        查看指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_source_ip_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_source_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_source_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_source_ip_list(self, **kwargs):  # noqa: E501
        """get all persist-source-ip  # noqa: E501

        查看已有会话保持（SourceIP）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_source_ip_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSourceIpList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_source_ip_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_source_ip_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_source_ip_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-source-ip  # noqa: E501

        查看已有会话保持（SourceIP）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_source_ip_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSourceIpList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_source_ip_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIpList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_ssl_sessionid(self, name, **kwargs):  # noqa: E501
        """get specific persist-ssl-sessionid  # noqa: E501

        查看指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_ssl_sessionid(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_ssl_sessionid_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_ssl_sessionid_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_persist_ssl_sessionid_with_http_info(self, name, **kwargs):  # noqa: E501
        """get specific persist-ssl-sessionid  # noqa: E501

        查看指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_ssl_sessionid_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_ssl_sessionid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_persist_ssl_sessionid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persist_ssl_sessionid_list(self, **kwargs):  # noqa: E501
        """get all persist-ssl-sessionid  # noqa: E501

        查看已有会话保持（SSL-SESSIONID）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_ssl_sessionid_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSslSessionidList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persist_ssl_sessionid_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_persist_ssl_sessionid_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_persist_ssl_sessionid_list_with_http_info(self, **kwargs):  # noqa: E501
        """get all persist-ssl-sessionid  # noqa: E501

        查看已有会话保持（SSL-SESSIONID）配置信息列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persist_ssl_sessionid_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigPersistSslSessionidList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'all_properties', 'select', 'netns', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persist_ssl_sessionid_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionidList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slb_persist(self, **kwargs):  # noqa: E501
        """get slb persist  # noqa: E501

        查询虚拟服务会话保持记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_slb_persist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str record_value: 会话保持记录匹配值
        :param str destination_address: 可选参数；目的IP地址；不填默认显示包含所有目的IP地址的日志
        :param str destination_port: 目的端口
        :param str pool: 记录所属节点池
        :param str node_address: 保持节点IP地址
        :param str node_port: 保持节点端口
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugSlbPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_slb_persist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_slb_persist_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_slb_persist_with_http_info(self, **kwargs):  # noqa: E501
        """get slb persist  # noqa: E501

        查询虚拟服务会话保持记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_slb_persist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_token_sangforad: AD会话令牌
        :param str record_value: 会话保持记录匹配值
        :param str destination_address: 可选参数；目的IP地址；不填默认显示包含所有目的IP地址的日志
        :param str destination_port: 目的端口
        :param str pool: 记录所属节点池
        :param str node_address: 保持节点IP地址
        :param str node_port: 保持节点端口
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: DebugSlbPersistList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_token_sangforad', 'record_value', 'destination_address', 'destination_port', 'pool', 'node_address', 'node_port', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slb_persist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'record_value' in params:
            query_params.append(('record_value', params['record_value']))  # noqa: E501
        if 'destination_address' in params:
            query_params.append(('destination_address', params['destination_address']))  # noqa: E501
        if 'destination_port' in params:
            query_params.append(('destination_port', params['destination_port']))  # noqa: E501
        if 'pool' in params:
            query_params.append(('pool', params['pool']))  # noqa: E501
        if 'node_address' in params:
            query_params.append(('node_address', params['node_address']))  # noqa: E501
        if 'node_port' in params:
            query_params.append(('node_port', params['node_port']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/persist/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugSlbPersistList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_cookie_insert_cookie_insert(self, name, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-insert-cookie-insert  # noqa: E501

        修改指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_insert_cookie_insert(name, persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_cookie_insert_cookie_insert_with_http_info(self, name, persist_cookie_insert_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-insert-cookie-insert  # noqa: E501

        修改指定会话保持（插入cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_insert_cookie_insert_with_http_info(name, persist_cookie_insert_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieInsert persist_cookie_insert_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieInsert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_insert_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_cookie_insert_cookie_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_cookie_insert_cookie_insert`")  # noqa: E501
        # verify the required parameter 'persist_cookie_insert_config' is set
        if ('persist_cookie_insert_config' not in params or
                params['persist_cookie_insert_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_insert_config` when calling `replace_persist_cookie_insert_cookie_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_insert_config' in params:
            body_params = params['persist_cookie_insert_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-insert/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieInsert',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_cookie_rewrite_cookie_rewrite(self, name, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        修改指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_rewrite_cookie_rewrite(name, persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_cookie_rewrite_cookie_rewrite_with_http_info(self, name, persist_cookie_rewrite_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-rewrite-cookie-rewrite  # noqa: E501

        修改指定会话保持（改写cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_rewrite_cookie_rewrite_with_http_info(name, persist_cookie_rewrite_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieRewrite persist_cookie_rewrite_config: JSON格式的配置参数属性 (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieRewrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_rewrite_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_cookie_rewrite_cookie_rewrite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501
        # verify the required parameter 'persist_cookie_rewrite_config' is set
        if ('persist_cookie_rewrite_config' not in params or
                params['persist_cookie_rewrite_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_rewrite_config` when calling `replace_persist_cookie_rewrite_cookie_rewrite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_rewrite_config' in params:
            body_params = params['persist_cookie_rewrite_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-rewrite/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieRewrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_cookie_study(self, name, persist_cookie_study_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-study  # noqa: E501

        修改指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_study(name, persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_cookie_study_with_http_info(name, persist_cookie_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_cookie_study_with_http_info(name, persist_cookie_study_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_cookie_study_with_http_info(self, name, persist_cookie_study_config, **kwargs):  # noqa: E501
        """replace specific persist-cookie-study  # noqa: E501

        修改指定会话保持（被动cookie）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_cookie_study_with_http_info(name, persist_cookie_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistCookieStudy persist_cookie_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistCookieStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_cookie_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_cookie_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_cookie_study`")  # noqa: E501
        # verify the required parameter 'persist_cookie_study_config' is set
        if ('persist_cookie_study_config' not in params or
                params['persist_cookie_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_cookie_study_config` when calling `replace_persist_cookie_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_cookie_study_config' in params:
            body_params = params['persist_cookie_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/cookie-study/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistCookieStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_http_request_study(self, name, persist_http_request_study_config, **kwargs):  # noqa: E501
        """replace specific persist-http-request-study  # noqa: E501

        修改指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_http_request_study(name, persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_http_request_study_with_http_info(name, persist_http_request_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_http_request_study_with_http_info(name, persist_http_request_study_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_http_request_study_with_http_info(self, name, persist_http_request_study_config, **kwargs):  # noqa: E501
        """replace specific persist-http-request-study  # noqa: E501

        修改指定会话保持（HTTP请求被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_http_request_study_with_http_info(name, persist_http_request_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpRequestStudy persist_http_request_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpRequestStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_request_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_http_request_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_http_request_study`")  # noqa: E501
        # verify the required parameter 'persist_http_request_study_config' is set
        if ('persist_http_request_study_config' not in params or
                params['persist_http_request_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_request_study_config` when calling `replace_persist_http_request_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_request_study_config' in params:
            body_params = params['persist_http_request_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-request-study/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpRequestStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_http_response_study(self, name, persist_http_response_study_config, **kwargs):  # noqa: E501
        """replace specific persist-http-response-study  # noqa: E501

        修改指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_http_response_study(name, persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_http_response_study_with_http_info(name, persist_http_response_study_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_http_response_study_with_http_info(name, persist_http_response_study_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_http_response_study_with_http_info(self, name, persist_http_response_study_config, **kwargs):  # noqa: E501
        """replace specific persist-http-response-study  # noqa: E501

        修改指定会话保持（HTTP应答被动）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_http_response_study_with_http_info(name, persist_http_response_study_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistHttpResponseStudy persist_http_response_study_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistHttpResponseStudy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_http_response_study_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_http_response_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_http_response_study`")  # noqa: E501
        # verify the required parameter 'persist_http_response_study_config' is set
        if ('persist_http_response_study_config' not in params or
                params['persist_http_response_study_config'] is None):
            raise ValueError("Missing the required parameter `persist_http_response_study_config` when calling `replace_persist_http_response_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_http_response_study_config' in params:
            body_params = params['persist_http_response_study_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/http-response-study/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistHttpResponseStudy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_radius(self, name, persist_radius_config, **kwargs):  # noqa: E501
        """replace specific persist-radius  # noqa: E501

        修改指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_radius(name, persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_radius_with_http_info(name, persist_radius_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_radius_with_http_info(name, persist_radius_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_radius_with_http_info(self, name, persist_radius_config, **kwargs):  # noqa: E501
        """replace specific persist-radius  # noqa: E501

        修改指定会话保持（radius）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_radius_with_http_info(name, persist_radius_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistRadius persist_radius_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistRadius
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_radius_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_radius" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_radius`")  # noqa: E501
        # verify the required parameter 'persist_radius_config' is set
        if ('persist_radius_config' not in params or
                params['persist_radius_config'] is None):
            raise ValueError("Missing the required parameter `persist_radius_config` when calling `replace_persist_radius`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_radius_config' in params:
            body_params = params['persist_radius_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/radius/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistRadius',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_sip(self, name, persist_sip_config, **kwargs):  # noqa: E501
        """replace specific persist-sip  # noqa: E501

        修改指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_sip(name, persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_sip_with_http_info(name, persist_sip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_sip_with_http_info(name, persist_sip_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_sip_with_http_info(self, name, persist_sip_config, **kwargs):  # noqa: E501
        """replace specific persist-sip  # noqa: E501

        修改指定会话保持（SIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_sip_with_http_info(name, persist_sip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSip persist_sip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_sip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_sip`")  # noqa: E501
        # verify the required parameter 'persist_sip_config' is set
        if ('persist_sip_config' not in params or
                params['persist_sip_config'] is None):
            raise ValueError("Missing the required parameter `persist_sip_config` when calling `replace_persist_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_sip_config' in params:
            body_params = params['persist_sip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/sip/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_source_ip(self, name, persist_source_ip_config, **kwargs):  # noqa: E501
        """replace specific persist-source-ip  # noqa: E501

        修改指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_source_ip(name, persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_source_ip_with_http_info(name, persist_source_ip_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_source_ip_with_http_info(name, persist_source_ip_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_source_ip_with_http_info(self, name, persist_source_ip_config, **kwargs):  # noqa: E501
        """replace specific persist-source-ip  # noqa: E501

        修改指定会话保持（SourceIP）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_source_ip_with_http_info(name, persist_source_ip_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSourceIp persist_source_ip_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSourceIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_source_ip_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_source_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_source_ip`")  # noqa: E501
        # verify the required parameter 'persist_source_ip_config' is set
        if ('persist_source_ip_config' not in params or
                params['persist_source_ip_config'] is None):
            raise ValueError("Missing the required parameter `persist_source_ip_config` when calling `replace_persist_source_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_source_ip_config' in params:
            body_params = params['persist_source_ip_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/source-ip/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSourceIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_persist_ssl_sessionid(self, name, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """replace specific persist-ssl-sessionid  # noqa: E501

        修改指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_ssl_sessionid(name, persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, **kwargs)  # noqa: E501
            return data

    def replace_persist_ssl_sessionid_with_http_info(self, name, persist_ssl_sessionid_config, **kwargs):  # noqa: E501
        """replace specific persist-ssl-sessionid  # noqa: E501

        修改指定会话保持（SSL-SESSIONID）配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_persist_ssl_sessionid_with_http_info(name, persist_ssl_sessionid_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param ConfigPersistSslSessionid persist_ssl_sessionid_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param str netns: mynetns, netns-default, project-common
        :return: ConfigPersistSslSessionid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'persist_ssl_sessionid_config', 'x_token_sangforad', 'all_properties', 'select', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_persist_ssl_sessionid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_persist_ssl_sessionid`")  # noqa: E501
        # verify the required parameter 'persist_ssl_sessionid_config' is set
        if ('persist_ssl_sessionid_config' not in params or
                params['persist_ssl_sessionid_config'] is None):
            raise ValueError("Missing the required parameter `persist_ssl_sessionid_config` when calling `replace_persist_ssl_sessionid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist_ssl_sessionid_config' in params:
            body_params = params['persist_ssl_sessionid_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/slb/persist/ssl-sessionid/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigPersistSslSessionid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_persist(self, virtual_service_name, pool_name, **kwargs):  # noqa: E501
        """retrieve pool persist  # noqa: E501

        查询虚拟服务节点池会话保持  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_persist(virtual_service_name, pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str source_address: 可选参数；源IP地址；不填默认显示包含所有源IP地址的日志
        :param str netns: mynetns, netns-default, project-common
        :return: DebugPersist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_persist_with_http_info(virtual_service_name, pool_name, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_persist_with_http_info(virtual_service_name, pool_name, **kwargs)  # noqa: E501
            return data

    def retrieve_persist_with_http_info(self, virtual_service_name, pool_name, **kwargs):  # noqa: E501
        """retrieve pool persist  # noqa: E501

        查询虚拟服务节点池会话保持  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_persist_with_http_info(virtual_service_name, pool_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str virtual_service_name: config virtual service name (required)
        :param str pool_name: config pool name (required)
        :param str x_token_sangforad: AD会话令牌
        :param str source_address: 可选参数；源IP地址；不填默认显示包含所有源IP地址的日志
        :param str netns: mynetns, netns-default, project-common
        :return: DebugPersist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_service_name', 'pool_name', 'x_token_sangforad', 'source_address', 'netns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_persist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_service_name' is set
        if ('virtual_service_name' not in params or
                params['virtual_service_name'] is None):
            raise ValueError("Missing the required parameter `virtual_service_name` when calling `retrieve_persist`")  # noqa: E501
        # verify the required parameter 'pool_name' is set
        if ('pool_name' not in params or
                params['pool_name'] is None):
            raise ValueError("Missing the required parameter `pool_name` when calling `retrieve_persist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtual_service_name' in params:
            path_params['virtual_service_name'] = params['virtual_service_name']  # noqa: E501
        if 'pool_name' in params:
            path_params['pool_name'] = params['pool_name']  # noqa: E501

        query_params = []
        if 'source_address' in params:
            query_params.append(('source_address', params['source_address']))  # noqa: E501
        if 'netns' in params:
            query_params.append(('netns', params['netns']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v3/debug/slb/virtual-service/{virtual_service_name}/pool/{pool_name}/persist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebugPersist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
