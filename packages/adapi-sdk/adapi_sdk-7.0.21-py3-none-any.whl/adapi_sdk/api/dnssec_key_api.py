# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from adapi_sdk.api_client import ApiClient


class DnssecKeyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_dnssec_key_list(self, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """create new dnssec-key  # noqa: E501

        创建一个DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dnssec_key_list(dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dnssec_key_list_with_http_info(dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dnssec_key_list_with_http_info(dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
            return data

    def add_dnssec_key_list_with_http_info(self, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """create new dnssec-key  # noqa: E501

        创建一个DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dnssec_key_list_with_http_info(dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'dnssec_key_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dnssec_key_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `add_dnssec_key_list`")  # noqa: E501
        # verify the required parameter 'dnssec_key_config' is set
        if ('dnssec_key_config' not in params or
                params['dnssec_key_config'] is None):
            raise ValueError("Missing the required parameter `dnssec_key_config` when calling `add_dnssec_key_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dnssec_key_config' in params:
            body_params = params['dnssec_key_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dnssec_key(self, name, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """create new dnssec-key  # noqa: E501

        创建一个DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dnssec_key(name, dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
            return data

    def create_dnssec_key_with_http_info(self, name, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """create new dnssec-key  # noqa: E501

        创建一个DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dnssec_key_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dnssec_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `create_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dnssec_key_config' is set
        if ('dnssec_key_config' not in params or
                params['dnssec_key_config'] is None):
            raise ValueError("Missing the required parameter `dnssec_key_config` when calling `create_dnssec_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dnssec_key_config' in params:
            body_params = params['dnssec_key_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dnssec_key(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dnssec-key  # noqa: E501

        删除指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dnssec_key(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dnssec_key_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dnssec_key_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def delete_dnssec_key_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """delete specific dnssec-key  # noqa: E501

        删除指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dnssec_key_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dnssec_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `delete_dnssec_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_dnssec_key(self, name, dns_config_area, dnssec_key_property, **kwargs):  # noqa: E501
        """modify specific dnssec-key  # noqa: E501

        增量修改指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dnssec_key(name, dns_config_area, dnssec_key_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_property, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_property, **kwargs)  # noqa: E501
            return data

    def edit_dnssec_key_with_http_info(self, name, dns_config_area, dnssec_key_property, **kwargs):  # noqa: E501
        """modify specific dnssec-key  # noqa: E501

        增量修改指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_property, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_property: JSON Config Properties (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dnssec_key_property', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_dnssec_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `edit_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dnssec_key_property' is set
        if ('dnssec_key_property' not in params or
                params['dnssec_key_property'] is None):
            raise ValueError("Missing the required parameter `dnssec_key_property` when calling `edit_dnssec_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dnssec_key_property' in params:
            body_params = params['dnssec_key_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dnssec_key(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dnssec-key  # noqa: E501

        查看指定的DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dnssec_key(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dnssec_key_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dnssec_key_with_http_info(name, dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dnssec_key_with_http_info(self, name, dns_config_area, **kwargs):  # noqa: E501
        """get specific dnssec-key  # noqa: E501

        查看指定的DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dnssec_key_with_http_info(name, dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dnssec_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dnssec_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dnssec_key_list(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dnssec-key  # noqa: E501

        查看DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dnssec_key_list(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnssecKeyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dnssec_key_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dnssec_key_list_with_http_info(dns_config_area, **kwargs)  # noqa: E501
            return data

    def get_dnssec_key_list_with_http_info(self, dns_config_area, **kwargs):  # noqa: E501
        """get all dnssec-key  # noqa: E501

        查看DNSSEC密钥配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dnssec_key_list_with_http_info(dns_config_area, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_config_area: DNS Config Area (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :param int skip: 跳过查询结果前部指定数量的对象
        :param int top: 指定输出列表长度
        :return: ConfigDnssecKeyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_config_area', 'x_token_sangforad', 'all_properties', 'select', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dnssec_key_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `get_dnssec_key_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKeyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_dnssec_key(self, name, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """replace specific dnssec-key  # noqa: E501

        修改指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dnssec_key(name, dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, **kwargs)  # noqa: E501
            return data

    def replace_dnssec_key_with_http_info(self, name, dns_config_area, dnssec_key_config, **kwargs):  # noqa: E501
        """replace specific dnssec-key  # noqa: E501

        修改指定的DNSSEC密钥  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_dnssec_key_with_http_info(name, dns_config_area, dnssec_key_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: 配置名称 (required)
        :param str dns_config_area: DNS Config Area (required)
        :param ConfigDnssecKey dnssec_key_config: JSON Config Object (required)
        :param str x_token_sangforad: AD会话令牌
        :param bool all_properties: 输出对象的全部字段信息，未设置属性则输出默认值。
        :param str select: 定义查询结果集的数据项
        :return: ConfigDnssecKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dns_config_area', 'dnssec_key_config', 'x_token_sangforad', 'all_properties', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_dnssec_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dns_config_area' is set
        if ('dns_config_area' not in params or
                params['dns_config_area'] is None):
            raise ValueError("Missing the required parameter `dns_config_area` when calling `replace_dnssec_key`")  # noqa: E501
        # verify the required parameter 'dnssec_key_config' is set
        if ('dnssec_key_config' not in params or
                params['dnssec_key_config'] is None):
            raise ValueError("Missing the required parameter `dnssec_key_config` when calling `replace_dnssec_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'dns_config_area' in params:
            path_params['dns_config_area'] = params['dns_config_area']  # noqa: E501

        query_params = []
        if 'all_properties' in params:
            query_params.append(('all_properties', params['all_properties']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501

        header_params = {}
        if 'x_token_sangforad' in params:
            header_params['x-token-sangforad'] = params['x_token_sangforad']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dnssec_key_config' in params:
            body_params = params['dnssec_key_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ad/v4/dns/zone/{dns_config_area}/dnssec-key/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigDnssecKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
