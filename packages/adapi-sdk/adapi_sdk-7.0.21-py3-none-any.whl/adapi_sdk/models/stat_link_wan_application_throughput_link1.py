# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_link_wan_application_throughput_application1 import StatLinkWanApplicationThroughputApplication1  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatLinkWanApplicationThroughputLink1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'application': 'list[StatLinkWanApplicationThroughputApplication1]',
        'general_throughput': 'StatStatisticInstant'
    }

    attribute_map = {
        'name': 'name',
        'application': 'application',
        'general_throughput': 'general_throughput'
    }

    def __init__(self, name=None, application=None, general_throughput=None):  # noqa: E501
        """StatLinkWanApplicationThroughputLink1 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._application = None
        self._general_throughput = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if application is not None:
            self.application = application
        if general_throughput is not None:
            self.general_throughput = general_throughput

    @property
    def name(self):
        """Gets the name of this StatLinkWanApplicationThroughputLink1.  # noqa: E501

        链路名称  # noqa: E501

        :return: The name of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatLinkWanApplicationThroughputLink1.

        链路名称  # noqa: E501

        :param name: The name of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application(self):
        """Gets the application of this StatLinkWanApplicationThroughputLink1.  # noqa: E501

        应用信息统计列表  # noqa: E501

        :return: The application of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :rtype: list[StatLinkWanApplicationThroughputApplication1]
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this StatLinkWanApplicationThroughputLink1.

        应用信息统计列表  # noqa: E501

        :param application: The application of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :type: list[StatLinkWanApplicationThroughputApplication1]
        """

        self._application = application

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatLinkWanApplicationThroughputLink1.  # noqa: E501

        链路总流量  # noqa: E501

        :return: The general_throughput of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatLinkWanApplicationThroughputLink1.

        链路总流量  # noqa: E501

        :param general_throughput: The general_throughput of this StatLinkWanApplicationThroughputLink1.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatLinkWanApplicationThroughputLink1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatLinkWanApplicationThroughputLink1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
