# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatDnsProxyDnsServers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'server': 'str',
        'health': 'str'
    }

    attribute_map = {
        'link': 'link',
        'server': 'server',
        'health': 'health'
    }

    def __init__(self, link=None, server=None, health=None):  # noqa: E501
        """StatDnsProxyDnsServers - a model defined in Swagger"""  # noqa: E501

        self._link = None
        self._server = None
        self._health = None
        self.discriminator = None

        if link is not None:
            self.link = link
        if server is not None:
            self.server = server
        if health is not None:
            self.health = health

    @property
    def link(self):
        """Gets the link of this StatDnsProxyDnsServers.  # noqa: E501

        链路名称  # noqa: E501

        :return: The link of this StatDnsProxyDnsServers.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this StatDnsProxyDnsServers.

        链路名称  # noqa: E501

        :param link: The link of this StatDnsProxyDnsServers.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def server(self):
        """Gets the server of this StatDnsProxyDnsServers.  # noqa: E501

        服务器IP地址  # noqa: E501

        :return: The server of this StatDnsProxyDnsServers.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this StatDnsProxyDnsServers.

        服务器IP地址  # noqa: E501

        :param server: The server of this StatDnsProxyDnsServers.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def health(self):
        """Gets the health of this StatDnsProxyDnsServers.  # noqa: E501

        服务器健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :return: The health of this StatDnsProxyDnsServers.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatDnsProxyDnsServers.

        服务器健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :param health: The health of this StatDnsProxyDnsServers.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDnsProxyDnsServers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDnsProxyDnsServers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
