# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ErrorMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'err_code': 'str',
        'msg': 'str',
        'debug': 'str'
    }

    attribute_map = {
        'err_code': 'err_code',
        'msg': 'msg',
        'debug': 'debug'
    }

    def __init__(self, err_code=None, msg=None, debug=None):  # noqa: E501
        """ErrorMessage - a model defined in Swagger"""  # noqa: E501

        self._err_code = None
        self._msg = None
        self._debug = None
        self.discriminator = None

        self.err_code = err_code
        self.msg = msg
        if debug is not None:
            self.debug = debug

    @property
    def err_code(self):
        """Gets the err_code of this ErrorMessage.  # noqa: E501

        表示错误类型的错误码  # noqa: E501

        :return: The err_code of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """Sets the err_code of this ErrorMessage.

        表示错误类型的错误码  # noqa: E501

        :param err_code: The err_code of this ErrorMessage.  # noqa: E501
        :type: str
        """
        if err_code is None:
            raise ValueError("Invalid value for `err_code`, must not be `None`")  # noqa: E501

        self._err_code = err_code

    @property
    def msg(self):
        """Gets the msg of this ErrorMessage.  # noqa: E501

        错误信息详情表述  # noqa: E501

        :return: The msg of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this ErrorMessage.

        错误信息详情表述  # noqa: E501

        :param msg: The msg of this ErrorMessage.  # noqa: E501
        :type: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")  # noqa: E501

        self._msg = msg

    @property
    def debug(self):
        """Gets the debug of this ErrorMessage.  # noqa: E501

        调试数据等附加信息  # noqa: E501

        :return: The debug of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this ErrorMessage.

        调试数据等附加信息  # noqa: E501

        :param debug: The debug of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._debug = debug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
