# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLinkLanMonitors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor': 'str',
        'target_host': 'str'
    }

    attribute_map = {
        'monitor': 'monitor',
        'target_host': 'target_host'
    }

    def __init__(self, monitor=None, target_host=None):  # noqa: E501
        """ConfigLinkLanMonitors - a model defined in Swagger"""  # noqa: E501

        self._monitor = None
        self._target_host = None
        self.discriminator = None

        self.monitor = monitor
        self.target_host = target_host

    @property
    def monitor(self):
        """Gets the monitor of this ConfigLinkLanMonitors.  # noqa: E501

        必选参数；引用的链路监视器名称  # noqa: E501

        :return: The monitor of this ConfigLinkLanMonitors.  # noqa: E501
        :rtype: str
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ConfigLinkLanMonitors.

        必选参数；引用的链路监视器名称  # noqa: E501

        :param monitor: The monitor of this ConfigLinkLanMonitors.  # noqa: E501
        :type: str
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501
        if monitor is not None and len(monitor) > 511:
            raise ValueError("Invalid value for `monitor`, length must be less than or equal to `511`")  # noqa: E501
        if monitor is not None and len(monitor) < 1:
            raise ValueError("Invalid value for `monitor`, length must be greater than or equal to `1`")  # noqa: E501

        self._monitor = monitor

    @property
    def target_host(self):
        """Gets the target_host of this ConfigLinkLanMonitors.  # noqa: E501

        必选参数；检测目标主机  # noqa: E501

        :return: The target_host of this ConfigLinkLanMonitors.  # noqa: E501
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """Sets the target_host of this ConfigLinkLanMonitors.

        必选参数；检测目标主机  # noqa: E501

        :param target_host: The target_host of this ConfigLinkLanMonitors.  # noqa: E501
        :type: str
        """
        if target_host is None:
            raise ValueError("Invalid value for `target_host`, must not be `None`")  # noqa: E501
        if target_host is not None and len(target_host) > 255:
            raise ValueError("Invalid value for `target_host`, length must be less than or equal to `255`")  # noqa: E501
        if target_host is not None and len(target_host) < 1:
            raise ValueError("Invalid value for `target_host`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_host = target_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLinkLanMonitors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLinkLanMonitors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
