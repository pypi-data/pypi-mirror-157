# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorQueryResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_row': 'int',
        'position_column': 'int',
        'result_match': 'str',
        'case_sensitive': 'str'
    }

    attribute_map = {
        'position_row': 'position_row',
        'position_column': 'position_column',
        'result_match': 'result_match',
        'case_sensitive': 'case_sensitive'
    }

    def __init__(self, position_row=None, position_column=None, result_match=None, case_sensitive='DISABLE'):  # noqa: E501
        """ConfigServiceMonitorQueryResult - a model defined in Swagger"""  # noqa: E501

        self._position_row = None
        self._position_column = None
        self._result_match = None
        self._case_sensitive = None
        self.discriminator = None

        if position_row is not None:
            self.position_row = position_row
        if position_column is not None:
            self.position_column = position_column
        if result_match is not None:
            self.result_match = result_match
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive

    @property
    def position_row(self):
        """Gets the position_row of this ConfigServiceMonitorQueryResult.  # noqa: E501


        :return: The position_row of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :rtype: int
        """
        return self._position_row

    @position_row.setter
    def position_row(self, position_row):
        """Sets the position_row of this ConfigServiceMonitorQueryResult.


        :param position_row: The position_row of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :type: int
        """

        self._position_row = position_row

    @property
    def position_column(self):
        """Gets the position_column of this ConfigServiceMonitorQueryResult.  # noqa: E501


        :return: The position_column of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :rtype: int
        """
        return self._position_column

    @position_column.setter
    def position_column(self, position_column):
        """Sets the position_column of this ConfigServiceMonitorQueryResult.


        :param position_column: The position_column of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :type: int
        """

        self._position_column = position_column

    @property
    def result_match(self):
        """Gets the result_match of this ConfigServiceMonitorQueryResult.  # noqa: E501


        :return: The result_match of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._result_match

    @result_match.setter
    def result_match(self, result_match):
        """Sets the result_match of this ConfigServiceMonitorQueryResult.


        :param result_match: The result_match of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :type: str
        """

        self._result_match = result_match

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this ConfigServiceMonitorQueryResult.  # noqa: E501


        :return: The case_sensitive of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this ConfigServiceMonitorQueryResult.


        :param case_sensitive: The case_sensitive of this ConfigServiceMonitorQueryResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if case_sensitive not in allowed_values:
            raise ValueError(
                "Invalid value for `case_sensitive` ({0}), must be one of {1}"  # noqa: E501
                .format(case_sensitive, allowed_values)
            )

        self._case_sensitive = case_sensitive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorQueryResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorQueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
