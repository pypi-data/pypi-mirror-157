# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_ssl_cipher_suites import ConfigSslCipherSuites  # noqa: F401,E501
from adapi_sdk.models.config_ssl_server_session_resume import ConfigSslServerSessionResume  # noqa: F401,E501


class ConfigSslServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'certificate': 'str',
        'protocols': 'list[str]',
        'cipher_suites': 'list[ConfigSslCipherSuites]',
        'sni': 'str',
        'session_resume': 'ConfigSslServerSessionResume',
        'peer_auth_state': 'str',
        'peer_auth_chain_depth': 'int',
        'peer_auth_ca_cert': 'str',
        'peer_auth_crls': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'certificate': 'certificate',
        'protocols': 'protocols',
        'cipher_suites': 'cipher_suites',
        'sni': 'sni',
        'session_resume': 'session_resume',
        'peer_auth_state': 'peer_auth_state',
        'peer_auth_chain_depth': 'peer_auth_chain_depth',
        'peer_auth_ca_cert': 'peer_auth_ca_cert',
        'peer_auth_crls': 'peer_auth_crls'
    }

    def __init__(self, name=None, description=None, certificate='NONE', protocols=None, cipher_suites=None, sni=None, session_resume=None, peer_auth_state='DISABLE', peer_auth_chain_depth=None, peer_auth_ca_cert=None, peer_auth_crls=None):  # noqa: E501
        """ConfigSslServer - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._certificate = None
        self._protocols = None
        self._cipher_suites = None
        self._sni = None
        self._session_resume = None
        self._peer_auth_state = None
        self._peer_auth_chain_depth = None
        self._peer_auth_ca_cert = None
        self._peer_auth_crls = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if certificate is not None:
            self.certificate = certificate
        if protocols is not None:
            self.protocols = protocols
        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if sni is not None:
            self.sni = sni
        if session_resume is not None:
            self.session_resume = session_resume
        if peer_auth_state is not None:
            self.peer_auth_state = peer_auth_state
        if peer_auth_chain_depth is not None:
            self.peer_auth_chain_depth = peer_auth_chain_depth
        if peer_auth_ca_cert is not None:
            self.peer_auth_ca_cert = peer_auth_ca_cert
        if peer_auth_crls is not None:
            self.peer_auth_crls = peer_auth_crls

    @property
    def name(self):
        """Gets the name of this ConfigSslServer.  # noqa: E501

        SSL加密名称  # noqa: E501

        :return: The name of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSslServer.

        SSL加密名称  # noqa: E501

        :param name: The name of this ConfigSslServer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSslServer.  # noqa: E501

        SSL加密策略描述信息  # noqa: E501

        :return: The description of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSslServer.

        SSL加密策略描述信息  # noqa: E501

        :param description: The description of this ConfigSslServer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def certificate(self):
        """Gets the certificate of this ConfigSslServer.  # noqa: E501

        证书名称，Format: NONE | {certificate}  # noqa: E501

        :return: The certificate of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ConfigSslServer.

        证书名称，Format: NONE | {certificate}  # noqa: E501

        :param certificate: The certificate of this ConfigSslServer.  # noqa: E501
        :type: str
        """
        if certificate is not None and len(certificate) > 80:
            raise ValueError("Invalid value for `certificate`, length must be less than or equal to `80`")  # noqa: E501
        if certificate is not None and len(certificate) < 1:
            raise ValueError("Invalid value for `certificate`, length must be greater than or equal to `1`")  # noqa: E501

        self._certificate = certificate

    @property
    def protocols(self):
        """Gets the protocols of this ConfigSslServer.  # noqa: E501

        启用协议集合  # noqa: E501

        :return: The protocols of this ConfigSslServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ConfigSslServer.

        启用协议集合  # noqa: E501

        :param protocols: The protocols of this ConfigSslServer.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SSLV3", "TLS1.0", "TLS1.1", "TLS1.2"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this ConfigSslServer.  # noqa: E501

        加密算法集合  # noqa: E501

        :return: The cipher_suites of this ConfigSslServer.  # noqa: E501
        :rtype: list[ConfigSslCipherSuites]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this ConfigSslServer.

        加密算法集合  # noqa: E501

        :param cipher_suites: The cipher_suites of this ConfigSslServer.  # noqa: E501
        :type: list[ConfigSslCipherSuites]
        """

        self._cipher_suites = cipher_suites

    @property
    def sni(self):
        """Gets the sni of this ConfigSslServer.  # noqa: E501

        服务器名称  # noqa: E501

        :return: The sni of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this ConfigSslServer.

        服务器名称  # noqa: E501

        :param sni: The sni of this ConfigSslServer.  # noqa: E501
        :type: str
        """

        self._sni = sni

    @property
    def session_resume(self):
        """Gets the session_resume of this ConfigSslServer.  # noqa: E501


        :return: The session_resume of this ConfigSslServer.  # noqa: E501
        :rtype: ConfigSslServerSessionResume
        """
        return self._session_resume

    @session_resume.setter
    def session_resume(self, session_resume):
        """Sets the session_resume of this ConfigSslServer.


        :param session_resume: The session_resume of this ConfigSslServer.  # noqa: E501
        :type: ConfigSslServerSessionResume
        """

        self._session_resume = session_resume

    @property
    def peer_auth_state(self):
        """Gets the peer_auth_state of this ConfigSslServer.  # noqa: E501

        服务端认证状态  # noqa: E501

        :return: The peer_auth_state of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_state

    @peer_auth_state.setter
    def peer_auth_state(self, peer_auth_state):
        """Sets the peer_auth_state of this ConfigSslServer.

        服务端认证状态  # noqa: E501

        :param peer_auth_state: The peer_auth_state of this ConfigSslServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if peer_auth_state not in allowed_values:
            raise ValueError(
                "Invalid value for `peer_auth_state` ({0}), must be one of {1}"  # noqa: E501
                .format(peer_auth_state, allowed_values)
            )

        self._peer_auth_state = peer_auth_state

    @property
    def peer_auth_chain_depth(self):
        """Gets the peer_auth_chain_depth of this ConfigSslServer.  # noqa: E501

        证书链深度  # noqa: E501

        :return: The peer_auth_chain_depth of this ConfigSslServer.  # noqa: E501
        :rtype: int
        """
        return self._peer_auth_chain_depth

    @peer_auth_chain_depth.setter
    def peer_auth_chain_depth(self, peer_auth_chain_depth):
        """Sets the peer_auth_chain_depth of this ConfigSslServer.

        证书链深度  # noqa: E501

        :param peer_auth_chain_depth: The peer_auth_chain_depth of this ConfigSslServer.  # noqa: E501
        :type: int
        """
        if peer_auth_chain_depth is not None and peer_auth_chain_depth > 32:  # noqa: E501
            raise ValueError("Invalid value for `peer_auth_chain_depth`, must be a value less than or equal to `32`")  # noqa: E501
        if peer_auth_chain_depth is not None and peer_auth_chain_depth < 1:  # noqa: E501
            raise ValueError("Invalid value for `peer_auth_chain_depth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._peer_auth_chain_depth = peer_auth_chain_depth

    @property
    def peer_auth_ca_cert(self):
        """Gets the peer_auth_ca_cert of this ConfigSslServer.  # noqa: E501

        CA证书  # noqa: E501

        :return: The peer_auth_ca_cert of this ConfigSslServer.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_ca_cert

    @peer_auth_ca_cert.setter
    def peer_auth_ca_cert(self, peer_auth_ca_cert):
        """Sets the peer_auth_ca_cert of this ConfigSslServer.

        CA证书  # noqa: E501

        :param peer_auth_ca_cert: The peer_auth_ca_cert of this ConfigSslServer.  # noqa: E501
        :type: str
        """
        if peer_auth_ca_cert is not None and len(peer_auth_ca_cert) > 80:
            raise ValueError("Invalid value for `peer_auth_ca_cert`, length must be less than or equal to `80`")  # noqa: E501
        if peer_auth_ca_cert is not None and len(peer_auth_ca_cert) < 1:
            raise ValueError("Invalid value for `peer_auth_ca_cert`, length must be greater than or equal to `1`")  # noqa: E501

        self._peer_auth_ca_cert = peer_auth_ca_cert

    @property
    def peer_auth_crls(self):
        """Gets the peer_auth_crls of this ConfigSslServer.  # noqa: E501

        CRL集合  # noqa: E501

        :return: The peer_auth_crls of this ConfigSslServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_auth_crls

    @peer_auth_crls.setter
    def peer_auth_crls(self, peer_auth_crls):
        """Sets the peer_auth_crls of this ConfigSslServer.

        CRL集合  # noqa: E501

        :param peer_auth_crls: The peer_auth_crls of this ConfigSslServer.  # noqa: E501
        :type: list[str]
        """

        self._peer_auth_crls = peer_auth_crls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSslServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSslServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
