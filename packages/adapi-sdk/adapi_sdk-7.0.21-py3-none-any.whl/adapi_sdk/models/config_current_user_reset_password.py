# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCurrentUserResetPassword(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'current_password': 'str',
        'pk_current_password': 'str',
        'reset_password': 'str',
        'pk_reset_password': 'str'
    }

    attribute_map = {
        'username': 'username',
        'current_password': 'current_password',
        'pk_current_password': 'pk_current_password',
        'reset_password': 'reset_password',
        'pk_reset_password': 'pk_reset_password'
    }

    def __init__(self, username=None, current_password=None, pk_current_password=None, reset_password=None, pk_reset_password=None):  # noqa: E501
        """ConfigCurrentUserResetPassword - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._current_password = None
        self._pk_current_password = None
        self._reset_password = None
        self._pk_reset_password = None
        self.discriminator = None

        self.username = username
        if current_password is not None:
            self.current_password = current_password
        if pk_current_password is not None:
            self.pk_current_password = pk_current_password
        if reset_password is not None:
            self.reset_password = reset_password
        if pk_reset_password is not None:
            self.pk_reset_password = pk_reset_password

    @property
    def username(self):
        """Gets the username of this ConfigCurrentUserResetPassword.  # noqa: E501

        当前登录的用户名  # noqa: E501

        :return: The username of this ConfigCurrentUserResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigCurrentUserResetPassword.

        当前登录的用户名  # noqa: E501

        :param username: The username of this ConfigCurrentUserResetPassword.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def current_password(self):
        """Gets the current_password of this ConfigCurrentUserResetPassword.  # noqa: E501

        旧密码，长度限制为1-64个字符  # noqa: E501

        :return: The current_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password):
        """Sets the current_password of this ConfigCurrentUserResetPassword.

        旧密码，长度限制为1-64个字符  # noqa: E501

        :param current_password: The current_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :type: str
        """
        if current_password is not None and len(current_password) > 64:
            raise ValueError("Invalid value for `current_password`, length must be less than or equal to `64`")  # noqa: E501
        if current_password is not None and len(current_password) < 1:
            raise ValueError("Invalid value for `current_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._current_password = current_password

    @property
    def pk_current_password(self):
        """Gets the pk_current_password of this ConfigCurrentUserResetPassword.  # noqa: E501

        旧密码，长度限制为1-64个字符  # noqa: E501

        :return: The pk_current_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._pk_current_password

    @pk_current_password.setter
    def pk_current_password(self, pk_current_password):
        """Sets the pk_current_password of this ConfigCurrentUserResetPassword.

        旧密码，长度限制为1-64个字符  # noqa: E501

        :param pk_current_password: The pk_current_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :type: str
        """

        self._pk_current_password = pk_current_password

    @property
    def reset_password(self):
        """Gets the reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501

        新密码，长度限制为8-64个字符  # noqa: E501

        :return: The reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._reset_password

    @reset_password.setter
    def reset_password(self, reset_password):
        """Sets the reset_password of this ConfigCurrentUserResetPassword.

        新密码，长度限制为8-64个字符  # noqa: E501

        :param reset_password: The reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :type: str
        """
        if reset_password is not None and len(reset_password) > 64:
            raise ValueError("Invalid value for `reset_password`, length must be less than or equal to `64`")  # noqa: E501
        if reset_password is not None and len(reset_password) < 8:
            raise ValueError("Invalid value for `reset_password`, length must be greater than or equal to `8`")  # noqa: E501

        self._reset_password = reset_password

    @property
    def pk_reset_password(self):
        """Gets the pk_reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501

        新密码，长度限制为8-64个字符  # noqa: E501

        :return: The pk_reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._pk_reset_password

    @pk_reset_password.setter
    def pk_reset_password(self, pk_reset_password):
        """Sets the pk_reset_password of this ConfigCurrentUserResetPassword.

        新密码，长度限制为8-64个字符  # noqa: E501

        :param pk_reset_password: The pk_reset_password of this ConfigCurrentUserResetPassword.  # noqa: E501
        :type: str
        """

        self._pk_reset_password = pk_reset_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCurrentUserResetPassword, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCurrentUserResetPassword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
