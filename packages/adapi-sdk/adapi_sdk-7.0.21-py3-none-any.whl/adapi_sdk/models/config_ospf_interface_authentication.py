# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigOspfInterfaceAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'key_id': 'int',
        'key_string': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'key_id': 'key-id',
        'key_string': 'key-string'
    }

    def __init__(self, mode='NONE', key_id=None, key_string=None):  # noqa: E501
        """ConfigOspfInterfaceAuthentication - a model defined in Swagger"""  # noqa: E501

        self._mode = None
        self._key_id = None
        self._key_string = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if key_id is not None:
            self.key_id = key_id
        if key_string is not None:
            self.key_string = key_string

    @property
    def mode(self):
        """Gets the mode of this ConfigOspfInterfaceAuthentication.  # noqa: E501

        ospf认证类型，合法输入为NONE，PLAIN，MD5。  # noqa: E501

        :return: The mode of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConfigOspfInterfaceAuthentication.

        ospf认证类型，合法输入为NONE，PLAIN，MD5。  # noqa: E501

        :param mode: The mode of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "PLAIN", "MD5"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def key_id(self):
        """Gets the key_id of this ConfigOspfInterfaceAuthentication.  # noqa: E501

        md5认证时key id，必须为0~2147483647之间的整数。  # noqa: E501

        :return: The key_id of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :rtype: int
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ConfigOspfInterfaceAuthentication.

        md5认证时key id，必须为0~2147483647之间的整数。  # noqa: E501

        :param key_id: The key_id of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :type: int
        """
        if key_id is not None and key_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `key_id`, must be a value less than or equal to `255`")  # noqa: E501
        if key_id is not None and key_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `key_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._key_id = key_id

    @property
    def key_string(self):
        """Gets the key_string of this ConfigOspfInterfaceAuthentication.  # noqa: E501

        md5或者明文认证方式的认证码。  # noqa: E501

        :return: The key_string of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._key_string

    @key_string.setter
    def key_string(self, key_string):
        """Sets the key_string of this ConfigOspfInterfaceAuthentication.

        md5或者明文认证方式的认证码。  # noqa: E501

        :param key_string: The key_string of this ConfigOspfInterfaceAuthentication.  # noqa: E501
        :type: str
        """
        if key_string is not None and len(key_string) > 16:
            raise ValueError("Invalid value for `key_string`, length must be less than or equal to `16`")  # noqa: E501
        if key_string is not None and len(key_string) < 1:
            raise ValueError("Invalid value for `key_string`, length must be greater than or equal to `1`")  # noqa: E501

        self._key_string = key_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigOspfInterfaceAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigOspfInterfaceAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
