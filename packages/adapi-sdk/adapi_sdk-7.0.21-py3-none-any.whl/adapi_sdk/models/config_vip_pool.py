# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_vip_pool_best_resource_rules import ConfigVipPoolBestResourceRules  # noqa: F401,E501
from adapi_sdk.models.config_vip_pool_related_virtual_service import ConfigVipPoolRelatedVirtualService  # noqa: F401,E501
from adapi_sdk.models.config_vip_pool_topologys import ConfigVipPoolTopologys  # noqa: F401,E501
from adapi_sdk.models.config_vip_pool_vip import ConfigVipPoolVip  # noqa: F401,E501


class ConfigVipPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'vips': 'list[ConfigVipPoolVip]',
        'state': 'str',
        'service_monitors': 'list[str]',
        'available_requirement': 'int',
        'edns_client_subnet': 'str',
        'related_virtual_service': 'list[ConfigVipPoolRelatedVirtualService]',
        'busy_protect': 'str',
        'policy': 'str',
        'alternative_policy': 'str',
        'topologys': 'list[ConfigVipPoolTopologys]',
        'best_resource_rules': 'list[ConfigVipPoolBestResourceRules]',
        'alternative_ip': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'vips': 'vips',
        'state': 'state',
        'service_monitors': 'service_monitors',
        'available_requirement': 'available_requirement',
        'edns_client_subnet': 'edns_client_subnet',
        'related_virtual_service': 'related_virtual_service',
        'busy_protect': 'busy_protect',
        'policy': 'policy',
        'alternative_policy': 'alternative_policy',
        'topologys': 'topologys',
        'best_resource_rules': 'best_resource_rules',
        'alternative_ip': 'alternative_ip'
    }

    def __init__(self, name=None, description=None, type='IPV4', vips=None, state='ENABLE', service_monitors=None, available_requirement=None, edns_client_subnet='DISABLE', related_virtual_service=None, busy_protect='ENABLE', policy='ROUND-ROBIN', alternative_policy='WEIGHTED-ROUND-ROBIN', topologys=None, best_resource_rules=None, alternative_ip=None):  # noqa: E501
        """ConfigVipPool - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._vips = None
        self._state = None
        self._service_monitors = None
        self._available_requirement = None
        self._edns_client_subnet = None
        self._related_virtual_service = None
        self._busy_protect = None
        self._policy = None
        self._alternative_policy = None
        self._topologys = None
        self._best_resource_rules = None
        self._alternative_ip = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if vips is not None:
            self.vips = vips
        if state is not None:
            self.state = state
        if service_monitors is not None:
            self.service_monitors = service_monitors
        if available_requirement is not None:
            self.available_requirement = available_requirement
        if edns_client_subnet is not None:
            self.edns_client_subnet = edns_client_subnet
        if related_virtual_service is not None:
            self.related_virtual_service = related_virtual_service
        if busy_protect is not None:
            self.busy_protect = busy_protect
        if policy is not None:
            self.policy = policy
        if alternative_policy is not None:
            self.alternative_policy = alternative_policy
        if topologys is not None:
            self.topologys = topologys
        if best_resource_rules is not None:
            self.best_resource_rules = best_resource_rules
        if alternative_ip is not None:
            self.alternative_ip = alternative_ip

    @property
    def name(self):
        """Gets the name of this ConfigVipPool.  # noqa: E501

        虚拟IP池名称，必须不冲突  # noqa: E501

        :return: The name of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigVipPool.

        虚拟IP池名称，必须不冲突  # noqa: E501

        :param name: The name of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigVipPool.  # noqa: E501

        描述信息  # noqa: E501

        :return: The description of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVipPool.

        描述信息  # noqa: E501

        :param description: The description of this ConfigVipPool.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigVipPool.  # noqa: E501

        虚拟IP池类型，有IPV4、IPV6两种类型  # noqa: E501

        :return: The type of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigVipPool.

        虚拟IP池类型，有IPV4、IPV6两种类型  # noqa: E501

        :param type: The type of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vips(self):
        """Gets the vips of this ConfigVipPool.  # noqa: E501

        VIP列表  # noqa: E501

        :return: The vips of this ConfigVipPool.  # noqa: E501
        :rtype: list[ConfigVipPoolVip]
        """
        return self._vips

    @vips.setter
    def vips(self, vips):
        """Sets the vips of this ConfigVipPool.

        VIP列表  # noqa: E501

        :param vips: The vips of this ConfigVipPool.  # noqa: E501
        :type: list[ConfigVipPoolVip]
        """

        self._vips = vips

    @property
    def state(self):
        """Gets the state of this ConfigVipPool.  # noqa: E501

        是否启用  # noqa: E501

        :return: The state of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigVipPool.

        是否启用  # noqa: E501

        :param state: The state of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def service_monitors(self):
        """Gets the service_monitors of this ConfigVipPool.  # noqa: E501

        健康检查方法列表  # noqa: E501

        :return: The service_monitors of this ConfigVipPool.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_monitors

    @service_monitors.setter
    def service_monitors(self, service_monitors):
        """Sets the service_monitors of this ConfigVipPool.

        健康检查方法列表  # noqa: E501

        :param service_monitors: The service_monitors of this ConfigVipPool.  # noqa: E501
        :type: list[str]
        """

        self._service_monitors = service_monitors

    @property
    def available_requirement(self):
        """Gets the available_requirement of this ConfigVipPool.  # noqa: E501

        虚拟IP通过条件  # noqa: E501

        :return: The available_requirement of this ConfigVipPool.  # noqa: E501
        :rtype: int
        """
        return self._available_requirement

    @available_requirement.setter
    def available_requirement(self, available_requirement):
        """Sets the available_requirement of this ConfigVipPool.

        虚拟IP通过条件  # noqa: E501

        :param available_requirement: The available_requirement of this ConfigVipPool.  # noqa: E501
        :type: int
        """
        if available_requirement is not None and available_requirement > 5:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value less than or equal to `5`")  # noqa: E501
        if available_requirement is not None and available_requirement < 0:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value greater than or equal to `0`")  # noqa: E501

        self._available_requirement = available_requirement

    @property
    def edns_client_subnet(self):
        """Gets the edns_client_subnet of this ConfigVipPool.  # noqa: E501

        客户端优先，启用时，优先使用客户端的真实源IP。  # noqa: E501

        :return: The edns_client_subnet of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._edns_client_subnet

    @edns_client_subnet.setter
    def edns_client_subnet(self, edns_client_subnet):
        """Sets the edns_client_subnet of this ConfigVipPool.

        客户端优先，启用时，优先使用客户端的真实源IP。  # noqa: E501

        :param edns_client_subnet: The edns_client_subnet of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if edns_client_subnet not in allowed_values:
            raise ValueError(
                "Invalid value for `edns_client_subnet` ({0}), must be one of {1}"  # noqa: E501
                .format(edns_client_subnet, allowed_values)
            )

        self._edns_client_subnet = edns_client_subnet

    @property
    def related_virtual_service(self):
        """Gets the related_virtual_service of this ConfigVipPool.  # noqa: E501

        关联虚拟服务，个数为0-80  # noqa: E501

        :return: The related_virtual_service of this ConfigVipPool.  # noqa: E501
        :rtype: list[ConfigVipPoolRelatedVirtualService]
        """
        return self._related_virtual_service

    @related_virtual_service.setter
    def related_virtual_service(self, related_virtual_service):
        """Sets the related_virtual_service of this ConfigVipPool.

        关联虚拟服务，个数为0-80  # noqa: E501

        :param related_virtual_service: The related_virtual_service of this ConfigVipPool.  # noqa: E501
        :type: list[ConfigVipPoolRelatedVirtualService]
        """

        self._related_virtual_service = related_virtual_service

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigVipPool.  # noqa: E501

        繁忙保护，默认ENABLE  # noqa: E501

        :return: The busy_protect of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigVipPool.

        繁忙保护，默认ENABLE  # noqa: E501

        :param busy_protect: The busy_protect of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_protect, allowed_values)
            )

        self._busy_protect = busy_protect

    @property
    def policy(self):
        """Gets the policy of this ConfigVipPool.  # noqa: E501

        首选策略，其中最佳资源调度在本地区域时失效，默认为轮询  # noqa: E501

        :return: The policy of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigVipPool.

        首选策略，其中最佳资源调度在本地区域时失效，默认为轮询  # noqa: E501

        :param policy: The policy of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "WEIGHTED-ROUND-ROBIN", "WEIGHTED-LEAST-CONNECTIONS", "WEIGHTED-LEAST-THROUGHPUT", "HASH", "LEAST-RTT", "TOPOLOGY", "RETURN-ALL", "BEST-RESOURCE", "PRIORITY"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def alternative_policy(self):
        """Gets the alternative_policy of this ConfigVipPool.  # noqa: E501

        备选策略，其中最佳资源调度在本地区域时失效，默认为加权轮询  # noqa: E501

        :return: The alternative_policy of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._alternative_policy

    @alternative_policy.setter
    def alternative_policy(self, alternative_policy):
        """Sets the alternative_policy of this ConfigVipPool.

        备选策略，其中最佳资源调度在本地区域时失效，默认为加权轮询  # noqa: E501

        :param alternative_policy: The alternative_policy of this ConfigVipPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "WEIGHTED-ROUND-ROBIN", "WEIGHTED-LEAST-CONNECTIONS", "WEIGHTED-LEAST-THROUGHPUT", "HASH", "PRIORITY", "LEAST-RTT", "TOPOLOGY", "RETURN-ALL", "REFUSE", "DROP", "ALTERNATIVE-IP", "BEST-RESOURCE"]  # noqa: E501
        if alternative_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `alternative_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(alternative_policy, allowed_values)
            )

        self._alternative_policy = alternative_policy

    @property
    def topologys(self):
        """Gets the topologys of this ConfigVipPool.  # noqa: E501

        静态就近性列表配置  # noqa: E501

        :return: The topologys of this ConfigVipPool.  # noqa: E501
        :rtype: list[ConfigVipPoolTopologys]
        """
        return self._topologys

    @topologys.setter
    def topologys(self, topologys):
        """Sets the topologys of this ConfigVipPool.

        静态就近性列表配置  # noqa: E501

        :param topologys: The topologys of this ConfigVipPool.  # noqa: E501
        :type: list[ConfigVipPoolTopologys]
        """

        self._topologys = topologys

    @property
    def best_resource_rules(self):
        """Gets the best_resource_rules of this ConfigVipPool.  # noqa: E501

        最佳资源调度条件列表  # noqa: E501

        :return: The best_resource_rules of this ConfigVipPool.  # noqa: E501
        :rtype: list[ConfigVipPoolBestResourceRules]
        """
        return self._best_resource_rules

    @best_resource_rules.setter
    def best_resource_rules(self, best_resource_rules):
        """Sets the best_resource_rules of this ConfigVipPool.

        最佳资源调度条件列表  # noqa: E501

        :param best_resource_rules: The best_resource_rules of this ConfigVipPool.  # noqa: E501
        :type: list[ConfigVipPoolBestResourceRules]
        """

        self._best_resource_rules = best_resource_rules

    @property
    def alternative_ip(self):
        """Gets the alternative_ip of this ConfigVipPool.  # noqa: E501

        备选IP  # noqa: E501

        :return: The alternative_ip of this ConfigVipPool.  # noqa: E501
        :rtype: str
        """
        return self._alternative_ip

    @alternative_ip.setter
    def alternative_ip(self, alternative_ip):
        """Sets the alternative_ip of this ConfigVipPool.

        备选IP  # noqa: E501

        :param alternative_ip: The alternative_ip of this ConfigVipPool.  # noqa: E501
        :type: str
        """

        self._alternative_ip = alternative_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVipPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVipPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
