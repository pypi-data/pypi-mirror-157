# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_header_match_component import ConfigHttpHeaderMatchComponent  # noqa: F401,E501
from adapi_sdk.models.config_pre_rule_destination_address import ConfigPreRuleDestinationAddress  # noqa: F401,E501
from adapi_sdk.models.config_pre_rule_dns_query_rule import ConfigPreRuleDnsQueryRule  # noqa: F401,E501
from adapi_sdk.models.config_pre_rule_source_address import ConfigPreRuleSourceAddress  # noqa: F401,E501
from adapi_sdk.models.config_service_type import ConfigServiceType  # noqa: F401,E501
from adapi_sdk.models.config_ssl_match_component import ConfigSslMatchComponent  # noqa: F401,E501
from adapi_sdk.models.config_str_match_component import ConfigStrMatchComponent  # noqa: F401,E501


class ConfigPreRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'service': 'ConfigServiceType',
        'source_address': 'ConfigPreRuleSourceAddress',
        'destination_address': 'ConfigPreRuleDestinationAddress',
        'tcp_stream_rule': 'ConfigStrMatchComponent',
        'dns_query_rule': 'ConfigPreRuleDnsQueryRule',
        'http_request_method_rule': 'str',
        'http_request_version_rule': 'str',
        'http_request_uri_rule': 'ConfigStrMatchComponent',
        'http_request_header_rules': 'list[ConfigHttpHeaderMatchComponent]',
        'ssl_version_rule': 'str',
        'ssl_variable_rules': 'list[ConfigSslMatchComponent]',
        'action': 'str',
        'http_response': 'str',
        'sched_pool': 'str',
        'sched_failure': 'str',
        'sched_failure_http_response': 'str',
        'rewrite_requests': 'list[str]',
        'rewrite_responses': 'list[str]',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'service': 'service',
        'source_address': 'source_address',
        'destination_address': 'destination_address',
        'tcp_stream_rule': 'tcp_stream_rule',
        'dns_query_rule': 'dns_query_rule',
        'http_request_method_rule': 'http_request_method_rule',
        'http_request_version_rule': 'http_request_version_rule',
        'http_request_uri_rule': 'http_request_uri_rule',
        'http_request_header_rules': 'http_request_header_rules',
        'ssl_version_rule': 'ssl_version_rule',
        'ssl_variable_rules': 'ssl_variable_rules',
        'action': 'action',
        'http_response': 'http_response',
        'sched_pool': 'sched_pool',
        'sched_failure': 'sched_failure',
        'sched_failure_http_response': 'sched_failure_http_response',
        'rewrite_requests': 'rewrite_requests',
        'rewrite_responses': 'rewrite_responses',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, service=None, source_address=None, destination_address=None, tcp_stream_rule=None, dns_query_rule=None, http_request_method_rule='ALL', http_request_version_rule='ALL', http_request_uri_rule=None, http_request_header_rules=None, ssl_version_rule='ALL', ssl_variable_rules=None, action='SCHED-POOL', http_response=None, sched_pool=None, sched_failure='NEXT-RULE', sched_failure_http_response=None, rewrite_requests=None, rewrite_responses=None, netns='default'):  # noqa: E501
        """ConfigPreRule - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._service = None
        self._source_address = None
        self._destination_address = None
        self._tcp_stream_rule = None
        self._dns_query_rule = None
        self._http_request_method_rule = None
        self._http_request_version_rule = None
        self._http_request_uri_rule = None
        self._http_request_header_rules = None
        self._ssl_version_rule = None
        self._ssl_variable_rules = None
        self._action = None
        self._http_response = None
        self._sched_pool = None
        self._sched_failure = None
        self._sched_failure_http_response = None
        self._rewrite_requests = None
        self._rewrite_responses = None
        self._netns = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if service is not None:
            self.service = service
        if source_address is not None:
            self.source_address = source_address
        if destination_address is not None:
            self.destination_address = destination_address
        if tcp_stream_rule is not None:
            self.tcp_stream_rule = tcp_stream_rule
        if dns_query_rule is not None:
            self.dns_query_rule = dns_query_rule
        if http_request_method_rule is not None:
            self.http_request_method_rule = http_request_method_rule
        if http_request_version_rule is not None:
            self.http_request_version_rule = http_request_version_rule
        if http_request_uri_rule is not None:
            self.http_request_uri_rule = http_request_uri_rule
        if http_request_header_rules is not None:
            self.http_request_header_rules = http_request_header_rules
        if ssl_version_rule is not None:
            self.ssl_version_rule = ssl_version_rule
        if ssl_variable_rules is not None:
            self.ssl_variable_rules = ssl_variable_rules
        if action is not None:
            self.action = action
        if http_response is not None:
            self.http_response = http_response
        if sched_pool is not None:
            self.sched_pool = sched_pool
        if sched_failure is not None:
            self.sched_failure = sched_failure
        if sched_failure_http_response is not None:
            self.sched_failure_http_response = sched_failure_http_response
        if rewrite_requests is not None:
            self.rewrite_requests = rewrite_requests
        if rewrite_responses is not None:
            self.rewrite_responses = rewrite_responses
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this ConfigPreRule.  # noqa: E501


        :return: The name of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPreRule.


        :param name: The name of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPreRule.  # noqa: E501


        :return: The description of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPreRule.


        :param description: The description of this ConfigPreRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def service(self):
        """Gets the service of this ConfigPreRule.  # noqa: E501


        :return: The service of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigServiceType
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigPreRule.


        :param service: The service of this ConfigPreRule.  # noqa: E501
        :type: ConfigServiceType
        """

        self._service = service

    @property
    def source_address(self):
        """Gets the source_address of this ConfigPreRule.  # noqa: E501


        :return: The source_address of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigPreRuleSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigPreRule.


        :param source_address: The source_address of this ConfigPreRule.  # noqa: E501
        :type: ConfigPreRuleSourceAddress
        """

        self._source_address = source_address

    @property
    def destination_address(self):
        """Gets the destination_address of this ConfigPreRule.  # noqa: E501


        :return: The destination_address of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigPreRuleDestinationAddress
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this ConfigPreRule.


        :param destination_address: The destination_address of this ConfigPreRule.  # noqa: E501
        :type: ConfigPreRuleDestinationAddress
        """

        self._destination_address = destination_address

    @property
    def tcp_stream_rule(self):
        """Gets the tcp_stream_rule of this ConfigPreRule.  # noqa: E501


        :return: The tcp_stream_rule of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigStrMatchComponent
        """
        return self._tcp_stream_rule

    @tcp_stream_rule.setter
    def tcp_stream_rule(self, tcp_stream_rule):
        """Sets the tcp_stream_rule of this ConfigPreRule.


        :param tcp_stream_rule: The tcp_stream_rule of this ConfigPreRule.  # noqa: E501
        :type: ConfigStrMatchComponent
        """

        self._tcp_stream_rule = tcp_stream_rule

    @property
    def dns_query_rule(self):
        """Gets the dns_query_rule of this ConfigPreRule.  # noqa: E501


        :return: The dns_query_rule of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigPreRuleDnsQueryRule
        """
        return self._dns_query_rule

    @dns_query_rule.setter
    def dns_query_rule(self, dns_query_rule):
        """Sets the dns_query_rule of this ConfigPreRule.


        :param dns_query_rule: The dns_query_rule of this ConfigPreRule.  # noqa: E501
        :type: ConfigPreRuleDnsQueryRule
        """

        self._dns_query_rule = dns_query_rule

    @property
    def http_request_method_rule(self):
        """Gets the http_request_method_rule of this ConfigPreRule.  # noqa: E501


        :return: The http_request_method_rule of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._http_request_method_rule

    @http_request_method_rule.setter
    def http_request_method_rule(self, http_request_method_rule):
        """Sets the http_request_method_rule of this ConfigPreRule.


        :param http_request_method_rule: The http_request_method_rule of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "GET", "POST"]  # noqa: E501
        if http_request_method_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `http_request_method_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(http_request_method_rule, allowed_values)
            )

        self._http_request_method_rule = http_request_method_rule

    @property
    def http_request_version_rule(self):
        """Gets the http_request_version_rule of this ConfigPreRule.  # noqa: E501


        :return: The http_request_version_rule of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._http_request_version_rule

    @http_request_version_rule.setter
    def http_request_version_rule(self, http_request_version_rule):
        """Sets the http_request_version_rule of this ConfigPreRule.


        :param http_request_version_rule: The http_request_version_rule of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "HTTP/1.0", "HTTP/1.1"]  # noqa: E501
        if http_request_version_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `http_request_version_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(http_request_version_rule, allowed_values)
            )

        self._http_request_version_rule = http_request_version_rule

    @property
    def http_request_uri_rule(self):
        """Gets the http_request_uri_rule of this ConfigPreRule.  # noqa: E501


        :return: The http_request_uri_rule of this ConfigPreRule.  # noqa: E501
        :rtype: ConfigStrMatchComponent
        """
        return self._http_request_uri_rule

    @http_request_uri_rule.setter
    def http_request_uri_rule(self, http_request_uri_rule):
        """Sets the http_request_uri_rule of this ConfigPreRule.


        :param http_request_uri_rule: The http_request_uri_rule of this ConfigPreRule.  # noqa: E501
        :type: ConfigStrMatchComponent
        """

        self._http_request_uri_rule = http_request_uri_rule

    @property
    def http_request_header_rules(self):
        """Gets the http_request_header_rules of this ConfigPreRule.  # noqa: E501


        :return: The http_request_header_rules of this ConfigPreRule.  # noqa: E501
        :rtype: list[ConfigHttpHeaderMatchComponent]
        """
        return self._http_request_header_rules

    @http_request_header_rules.setter
    def http_request_header_rules(self, http_request_header_rules):
        """Sets the http_request_header_rules of this ConfigPreRule.


        :param http_request_header_rules: The http_request_header_rules of this ConfigPreRule.  # noqa: E501
        :type: list[ConfigHttpHeaderMatchComponent]
        """

        self._http_request_header_rules = http_request_header_rules

    @property
    def ssl_version_rule(self):
        """Gets the ssl_version_rule of this ConfigPreRule.  # noqa: E501


        :return: The ssl_version_rule of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._ssl_version_rule

    @ssl_version_rule.setter
    def ssl_version_rule(self, ssl_version_rule):
        """Sets the ssl_version_rule of this ConfigPreRule.


        :param ssl_version_rule: The ssl_version_rule of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "V1", "V2", "V3"]  # noqa: E501
        if ssl_version_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_version_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_version_rule, allowed_values)
            )

        self._ssl_version_rule = ssl_version_rule

    @property
    def ssl_variable_rules(self):
        """Gets the ssl_variable_rules of this ConfigPreRule.  # noqa: E501


        :return: The ssl_variable_rules of this ConfigPreRule.  # noqa: E501
        :rtype: list[ConfigSslMatchComponent]
        """
        return self._ssl_variable_rules

    @ssl_variable_rules.setter
    def ssl_variable_rules(self, ssl_variable_rules):
        """Sets the ssl_variable_rules of this ConfigPreRule.


        :param ssl_variable_rules: The ssl_variable_rules of this ConfigPreRule.  # noqa: E501
        :type: list[ConfigSslMatchComponent]
        """

        self._ssl_variable_rules = ssl_variable_rules

    @property
    def action(self):
        """Gets the action of this ConfigPreRule.  # noqa: E501


        :return: The action of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigPreRule.


        :param action: The action of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCHED-POOL", "SCHED-POOL-AND-REWRITE", "TCP-FIN", "TCP-RST", "HTTP-RESPONSE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def http_response(self):
        """Gets the http_response of this ConfigPreRule.  # noqa: E501


        :return: The http_response of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._http_response

    @http_response.setter
    def http_response(self, http_response):
        """Sets the http_response of this ConfigPreRule.


        :param http_response: The http_response of this ConfigPreRule.  # noqa: E501
        :type: str
        """

        self._http_response = http_response

    @property
    def sched_pool(self):
        """Gets the sched_pool of this ConfigPreRule.  # noqa: E501


        :return: The sched_pool of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._sched_pool

    @sched_pool.setter
    def sched_pool(self, sched_pool):
        """Sets the sched_pool of this ConfigPreRule.


        :param sched_pool: The sched_pool of this ConfigPreRule.  # noqa: E501
        :type: str
        """

        self._sched_pool = sched_pool

    @property
    def sched_failure(self):
        """Gets the sched_failure of this ConfigPreRule.  # noqa: E501


        :return: The sched_failure of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._sched_failure

    @sched_failure.setter
    def sched_failure(self, sched_failure):
        """Sets the sched_failure of this ConfigPreRule.


        :param sched_failure: The sched_failure of this ConfigPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEXT-RULE", "DROP", "TCP-FIN", "TCP-RST", "HTTP-RESPONSE"]  # noqa: E501
        if sched_failure not in allowed_values:
            raise ValueError(
                "Invalid value for `sched_failure` ({0}), must be one of {1}"  # noqa: E501
                .format(sched_failure, allowed_values)
            )

        self._sched_failure = sched_failure

    @property
    def sched_failure_http_response(self):
        """Gets the sched_failure_http_response of this ConfigPreRule.  # noqa: E501


        :return: The sched_failure_http_response of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._sched_failure_http_response

    @sched_failure_http_response.setter
    def sched_failure_http_response(self, sched_failure_http_response):
        """Sets the sched_failure_http_response of this ConfigPreRule.


        :param sched_failure_http_response: The sched_failure_http_response of this ConfigPreRule.  # noqa: E501
        :type: str
        """

        self._sched_failure_http_response = sched_failure_http_response

    @property
    def rewrite_requests(self):
        """Gets the rewrite_requests of this ConfigPreRule.  # noqa: E501


        :return: The rewrite_requests of this ConfigPreRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._rewrite_requests

    @rewrite_requests.setter
    def rewrite_requests(self, rewrite_requests):
        """Sets the rewrite_requests of this ConfigPreRule.


        :param rewrite_requests: The rewrite_requests of this ConfigPreRule.  # noqa: E501
        :type: list[str]
        """

        self._rewrite_requests = rewrite_requests

    @property
    def rewrite_responses(self):
        """Gets the rewrite_responses of this ConfigPreRule.  # noqa: E501


        :return: The rewrite_responses of this ConfigPreRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._rewrite_responses

    @rewrite_responses.setter
    def rewrite_responses(self, rewrite_responses):
        """Sets the rewrite_responses of this ConfigPreRule.


        :param rewrite_responses: The rewrite_responses of this ConfigPreRule.  # noqa: E501
        :type: list[str]
        """

        self._rewrite_responses = rewrite_responses

    @property
    def netns(self):
        """Gets the netns of this ConfigPreRule.  # noqa: E501


        :return: The netns of this ConfigPreRule.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this ConfigPreRule.


        :param netns: The netns of this ConfigPreRule.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPreRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPreRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
