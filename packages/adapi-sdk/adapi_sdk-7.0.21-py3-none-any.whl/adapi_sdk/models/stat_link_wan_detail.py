# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_link_lan_detail_interface import StatLinkLanDetailInterface  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatLinkWanDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'state': 'str',
        'interface': 'StatLinkLanDetailInterface',
        'health': 'str',
        'failure_reason': 'str',
        'upstream_bandwidth_mbps': 'int',
        'downstream_bandwidth_mbps': 'int',
        'connection_rate': 'StatStatisticInstant',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'general_throughput': 'StatStatisticInstant',
        'general_bandwidth_usage': 'StatStatisticInstant',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'state': 'state',
        'interface': 'interface',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'upstream_bandwidth_mbps': 'upstream_bandwidth_mbps',
        'downstream_bandwidth_mbps': 'downstream_bandwidth_mbps',
        'connection_rate': 'connection_rate',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'general_throughput': 'general_throughput',
        'general_bandwidth_usage': 'general_bandwidth_usage',
        'netns': 'netns'
    }

    def __init__(self, name=None, state=None, interface=None, health=None, failure_reason=None, upstream_bandwidth_mbps=None, downstream_bandwidth_mbps=None, connection_rate=None, upstream_throughput=None, downstream_throughput=None, general_throughput=None, general_bandwidth_usage=None, netns='nenns名称'):  # noqa: E501
        """StatLinkWanDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._state = None
        self._interface = None
        self._health = None
        self._failure_reason = None
        self._upstream_bandwidth_mbps = None
        self._downstream_bandwidth_mbps = None
        self._connection_rate = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._general_throughput = None
        self._general_bandwidth_usage = None
        self._netns = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if interface is not None:
            self.interface = interface
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if upstream_bandwidth_mbps is not None:
            self.upstream_bandwidth_mbps = upstream_bandwidth_mbps
        if downstream_bandwidth_mbps is not None:
            self.downstream_bandwidth_mbps = downstream_bandwidth_mbps
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if general_throughput is not None:
            self.general_throughput = general_throughput
        if general_bandwidth_usage is not None:
            self.general_bandwidth_usage = general_bandwidth_usage
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this StatLinkWanDetail.  # noqa: E501

        链路名称  # noqa: E501

        :return: The name of this StatLinkWanDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatLinkWanDetail.

        链路名称  # noqa: E501

        :param name: The name of this StatLinkWanDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this StatLinkWanDetail.  # noqa: E501

        链路启用/禁用状态  # noqa: E501

        :return: The state of this StatLinkWanDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatLinkWanDetail.

        链路启用/禁用状态  # noqa: E501

        :param state: The state of this StatLinkWanDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def interface(self):
        """Gets the interface of this StatLinkWanDetail.  # noqa: E501


        :return: The interface of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatLinkLanDetailInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this StatLinkWanDetail.


        :param interface: The interface of this StatLinkWanDetail.  # noqa: E501
        :type: StatLinkLanDetailInterface
        """

        self._interface = interface

    @property
    def health(self):
        """Gets the health of this StatLinkWanDetail.  # noqa: E501

        链路健康状态（normal-正常/busy-繁忙/failure-故障）  # noqa: E501

        :return: The health of this StatLinkWanDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatLinkWanDetail.

        链路健康状态（normal-正常/busy-繁忙/failure-故障）  # noqa: E501

        :param health: The health of this StatLinkWanDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE", "BUSY"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatLinkWanDetail.  # noqa: E501

        链路故障原因  # noqa: E501

        :return: The failure_reason of this StatLinkWanDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatLinkWanDetail.

        链路故障原因  # noqa: E501

        :param failure_reason: The failure_reason of this StatLinkWanDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def upstream_bandwidth_mbps(self):
        """Gets the upstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501

        上行带宽  # noqa: E501

        :return: The upstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501
        :rtype: int
        """
        return self._upstream_bandwidth_mbps

    @upstream_bandwidth_mbps.setter
    def upstream_bandwidth_mbps(self, upstream_bandwidth_mbps):
        """Sets the upstream_bandwidth_mbps of this StatLinkWanDetail.

        上行带宽  # noqa: E501

        :param upstream_bandwidth_mbps: The upstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501
        :type: int
        """

        self._upstream_bandwidth_mbps = upstream_bandwidth_mbps

    @property
    def downstream_bandwidth_mbps(self):
        """Gets the downstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501

        下行带宽  # noqa: E501

        :return: The downstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501
        :rtype: int
        """
        return self._downstream_bandwidth_mbps

    @downstream_bandwidth_mbps.setter
    def downstream_bandwidth_mbps(self, downstream_bandwidth_mbps):
        """Sets the downstream_bandwidth_mbps of this StatLinkWanDetail.

        下行带宽  # noqa: E501

        :param downstream_bandwidth_mbps: The downstream_bandwidth_mbps of this StatLinkWanDetail.  # noqa: E501
        :type: int
        """

        self._downstream_bandwidth_mbps = downstream_bandwidth_mbps

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatLinkWanDetail.  # noqa: E501

        访问次数实时统计  # noqa: E501

        :return: The connection_rate of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatLinkWanDetail.

        访问次数实时统计  # noqa: E501

        :param connection_rate: The connection_rate of this StatLinkWanDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatLinkWanDetail.  # noqa: E501

        上行流量实时统计  # noqa: E501

        :return: The upstream_throughput of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatLinkWanDetail.

        上行流量实时统计  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatLinkWanDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatLinkWanDetail.  # noqa: E501

        下行流量实时统计  # noqa: E501

        :return: The downstream_throughput of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatLinkWanDetail.

        下行流量实时统计  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatLinkWanDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatLinkWanDetail.  # noqa: E501

        总流量实时统计  # noqa: E501

        :return: The general_throughput of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatLinkWanDetail.

        总流量实时统计  # noqa: E501

        :param general_throughput: The general_throughput of this StatLinkWanDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    @property
    def general_bandwidth_usage(self):
        """Gets the general_bandwidth_usage of this StatLinkWanDetail.  # noqa: E501

        总带宽使用率  # noqa: E501

        :return: The general_bandwidth_usage of this StatLinkWanDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_bandwidth_usage

    @general_bandwidth_usage.setter
    def general_bandwidth_usage(self, general_bandwidth_usage):
        """Sets the general_bandwidth_usage of this StatLinkWanDetail.

        总带宽使用率  # noqa: E501

        :param general_bandwidth_usage: The general_bandwidth_usage of this StatLinkWanDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_bandwidth_usage = general_bandwidth_usage

    @property
    def netns(self):
        """Gets the netns of this StatLinkWanDetail.  # noqa: E501

        netns名称  # noqa: E501

        :return: The netns of this StatLinkWanDetail.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this StatLinkWanDetail.

        netns名称  # noqa: E501

        :param netns: The netns of this StatLinkWanDetail.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatLinkWanDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatLinkWanDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
