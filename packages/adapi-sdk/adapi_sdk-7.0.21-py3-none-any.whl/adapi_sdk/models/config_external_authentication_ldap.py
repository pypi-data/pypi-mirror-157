# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_external_authentication_ldap_ssl import ConfigExternalAuthenticationLdapSsl  # noqa: F401,E501


class ConfigExternalAuthenticationLdap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'port': 'int',
        'ssl': 'ConfigExternalAuthenticationLdapSsl',
        'directory_tree': 'str',
        'search_mode': 'str',
        'verify_login_template': 'str',
        'specific_dn': 'str',
        'specific_dn_password': 'str',
        'pk_specific_dn_password': 'str',
        'encrypted_specific_dn_password': 'str',
        'network': 'str'
    }

    attribute_map = {
        'host': 'host',
        'port': 'port',
        'ssl': 'ssl',
        'directory_tree': 'directory_tree',
        'search_mode': 'search_mode',
        'verify_login_template': 'verify_login_template',
        'specific_dn': 'specific_dn',
        'specific_dn_password': 'specific_dn_password',
        'pk_specific_dn_password': 'pk_specific_dn_password',
        'encrypted_specific_dn_password': 'encrypted_specific_dn_password',
        'network': 'network'
    }

    def __init__(self, host=None, port=None, ssl=None, directory_tree=None, search_mode='SEARCH-ANONYMOUS', verify_login_template=None, specific_dn=None, specific_dn_password=None, pk_specific_dn_password=None, encrypted_specific_dn_password=None, network='AUTO'):  # noqa: E501
        """ConfigExternalAuthenticationLdap - a model defined in Swagger"""  # noqa: E501

        self._host = None
        self._port = None
        self._ssl = None
        self._directory_tree = None
        self._search_mode = None
        self._verify_login_template = None
        self._specific_dn = None
        self._specific_dn_password = None
        self._pk_specific_dn_password = None
        self._encrypted_specific_dn_password = None
        self._network = None
        self.discriminator = None

        self.host = host
        if port is not None:
            self.port = port
        if ssl is not None:
            self.ssl = ssl
        self.directory_tree = directory_tree
        if search_mode is not None:
            self.search_mode = search_mode
        if verify_login_template is not None:
            self.verify_login_template = verify_login_template
        if specific_dn is not None:
            self.specific_dn = specific_dn
        if specific_dn_password is not None:
            self.specific_dn_password = specific_dn_password
        if pk_specific_dn_password is not None:
            self.pk_specific_dn_password = pk_specific_dn_password
        if encrypted_specific_dn_password is not None:
            self.encrypted_specific_dn_password = encrypted_specific_dn_password
        if network is not None:
            self.network = network

    @property
    def host(self):
        """Gets the host of this ConfigExternalAuthenticationLdap.  # noqa: E501

        主机地址  # noqa: E501

        :return: The host of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigExternalAuthenticationLdap.

        主机地址  # noqa: E501

        :param host: The host of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigExternalAuthenticationLdap.  # noqa: E501

        端口  # noqa: E501

        :return: The port of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigExternalAuthenticationLdap.

        端口  # noqa: E501

        :param port: The port of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def ssl(self):
        """Gets the ssl of this ConfigExternalAuthenticationLdap.  # noqa: E501


        :return: The ssl of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: ConfigExternalAuthenticationLdapSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ConfigExternalAuthenticationLdap.


        :param ssl: The ssl of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: ConfigExternalAuthenticationLdapSsl
        """

        self._ssl = ssl

    @property
    def directory_tree(self):
        """Gets the directory_tree of this ConfigExternalAuthenticationLdap.  # noqa: E501

        目录树  # noqa: E501

        :return: The directory_tree of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._directory_tree

    @directory_tree.setter
    def directory_tree(self, directory_tree):
        """Sets the directory_tree of this ConfigExternalAuthenticationLdap.

        目录树  # noqa: E501

        :param directory_tree: The directory_tree of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        if directory_tree is None:
            raise ValueError("Invalid value for `directory_tree`, must not be `None`")  # noqa: E501
        if directory_tree is not None and len(directory_tree) > 256:
            raise ValueError("Invalid value for `directory_tree`, length must be less than or equal to `256`")  # noqa: E501
        if directory_tree is not None and len(directory_tree) < 1:
            raise ValueError("Invalid value for `directory_tree`, length must be greater than or equal to `1`")  # noqa: E501

        self._directory_tree = directory_tree

    @property
    def search_mode(self):
        """Gets the search_mode of this ConfigExternalAuthenticationLdap.  # noqa: E501

        搜索方式  # noqa: E501

        :return: The search_mode of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this ConfigExternalAuthenticationLdap.

        搜索方式  # noqa: E501

        :param search_mode: The search_mode of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["SEARCH-ANONYMOUS", "SEARCH-SPECIFIC-DN", "VERIFY-LOGIN"]  # noqa: E501
        if search_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `search_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(search_mode, allowed_values)
            )

        self._search_mode = search_mode

    @property
    def verify_login_template(self):
        """Gets the verify_login_template of this ConfigExternalAuthenticationLdap.  # noqa: E501

        用户名扩展-登录账户  # noqa: E501

        :return: The verify_login_template of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._verify_login_template

    @verify_login_template.setter
    def verify_login_template(self, verify_login_template):
        """Sets the verify_login_template of this ConfigExternalAuthenticationLdap.

        用户名扩展-登录账户  # noqa: E501

        :param verify_login_template: The verify_login_template of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        if verify_login_template is not None and len(verify_login_template) > 256:
            raise ValueError("Invalid value for `verify_login_template`, length must be less than or equal to `256`")  # noqa: E501
        if verify_login_template is not None and len(verify_login_template) < 1:
            raise ValueError("Invalid value for `verify_login_template`, length must be greater than or equal to `1`")  # noqa: E501

        self._verify_login_template = verify_login_template

    @property
    def specific_dn(self):
        """Gets the specific_dn of this ConfigExternalAuthenticationLdap.  # noqa: E501

        域用户-绑定账户  # noqa: E501

        :return: The specific_dn of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._specific_dn

    @specific_dn.setter
    def specific_dn(self, specific_dn):
        """Sets the specific_dn of this ConfigExternalAuthenticationLdap.

        域用户-绑定账户  # noqa: E501

        :param specific_dn: The specific_dn of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        if specific_dn is not None and len(specific_dn) > 128:
            raise ValueError("Invalid value for `specific_dn`, length must be less than or equal to `128`")  # noqa: E501
        if specific_dn is not None and len(specific_dn) < 1:
            raise ValueError("Invalid value for `specific_dn`, length must be greater than or equal to `1`")  # noqa: E501

        self._specific_dn = specific_dn

    @property
    def specific_dn_password(self):
        """Gets the specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501

        域用户密码-绑定账户-更新密码  # noqa: E501

        :return: The specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._specific_dn_password

    @specific_dn_password.setter
    def specific_dn_password(self, specific_dn_password):
        """Sets the specific_dn_password of this ConfigExternalAuthenticationLdap.

        域用户密码-绑定账户-更新密码  # noqa: E501

        :param specific_dn_password: The specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        if specific_dn_password is not None and len(specific_dn_password) > 128:
            raise ValueError("Invalid value for `specific_dn_password`, length must be less than or equal to `128`")  # noqa: E501
        if specific_dn_password is not None and len(specific_dn_password) < 1:
            raise ValueError("Invalid value for `specific_dn_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._specific_dn_password = specific_dn_password

    @property
    def pk_specific_dn_password(self):
        """Gets the pk_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501

        域用户密码-绑定账户-更新密码  # noqa: E501

        :return: The pk_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._pk_specific_dn_password

    @pk_specific_dn_password.setter
    def pk_specific_dn_password(self, pk_specific_dn_password):
        """Sets the pk_specific_dn_password of this ConfigExternalAuthenticationLdap.

        域用户密码-绑定账户-更新密码  # noqa: E501

        :param pk_specific_dn_password: The pk_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """

        self._pk_specific_dn_password = pk_specific_dn_password

    @property
    def encrypted_specific_dn_password(self):
        """Gets the encrypted_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501

        域用户密码-绑定账户-加密密码  # noqa: E501

        :return: The encrypted_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_specific_dn_password

    @encrypted_specific_dn_password.setter
    def encrypted_specific_dn_password(self, encrypted_specific_dn_password):
        """Sets the encrypted_specific_dn_password of this ConfigExternalAuthenticationLdap.

        域用户密码-绑定账户-加密密码  # noqa: E501

        :param encrypted_specific_dn_password: The encrypted_specific_dn_password of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """

        self._encrypted_specific_dn_password = encrypted_specific_dn_password

    @property
    def network(self):
        """Gets the network of this ConfigExternalAuthenticationLdap.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigExternalAuthenticationLdap.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigExternalAuthenticationLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigExternalAuthenticationLdap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigExternalAuthenticationLdap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
