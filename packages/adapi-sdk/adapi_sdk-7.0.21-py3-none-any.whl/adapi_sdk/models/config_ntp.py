# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNtp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'ntp_preferred': 'str',
        'ntp_alternate': 'str',
        'interval': 'int',
        'network': 'str'
    }

    attribute_map = {
        'state': 'state',
        'ntp_preferred': 'ntp_preferred',
        'ntp_alternate': 'ntp_alternate',
        'interval': 'interval',
        'network': 'network'
    }

    def __init__(self, state='ENABLE', ntp_preferred='time.nist.gov', ntp_alternate='', interval=None, network='AUTO'):  # noqa: E501
        """ConfigNtp - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._ntp_preferred = None
        self._ntp_alternate = None
        self._interval = None
        self._network = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if ntp_preferred is not None:
            self.ntp_preferred = ntp_preferred
        if ntp_alternate is not None:
            self.ntp_alternate = ntp_alternate
        if interval is not None:
            self.interval = interval
        if network is not None:
            self.network = network

    @property
    def state(self):
        """Gets the state of this ConfigNtp.  # noqa: E501

        自动网络时间同步（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The state of this ConfigNtp.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigNtp.

        自动网络时间同步（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param state: The state of this ConfigNtp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ntp_preferred(self):
        """Gets the ntp_preferred of this ConfigNtp.  # noqa: E501

        时间服务器  # noqa: E501

        :return: The ntp_preferred of this ConfigNtp.  # noqa: E501
        :rtype: str
        """
        return self._ntp_preferred

    @ntp_preferred.setter
    def ntp_preferred(self, ntp_preferred):
        """Sets the ntp_preferred of this ConfigNtp.

        时间服务器  # noqa: E501

        :param ntp_preferred: The ntp_preferred of this ConfigNtp.  # noqa: E501
        :type: str
        """

        self._ntp_preferred = ntp_preferred

    @property
    def ntp_alternate(self):
        """Gets the ntp_alternate of this ConfigNtp.  # noqa: E501

        备份服务器  # noqa: E501

        :return: The ntp_alternate of this ConfigNtp.  # noqa: E501
        :rtype: str
        """
        return self._ntp_alternate

    @ntp_alternate.setter
    def ntp_alternate(self, ntp_alternate):
        """Sets the ntp_alternate of this ConfigNtp.

        备份服务器  # noqa: E501

        :param ntp_alternate: The ntp_alternate of this ConfigNtp.  # noqa: E501
        :type: str
        """

        self._ntp_alternate = ntp_alternate

    @property
    def interval(self):
        """Gets the interval of this ConfigNtp.  # noqa: E501

        同步间隔  # noqa: E501

        :return: The interval of this ConfigNtp.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigNtp.

        同步间隔  # noqa: E501

        :param interval: The interval of this ConfigNtp.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 604800:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `604800`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def network(self):
        """Gets the network of this ConfigNtp.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigNtp.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigNtp.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigNtp.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNtp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNtp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
