# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_response_policy_zones_record import ConfigResponsePolicyZonesRecord  # noqa: F401,E501


class ConfigResponsePolicyZones(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'record': 'list[ConfigResponsePolicyZonesRecord]',
        'rewrite_action': 'str',
        'cname_record': 'str'
    }

    attribute_map = {
        'name': 'name',
        'record': 'record',
        'rewrite_action': 'rewrite_action',
        'cname_record': 'cname_record'
    }

    def __init__(self, name=None, record=None, rewrite_action='', cname_record=None):  # noqa: E501
        """ConfigResponsePolicyZones - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._record = None
        self._rewrite_action = None
        self._cname_record = None
        self.discriminator = None

        self.name = name
        self.record = record
        if rewrite_action is not None:
            self.rewrite_action = rewrite_action
        if cname_record is not None:
            self.cname_record = cname_record

    @property
    def name(self):
        """Gets the name of this ConfigResponsePolicyZones.  # noqa: E501

        RPZ防火墙的域，校验为域名格式  # noqa: E501

        :return: The name of this ConfigResponsePolicyZones.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigResponsePolicyZones.

        RPZ防火墙的域，校验为域名格式  # noqa: E501

        :param name: The name of this ConfigResponsePolicyZones.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def record(self):
        """Gets the record of this ConfigResponsePolicyZones.  # noqa: E501

        RPZ防火墙记录内容  # noqa: E501

        :return: The record of this ConfigResponsePolicyZones.  # noqa: E501
        :rtype: list[ConfigResponsePolicyZonesRecord]
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this ConfigResponsePolicyZones.

        RPZ防火墙记录内容  # noqa: E501

        :param record: The record of this ConfigResponsePolicyZones.  # noqa: E501
        :type: list[ConfigResponsePolicyZonesRecord]
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")  # noqa: E501

        self._record = record

    @property
    def rewrite_action(self):
        """Gets the rewrite_action of this ConfigResponsePolicyZones.  # noqa: E501

        改写动作  # noqa: E501

        :return: The rewrite_action of this ConfigResponsePolicyZones.  # noqa: E501
        :rtype: str
        """
        return self._rewrite_action

    @rewrite_action.setter
    def rewrite_action(self, rewrite_action):
        """Sets the rewrite_action of this ConfigResponsePolicyZones.

        改写动作  # noqa: E501

        :param rewrite_action: The rewrite_action of this ConfigResponsePolicyZones.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "NXDOMAIN", "NODATA", "DROP", "CNAME"]  # noqa: E501
        if rewrite_action not in allowed_values:
            raise ValueError(
                "Invalid value for `rewrite_action` ({0}), must be one of {1}"  # noqa: E501
                .format(rewrite_action, allowed_values)
            )

        self._rewrite_action = rewrite_action

    @property
    def cname_record(self):
        """Gets the cname_record of this ConfigResponsePolicyZones.  # noqa: E501

        CNAME记录，仅当改写动作选择CNAME时显示  # noqa: E501

        :return: The cname_record of this ConfigResponsePolicyZones.  # noqa: E501
        :rtype: str
        """
        return self._cname_record

    @cname_record.setter
    def cname_record(self, cname_record):
        """Sets the cname_record of this ConfigResponsePolicyZones.

        CNAME记录，仅当改写动作选择CNAME时显示  # noqa: E501

        :param cname_record: The cname_record of this ConfigResponsePolicyZones.  # noqa: E501
        :type: str
        """

        self._cname_record = cname_record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigResponsePolicyZones, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigResponsePolicyZones):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
