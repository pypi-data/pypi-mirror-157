# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugUrlAnalysisParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'virtual_service': 'str',
        'pool': 'str',
        'source_address': 'str',
        'timeout': 'int',
        'count': 'int',
        'exclude_urls': 'list[str]'
    }

    attribute_map = {
        'virtual_service': 'virtual_service',
        'pool': 'pool',
        'source_address': 'source_address',
        'timeout': 'timeout',
        'count': 'count',
        'exclude_urls': 'exclude_urls'
    }

    def __init__(self, virtual_service=None, pool=None, source_address=None, timeout=None, count=None, exclude_urls=None):  # noqa: E501
        """DebugUrlAnalysisParameter - a model defined in Swagger"""  # noqa: E501

        self._virtual_service = None
        self._pool = None
        self._source_address = None
        self._timeout = None
        self._count = None
        self._exclude_urls = None
        self.discriminator = None

        self.virtual_service = virtual_service
        self.pool = pool
        self.source_address = source_address
        if timeout is not None:
            self.timeout = timeout
        if count is not None:
            self.count = count
        if exclude_urls is not None:
            self.exclude_urls = exclude_urls

    @property
    def virtual_service(self):
        """Gets the virtual_service of this DebugUrlAnalysisParameter.  # noqa: E501

        虚拟服务名  # noqa: E501

        :return: The virtual_service of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this DebugUrlAnalysisParameter.

        虚拟服务名  # noqa: E501

        :param virtual_service: The virtual_service of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: str
        """
        if virtual_service is None:
            raise ValueError("Invalid value for `virtual_service`, must not be `None`")  # noqa: E501

        self._virtual_service = virtual_service

    @property
    def pool(self):
        """Gets the pool of this DebugUrlAnalysisParameter.  # noqa: E501

        节点池  # noqa: E501

        :return: The pool of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this DebugUrlAnalysisParameter.

        节点池  # noqa: E501

        :param pool: The pool of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: str
        """
        if pool is None:
            raise ValueError("Invalid value for `pool`, must not be `None`")  # noqa: E501

        self._pool = pool

    @property
    def source_address(self):
        """Gets the source_address of this DebugUrlAnalysisParameter.  # noqa: E501

        源地址  # noqa: E501

        :return: The source_address of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this DebugUrlAnalysisParameter.

        源地址  # noqa: E501

        :param source_address: The source_address of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: str
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def timeout(self):
        """Gets the timeout of this DebugUrlAnalysisParameter.  # noqa: E501

        URL统计时间: 30-600  # noqa: E501

        :return: The timeout of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this DebugUrlAnalysisParameter.

        URL统计时间: 30-600  # noqa: E501

        :param timeout: The timeout of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 600:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `600`")  # noqa: E501
        if timeout is not None and timeout < 30:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `30`")  # noqa: E501

        self._timeout = timeout

    @property
    def count(self):
        """Gets the count of this DebugUrlAnalysisParameter.  # noqa: E501

        URL统计数量: 1-255  # noqa: E501

        :return: The count of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DebugUrlAnalysisParameter.

        URL统计数量: 1-255  # noqa: E501

        :param count: The count of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: int
        """
        if count is not None and count > 255:  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `255`")  # noqa: E501
        if count is not None and count < 1:  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._count = count

    @property
    def exclude_urls(self):
        """Gets the exclude_urls of this DebugUrlAnalysisParameter.  # noqa: E501

        排除的url  # noqa: E501

        :return: The exclude_urls of this DebugUrlAnalysisParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_urls

    @exclude_urls.setter
    def exclude_urls(self, exclude_urls):
        """Sets the exclude_urls of this DebugUrlAnalysisParameter.

        排除的url  # noqa: E501

        :param exclude_urls: The exclude_urls of this DebugUrlAnalysisParameter.  # noqa: E501
        :type: list[str]
        """

        self._exclude_urls = exclude_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugUrlAnalysisParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugUrlAnalysisParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
