# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_log_syslog import ConfigHttpLogSyslog  # noqa: F401,E501


class ConfigHttpLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'virtual_service': 'list[str]',
        'log_template': 'str',
        'syslog': 'ConfigHttpLogSyslog'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'virtual_service': 'virtual_service',
        'log_template': 'log_template',
        'syslog': 'syslog'
    }

    def __init__(self, name=None, description=None, virtual_service=None, log_template='[${time}][${client_ip}:${client_port}][${method}][${uri}][${user_agent}]', syslog=None):  # noqa: E501
        """ConfigHttpLog - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._virtual_service = None
        self._log_template = None
        self._syslog = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.virtual_service = virtual_service
        self.log_template = log_template
        if syslog is not None:
            self.syslog = syslog

    @property
    def name(self):
        """Gets the name of this ConfigHttpLog.  # noqa: E501

        必选参数；指定HTTP日志的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigHttpLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigHttpLog.

        必选参数；指定HTTP日志的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigHttpLog.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigHttpLog.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigHttpLog.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigHttpLog.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigHttpLog.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def virtual_service(self):
        """Gets the virtual_service of this ConfigHttpLog.  # noqa: E501

        必选参数；指定需要记录HTTP日志的虚拟服务。  # noqa: E501

        :return: The virtual_service of this ConfigHttpLog.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this ConfigHttpLog.

        必选参数；指定需要记录HTTP日志的虚拟服务。  # noqa: E501

        :param virtual_service: The virtual_service of this ConfigHttpLog.  # noqa: E501
        :type: list[str]
        """
        if virtual_service is None:
            raise ValueError("Invalid value for `virtual_service`, must not be `None`")  # noqa: E501

        self._virtual_service = virtual_service

    @property
    def log_template(self):
        """Gets the log_template of this ConfigHttpLog.  # noqa: E501

        自定义日志格式| ${client_ip}:客户端IP地址 ${client_port}:客户端端口号 ${vip}:虚拟服务IP地址 ${vport}:虚拟服务端口号 ${uri}:请求方向URI ${host}:请求方向HOST ${rs_ip}:服务器端IP地址 ${rs_port}:服务器端端口号 ${rs_val}:节点关联变量 ${user_agent}:浏览器版本信息 ${method}:请求方法 ${time}:请求时间 ${cookie.XXX}:请求方向的cookie ${X509.version}:证书的版本 ${X509.serial_num}:证书的序列号 ${X509.signature_algorithm}:证书的签名算法 ${X509.issuer}:证书的签发者（顺序为RFC2253标准） ${X509.not_valid_before}:证书的有效时间（在此时间之前无效） ${X509.not_valid_after}:证书的有效时间（在此时间之后无效） ${X509.subject}:证书的主题（顺序为RFC2253标准） ${X509.subject_public_key_type}:证书的主题的公钥类型 ${X509.subject_public_key}:证书的主题的公钥 ${X509.subject_public_key_bits}:证书的主题的公钥的长度 ${X509.hash}:客户端证书的MD5散列 ${X509.whole}:实际的客户端证书本身（PEM格式） ${X509.DN_CN}:证书名称 ${X509.DN_E}:电子邮件 ${X509.DN_O}:公司/机构 ${X509.DN_OU}:部门 ${X509.DN_C}:国家 ${X509.DN_S}:州/省份 ${X509.DN_L}:城市 ${X509.errno}:证书认证错误码 ${SSL.version}:SSL/TLS协议版本 ${SSL.cipher_id}:SSL/TLS协议的协商算法id ${SSL.cipher_name}:SSL/TLS协议的协商算法名称 ${SSL.session_id}:SSL/TLS协议的会话ID ${SSL.tlsext_server_name}:TLS协议的server name拓展字段  # noqa: E501

        :return: The log_template of this ConfigHttpLog.  # noqa: E501
        :rtype: str
        """
        return self._log_template

    @log_template.setter
    def log_template(self, log_template):
        """Sets the log_template of this ConfigHttpLog.

        自定义日志格式| ${client_ip}:客户端IP地址 ${client_port}:客户端端口号 ${vip}:虚拟服务IP地址 ${vport}:虚拟服务端口号 ${uri}:请求方向URI ${host}:请求方向HOST ${rs_ip}:服务器端IP地址 ${rs_port}:服务器端端口号 ${rs_val}:节点关联变量 ${user_agent}:浏览器版本信息 ${method}:请求方法 ${time}:请求时间 ${cookie.XXX}:请求方向的cookie ${X509.version}:证书的版本 ${X509.serial_num}:证书的序列号 ${X509.signature_algorithm}:证书的签名算法 ${X509.issuer}:证书的签发者（顺序为RFC2253标准） ${X509.not_valid_before}:证书的有效时间（在此时间之前无效） ${X509.not_valid_after}:证书的有效时间（在此时间之后无效） ${X509.subject}:证书的主题（顺序为RFC2253标准） ${X509.subject_public_key_type}:证书的主题的公钥类型 ${X509.subject_public_key}:证书的主题的公钥 ${X509.subject_public_key_bits}:证书的主题的公钥的长度 ${X509.hash}:客户端证书的MD5散列 ${X509.whole}:实际的客户端证书本身（PEM格式） ${X509.DN_CN}:证书名称 ${X509.DN_E}:电子邮件 ${X509.DN_O}:公司/机构 ${X509.DN_OU}:部门 ${X509.DN_C}:国家 ${X509.DN_S}:州/省份 ${X509.DN_L}:城市 ${X509.errno}:证书认证错误码 ${SSL.version}:SSL/TLS协议版本 ${SSL.cipher_id}:SSL/TLS协议的协商算法id ${SSL.cipher_name}:SSL/TLS协议的协商算法名称 ${SSL.session_id}:SSL/TLS协议的会话ID ${SSL.tlsext_server_name}:TLS协议的server name拓展字段  # noqa: E501

        :param log_template: The log_template of this ConfigHttpLog.  # noqa: E501
        :type: str
        """
        if log_template is None:
            raise ValueError("Invalid value for `log_template`, must not be `None`")  # noqa: E501
        if log_template is not None and len(log_template) > 255:
            raise ValueError("Invalid value for `log_template`, length must be less than or equal to `255`")  # noqa: E501
        if log_template is not None and len(log_template) < 1:
            raise ValueError("Invalid value for `log_template`, length must be greater than or equal to `1`")  # noqa: E501

        self._log_template = log_template

    @property
    def syslog(self):
        """Gets the syslog of this ConfigHttpLog.  # noqa: E501


        :return: The syslog of this ConfigHttpLog.  # noqa: E501
        :rtype: ConfigHttpLogSyslog
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this ConfigHttpLog.


        :param syslog: The syslog of this ConfigHttpLog.  # noqa: E501
        :type: ConfigHttpLogSyslog
        """

        self._syslog = syslog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
