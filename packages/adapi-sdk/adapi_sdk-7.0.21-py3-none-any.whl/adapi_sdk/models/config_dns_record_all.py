# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_record_all_a_records import ConfigDnsRecordAllARecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_aaaa_records import ConfigDnsRecordAllAaaaRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_caa_records import ConfigDnsRecordAllCaaRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_ds_records import ConfigDnsRecordAllDsRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_hinfo_records import ConfigDnsRecordAllHinfoRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_mx_records import ConfigDnsRecordAllMxRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_naptr_records import ConfigDnsRecordAllNaptrRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_ns_records import ConfigDnsRecordAllNsRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_ptr_records import ConfigDnsRecordAllPtrRecords  # noqa: F401,E501
from adapi_sdk.models.config_dns_record_all_srv_records import ConfigDnsRecordAllSrvRecords  # noqa: F401,E501


class ConfigDnsRecordAll(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'domain': 'str',
        'zone': 'str',
        'generate_ptr_record': 'str',
        'ttl': 'int',
        'type': 'str',
        'a_records': 'list[ConfigDnsRecordAllARecords]',
        'cname_records': 'str',
        'mx_records': 'list[ConfigDnsRecordAllMxRecords]',
        'ns_records': 'list[ConfigDnsRecordAllNsRecords]',
        'ptr_records': 'list[ConfigDnsRecordAllPtrRecords]',
        'srv_records': 'list[ConfigDnsRecordAllSrvRecords]',
        'txt_records': 'list[str]',
        'aaaa_records': 'list[ConfigDnsRecordAllAaaaRecords]',
        'ds_records': 'list[ConfigDnsRecordAllDsRecords]',
        'naptr_records': 'list[ConfigDnsRecordAllNaptrRecords]',
        'caa_records': 'list[ConfigDnsRecordAllCaaRecords]',
        'hinfo_records': 'list[ConfigDnsRecordAllHinfoRecords]',
        'dname_records': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'domain': 'domain',
        'zone': 'zone',
        'generate_ptr_record': 'generate_ptr_record',
        'ttl': 'ttl',
        'type': 'type',
        'a_records': 'a_records',
        'cname_records': 'cname_records',
        'mx_records': 'mx_records',
        'ns_records': 'ns_records',
        'ptr_records': 'ptr_records',
        'srv_records': 'srv_records',
        'txt_records': 'txt_records',
        'aaaa_records': 'aaaa_records',
        'ds_records': 'ds_records',
        'naptr_records': 'naptr_records',
        'caa_records': 'caa_records',
        'hinfo_records': 'hinfo_records',
        'dname_records': 'dname_records'
    }

    def __init__(self, name=None, description=None, state=None, domain=None, zone=None, generate_ptr_record='DISABLE', ttl=None, type=None, a_records=None, cname_records=None, mx_records=None, ns_records=None, ptr_records=None, srv_records=None, txt_records=None, aaaa_records=None, ds_records=None, naptr_records=None, caa_records=None, hinfo_records=None, dname_records=None):  # noqa: E501
        """ConfigDnsRecordAll - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._domain = None
        self._zone = None
        self._generate_ptr_record = None
        self._ttl = None
        self._type = None
        self._a_records = None
        self._cname_records = None
        self._mx_records = None
        self._ns_records = None
        self._ptr_records = None
        self._srv_records = None
        self._txt_records = None
        self._aaaa_records = None
        self._ds_records = None
        self._naptr_records = None
        self._caa_records = None
        self._hinfo_records = None
        self._dname_records = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        self.domain = domain
        self.zone = zone
        if generate_ptr_record is not None:
            self.generate_ptr_record = generate_ptr_record
        if ttl is not None:
            self.ttl = ttl
        if type is not None:
            self.type = type
        if a_records is not None:
            self.a_records = a_records
        if cname_records is not None:
            self.cname_records = cname_records
        if mx_records is not None:
            self.mx_records = mx_records
        if ns_records is not None:
            self.ns_records = ns_records
        if ptr_records is not None:
            self.ptr_records = ptr_records
        if srv_records is not None:
            self.srv_records = srv_records
        if txt_records is not None:
            self.txt_records = txt_records
        if aaaa_records is not None:
            self.aaaa_records = aaaa_records
        if ds_records is not None:
            self.ds_records = ds_records
        if naptr_records is not None:
            self.naptr_records = naptr_records
        if caa_records is not None:
            self.caa_records = caa_records
        if hinfo_records is not None:
            self.hinfo_records = hinfo_records
        if dname_records is not None:
            self.dname_records = dname_records

    @property
    def name(self):
        """Gets the name of this ConfigDnsRecordAll.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnsRecordAll.

        名称  # noqa: E501

        :param name: The name of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnsRecordAll.  # noqa: E501


        :return: The description of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnsRecordAll.


        :param description: The description of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigDnsRecordAll.  # noqa: E501


        :return: The state of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDnsRecordAll.


        :param state: The state of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def domain(self):
        """Gets the domain of this ConfigDnsRecordAll.  # noqa: E501

        域名，按域名格式校验。  # noqa: E501

        :return: The domain of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigDnsRecordAll.

        域名，按域名格式校验。  # noqa: E501

        :param domain: The domain of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def zone(self):
        """Gets the zone of this ConfigDnsRecordAll.  # noqa: E501

        指定该DNS记录所属域  # noqa: E501

        :return: The zone of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ConfigDnsRecordAll.

        指定该DNS记录所属域  # noqa: E501

        :param zone: The zone of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    @property
    def generate_ptr_record(self):
        """Gets the generate_ptr_record of this ConfigDnsRecordAll.  # noqa: E501

        生成PTR记录  # noqa: E501

        :return: The generate_ptr_record of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._generate_ptr_record

    @generate_ptr_record.setter
    def generate_ptr_record(self, generate_ptr_record):
        """Sets the generate_ptr_record of this ConfigDnsRecordAll.

        生成PTR记录  # noqa: E501

        :param generate_ptr_record: The generate_ptr_record of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if generate_ptr_record not in allowed_values:
            raise ValueError(
                "Invalid value for `generate_ptr_record` ({0}), must be one of {1}"  # noqa: E501
                .format(generate_ptr_record, allowed_values)
            )

        self._generate_ptr_record = generate_ptr_record

    @property
    def ttl(self):
        """Gets the ttl of this ConfigDnsRecordAll.  # noqa: E501

        所有DNS记录的TTL取值范围均为[0, 2147483647]，单位秒  # noqa: E501

        :return: The ttl of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigDnsRecordAll.

        所有DNS记录的TTL取值范围均为[0, 2147483647]，单位秒  # noqa: E501

        :param ttl: The ttl of this ConfigDnsRecordAll.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this ConfigDnsRecordAll.  # noqa: E501

        所有DNS记录类型（SOA记录可在DNS记录TAB中查看/编辑，但不能在DNS记录中创建，而是在新建域时创建）  # noqa: E501

        :return: The type of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigDnsRecordAll.

        所有DNS记录类型（SOA记录可在DNS记录TAB中查看/编辑，但不能在DNS记录中创建，而是在新建域时创建）  # noqa: E501

        :param type: The type of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "CNAME", "MX", "NS", "PTR", "SRV", "TXT", "AAAA", "DS", "NAPTR", "CAA", "HINFO", "DNAME", "SOA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def a_records(self):
        """Gets the a_records of this ConfigDnsRecordAll.  # noqa: E501

        A记录，至少配置1条，最多配置10条  # noqa: E501

        :return: The a_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllARecords]
        """
        return self._a_records

    @a_records.setter
    def a_records(self, a_records):
        """Sets the a_records of this ConfigDnsRecordAll.

        A记录，至少配置1条，最多配置10条  # noqa: E501

        :param a_records: The a_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllARecords]
        """

        self._a_records = a_records

    @property
    def cname_records(self):
        """Gets the cname_records of this ConfigDnsRecordAll.  # noqa: E501

        别名记录，校验格式仅为域名。必须且只能配置1条  # noqa: E501

        :return: The cname_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._cname_records

    @cname_records.setter
    def cname_records(self, cname_records):
        """Sets the cname_records of this ConfigDnsRecordAll.

        别名记录，校验格式仅为域名。必须且只能配置1条  # noqa: E501

        :param cname_records: The cname_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """

        self._cname_records = cname_records

    @property
    def mx_records(self):
        """Gets the mx_records of this ConfigDnsRecordAll.  # noqa: E501

        MX记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The mx_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllMxRecords]
        """
        return self._mx_records

    @mx_records.setter
    def mx_records(self, mx_records):
        """Sets the mx_records of this ConfigDnsRecordAll.

        MX记录，至少配置1条，最多配置7条  # noqa: E501

        :param mx_records: The mx_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllMxRecords]
        """

        self._mx_records = mx_records

    @property
    def ns_records(self):
        """Gets the ns_records of this ConfigDnsRecordAll.  # noqa: E501

        NS记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The ns_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllNsRecords]
        """
        return self._ns_records

    @ns_records.setter
    def ns_records(self, ns_records):
        """Sets the ns_records of this ConfigDnsRecordAll.

        NS记录，至少配置1条，最多配置7条  # noqa: E501

        :param ns_records: The ns_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllNsRecords]
        """

        self._ns_records = ns_records

    @property
    def ptr_records(self):
        """Gets the ptr_records of this ConfigDnsRecordAll.  # noqa: E501


        :return: The ptr_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllPtrRecords]
        """
        return self._ptr_records

    @ptr_records.setter
    def ptr_records(self, ptr_records):
        """Sets the ptr_records of this ConfigDnsRecordAll.


        :param ptr_records: The ptr_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllPtrRecords]
        """

        self._ptr_records = ptr_records

    @property
    def srv_records(self):
        """Gets the srv_records of this ConfigDnsRecordAll.  # noqa: E501

        SRV记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The srv_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllSrvRecords]
        """
        return self._srv_records

    @srv_records.setter
    def srv_records(self, srv_records):
        """Sets the srv_records of this ConfigDnsRecordAll.

        SRV记录，至少配置1条，最多配置7条  # noqa: E501

        :param srv_records: The srv_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllSrvRecords]
        """

        self._srv_records = srv_records

    @property
    def txt_records(self):
        """Gets the txt_records of this ConfigDnsRecordAll.  # noqa: E501

        TXT记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The txt_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[str]
        """
        return self._txt_records

    @txt_records.setter
    def txt_records(self, txt_records):
        """Sets the txt_records of this ConfigDnsRecordAll.

        TXT记录，至少配置1条，最多配置7条  # noqa: E501

        :param txt_records: The txt_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[str]
        """

        self._txt_records = txt_records

    @property
    def aaaa_records(self):
        """Gets the aaaa_records of this ConfigDnsRecordAll.  # noqa: E501

        AAAA记录，至少配置1条，最多配置10条  # noqa: E501

        :return: The aaaa_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllAaaaRecords]
        """
        return self._aaaa_records

    @aaaa_records.setter
    def aaaa_records(self, aaaa_records):
        """Sets the aaaa_records of this ConfigDnsRecordAll.

        AAAA记录，至少配置1条，最多配置10条  # noqa: E501

        :param aaaa_records: The aaaa_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllAaaaRecords]
        """

        self._aaaa_records = aaaa_records

    @property
    def ds_records(self):
        """Gets the ds_records of this ConfigDnsRecordAll.  # noqa: E501

        DS记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The ds_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllDsRecords]
        """
        return self._ds_records

    @ds_records.setter
    def ds_records(self, ds_records):
        """Sets the ds_records of this ConfigDnsRecordAll.

        DS记录，至少配置1条，最多配置7条  # noqa: E501

        :param ds_records: The ds_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllDsRecords]
        """

        self._ds_records = ds_records

    @property
    def naptr_records(self):
        """Gets the naptr_records of this ConfigDnsRecordAll.  # noqa: E501

        NAPTR记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The naptr_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllNaptrRecords]
        """
        return self._naptr_records

    @naptr_records.setter
    def naptr_records(self, naptr_records):
        """Sets the naptr_records of this ConfigDnsRecordAll.

        NAPTR记录，至少配置1条，最多配置7条  # noqa: E501

        :param naptr_records: The naptr_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllNaptrRecords]
        """

        self._naptr_records = naptr_records

    @property
    def caa_records(self):
        """Gets the caa_records of this ConfigDnsRecordAll.  # noqa: E501

        CAA记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The caa_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllCaaRecords]
        """
        return self._caa_records

    @caa_records.setter
    def caa_records(self, caa_records):
        """Sets the caa_records of this ConfigDnsRecordAll.

        CAA记录，至少配置1条，最多配置7条  # noqa: E501

        :param caa_records: The caa_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllCaaRecords]
        """

        self._caa_records = caa_records

    @property
    def hinfo_records(self):
        """Gets the hinfo_records of this ConfigDnsRecordAll.  # noqa: E501

        HINFO记录，至少配置1条，最多配置7条  # noqa: E501

        :return: The hinfo_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: list[ConfigDnsRecordAllHinfoRecords]
        """
        return self._hinfo_records

    @hinfo_records.setter
    def hinfo_records(self, hinfo_records):
        """Sets the hinfo_records of this ConfigDnsRecordAll.

        HINFO记录，至少配置1条，最多配置7条  # noqa: E501

        :param hinfo_records: The hinfo_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: list[ConfigDnsRecordAllHinfoRecords]
        """

        self._hinfo_records = hinfo_records

    @property
    def dname_records(self):
        """Gets the dname_records of this ConfigDnsRecordAll.  # noqa: E501

        dname记录，校验格式为域名或IPv4。必须且只能配置1条  # noqa: E501

        :return: The dname_records of this ConfigDnsRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._dname_records

    @dname_records.setter
    def dname_records(self, dname_records):
        """Sets the dname_records of this ConfigDnsRecordAll.

        dname记录，校验格式为域名或IPv4。必须且只能配置1条  # noqa: E501

        :param dname_records: The dname_records of this ConfigDnsRecordAll.  # noqa: E501
        :type: str
        """

        self._dname_records = dname_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsRecordAll, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsRecordAll):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
