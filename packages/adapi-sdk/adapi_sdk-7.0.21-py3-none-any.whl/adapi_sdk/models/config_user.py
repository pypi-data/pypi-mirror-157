# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_user_certificate_authentication import ConfigUserCertificateAuthentication  # noqa: F401,E501
from adapi_sdk.models.config_user_permit_ctl import ConfigUserPermitCtl  # noqa: F401,E501


class ConfigUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'role': 'str',
        'permit_ctl': 'list[ConfigUserPermitCtl]',
        'authentication': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'pk_password': 'str',
        'default': 'str',
        'certificate_authentication': 'ConfigUserCertificateAuthentication',
        'expiry_date': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'role': 'role',
        'permit_ctl': 'permit_ctl',
        'authentication': 'authentication',
        'password': 'password',
        'encrypted_password': 'encrypted_password',
        'pk_password': 'pk_password',
        'default': 'default',
        'certificate_authentication': 'certificate_authentication',
        'expiry_date': 'expiry_date'
    }

    def __init__(self, name=None, description=None, state='ENABLE', role='guest', permit_ctl=None, authentication='LOCAL-PASSWORD', password=None, encrypted_password=None, pk_password=None, default='NON-DEFAULT', certificate_authentication=None, expiry_date=''):  # noqa: E501
        """ConfigUser - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._role = None
        self._permit_ctl = None
        self._authentication = None
        self._password = None
        self._encrypted_password = None
        self._pk_password = None
        self._default = None
        self._certificate_authentication = None
        self._expiry_date = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if role is not None:
            self.role = role
        if permit_ctl is not None:
            self.permit_ctl = permit_ctl
        if authentication is not None:
            self.authentication = authentication
        if password is not None:
            self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if pk_password is not None:
            self.pk_password = pk_password
        if default is not None:
            self.default = default
        if certificate_authentication is not None:
            self.certificate_authentication = certificate_authentication
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def name(self):
        """Gets the name of this ConfigUser.  # noqa: E501

        用户名只能是英文字母，数字和下划线组合，长度为1～63个字符  # noqa: E501

        :return: The name of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigUser.

        用户名只能是英文字母，数字和下划线组合，长度为1～63个字符  # noqa: E501

        :param name: The name of this ConfigUser.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigUser.  # noqa: E501

        附加描述信息  # noqa: E501

        :return: The description of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigUser.

        附加描述信息  # noqa: E501

        :param description: The description of this ConfigUser.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigUser.  # noqa: E501

        启禁用  # noqa: E501

        :return: The state of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigUser.

        启禁用  # noqa: E501

        :param state: The state of this ConfigUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def role(self):
        """Gets the role of this ConfigUser.  # noqa: E501

        角色类型  # noqa: E501

        :return: The role of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ConfigUser.

        角色类型  # noqa: E501

        :param role: The role of this ConfigUser.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def permit_ctl(self):
        """Gets the permit_ctl of this ConfigUser.  # noqa: E501

        用户角色引用的权限  # noqa: E501

        :return: The permit_ctl of this ConfigUser.  # noqa: E501
        :rtype: list[ConfigUserPermitCtl]
        """
        return self._permit_ctl

    @permit_ctl.setter
    def permit_ctl(self, permit_ctl):
        """Sets the permit_ctl of this ConfigUser.

        用户角色引用的权限  # noqa: E501

        :param permit_ctl: The permit_ctl of this ConfigUser.  # noqa: E501
        :type: list[ConfigUserPermitCtl]
        """

        self._permit_ctl = permit_ctl

    @property
    def authentication(self):
        """Gets the authentication of this ConfigUser.  # noqa: E501

        登录认证方式  # noqa: E501

        :return: The authentication of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ConfigUser.

        登录认证方式  # noqa: E501

        :param authentication: The authentication of this ConfigUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL-PASSWORD", "REMOTE-AUTHENTICATION"]  # noqa: E501
        if authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication, allowed_values)
            )

        self._authentication = authentication

    @property
    def password(self):
        """Gets the password of this ConfigUser.  # noqa: E501

        密码，长度限制为8-64个字符  # noqa: E501

        :return: The password of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigUser.

        密码，长度限制为8-64个字符  # noqa: E501

        :param password: The password of this ConfigUser.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 64:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigUser.  # noqa: E501

        加密密码  # noqa: E501

        :return: The encrypted_password of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigUser.

        加密密码  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigUser.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigUser.  # noqa: E501

        密码，长度限制为8-64个字符  # noqa: E501

        :return: The pk_password of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigUser.

        密码，长度限制为8-64个字符  # noqa: E501

        :param pk_password: The pk_password of this ConfigUser.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def default(self):
        """Gets the default of this ConfigUser.  # noqa: E501

        只读参数；是否为默认配置  # noqa: E501

        :return: The default of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ConfigUser.

        只读参数；是否为默认配置  # noqa: E501

        :param default: The default of this ConfigUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["NON-DEFAULT", "READONLY", "MODIFIABLE"]  # noqa: E501
        if default not in allowed_values:
            raise ValueError(
                "Invalid value for `default` ({0}), must be one of {1}"  # noqa: E501
                .format(default, allowed_values)
            )

        self._default = default

    @property
    def certificate_authentication(self):
        """Gets the certificate_authentication of this ConfigUser.  # noqa: E501


        :return: The certificate_authentication of this ConfigUser.  # noqa: E501
        :rtype: ConfigUserCertificateAuthentication
        """
        return self._certificate_authentication

    @certificate_authentication.setter
    def certificate_authentication(self, certificate_authentication):
        """Sets the certificate_authentication of this ConfigUser.


        :param certificate_authentication: The certificate_authentication of this ConfigUser.  # noqa: E501
        :type: ConfigUserCertificateAuthentication
        """

        self._certificate_authentication = certificate_authentication

    @property
    def expiry_date(self):
        """Gets the expiry_date of this ConfigUser.  # noqa: E501

        用户到期时间  # noqa: E501

        :return: The expiry_date of this ConfigUser.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this ConfigUser.

        用户到期时间  # noqa: E501

        :param expiry_date: The expiry_date of this ConfigUser.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
