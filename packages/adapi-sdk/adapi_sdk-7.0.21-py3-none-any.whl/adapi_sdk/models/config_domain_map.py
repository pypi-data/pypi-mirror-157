# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_domain_map_topologys import ConfigDomainMapTopologys  # noqa: F401,E501
from adapi_sdk.models.config_domain_map_vip_pools import ConfigDomainMapVipPools  # noqa: F401,E501


class ConfigDomainMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'type': 'str',
        'domains': 'list[str]',
        'method': 'str',
        'edns_client_subnet': 'str',
        'persist': 'int',
        'ttl': 'int',
        'vip_pools': 'list[ConfigDomainMapVipPools]',
        'topologys': 'list[ConfigDomainMapTopologys]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'type': 'type',
        'domains': 'domains',
        'method': 'method',
        'edns_client_subnet': 'edns_client_subnet',
        'persist': 'persist',
        'ttl': 'ttl',
        'vip_pools': 'vip_pools',
        'topologys': 'topologys'
    }

    def __init__(self, name=None, description=None, state='ENABLE', type='IPV4', domains=None, method='TOPOLOGY', edns_client_subnet='DISABLE', persist=None, ttl=None, vip_pools=None, topologys=None):  # noqa: E501
        """ConfigDomainMap - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._type = None
        self._domains = None
        self._method = None
        self._edns_client_subnet = None
        self._persist = None
        self._ttl = None
        self._vip_pools = None
        self._topologys = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        self.domains = domains
        if method is not None:
            self.method = method
        if edns_client_subnet is not None:
            self.edns_client_subnet = edns_client_subnet
        if persist is not None:
            self.persist = persist
        if ttl is not None:
            self.ttl = ttl
        self.vip_pools = vip_pools
        if topologys is not None:
            self.topologys = topologys

    @property
    def name(self):
        """Gets the name of this ConfigDomainMap.  # noqa: E501

        域名映射名称，不冲突  # noqa: E501

        :return: The name of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDomainMap.

        域名映射名称，不冲突  # noqa: E501

        :param name: The name of this ConfigDomainMap.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDomainMap.  # noqa: E501

        域名映射描述信息  # noqa: E501

        :return: The description of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDomainMap.

        域名映射描述信息  # noqa: E501

        :param description: The description of this ConfigDomainMap.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigDomainMap.  # noqa: E501

        域名映射状态信息，默认ENABLE  # noqa: E501

        :return: The state of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDomainMap.

        域名映射状态信息，默认ENABLE  # noqa: E501

        :param state: The state of this ConfigDomainMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ConfigDomainMap.  # noqa: E501

        域名映射类型，默认IPV4  # noqa: E501

        :return: The type of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigDomainMap.

        域名映射类型，默认IPV4  # noqa: E501

        :param type: The type of this ConfigDomainMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def domains(self):
        """Gets the domains of this ConfigDomainMap.  # noqa: E501

        域名策略列表  # noqa: E501

        :return: The domains of this ConfigDomainMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ConfigDomainMap.

        域名策略列表  # noqa: E501

        :param domains: The domains of this ConfigDomainMap.  # noqa: E501
        :type: list[str]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")  # noqa: E501

        self._domains = domains

    @property
    def method(self):
        """Gets the method of this ConfigDomainMap.  # noqa: E501

        域名映射调度策略，有轮询、加权轮询、静态就近性、优先级 默认为TOPOLOGY  # noqa: E501

        :return: The method of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigDomainMap.

        域名映射调度策略，有轮询、加权轮询、静态就近性、优先级 默认为TOPOLOGY  # noqa: E501

        :param method: The method of this ConfigDomainMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "WEIGHTED-ROUND-ROBIN", "TOPOLOGY", "PRIORITY"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def edns_client_subnet(self):
        """Gets the edns_client_subnet of this ConfigDomainMap.  # noqa: E501

        客户端优先，启用时，优先使用客户端的真实源IP。  # noqa: E501

        :return: The edns_client_subnet of this ConfigDomainMap.  # noqa: E501
        :rtype: str
        """
        return self._edns_client_subnet

    @edns_client_subnet.setter
    def edns_client_subnet(self, edns_client_subnet):
        """Sets the edns_client_subnet of this ConfigDomainMap.

        客户端优先，启用时，优先使用客户端的真实源IP。  # noqa: E501

        :param edns_client_subnet: The edns_client_subnet of this ConfigDomainMap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if edns_client_subnet not in allowed_values:
            raise ValueError(
                "Invalid value for `edns_client_subnet` ({0}), must be one of {1}"  # noqa: E501
                .format(edns_client_subnet, allowed_values)
            )

        self._edns_client_subnet = edns_client_subnet

    @property
    def persist(self):
        """Gets the persist of this ConfigDomainMap.  # noqa: E501

        会话保持时间，默认300  # noqa: E501

        :return: The persist of this ConfigDomainMap.  # noqa: E501
        :rtype: int
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this ConfigDomainMap.

        会话保持时间，默认300  # noqa: E501

        :param persist: The persist of this ConfigDomainMap.  # noqa: E501
        :type: int
        """
        if persist is not None and persist > 86400:  # noqa: E501
            raise ValueError("Invalid value for `persist`, must be a value less than or equal to `86400`")  # noqa: E501
        if persist is not None and persist < 0:  # noqa: E501
            raise ValueError("Invalid value for `persist`, must be a value greater than or equal to `0`")  # noqa: E501

        self._persist = persist

    @property
    def ttl(self):
        """Gets the ttl of this ConfigDomainMap.  # noqa: E501

        TTL值，必须为0~86400之间的整数  # noqa: E501

        :return: The ttl of this ConfigDomainMap.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigDomainMap.

        TTL值，必须为0~86400之间的整数  # noqa: E501

        :param ttl: The ttl of this ConfigDomainMap.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    @property
    def vip_pools(self):
        """Gets the vip_pools of this ConfigDomainMap.  # noqa: E501

        虚拟IP池列表  # noqa: E501

        :return: The vip_pools of this ConfigDomainMap.  # noqa: E501
        :rtype: list[ConfigDomainMapVipPools]
        """
        return self._vip_pools

    @vip_pools.setter
    def vip_pools(self, vip_pools):
        """Sets the vip_pools of this ConfigDomainMap.

        虚拟IP池列表  # noqa: E501

        :param vip_pools: The vip_pools of this ConfigDomainMap.  # noqa: E501
        :type: list[ConfigDomainMapVipPools]
        """
        if vip_pools is None:
            raise ValueError("Invalid value for `vip_pools`, must not be `None`")  # noqa: E501

        self._vip_pools = vip_pools

    @property
    def topologys(self):
        """Gets the topologys of this ConfigDomainMap.  # noqa: E501

        静态就近性列表配置  # noqa: E501

        :return: The topologys of this ConfigDomainMap.  # noqa: E501
        :rtype: list[ConfigDomainMapTopologys]
        """
        return self._topologys

    @topologys.setter
    def topologys(self, topologys):
        """Sets the topologys of this ConfigDomainMap.

        静态就近性列表配置  # noqa: E501

        :param topologys: The topologys of this ConfigDomainMap.  # noqa: E501
        :type: list[ConfigDomainMapTopologys]
        """

        self._topologys = topologys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDomainMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDomainMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
