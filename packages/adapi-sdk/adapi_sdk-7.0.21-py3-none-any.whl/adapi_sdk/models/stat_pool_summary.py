# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_pool_summary_node_count import StatPoolSummaryNodeCount  # noqa: F401,E501
from adapi_sdk.models.stat_pool_summary_pool_count import StatPoolSummaryPoolCount  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatPoolSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pool_count': 'StatPoolSummaryPoolCount',
        'node_count': 'StatPoolSummaryNodeCount',
        'connection': 'StatStatisticInstant',
        'connection_established': 'StatStatisticInstant',
        'connection_rate': 'StatStatisticInstant',
        'http_request_rate': 'StatStatisticInstant',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'general_throughput': 'StatStatisticInstant'
    }

    attribute_map = {
        'pool_count': 'pool_count',
        'node_count': 'node_count',
        'connection': 'connection',
        'connection_established': 'connection_established',
        'connection_rate': 'connection_rate',
        'http_request_rate': 'http_request_rate',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'general_throughput': 'general_throughput'
    }

    def __init__(self, pool_count=None, node_count=None, connection=None, connection_established=None, connection_rate=None, http_request_rate=None, upstream_throughput=None, downstream_throughput=None, general_throughput=None):  # noqa: E501
        """StatPoolSummary - a model defined in Swagger"""  # noqa: E501

        self._pool_count = None
        self._node_count = None
        self._connection = None
        self._connection_established = None
        self._connection_rate = None
        self._http_request_rate = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._general_throughput = None
        self.discriminator = None

        if pool_count is not None:
            self.pool_count = pool_count
        if node_count is not None:
            self.node_count = node_count
        if connection is not None:
            self.connection = connection
        if connection_established is not None:
            self.connection_established = connection_established
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if http_request_rate is not None:
            self.http_request_rate = http_request_rate
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if general_throughput is not None:
            self.general_throughput = general_throughput

    @property
    def pool_count(self):
        """Gets the pool_count of this StatPoolSummary.  # noqa: E501


        :return: The pool_count of this StatPoolSummary.  # noqa: E501
        :rtype: StatPoolSummaryPoolCount
        """
        return self._pool_count

    @pool_count.setter
    def pool_count(self, pool_count):
        """Sets the pool_count of this StatPoolSummary.


        :param pool_count: The pool_count of this StatPoolSummary.  # noqa: E501
        :type: StatPoolSummaryPoolCount
        """

        self._pool_count = pool_count

    @property
    def node_count(self):
        """Gets the node_count of this StatPoolSummary.  # noqa: E501


        :return: The node_count of this StatPoolSummary.  # noqa: E501
        :rtype: StatPoolSummaryNodeCount
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this StatPoolSummary.


        :param node_count: The node_count of this StatPoolSummary.  # noqa: E501
        :type: StatPoolSummaryNodeCount
        """

        self._node_count = node_count

    @property
    def connection(self):
        """Gets the connection of this StatPoolSummary.  # noqa: E501

        并发连接数  # noqa: E501

        :return: The connection of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatPoolSummary.

        并发连接数  # noqa: E501

        :param connection: The connection of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def connection_established(self):
        """Gets the connection_established of this StatPoolSummary.  # noqa: E501

        Established并发连接数  # noqa: E501

        :return: The connection_established of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_established

    @connection_established.setter
    def connection_established(self, connection_established):
        """Sets the connection_established of this StatPoolSummary.

        Established并发连接数  # noqa: E501

        :param connection_established: The connection_established of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_established = connection_established

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatPoolSummary.  # noqa: E501

        新建连接数  # noqa: E501

        :return: The connection_rate of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatPoolSummary.

        新建连接数  # noqa: E501

        :param connection_rate: The connection_rate of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def http_request_rate(self):
        """Gets the http_request_rate of this StatPoolSummary.  # noqa: E501

        HTTP请求速率  # noqa: E501

        :return: The http_request_rate of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_request_rate

    @http_request_rate.setter
    def http_request_rate(self, http_request_rate):
        """Sets the http_request_rate of this StatPoolSummary.

        HTTP请求速率  # noqa: E501

        :param http_request_rate: The http_request_rate of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_request_rate = http_request_rate

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatPoolSummary.  # noqa: E501

        上行吞吐速率  # noqa: E501

        :return: The upstream_throughput of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatPoolSummary.

        上行吞吐速率  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatPoolSummary.  # noqa: E501

        下行吞吐速率  # noqa: E501

        :return: The downstream_throughput of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatPoolSummary.

        下行吞吐速率  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatPoolSummary.  # noqa: E501

        上/下行总吞吐速率  # noqa: E501

        :return: The general_throughput of this StatPoolSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatPoolSummary.

        上/下行总吞吐速率  # noqa: E501

        :param general_throughput: The general_throughput of this StatPoolSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatPoolSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatPoolSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
