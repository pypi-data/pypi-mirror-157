# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCertificateDetailWithToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cn': 'str',
        'validity_not_before': 'str',
        'validity_not_after': 'str',
        'version': 'str',
        'serial_number': 'str',
        'subject': 'str',
        'signature_algorithm': 'str',
        'signature': 'str',
        'issuer': 'str',
        'public_key_algorithm': 'str',
        'public_key_length': 'str',
        'subject_alternative_name': 'list[str]',
        'ca_valid': 'str',
        'server_valid': 'str',
        'pem_data': 'str',
        'private_key_token': 'str',
        'private_key_password': 'str',
        'pk_private_key_password': 'str',
        'encrypted_private_key_password': 'str',
        'certificate_md5': 'str',
        'certificate_token': 'str'
    }

    attribute_map = {
        'cn': 'cn',
        'validity_not_before': 'validity_not_before',
        'validity_not_after': 'validity_not_after',
        'version': 'version',
        'serial_number': 'serial_number',
        'subject': 'subject',
        'signature_algorithm': 'signature_algorithm',
        'signature': 'signature',
        'issuer': 'issuer',
        'public_key_algorithm': 'public_key_algorithm',
        'public_key_length': 'public_key_length',
        'subject_alternative_name': 'subject_alternative_name',
        'ca_valid': 'ca_valid',
        'server_valid': 'server_valid',
        'pem_data': 'pem_data',
        'private_key_token': 'private_key_token',
        'private_key_password': 'private_key_password',
        'pk_private_key_password': 'pk_private_key_password',
        'encrypted_private_key_password': 'encrypted_private_key_password',
        'certificate_md5': 'certificate_md5',
        'certificate_token': 'certificate_token'
    }

    def __init__(self, cn=None, validity_not_before=None, validity_not_after=None, version=None, serial_number=None, subject=None, signature_algorithm=None, signature=None, issuer=None, public_key_algorithm=None, public_key_length=None, subject_alternative_name=None, ca_valid=None, server_valid=None, pem_data=None, private_key_token=None, private_key_password=None, pk_private_key_password=None, encrypted_private_key_password=None, certificate_md5=None, certificate_token=None):  # noqa: E501
        """ConfigCertificateDetailWithToken - a model defined in Swagger"""  # noqa: E501

        self._cn = None
        self._validity_not_before = None
        self._validity_not_after = None
        self._version = None
        self._serial_number = None
        self._subject = None
        self._signature_algorithm = None
        self._signature = None
        self._issuer = None
        self._public_key_algorithm = None
        self._public_key_length = None
        self._subject_alternative_name = None
        self._ca_valid = None
        self._server_valid = None
        self._pem_data = None
        self._private_key_token = None
        self._private_key_password = None
        self._pk_private_key_password = None
        self._encrypted_private_key_password = None
        self._certificate_md5 = None
        self._certificate_token = None
        self.discriminator = None

        if cn is not None:
            self.cn = cn
        if validity_not_before is not None:
            self.validity_not_before = validity_not_before
        if validity_not_after is not None:
            self.validity_not_after = validity_not_after
        if version is not None:
            self.version = version
        if serial_number is not None:
            self.serial_number = serial_number
        if subject is not None:
            self.subject = subject
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if signature is not None:
            self.signature = signature
        if issuer is not None:
            self.issuer = issuer
        if public_key_algorithm is not None:
            self.public_key_algorithm = public_key_algorithm
        if public_key_length is not None:
            self.public_key_length = public_key_length
        if subject_alternative_name is not None:
            self.subject_alternative_name = subject_alternative_name
        if ca_valid is not None:
            self.ca_valid = ca_valid
        if server_valid is not None:
            self.server_valid = server_valid
        if pem_data is not None:
            self.pem_data = pem_data
        if private_key_token is not None:
            self.private_key_token = private_key_token
        if private_key_password is not None:
            self.private_key_password = private_key_password
        if pk_private_key_password is not None:
            self.pk_private_key_password = pk_private_key_password
        if encrypted_private_key_password is not None:
            self.encrypted_private_key_password = encrypted_private_key_password
        if certificate_md5 is not None:
            self.certificate_md5 = certificate_md5
        self.certificate_token = certificate_token

    @property
    def cn(self):
        """Gets the cn of this ConfigCertificateDetailWithToken.  # noqa: E501

        通用名称  # noqa: E501

        :return: The cn of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._cn

    @cn.setter
    def cn(self, cn):
        """Sets the cn of this ConfigCertificateDetailWithToken.

        通用名称  # noqa: E501

        :param cn: The cn of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._cn = cn

    @property
    def validity_not_before(self):
        """Gets the validity_not_before of this ConfigCertificateDetailWithToken.  # noqa: E501

        生效开始日期  # noqa: E501

        :return: The validity_not_before of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._validity_not_before

    @validity_not_before.setter
    def validity_not_before(self, validity_not_before):
        """Sets the validity_not_before of this ConfigCertificateDetailWithToken.

        生效开始日期  # noqa: E501

        :param validity_not_before: The validity_not_before of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._validity_not_before = validity_not_before

    @property
    def validity_not_after(self):
        """Gets the validity_not_after of this ConfigCertificateDetailWithToken.  # noqa: E501

        生效截止日期  # noqa: E501

        :return: The validity_not_after of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._validity_not_after

    @validity_not_after.setter
    def validity_not_after(self, validity_not_after):
        """Sets the validity_not_after of this ConfigCertificateDetailWithToken.

        生效截止日期  # noqa: E501

        :param validity_not_after: The validity_not_after of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._validity_not_after = validity_not_after

    @property
    def version(self):
        """Gets the version of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书版本  # noqa: E501

        :return: The version of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigCertificateDetailWithToken.

        证书版本  # noqa: E501

        :param version: The version of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def serial_number(self):
        """Gets the serial_number of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书序号  # noqa: E501

        :return: The serial_number of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ConfigCertificateDetailWithToken.

        证书序号  # noqa: E501

        :param serial_number: The serial_number of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def subject(self):
        """Gets the subject of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书主题  # noqa: E501

        :return: The subject of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ConfigCertificateDetailWithToken.

        证书主题  # noqa: E501

        :param subject: The subject of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501

        签名算法  # noqa: E501

        :return: The signature_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this ConfigCertificateDetailWithToken.

        签名算法  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def signature(self):
        """Gets the signature of this ConfigCertificateDetailWithToken.  # noqa: E501

        签名数据  # noqa: E501

        :return: The signature of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ConfigCertificateDetailWithToken.

        签名数据  # noqa: E501

        :param signature: The signature of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def issuer(self):
        """Gets the issuer of this ConfigCertificateDetailWithToken.  # noqa: E501

        颁发者  # noqa: E501

        :return: The issuer of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ConfigCertificateDetailWithToken.

        颁发者  # noqa: E501

        :param issuer: The issuer of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def public_key_algorithm(self):
        """Gets the public_key_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501

        公钥算法  # noqa: E501

        :return: The public_key_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algorithm

    @public_key_algorithm.setter
    def public_key_algorithm(self, public_key_algorithm):
        """Sets the public_key_algorithm of this ConfigCertificateDetailWithToken.

        公钥算法  # noqa: E501

        :param public_key_algorithm: The public_key_algorithm of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._public_key_algorithm = public_key_algorithm

    @property
    def public_key_length(self):
        """Gets the public_key_length of this ConfigCertificateDetailWithToken.  # noqa: E501

        公钥长度  # noqa: E501

        :return: The public_key_length of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._public_key_length

    @public_key_length.setter
    def public_key_length(self, public_key_length):
        """Sets the public_key_length of this ConfigCertificateDetailWithToken.

        公钥长度  # noqa: E501

        :param public_key_length: The public_key_length of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._public_key_length = public_key_length

    @property
    def subject_alternative_name(self):
        """Gets the subject_alternative_name of this ConfigCertificateDetailWithToken.  # noqa: E501

        备用名称  # noqa: E501

        :return: The subject_alternative_name of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_name

    @subject_alternative_name.setter
    def subject_alternative_name(self, subject_alternative_name):
        """Sets the subject_alternative_name of this ConfigCertificateDetailWithToken.

        备用名称  # noqa: E501

        :param subject_alternative_name: The subject_alternative_name of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: list[str]
        """

        self._subject_alternative_name = subject_alternative_name

    @property
    def ca_valid(self):
        """Gets the ca_valid of this ConfigCertificateDetailWithToken.  # noqa: E501


        :return: The ca_valid of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._ca_valid

    @ca_valid.setter
    def ca_valid(self, ca_valid):
        """Sets the ca_valid of this ConfigCertificateDetailWithToken.


        :param ca_valid: The ca_valid of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """
        allowed_values = ["VALID", "INVALID"]  # noqa: E501
        if ca_valid not in allowed_values:
            raise ValueError(
                "Invalid value for `ca_valid` ({0}), must be one of {1}"  # noqa: E501
                .format(ca_valid, allowed_values)
            )

        self._ca_valid = ca_valid

    @property
    def server_valid(self):
        """Gets the server_valid of this ConfigCertificateDetailWithToken.  # noqa: E501


        :return: The server_valid of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._server_valid

    @server_valid.setter
    def server_valid(self, server_valid):
        """Sets the server_valid of this ConfigCertificateDetailWithToken.


        :param server_valid: The server_valid of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """
        allowed_values = ["VALID", "INVALID"]  # noqa: E501
        if server_valid not in allowed_values:
            raise ValueError(
                "Invalid value for `server_valid` ({0}), must be one of {1}"  # noqa: E501
                .format(server_valid, allowed_values)
            )

        self._server_valid = server_valid

    @property
    def pem_data(self):
        """Gets the pem_data of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书PEM文本  # noqa: E501

        :return: The pem_data of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._pem_data

    @pem_data.setter
    def pem_data(self, pem_data):
        """Sets the pem_data of this ConfigCertificateDetailWithToken.

        证书PEM文本  # noqa: E501

        :param pem_data: The pem_data of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._pem_data = pem_data

    @property
    def private_key_token(self):
        """Gets the private_key_token of this ConfigCertificateDetailWithToken.  # noqa: E501

        私钥文件资源令牌  # noqa: E501

        :return: The private_key_token of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._private_key_token

    @private_key_token.setter
    def private_key_token(self, private_key_token):
        """Sets the private_key_token of this ConfigCertificateDetailWithToken.

        私钥文件资源令牌  # noqa: E501

        :param private_key_token: The private_key_token of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._private_key_token = private_key_token

    @property
    def private_key_password(self):
        """Gets the private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501

        私钥密码  # noqa: E501

        :return: The private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this ConfigCertificateDetailWithToken.

        私钥密码  # noqa: E501

        :param private_key_password: The private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def pk_private_key_password(self):
        """Gets the pk_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501

        私钥密码-密文  # noqa: E501

        :return: The pk_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._pk_private_key_password

    @pk_private_key_password.setter
    def pk_private_key_password(self, pk_private_key_password):
        """Sets the pk_private_key_password of this ConfigCertificateDetailWithToken.

        私钥密码-密文  # noqa: E501

        :param pk_private_key_password: The pk_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._pk_private_key_password = pk_private_key_password

    @property
    def encrypted_private_key_password(self):
        """Gets the encrypted_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501

        私钥密码-密文  # noqa: E501

        :return: The encrypted_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_private_key_password

    @encrypted_private_key_password.setter
    def encrypted_private_key_password(self, encrypted_private_key_password):
        """Sets the encrypted_private_key_password of this ConfigCertificateDetailWithToken.

        私钥密码-密文  # noqa: E501

        :param encrypted_private_key_password: The encrypted_private_key_password of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._encrypted_private_key_password = encrypted_private_key_password

    @property
    def certificate_md5(self):
        """Gets the certificate_md5 of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书标识-MD5  # noqa: E501

        :return: The certificate_md5 of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._certificate_md5

    @certificate_md5.setter
    def certificate_md5(self, certificate_md5):
        """Sets the certificate_md5 of this ConfigCertificateDetailWithToken.

        证书标识-MD5  # noqa: E501

        :param certificate_md5: The certificate_md5 of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """

        self._certificate_md5 = certificate_md5

    @property
    def certificate_token(self):
        """Gets the certificate_token of this ConfigCertificateDetailWithToken.  # noqa: E501

        证书文件资源令牌  # noqa: E501

        :return: The certificate_token of this ConfigCertificateDetailWithToken.  # noqa: E501
        :rtype: str
        """
        return self._certificate_token

    @certificate_token.setter
    def certificate_token(self, certificate_token):
        """Sets the certificate_token of this ConfigCertificateDetailWithToken.

        证书文件资源令牌  # noqa: E501

        :param certificate_token: The certificate_token of this ConfigCertificateDetailWithToken.  # noqa: E501
        :type: str
        """
        if certificate_token is None:
            raise ValueError("Invalid value for `certificate_token`, must not be `None`")  # noqa: E501

        self._certificate_token = certificate_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCertificateDetailWithToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCertificateDetailWithToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
