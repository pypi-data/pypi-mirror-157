# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorConnectUdp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'gateway_detect': 'str',
        'send_content': 'str',
        'receive_cache_size': 'int',
        'receive_content_match': 'str',
        'reverse_result': 'str',
        'send_content_before_disconnect': 'str',
        'hexadecimal_mode': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'gateway_detect': 'gateway_detect',
        'send_content': 'send_content',
        'receive_cache_size': 'receive_cache_size',
        'receive_content_match': 'receive_content_match',
        'reverse_result': 'reverse_result',
        'send_content_before_disconnect': 'send_content_before_disconnect',
        'hexadecimal_mode': 'hexadecimal_mode'
    }

    def __init__(self, name=None, description=None, type='CONNECT-UDP', timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', gateway_detect='DISABLE', send_content=None, receive_cache_size=None, receive_content_match=None, reverse_result='DISABLE', send_content_before_disconnect=None, hexadecimal_mode='DISABLE'):  # noqa: E501
        """ConfigServiceMonitorConnectUdp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._gateway_detect = None
        self._send_content = None
        self._receive_cache_size = None
        self._receive_content_match = None
        self._reverse_result = None
        self._send_content_before_disconnect = None
        self._hexadecimal_mode = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if gateway_detect is not None:
            self.gateway_detect = gateway_detect
        if send_content is not None:
            self.send_content = send_content
        if receive_cache_size is not None:
            self.receive_cache_size = receive_cache_size
        if receive_content_match is not None:
            self.receive_content_match = receive_content_match
        if reverse_result is not None:
            self.reverse_result = reverse_result
        if send_content_before_disconnect is not None:
            self.send_content_before_disconnect = send_content_before_disconnect
        if hexadecimal_mode is not None:
            self.hexadecimal_mode = hexadecimal_mode

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorConnectUdp.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorConnectUdp.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorConnectUdp.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONNECT-UDP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；设置监视超时时间。  # noqa: E501

        :return: The timeout of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitorConnectUdp.

        可选参数；设置监视超时时间。  # noqa: E501

        :param timeout: The timeout of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；设置监视间隔时间。  # noqa: E501

        :return: The interval of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitorConnectUdp.

        可选参数；设置监视间隔时间。  # noqa: E501

        :param interval: The interval of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址；当启用gateway_detect时必须指定ip地址  # noqa: E501

        :return: The host of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitorConnectUdp.

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址；当启用gateway_detect时必须指定ip地址  # noqa: E501

        :param host: The host of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定监视端口；取值范围[0,65535]，默认为0，表示使用节点池中节点的端口  # noqa: E501

        :return: The port of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitorConnectUdp.

        可选参数；指定监视端口；取值范围[0,65535]，默认为0，表示使用节点池中节点的端口  # noqa: E501

        :param port: The port of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorConnectUdp.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def gateway_detect(self):
        """Gets the gateway_detect of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；透明监控开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The gateway_detect of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._gateway_detect

    @gateway_detect.setter
    def gateway_detect(self, gateway_detect):
        """Sets the gateway_detect of this ConfigServiceMonitorConnectUdp.

        可选参数；透明监控开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param gateway_detect: The gateway_detect of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if gateway_detect not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_detect` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_detect, allowed_values)
            )

        self._gateway_detect = gateway_detect

    @property
    def send_content(self):
        """Gets the send_content of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定监视发送内容。  # noqa: E501

        :return: The send_content of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._send_content

    @send_content.setter
    def send_content(self, send_content):
        """Sets the send_content of this ConfigServiceMonitorConnectUdp.

        可选参数；指定监视发送内容。  # noqa: E501

        :param send_content: The send_content of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        if send_content is not None and len(send_content) > 2048:
            raise ValueError("Invalid value for `send_content`, length must be less than or equal to `2048`")  # noqa: E501

        self._send_content = send_content

    @property
    def receive_cache_size(self):
        """Gets the receive_cache_size of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定接收缓冲区大小。  # noqa: E501

        :return: The receive_cache_size of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: int
        """
        return self._receive_cache_size

    @receive_cache_size.setter
    def receive_cache_size(self, receive_cache_size):
        """Sets the receive_cache_size of this ConfigServiceMonitorConnectUdp.

        可选参数；指定接收缓冲区大小。  # noqa: E501

        :param receive_cache_size: The receive_cache_size of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: int
        """
        if receive_cache_size is not None and receive_cache_size > 4096:  # noqa: E501
            raise ValueError("Invalid value for `receive_cache_size`, must be a value less than or equal to `4096`")  # noqa: E501
        if receive_cache_size is not None and receive_cache_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `receive_cache_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._receive_cache_size = receive_cache_size

    @property
    def receive_content_match(self):
        """Gets the receive_content_match of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定接收匹配内容  # noqa: E501

        :return: The receive_content_match of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._receive_content_match

    @receive_content_match.setter
    def receive_content_match(self, receive_content_match):
        """Sets the receive_content_match of this ConfigServiceMonitorConnectUdp.

        可选参数；指定接收匹配内容  # noqa: E501

        :param receive_content_match: The receive_content_match of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        if receive_content_match is not None and len(receive_content_match) > 256:
            raise ValueError("Invalid value for `receive_content_match`, length must be less than or equal to `256`")  # noqa: E501

        self._receive_content_match = receive_content_match

    @property
    def reverse_result(self):
        """Gets the reverse_result of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定是否做反向匹配。enable表示反向匹配,disable表示正向匹配,默认disable。  # noqa: E501

        :return: The reverse_result of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._reverse_result

    @reverse_result.setter
    def reverse_result(self, reverse_result):
        """Sets the reverse_result of this ConfigServiceMonitorConnectUdp.

        可选参数；指定是否做反向匹配。enable表示反向匹配,disable表示正向匹配,默认disable。  # noqa: E501

        :param reverse_result: The reverse_result of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if reverse_result not in allowed_values:
            raise ValueError(
                "Invalid value for `reverse_result` ({0}), must be one of {1}"  # noqa: E501
                .format(reverse_result, allowed_values)
            )

        self._reverse_result = reverse_result

    @property
    def send_content_before_disconnect(self):
        """Gets the send_content_before_disconnect of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数；指定断开之前发送内容。  # noqa: E501

        :return: The send_content_before_disconnect of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._send_content_before_disconnect

    @send_content_before_disconnect.setter
    def send_content_before_disconnect(self, send_content_before_disconnect):
        """Sets the send_content_before_disconnect of this ConfigServiceMonitorConnectUdp.

        可选参数；指定断开之前发送内容。  # noqa: E501

        :param send_content_before_disconnect: The send_content_before_disconnect of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        if send_content_before_disconnect is not None and len(send_content_before_disconnect) > 256:
            raise ValueError("Invalid value for `send_content_before_disconnect`, length must be less than or equal to `256`")  # noqa: E501

        self._send_content_before_disconnect = send_content_before_disconnect

    @property
    def hexadecimal_mode(self):
        """Gets the hexadecimal_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501

        可选参数; 十六进制模式开关,enable表示启用,disable表示禁用,默认为disable  # noqa: E501

        :return: The hexadecimal_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :rtype: str
        """
        return self._hexadecimal_mode

    @hexadecimal_mode.setter
    def hexadecimal_mode(self, hexadecimal_mode):
        """Sets the hexadecimal_mode of this ConfigServiceMonitorConnectUdp.

        可选参数; 十六进制模式开关,enable表示启用,disable表示禁用,默认为disable  # noqa: E501

        :param hexadecimal_mode: The hexadecimal_mode of this ConfigServiceMonitorConnectUdp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if hexadecimal_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `hexadecimal_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(hexadecimal_mode, allowed_values)
            )

        self._hexadecimal_mode = hexadecimal_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorConnectUdp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorConnectUdp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
