# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNetworkSettingTcpProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_stamp': 'str',
        'nat_time_stamp': 'str',
        'nat_seq_adjust': 'str',
        'nat_seq_local_adjust': 'str',
        'time_stamp_seq_adjust': 'str'
    }

    attribute_map = {
        'time_stamp': 'time_stamp',
        'nat_time_stamp': 'nat_time_stamp',
        'nat_seq_adjust': 'nat_seq_adjust',
        'nat_seq_local_adjust': 'nat_seq_local_adjust',
        'time_stamp_seq_adjust': 'time_stamp_seq_adjust'
    }

    def __init__(self, time_stamp='DISABLE', nat_time_stamp='PRESERVE', nat_seq_adjust='DISABLE', nat_seq_local_adjust='ENABLE', time_stamp_seq_adjust='ENABLE'):  # noqa: E501
        """ConfigNetworkSettingTcpProtocol - a model defined in Swagger"""  # noqa: E501

        self._time_stamp = None
        self._nat_time_stamp = None
        self._nat_seq_adjust = None
        self._nat_seq_local_adjust = None
        self._time_stamp_seq_adjust = None
        self.discriminator = None

        if time_stamp is not None:
            self.time_stamp = time_stamp
        if nat_time_stamp is not None:
            self.nat_time_stamp = nat_time_stamp
        if nat_seq_adjust is not None:
            self.nat_seq_adjust = nat_seq_adjust
        if nat_seq_local_adjust is not None:
            self.nat_seq_local_adjust = nat_seq_local_adjust
        if time_stamp_seq_adjust is not None:
            self.time_stamp_seq_adjust = time_stamp_seq_adjust

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501

        tcp时间戳设置  # noqa: E501

        :return: The time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ConfigNetworkSettingTcpProtocol.

        tcp时间戳设置  # noqa: E501

        :param time_stamp: The time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if time_stamp not in allowed_values:
            raise ValueError(
                "Invalid value for `time_stamp` ({0}), must be one of {1}"  # noqa: E501
                .format(time_stamp, allowed_values)
            )

        self._time_stamp = time_stamp

    @property
    def nat_time_stamp(self):
        """Gets the nat_time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501

        tcp转发包时间戳设置  # noqa: E501

        :return: The nat_time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :rtype: str
        """
        return self._nat_time_stamp

    @nat_time_stamp.setter
    def nat_time_stamp(self, nat_time_stamp):
        """Sets the nat_time_stamp of this ConfigNetworkSettingTcpProtocol.

        tcp转发包时间戳设置  # noqa: E501

        :param nat_time_stamp: The nat_time_stamp of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRIP", "REWRITE", "PRESERVE"]  # noqa: E501
        if nat_time_stamp not in allowed_values:
            raise ValueError(
                "Invalid value for `nat_time_stamp` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_time_stamp, allowed_values)
            )

        self._nat_time_stamp = nat_time_stamp

    @property
    def nat_seq_adjust(self):
        """Gets the nat_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501

        转发包调整序列号  # noqa: E501

        :return: The nat_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :rtype: str
        """
        return self._nat_seq_adjust

    @nat_seq_adjust.setter
    def nat_seq_adjust(self, nat_seq_adjust):
        """Sets the nat_seq_adjust of this ConfigNetworkSettingTcpProtocol.

        转发包调整序列号  # noqa: E501

        :param nat_seq_adjust: The nat_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if nat_seq_adjust not in allowed_values:
            raise ValueError(
                "Invalid value for `nat_seq_adjust` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_seq_adjust, allowed_values)
            )

        self._nat_seq_adjust = nat_seq_adjust

    @property
    def nat_seq_local_adjust(self):
        """Gets the nat_seq_local_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501

        系统序列号调整  # noqa: E501

        :return: The nat_seq_local_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :rtype: str
        """
        return self._nat_seq_local_adjust

    @nat_seq_local_adjust.setter
    def nat_seq_local_adjust(self, nat_seq_local_adjust):
        """Sets the nat_seq_local_adjust of this ConfigNetworkSettingTcpProtocol.

        系统序列号调整  # noqa: E501

        :param nat_seq_local_adjust: The nat_seq_local_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if nat_seq_local_adjust not in allowed_values:
            raise ValueError(
                "Invalid value for `nat_seq_local_adjust` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_seq_local_adjust, allowed_values)
            )

        self._nat_seq_local_adjust = nat_seq_local_adjust

    @property
    def time_stamp_seq_adjust(self):
        """Gets the time_stamp_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501

        SNAT时自动调整时间戳/序列号  # noqa: E501

        :return: The time_stamp_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp_seq_adjust

    @time_stamp_seq_adjust.setter
    def time_stamp_seq_adjust(self, time_stamp_seq_adjust):
        """Sets the time_stamp_seq_adjust of this ConfigNetworkSettingTcpProtocol.

        SNAT时自动调整时间戳/序列号  # noqa: E501

        :param time_stamp_seq_adjust: The time_stamp_seq_adjust of this ConfigNetworkSettingTcpProtocol.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if time_stamp_seq_adjust not in allowed_values:
            raise ValueError(
                "Invalid value for `time_stamp_seq_adjust` ({0}), must be one of {1}"  # noqa: E501
                .format(time_stamp_seq_adjust, allowed_values)
            )

        self._time_stamp_seq_adjust = time_stamp_seq_adjust

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNetworkSettingTcpProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNetworkSettingTcpProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
