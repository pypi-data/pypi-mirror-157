# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_header_match_component import ConfigHttpHeaderMatchComponent  # noqa: F401,E501
from adapi_sdk.models.config_http_rewrite_request_body_operation import ConfigHttpRewriteRequestBodyOperation  # noqa: F401,E501
from adapi_sdk.models.config_http_rewrite_request_header_operation import ConfigHttpRewriteRequestHeaderOperation  # noqa: F401,E501
from adapi_sdk.models.config_http_rewrite_request_source_address import ConfigHttpRewriteRequestSourceAddress  # noqa: F401,E501
from adapi_sdk.models.config_http_rewrite_request_uri_operation import ConfigHttpRewriteRequestUriOperation  # noqa: F401,E501
from adapi_sdk.models.config_ssl_match_component import ConfigSslMatchComponent  # noqa: F401,E501
from adapi_sdk.models.config_str_match_component import ConfigStrMatchComponent  # noqa: F401,E501


class ConfigHttpRewriteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'source_address': 'ConfigHttpRewriteRequestSourceAddress',
        'http_request_method': 'str',
        'http_request_version': 'str',
        'http_request_uri_rule': 'ConfigStrMatchComponent',
        'http_request_header_rules': 'list[ConfigHttpHeaderMatchComponent]',
        'ssl_version_rule': 'str',
        'ssl_variable_rules': 'list[ConfigSslMatchComponent]',
        'action': 'str',
        'uri_operation': 'ConfigHttpRewriteRequestUriOperation',
        'header_operation': 'ConfigHttpRewriteRequestHeaderOperation',
        'body_operation': 'ConfigHttpRewriteRequestBodyOperation',
        'rewrite_encode': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'source_address': 'source_address',
        'http_request_method': 'http_request_method',
        'http_request_version': 'http_request_version',
        'http_request_uri_rule': 'http_request_uri_rule',
        'http_request_header_rules': 'http_request_header_rules',
        'ssl_version_rule': 'ssl_version_rule',
        'ssl_variable_rules': 'ssl_variable_rules',
        'action': 'action',
        'uri_operation': 'uri_operation',
        'header_operation': 'header_operation',
        'body_operation': 'body_operation',
        'rewrite_encode': 'rewrite_encode'
    }

    def __init__(self, name=None, description=None, type='REWRITE-REQUEST', source_address=None, http_request_method='ALL', http_request_version='ALL', http_request_uri_rule=None, http_request_header_rules=None, ssl_version_rule='ALL', ssl_variable_rules=None, action=None, uri_operation=None, header_operation=None, body_operation=None, rewrite_encode='PLAIN'):  # noqa: E501
        """ConfigHttpRewriteRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._source_address = None
        self._http_request_method = None
        self._http_request_version = None
        self._http_request_uri_rule = None
        self._http_request_header_rules = None
        self._ssl_version_rule = None
        self._ssl_variable_rules = None
        self._action = None
        self._uri_operation = None
        self._header_operation = None
        self._body_operation = None
        self._rewrite_encode = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if source_address is not None:
            self.source_address = source_address
        if http_request_method is not None:
            self.http_request_method = http_request_method
        if http_request_version is not None:
            self.http_request_version = http_request_version
        if http_request_uri_rule is not None:
            self.http_request_uri_rule = http_request_uri_rule
        if http_request_header_rules is not None:
            self.http_request_header_rules = http_request_header_rules
        if ssl_version_rule is not None:
            self.ssl_version_rule = ssl_version_rule
        if ssl_variable_rules is not None:
            self.ssl_variable_rules = ssl_variable_rules
        self.action = action
        if uri_operation is not None:
            self.uri_operation = uri_operation
        if header_operation is not None:
            self.header_operation = header_operation
        if body_operation is not None:
            self.body_operation = body_operation
        if rewrite_encode is not None:
            self.rewrite_encode = rewrite_encode

    @property
    def name(self):
        """Gets the name of this ConfigHttpRewriteRequest.  # noqa: E501

        必选参数；指定HTTP请求改写配置的名称，在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigHttpRewriteRequest.

        必选参数；指定HTTP请求改写配置的名称，在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；用于对此配置增加备注  # noqa: E501

        :return: The description of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigHttpRewriteRequest.

        可选参数；用于对此配置增加备注  # noqa: E501

        :param description: The description of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；改写配置的类型，rewrite-request为请求改写，默认为rewrite-request  # noqa: E501

        :return: The type of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigHttpRewriteRequest.

        可选参数；改写配置的类型，rewrite-request为请求改写，默认为rewrite-request  # noqa: E501

        :param type: The type of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["REWRITE-REQUEST"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source_address(self):
        """Gets the source_address of this ConfigHttpRewriteRequest.  # noqa: E501


        :return: The source_address of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: ConfigHttpRewriteRequestSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigHttpRewriteRequest.


        :param source_address: The source_address of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: ConfigHttpRewriteRequestSourceAddress
        """

        self._source_address = source_address

    @property
    def http_request_method(self):
        """Gets the http_request_method of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；HTTP请求类型，all表示所有，get表示GET请求，post表示POST请求，默认为all  # noqa: E501

        :return: The http_request_method of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._http_request_method

    @http_request_method.setter
    def http_request_method(self, http_request_method):
        """Sets the http_request_method of this ConfigHttpRewriteRequest.

        可选参数；HTTP请求类型，all表示所有，get表示GET请求，post表示POST请求，默认为all  # noqa: E501

        :param http_request_method: The http_request_method of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "ALL"]  # noqa: E501
        if http_request_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_request_method` ({0}), must be one of {1}"  # noqa: E501
                .format(http_request_method, allowed_values)
            )

        self._http_request_method = http_request_method

    @property
    def http_request_version(self):
        """Gets the http_request_version of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；HTTP请求协议版本，all表示所有，http/1.0表示1.0版本的请求，http/1.1表示1.1版本的请求，默认为all  # noqa: E501

        :return: The http_request_version of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._http_request_version

    @http_request_version.setter
    def http_request_version(self, http_request_version):
        """Sets the http_request_version of this ConfigHttpRewriteRequest.

        可选参数；HTTP请求协议版本，all表示所有，http/1.0表示1.0版本的请求，http/1.1表示1.1版本的请求，默认为all  # noqa: E501

        :param http_request_version: The http_request_version of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP/1.0", "HTTP/1.1", "ALL"]  # noqa: E501
        if http_request_version not in allowed_values:
            raise ValueError(
                "Invalid value for `http_request_version` ({0}), must be one of {1}"  # noqa: E501
                .format(http_request_version, allowed_values)
            )

        self._http_request_version = http_request_version

    @property
    def http_request_uri_rule(self):
        """Gets the http_request_uri_rule of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；http请求URI规则  # noqa: E501

        :return: The http_request_uri_rule of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: ConfigStrMatchComponent
        """
        return self._http_request_uri_rule

    @http_request_uri_rule.setter
    def http_request_uri_rule(self, http_request_uri_rule):
        """Sets the http_request_uri_rule of this ConfigHttpRewriteRequest.

        可选参数；http请求URI规则  # noqa: E501

        :param http_request_uri_rule: The http_request_uri_rule of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: ConfigStrMatchComponent
        """

        self._http_request_uri_rule = http_request_uri_rule

    @property
    def http_request_header_rules(self):
        """Gets the http_request_header_rules of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；HTTP请求头部匹配规则列表  # noqa: E501

        :return: The http_request_header_rules of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: list[ConfigHttpHeaderMatchComponent]
        """
        return self._http_request_header_rules

    @http_request_header_rules.setter
    def http_request_header_rules(self, http_request_header_rules):
        """Sets the http_request_header_rules of this ConfigHttpRewriteRequest.

        可选参数；HTTP请求头部匹配规则列表  # noqa: E501

        :param http_request_header_rules: The http_request_header_rules of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: list[ConfigHttpHeaderMatchComponent]
        """

        self._http_request_header_rules = http_request_header_rules

    @property
    def ssl_version_rule(self):
        """Gets the ssl_version_rule of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；SSL协议版本，all表示所有，默认为all  # noqa: E501

        :return: The ssl_version_rule of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._ssl_version_rule

    @ssl_version_rule.setter
    def ssl_version_rule(self, ssl_version_rule):
        """Sets the ssl_version_rule of this ConfigHttpRewriteRequest.

        可选参数；SSL协议版本，all表示所有，默认为all  # noqa: E501

        :param ssl_version_rule: The ssl_version_rule of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "V1", "V2", "V3"]  # noqa: E501
        if ssl_version_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_version_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_version_rule, allowed_values)
            )

        self._ssl_version_rule = ssl_version_rule

    @property
    def ssl_variable_rules(self):
        """Gets the ssl_variable_rules of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；SSL证书变量匹配规则列表  # noqa: E501

        :return: The ssl_variable_rules of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: list[ConfigSslMatchComponent]
        """
        return self._ssl_variable_rules

    @ssl_variable_rules.setter
    def ssl_variable_rules(self, ssl_variable_rules):
        """Sets the ssl_variable_rules of this ConfigHttpRewriteRequest.

        可选参数；SSL证书变量匹配规则列表  # noqa: E501

        :param ssl_variable_rules: The ssl_variable_rules of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: list[ConfigSslMatchComponent]
        """

        self._ssl_variable_rules = ssl_variable_rules

    @property
    def action(self):
        """Gets the action of this ConfigHttpRewriteRequest.  # noqa: E501

        必选参数；改写动作，modify-http-uri表示改写URI，insert-http-header表示插入头部，remove-http-header表示删除头部，modify-http-header表示改写头部，modify-http-body表示实体改写  # noqa: E501

        :return: The action of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigHttpRewriteRequest.

        必选参数；改写动作，modify-http-uri表示改写URI，insert-http-header表示插入头部，remove-http-header表示删除头部，modify-http-header表示改写头部，modify-http-body表示实体改写  # noqa: E501

        :param action: The action of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["MODIFY-HTTP-URI", "INSERT-HTTP-HEADER", "REMOVE-HTTP-HEADER", "MODIFY-HTTP-HEADER", "MODIFY-HTTP-BODY", "HTTP-RESPONSE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def uri_operation(self):
        """Gets the uri_operation of this ConfigHttpRewriteRequest.  # noqa: E501


        :return: The uri_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: ConfigHttpRewriteRequestUriOperation
        """
        return self._uri_operation

    @uri_operation.setter
    def uri_operation(self, uri_operation):
        """Sets the uri_operation of this ConfigHttpRewriteRequest.


        :param uri_operation: The uri_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: ConfigHttpRewriteRequestUriOperation
        """

        self._uri_operation = uri_operation

    @property
    def header_operation(self):
        """Gets the header_operation of this ConfigHttpRewriteRequest.  # noqa: E501


        :return: The header_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: ConfigHttpRewriteRequestHeaderOperation
        """
        return self._header_operation

    @header_operation.setter
    def header_operation(self, header_operation):
        """Sets the header_operation of this ConfigHttpRewriteRequest.


        :param header_operation: The header_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: ConfigHttpRewriteRequestHeaderOperation
        """

        self._header_operation = header_operation

    @property
    def body_operation(self):
        """Gets the body_operation of this ConfigHttpRewriteRequest.  # noqa: E501


        :return: The body_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: ConfigHttpRewriteRequestBodyOperation
        """
        return self._body_operation

    @body_operation.setter
    def body_operation(self, body_operation):
        """Sets the body_operation of this ConfigHttpRewriteRequest.


        :param body_operation: The body_operation of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: ConfigHttpRewriteRequestBodyOperation
        """

        self._body_operation = body_operation

    @property
    def rewrite_encode(self):
        """Gets the rewrite_encode of this ConfigHttpRewriteRequest.  # noqa: E501

        可选参数；改写内容使用的编码，plain表示原文，url-encode表示URL编码，base64-encode表示base64编码  # noqa: E501

        :return: The rewrite_encode of this ConfigHttpRewriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._rewrite_encode

    @rewrite_encode.setter
    def rewrite_encode(self, rewrite_encode):
        """Sets the rewrite_encode of this ConfigHttpRewriteRequest.

        可选参数；改写内容使用的编码，plain表示原文，url-encode表示URL编码，base64-encode表示base64编码  # noqa: E501

        :param rewrite_encode: The rewrite_encode of this ConfigHttpRewriteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLAIN", "URL-ENCODE", "BASE64-ENCODE"]  # noqa: E501
        if rewrite_encode not in allowed_values:
            raise ValueError(
                "Invalid value for `rewrite_encode` ({0}), must be one of {1}"  # noqa: E501
                .format(rewrite_encode, allowed_values)
            )

        self._rewrite_encode = rewrite_encode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpRewriteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpRewriteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
