# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNetns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'appgroup': 'str',
        'project': 'str',
        'new_conns_limit': 'int',
        'cur_conns_limit': 'int',
        'throughput_limit': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'appgroup': 'appgroup',
        'project': 'project',
        'new_conns_limit': 'new_conns_limit',
        'cur_conns_limit': 'cur_conns_limit',
        'throughput_limit': 'throughput_limit'
    }

    def __init__(self, name=None, description='this netns belongs to someone', state='ENABLE', appgroup=None, project=None, new_conns_limit=None, cur_conns_limit=None, throughput_limit=None):  # noqa: E501
        """ConfigNetns - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._appgroup = None
        self._project = None
        self._new_conns_limit = None
        self._cur_conns_limit = None
        self._throughput_limit = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if appgroup is not None:
            self.appgroup = appgroup
        self.project = project
        if new_conns_limit is not None:
            self.new_conns_limit = new_conns_limit
        if cur_conns_limit is not None:
            self.cur_conns_limit = cur_conns_limit
        if throughput_limit is not None:
            self.throughput_limit = throughput_limit

    @property
    def name(self):
        """Gets the name of this ConfigNetns.  # noqa: E501

        必选参数；名称  # noqa: E501

        :return: The name of this ConfigNetns.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigNetns.

        必选参数；名称  # noqa: E501

        :param name: The name of this ConfigNetns.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigNetns.  # noqa: E501

        可选参数；描述  # noqa: E501

        :return: The description of this ConfigNetns.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigNetns.

        可选参数；描述  # noqa: E501

        :param description: The description of this ConfigNetns.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigNetns.  # noqa: E501

        可选参数；状态  # noqa: E501

        :return: The state of this ConfigNetns.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigNetns.

        可选参数；状态  # noqa: E501

        :param state: The state of this ConfigNetns.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE", "ENABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def appgroup(self):
        """Gets the appgroup of this ConfigNetns.  # noqa: E501

        可选参数；应用组ID  # noqa: E501

        :return: The appgroup of this ConfigNetns.  # noqa: E501
        :rtype: str
        """
        return self._appgroup

    @appgroup.setter
    def appgroup(self, appgroup):
        """Sets the appgroup of this ConfigNetns.

        可选参数；应用组ID  # noqa: E501

        :param appgroup: The appgroup of this ConfigNetns.  # noqa: E501
        :type: str
        """
        if appgroup is not None and len(appgroup) > 511:
            raise ValueError("Invalid value for `appgroup`, length must be less than or equal to `511`")  # noqa: E501
        if appgroup is not None and len(appgroup) < 1:
            raise ValueError("Invalid value for `appgroup`, length must be greater than or equal to `1`")  # noqa: E501

        self._appgroup = appgroup

    @property
    def project(self):
        """Gets the project of this ConfigNetns.  # noqa: E501

        必选参数；项目名称  # noqa: E501

        :return: The project of this ConfigNetns.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConfigNetns.

        必选参数；项目名称  # noqa: E501

        :param project: The project of this ConfigNetns.  # noqa: E501
        :type: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501
        if project is not None and len(project) > 511:
            raise ValueError("Invalid value for `project`, length must be less than or equal to `511`")  # noqa: E501
        if project is not None and len(project) < 1:
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")  # noqa: E501

        self._project = project

    @property
    def new_conns_limit(self):
        """Gets the new_conns_limit of this ConfigNetns.  # noqa: E501

        可选参数；项目允许的新建连接上限  # noqa: E501

        :return: The new_conns_limit of this ConfigNetns.  # noqa: E501
        :rtype: int
        """
        return self._new_conns_limit

    @new_conns_limit.setter
    def new_conns_limit(self, new_conns_limit):
        """Sets the new_conns_limit of this ConfigNetns.

        可选参数；项目允许的新建连接上限  # noqa: E501

        :param new_conns_limit: The new_conns_limit of this ConfigNetns.  # noqa: E501
        :type: int
        """
        if new_conns_limit is not None and new_conns_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `new_conns_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._new_conns_limit = new_conns_limit

    @property
    def cur_conns_limit(self):
        """Gets the cur_conns_limit of this ConfigNetns.  # noqa: E501

        可选参数；项目允许的并发连接数上限  # noqa: E501

        :return: The cur_conns_limit of this ConfigNetns.  # noqa: E501
        :rtype: int
        """
        return self._cur_conns_limit

    @cur_conns_limit.setter
    def cur_conns_limit(self, cur_conns_limit):
        """Sets the cur_conns_limit of this ConfigNetns.

        可选参数；项目允许的并发连接数上限  # noqa: E501

        :param cur_conns_limit: The cur_conns_limit of this ConfigNetns.  # noqa: E501
        :type: int
        """
        if cur_conns_limit is not None and cur_conns_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `cur_conns_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cur_conns_limit = cur_conns_limit

    @property
    def throughput_limit(self):
        """Gets the throughput_limit of this ConfigNetns.  # noqa: E501

        可选参数；项目允许的吞吐上限  # noqa: E501

        :return: The throughput_limit of this ConfigNetns.  # noqa: E501
        :rtype: int
        """
        return self._throughput_limit

    @throughput_limit.setter
    def throughput_limit(self, throughput_limit):
        """Sets the throughput_limit of this ConfigNetns.

        可选参数；项目允许的吞吐上限  # noqa: E501

        :param throughput_limit: The throughput_limit of this ConfigNetns.  # noqa: E501
        :type: int
        """
        if throughput_limit is not None and throughput_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `throughput_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._throughput_limit = throughput_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNetns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNetns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
