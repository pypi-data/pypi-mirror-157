# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCertificateFingerprintWithToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_md5': 'str',
        'certificate_token': 'str',
        'private_key_token': 'str',
        'private_key_password': 'str',
        'pk_private_key_password': 'str',
        'encrypted_private_key_password': 'str'
    }

    attribute_map = {
        'certificate_md5': 'certificate_md5',
        'certificate_token': 'certificate_token',
        'private_key_token': 'private_key_token',
        'private_key_password': 'private_key_password',
        'pk_private_key_password': 'pk_private_key_password',
        'encrypted_private_key_password': 'encrypted_private_key_password'
    }

    def __init__(self, certificate_md5=None, certificate_token=None, private_key_token=None, private_key_password=None, pk_private_key_password=None, encrypted_private_key_password=None):  # noqa: E501
        """ConfigCertificateFingerprintWithToken - a model defined in Swagger"""  # noqa: E501

        self._certificate_md5 = None
        self._certificate_token = None
        self._private_key_token = None
        self._private_key_password = None
        self._pk_private_key_password = None
        self._encrypted_private_key_password = None
        self.discriminator = None

        if certificate_md5 is not None:
            self.certificate_md5 = certificate_md5
        self.certificate_token = certificate_token
        if private_key_token is not None:
            self.private_key_token = private_key_token
        if private_key_password is not None:
            self.private_key_password = private_key_password
        if pk_private_key_password is not None:
            self.pk_private_key_password = pk_private_key_password
        if encrypted_private_key_password is not None:
            self.encrypted_private_key_password = encrypted_private_key_password

    @property
    def certificate_md5(self):
        """Gets the certificate_md5 of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        证书标识-MD5  # noqa: E501

        :return: The certificate_md5 of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._certificate_md5

    @certificate_md5.setter
    def certificate_md5(self, certificate_md5):
        """Sets the certificate_md5 of this ConfigCertificateFingerprintWithToken.

        证书标识-MD5  # noqa: E501

        :param certificate_md5: The certificate_md5 of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """

        self._certificate_md5 = certificate_md5

    @property
    def certificate_token(self):
        """Gets the certificate_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        证书文件资源令牌  # noqa: E501

        :return: The certificate_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._certificate_token

    @certificate_token.setter
    def certificate_token(self, certificate_token):
        """Sets the certificate_token of this ConfigCertificateFingerprintWithToken.

        证书文件资源令牌  # noqa: E501

        :param certificate_token: The certificate_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """
        if certificate_token is None:
            raise ValueError("Invalid value for `certificate_token`, must not be `None`")  # noqa: E501

        self._certificate_token = certificate_token

    @property
    def private_key_token(self):
        """Gets the private_key_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        私钥证书token  # noqa: E501

        :return: The private_key_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._private_key_token

    @private_key_token.setter
    def private_key_token(self, private_key_token):
        """Sets the private_key_token of this ConfigCertificateFingerprintWithToken.

        私钥证书token  # noqa: E501

        :param private_key_token: The private_key_token of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """

        self._private_key_token = private_key_token

    @property
    def private_key_password(self):
        """Gets the private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        私钥密码  # noqa: E501

        :return: The private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this ConfigCertificateFingerprintWithToken.

        私钥密码  # noqa: E501

        :param private_key_password: The private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def pk_private_key_password(self):
        """Gets the pk_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        加密的私钥密码  # noqa: E501

        :return: The pk_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._pk_private_key_password

    @pk_private_key_password.setter
    def pk_private_key_password(self, pk_private_key_password):
        """Sets the pk_private_key_password of this ConfigCertificateFingerprintWithToken.

        加密的私钥密码  # noqa: E501

        :param pk_private_key_password: The pk_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """

        self._pk_private_key_password = pk_private_key_password

    @property
    def encrypted_private_key_password(self):
        """Gets the encrypted_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501

        加密的私钥密码  # noqa: E501

        :return: The encrypted_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_private_key_password

    @encrypted_private_key_password.setter
    def encrypted_private_key_password(self, encrypted_private_key_password):
        """Sets the encrypted_private_key_password of this ConfigCertificateFingerprintWithToken.

        加密的私钥密码  # noqa: E501

        :param encrypted_private_key_password: The encrypted_private_key_password of this ConfigCertificateFingerprintWithToken.  # noqa: E501
        :type: str
        """

        self._encrypted_private_key_password = encrypted_private_key_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCertificateFingerprintWithToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCertificateFingerprintWithToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
