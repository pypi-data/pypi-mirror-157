# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_accumulate import StatStatisticAccumulate  # noqa: F401,E501


class DebugHttpCacheEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cache_id': 'int',
        'url': 'str',
        'compression_status': 'str',
        'version': 'str',
        'mime': 'str',
        'size_byte': 'int',
        'expired_timestamp': 'int',
        'refresh_timestamp': 'int',
        'hit': 'StatStatisticAccumulate',
        'netns': 'str'
    }

    attribute_map = {
        'cache_id': 'cache_id',
        'url': 'url',
        'compression_status': 'compression_status',
        'version': 'version',
        'mime': 'mime',
        'size_byte': 'size_byte',
        'expired_timestamp': 'expired_timestamp',
        'refresh_timestamp': 'refresh_timestamp',
        'hit': 'hit',
        'netns': 'netns'
    }

    def __init__(self, cache_id=None, url=None, compression_status=None, version=None, mime=None, size_byte=None, expired_timestamp=None, refresh_timestamp=None, hit=None, netns='default'):  # noqa: E501
        """DebugHttpCacheEntry - a model defined in Swagger"""  # noqa: E501

        self._cache_id = None
        self._url = None
        self._compression_status = None
        self._version = None
        self._mime = None
        self._size_byte = None
        self._expired_timestamp = None
        self._refresh_timestamp = None
        self._hit = None
        self._netns = None
        self.discriminator = None

        if cache_id is not None:
            self.cache_id = cache_id
        if url is not None:
            self.url = url
        if compression_status is not None:
            self.compression_status = compression_status
        if version is not None:
            self.version = version
        if mime is not None:
            self.mime = mime
        if size_byte is not None:
            self.size_byte = size_byte
        if expired_timestamp is not None:
            self.expired_timestamp = expired_timestamp
        if refresh_timestamp is not None:
            self.refresh_timestamp = refresh_timestamp
        if hit is not None:
            self.hit = hit
        if netns is not None:
            self.netns = netns

    @property
    def cache_id(self):
        """Gets the cache_id of this DebugHttpCacheEntry.  # noqa: E501

        缓存id  # noqa: E501

        :return: The cache_id of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: int
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this DebugHttpCacheEntry.

        缓存id  # noqa: E501

        :param cache_id: The cache_id of this DebugHttpCacheEntry.  # noqa: E501
        :type: int
        """

        self._cache_id = cache_id

    @property
    def url(self):
        """Gets the url of this DebugHttpCacheEntry.  # noqa: E501

        虚拟服务url  # noqa: E501

        :return: The url of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DebugHttpCacheEntry.

        虚拟服务url  # noqa: E501

        :param url: The url of this DebugHttpCacheEntry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def compression_status(self):
        """Gets the compression_status of this DebugHttpCacheEntry.  # noqa: E501

        压缩状态,可能是NORMAL,GZIP,DEFLATE,UNKNOW等  # noqa: E501

        :return: The compression_status of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: str
        """
        return self._compression_status

    @compression_status.setter
    def compression_status(self, compression_status):
        """Sets the compression_status of this DebugHttpCacheEntry.

        压缩状态,可能是NORMAL,GZIP,DEFLATE,UNKNOW等  # noqa: E501

        :param compression_status: The compression_status of this DebugHttpCacheEntry.  # noqa: E501
        :type: str
        """

        self._compression_status = compression_status

    @property
    def version(self):
        """Gets the version of this DebugHttpCacheEntry.  # noqa: E501

        http协议版本  # noqa: E501

        :return: The version of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DebugHttpCacheEntry.

        http协议版本  # noqa: E501

        :param version: The version of this DebugHttpCacheEntry.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def mime(self):
        """Gets the mime of this DebugHttpCacheEntry.  # noqa: E501

        mime类型  # noqa: E501

        :return: The mime of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this DebugHttpCacheEntry.

        mime类型  # noqa: E501

        :param mime: The mime of this DebugHttpCacheEntry.  # noqa: E501
        :type: str
        """

        self._mime = mime

    @property
    def size_byte(self):
        """Gets the size_byte of this DebugHttpCacheEntry.  # noqa: E501

        缓存大小  # noqa: E501

        :return: The size_byte of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: int
        """
        return self._size_byte

    @size_byte.setter
    def size_byte(self, size_byte):
        """Sets the size_byte of this DebugHttpCacheEntry.

        缓存大小  # noqa: E501

        :param size_byte: The size_byte of this DebugHttpCacheEntry.  # noqa: E501
        :type: int
        """

        self._size_byte = size_byte

    @property
    def expired_timestamp(self):
        """Gets the expired_timestamp of this DebugHttpCacheEntry.  # noqa: E501

        到期时间戳  # noqa: E501

        :return: The expired_timestamp of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: int
        """
        return self._expired_timestamp

    @expired_timestamp.setter
    def expired_timestamp(self, expired_timestamp):
        """Sets the expired_timestamp of this DebugHttpCacheEntry.

        到期时间戳  # noqa: E501

        :param expired_timestamp: The expired_timestamp of this DebugHttpCacheEntry.  # noqa: E501
        :type: int
        """

        self._expired_timestamp = expired_timestamp

    @property
    def refresh_timestamp(self):
        """Gets the refresh_timestamp of this DebugHttpCacheEntry.  # noqa: E501

        刷新时间戳  # noqa: E501

        :return: The refresh_timestamp of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: int
        """
        return self._refresh_timestamp

    @refresh_timestamp.setter
    def refresh_timestamp(self, refresh_timestamp):
        """Sets the refresh_timestamp of this DebugHttpCacheEntry.

        刷新时间戳  # noqa: E501

        :param refresh_timestamp: The refresh_timestamp of this DebugHttpCacheEntry.  # noqa: E501
        :type: int
        """

        self._refresh_timestamp = refresh_timestamp

    @property
    def hit(self):
        """Gets the hit of this DebugHttpCacheEntry.  # noqa: E501

        缓存命中记录  # noqa: E501

        :return: The hit of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this DebugHttpCacheEntry.

        缓存命中记录  # noqa: E501

        :param hit: The hit of this DebugHttpCacheEntry.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._hit = hit

    @property
    def netns(self):
        """Gets the netns of this DebugHttpCacheEntry.  # noqa: E501

        所属netns名称  # noqa: E501

        :return: The netns of this DebugHttpCacheEntry.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this DebugHttpCacheEntry.

        所属netns名称  # noqa: E501

        :param netns: The netns of this DebugHttpCacheEntry.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugHttpCacheEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugHttpCacheEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
