# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_persist_request_seek_rules import ConfigPersistRequestSeekRules  # noqa: F401,E501
from adapi_sdk.models.config_persist_response_study_rules import ConfigPersistResponseStudyRules  # noqa: F401,E501


class ConfigPersist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'source_ipv4_netmask_length': 'int',
        'source_ipv6_prefix_length': 'int',
        'cookie': 'str',
        'domain': 'str',
        'path': 'str',
        'http_only': 'str',
        'secure': 'str',
        'component': 'str',
        'header': 'str',
        'keyword': 'str',
        'offset': 'int',
        'terminator': 'str',
        'request_seek_rules': 'list[ConfigPersistRequestSeekRules]',
        'response_study_rules': 'list[ConfigPersistResponseStudyRules]',
        'radius_attribute_id': 'int',
        'timeout': 'int',
        'busy_protect': 'str',
        'record_scope': 'str',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'source_ipv4_netmask_length': 'source_ipv4_netmask_length',
        'source_ipv6_prefix_length': 'source_ipv6_prefix_length',
        'cookie': 'cookie',
        'domain': 'domain',
        'path': 'path',
        'http_only': 'http_only',
        'secure': 'secure',
        'component': 'component',
        'header': 'header',
        'keyword': 'keyword',
        'offset': 'offset',
        'terminator': 'terminator',
        'request_seek_rules': 'request_seek_rules',
        'response_study_rules': 'response_study_rules',
        'radius_attribute_id': 'radius_attribute_id',
        'timeout': 'timeout',
        'busy_protect': 'busy_protect',
        'record_scope': 'record_scope',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, type='COOKIE-STUDY', source_ipv4_netmask_length=None, source_ipv6_prefix_length=None, cookie=None, domain=None, path='/', http_only='DISABLE', secure='DISABLE', component=None, header=None, keyword=None, offset=None, terminator=None, request_seek_rules=None, response_study_rules=None, radius_attribute_id=None, timeout=None, busy_protect='DISABLE', record_scope='POOL', netns='default'):  # noqa: E501
        """ConfigPersist - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._source_ipv4_netmask_length = None
        self._source_ipv6_prefix_length = None
        self._cookie = None
        self._domain = None
        self._path = None
        self._http_only = None
        self._secure = None
        self._component = None
        self._header = None
        self._keyword = None
        self._offset = None
        self._terminator = None
        self._request_seek_rules = None
        self._response_study_rules = None
        self._radius_attribute_id = None
        self._timeout = None
        self._busy_protect = None
        self._record_scope = None
        self._netns = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if source_ipv4_netmask_length is not None:
            self.source_ipv4_netmask_length = source_ipv4_netmask_length
        if source_ipv6_prefix_length is not None:
            self.source_ipv6_prefix_length = source_ipv6_prefix_length
        if cookie is not None:
            self.cookie = cookie
        if domain is not None:
            self.domain = domain
        if path is not None:
            self.path = path
        if http_only is not None:
            self.http_only = http_only
        if secure is not None:
            self.secure = secure
        if component is not None:
            self.component = component
        if header is not None:
            self.header = header
        if keyword is not None:
            self.keyword = keyword
        if offset is not None:
            self.offset = offset
        if terminator is not None:
            self.terminator = terminator
        if request_seek_rules is not None:
            self.request_seek_rules = request_seek_rules
        if response_study_rules is not None:
            self.response_study_rules = response_study_rules
        if radius_attribute_id is not None:
            self.radius_attribute_id = radius_attribute_id
        if timeout is not None:
            self.timeout = timeout
        if busy_protect is not None:
            self.busy_protect = busy_protect
        if record_scope is not None:
            self.record_scope = record_scope
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this ConfigPersist.  # noqa: E501


        :return: The name of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPersist.


        :param name: The name of this ConfigPersist.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPersist.  # noqa: E501


        :return: The description of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPersist.


        :param description: The description of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigPersist.  # noqa: E501


        :return: The type of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPersist.


        :param type: The type of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["SOURCE-IP", "COOKIE-INSERT", "COOKIE-STUDY", "COOKIE-REWRITE", "HTTP-REQUEST-STUDY", "HTTP-RESPONSE-STUDY", "RADIUS", "SSL-SESSIONID"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source_ipv4_netmask_length(self):
        """Gets the source_ipv4_netmask_length of this ConfigPersist.  # noqa: E501


        :return: The source_ipv4_netmask_length of this ConfigPersist.  # noqa: E501
        :rtype: int
        """
        return self._source_ipv4_netmask_length

    @source_ipv4_netmask_length.setter
    def source_ipv4_netmask_length(self, source_ipv4_netmask_length):
        """Sets the source_ipv4_netmask_length of this ConfigPersist.


        :param source_ipv4_netmask_length: The source_ipv4_netmask_length of this ConfigPersist.  # noqa: E501
        :type: int
        """

        self._source_ipv4_netmask_length = source_ipv4_netmask_length

    @property
    def source_ipv6_prefix_length(self):
        """Gets the source_ipv6_prefix_length of this ConfigPersist.  # noqa: E501


        :return: The source_ipv6_prefix_length of this ConfigPersist.  # noqa: E501
        :rtype: int
        """
        return self._source_ipv6_prefix_length

    @source_ipv6_prefix_length.setter
    def source_ipv6_prefix_length(self, source_ipv6_prefix_length):
        """Sets the source_ipv6_prefix_length of this ConfigPersist.


        :param source_ipv6_prefix_length: The source_ipv6_prefix_length of this ConfigPersist.  # noqa: E501
        :type: int
        """

        self._source_ipv6_prefix_length = source_ipv6_prefix_length

    @property
    def cookie(self):
        """Gets the cookie of this ConfigPersist.  # noqa: E501


        :return: The cookie of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this ConfigPersist.


        :param cookie: The cookie of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._cookie = cookie

    @property
    def domain(self):
        """Gets the domain of this ConfigPersist.  # noqa: E501


        :return: The domain of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigPersist.


        :param domain: The domain of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def path(self):
        """Gets the path of this ConfigPersist.  # noqa: E501


        :return: The path of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConfigPersist.


        :param path: The path of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def http_only(self):
        """Gets the http_only of this ConfigPersist.  # noqa: E501


        :return: The http_only of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this ConfigPersist.


        :param http_only: The http_only of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if http_only not in allowed_values:
            raise ValueError(
                "Invalid value for `http_only` ({0}), must be one of {1}"  # noqa: E501
                .format(http_only, allowed_values)
            )

        self._http_only = http_only

    @property
    def secure(self):
        """Gets the secure of this ConfigPersist.  # noqa: E501


        :return: The secure of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this ConfigPersist.


        :param secure: The secure of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if secure not in allowed_values:
            raise ValueError(
                "Invalid value for `secure` ({0}), must be one of {1}"  # noqa: E501
                .format(secure, allowed_values)
            )

        self._secure = secure

    @property
    def component(self):
        """Gets the component of this ConfigPersist.  # noqa: E501


        :return: The component of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ConfigPersist.


        :param component: The component of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["URI", "HEADER", "BODY"]  # noqa: E501
        if component not in allowed_values:
            raise ValueError(
                "Invalid value for `component` ({0}), must be one of {1}"  # noqa: E501
                .format(component, allowed_values)
            )

        self._component = component

    @property
    def header(self):
        """Gets the header of this ConfigPersist.  # noqa: E501


        :return: The header of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ConfigPersist.


        :param header: The header of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def keyword(self):
        """Gets the keyword of this ConfigPersist.  # noqa: E501


        :return: The keyword of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this ConfigPersist.


        :param keyword: The keyword of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def offset(self):
        """Gets the offset of this ConfigPersist.  # noqa: E501

        Start from the first char of keyword.  # noqa: E501

        :return: The offset of this ConfigPersist.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ConfigPersist.

        Start from the first char of keyword.  # noqa: E501

        :param offset: The offset of this ConfigPersist.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def terminator(self):
        """Gets the terminator of this ConfigPersist.  # noqa: E501


        :return: The terminator of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._terminator

    @terminator.setter
    def terminator(self, terminator):
        """Sets the terminator of this ConfigPersist.


        :param terminator: The terminator of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._terminator = terminator

    @property
    def request_seek_rules(self):
        """Gets the request_seek_rules of this ConfigPersist.  # noqa: E501


        :return: The request_seek_rules of this ConfigPersist.  # noqa: E501
        :rtype: list[ConfigPersistRequestSeekRules]
        """
        return self._request_seek_rules

    @request_seek_rules.setter
    def request_seek_rules(self, request_seek_rules):
        """Sets the request_seek_rules of this ConfigPersist.


        :param request_seek_rules: The request_seek_rules of this ConfigPersist.  # noqa: E501
        :type: list[ConfigPersistRequestSeekRules]
        """

        self._request_seek_rules = request_seek_rules

    @property
    def response_study_rules(self):
        """Gets the response_study_rules of this ConfigPersist.  # noqa: E501


        :return: The response_study_rules of this ConfigPersist.  # noqa: E501
        :rtype: list[ConfigPersistResponseStudyRules]
        """
        return self._response_study_rules

    @response_study_rules.setter
    def response_study_rules(self, response_study_rules):
        """Sets the response_study_rules of this ConfigPersist.


        :param response_study_rules: The response_study_rules of this ConfigPersist.  # noqa: E501
        :type: list[ConfigPersistResponseStudyRules]
        """

        self._response_study_rules = response_study_rules

    @property
    def radius_attribute_id(self):
        """Gets the radius_attribute_id of this ConfigPersist.  # noqa: E501


        :return: The radius_attribute_id of this ConfigPersist.  # noqa: E501
        :rtype: int
        """
        return self._radius_attribute_id

    @radius_attribute_id.setter
    def radius_attribute_id(self, radius_attribute_id):
        """Sets the radius_attribute_id of this ConfigPersist.


        :param radius_attribute_id: The radius_attribute_id of this ConfigPersist.  # noqa: E501
        :type: int
        """

        self._radius_attribute_id = radius_attribute_id

    @property
    def timeout(self):
        """Gets the timeout of this ConfigPersist.  # noqa: E501


        :return: The timeout of this ConfigPersist.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigPersist.


        :param timeout: The timeout of this ConfigPersist.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigPersist.  # noqa: E501


        :return: The busy_protect of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigPersist.


        :param busy_protect: The busy_protect of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_protect, allowed_values)
            )

        self._busy_protect = busy_protect

    @property
    def record_scope(self):
        """Gets the record_scope of this ConfigPersist.  # noqa: E501


        :return: The record_scope of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._record_scope

    @record_scope.setter
    def record_scope(self, record_scope):
        """Sets the record_scope of this ConfigPersist.


        :param record_scope: The record_scope of this ConfigPersist.  # noqa: E501
        :type: str
        """
        allowed_values = ["POOL", "VIP", "GLOBAL"]  # noqa: E501
        if record_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `record_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(record_scope, allowed_values)
            )

        self._record_scope = record_scope

    @property
    def netns(self):
        """Gets the netns of this ConfigPersist.  # noqa: E501


        :return: The netns of this ConfigPersist.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this ConfigPersist.


        :param netns: The netns of this ConfigPersist.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPersist, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPersist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
