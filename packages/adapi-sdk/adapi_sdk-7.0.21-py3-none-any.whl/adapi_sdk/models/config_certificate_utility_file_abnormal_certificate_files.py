# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCertificateUtilityFileAbnormalCertificateFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_token': 'str',
        'abnormal': 'str'
    }

    attribute_map = {
        'file_token': 'file_token',
        'abnormal': 'abnormal'
    }

    def __init__(self, file_token=None, abnormal=None):  # noqa: E501
        """ConfigCertificateUtilityFileAbnormalCertificateFiles - a model defined in Swagger"""  # noqa: E501

        self._file_token = None
        self._abnormal = None
        self.discriminator = None

        if file_token is not None:
            self.file_token = file_token
        if abnormal is not None:
            self.abnormal = abnormal

    @property
    def file_token(self):
        """Gets the file_token of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501

        证书文件token  # noqa: E501

        :return: The file_token of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_token

    @file_token.setter
    def file_token(self, file_token):
        """Sets the file_token of this ConfigCertificateUtilityFileAbnormalCertificateFiles.

        证书文件token  # noqa: E501

        :param file_token: The file_token of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501
        :type: str
        """

        self._file_token = file_token

    @property
    def abnormal(self):
        """Gets the abnormal of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501

        证书错误原因  # noqa: E501

        :return: The abnormal of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501
        :rtype: str
        """
        return self._abnormal

    @abnormal.setter
    def abnormal(self, abnormal):
        """Sets the abnormal of this ConfigCertificateUtilityFileAbnormalCertificateFiles.

        证书错误原因  # noqa: E501

        :param abnormal: The abnormal of this ConfigCertificateUtilityFileAbnormalCertificateFiles.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUIRED-PASSWORD", "INCORRECT-PASSWORD", "BROKEN-FILE", "INVALID-CERTIFICATE", "UNKNOWN"]  # noqa: E501
        if abnormal not in allowed_values:
            raise ValueError(
                "Invalid value for `abnormal` ({0}), must be one of {1}"  # noqa: E501
                .format(abnormal, allowed_values)
            )

        self._abnormal = abnormal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCertificateUtilityFileAbnormalCertificateFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCertificateUtilityFileAbnormalCertificateFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
