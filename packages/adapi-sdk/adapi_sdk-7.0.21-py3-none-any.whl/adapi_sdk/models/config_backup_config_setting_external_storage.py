# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_backup_config_setting_external_storage_file_encryption import ConfigBackupConfigSettingExternalStorageFileEncryption  # noqa: F401,E501
from adapi_sdk.models.config_backup_config_setting_external_storage_server import ConfigBackupConfigSettingExternalStorageServer  # noqa: F401,E501


class ConfigBackupConfigSettingExternalStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'frequency': 'str',
        'task_time': 'str',
        'day_of_month': 'int',
        'day_of_week': 'int',
        'server': 'ConfigBackupConfigSettingExternalStorageServer',
        'network': 'str',
        'upload_package': 'list[str]',
        'file_encryption': 'ConfigBackupConfigSettingExternalStorageFileEncryption'
    }

    attribute_map = {
        'state': 'state',
        'frequency': 'frequency',
        'task_time': 'task_time',
        'day_of_month': 'day_of_month',
        'day_of_week': 'day_of_week',
        'server': 'server',
        'network': 'network',
        'upload_package': 'upload_package',
        'file_encryption': 'file_encryption'
    }

    def __init__(self, state='DISABLE', frequency='DAILY', task_time='00:00', day_of_month=None, day_of_week=None, server=None, network='AUTO', upload_package=None, file_encryption=None):  # noqa: E501
        """ConfigBackupConfigSettingExternalStorage - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._frequency = None
        self._task_time = None
        self._day_of_month = None
        self._day_of_week = None
        self._server = None
        self._network = None
        self._upload_package = None
        self._file_encryption = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if frequency is not None:
            self.frequency = frequency
        if task_time is not None:
            self.task_time = task_time
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if server is not None:
            self.server = server
        if network is not None:
            self.network = network
        if upload_package is not None:
            self.upload_package = upload_package
        if file_encryption is not None:
            self.file_encryption = file_encryption

    @property
    def state(self):
        """Gets the state of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        是否开启外部备份  # noqa: E501

        :return: The state of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigBackupConfigSettingExternalStorage.

        是否开启外部备份  # noqa: E501

        :param state: The state of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def frequency(self):
        """Gets the frequency of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        外部备份的频率  # noqa: E501

        :return: The frequency of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ConfigBackupConfigSettingExternalStorage.

        外部备份的频率  # noqa: E501

        :param frequency: The frequency of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def task_time(self):
        """Gets the task_time of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        时间格式，Format: 'hh:mm'  # noqa: E501

        :return: The task_time of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: str
        """
        return self._task_time

    @task_time.setter
    def task_time(self, task_time):
        """Sets the task_time of this ConfigBackupConfigSettingExternalStorage.

        时间格式，Format: 'hh:mm'  # noqa: E501

        :param task_time: The task_time of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: str
        """

        self._task_time = task_time

    @property
    def day_of_month(self):
        """Gets the day_of_month of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        当前月份  # noqa: E501

        :return: The day_of_month of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this ConfigBackupConfigSettingExternalStorage.

        当前月份  # noqa: E501

        :param day_of_month: The day_of_month of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: int
        """
        if day_of_month is not None and day_of_month > 31:  # noqa: E501
            raise ValueError("Invalid value for `day_of_month`, must be a value less than or equal to `31`")  # noqa: E501
        if day_of_month is not None and day_of_month < 1:  # noqa: E501
            raise ValueError("Invalid value for `day_of_month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._day_of_month = day_of_month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        当前是一周的第几天  # noqa: E501

        :return: The day_of_week of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this ConfigBackupConfigSettingExternalStorage.

        当前是一周的第几天  # noqa: E501

        :param day_of_week: The day_of_week of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: int
        """
        if day_of_week is not None and day_of_week > 6:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value less than or equal to `6`")  # noqa: E501
        if day_of_week is not None and day_of_week < 0:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must be a value greater than or equal to `0`")  # noqa: E501

        self._day_of_week = day_of_week

    @property
    def server(self):
        """Gets the server of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501


        :return: The server of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: ConfigBackupConfigSettingExternalStorageServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConfigBackupConfigSettingExternalStorage.


        :param server: The server of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: ConfigBackupConfigSettingExternalStorageServer
        """

        self._server = server

    @property
    def network(self):
        """Gets the network of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigBackupConfigSettingExternalStorage.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def upload_package(self):
        """Gets the upload_package of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501

        文件类型  # noqa: E501

        :return: The upload_package of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: list[str]
        """
        return self._upload_package

    @upload_package.setter
    def upload_package(self, upload_package):
        """Sets the upload_package of this ConfigBackupConfigSettingExternalStorage.

        文件类型  # noqa: E501

        :param upload_package: The upload_package of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["BACKUP-CONFIG-PACKAGE", "JSON-CONFIG-PACKAGE"]  # noqa: E501
        if not set(upload_package).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `upload_package` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(upload_package) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._upload_package = upload_package

    @property
    def file_encryption(self):
        """Gets the file_encryption of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501


        :return: The file_encryption of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :rtype: ConfigBackupConfigSettingExternalStorageFileEncryption
        """
        return self._file_encryption

    @file_encryption.setter
    def file_encryption(self, file_encryption):
        """Sets the file_encryption of this ConfigBackupConfigSettingExternalStorage.


        :param file_encryption: The file_encryption of this ConfigBackupConfigSettingExternalStorage.  # noqa: E501
        :type: ConfigBackupConfigSettingExternalStorageFileEncryption
        """

        self._file_encryption = file_encryption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigBackupConfigSettingExternalStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigBackupConfigSettingExternalStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
