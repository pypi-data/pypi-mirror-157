# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_local_device_virtual_service_detail_vip_ports import StatLocalDeviceVirtualServiceDetailVipPorts  # noqa: F401,E501


class StatLocalDeviceVirtualServiceDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'health': 'str',
        'failure_reason': 'str',
        'addresses': 'list[str]',
        'port': 'int',
        'protocol': 'str',
        'vip_ports': 'list[StatLocalDeviceVirtualServiceDetailVipPorts]'
    }

    attribute_map = {
        'name': 'name',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'addresses': 'addresses',
        'port': 'port',
        'protocol': 'protocol',
        'vip_ports': 'vip_ports'
    }

    def __init__(self, name=None, health=None, failure_reason=None, addresses=None, port=None, protocol=None, vip_ports=None):  # noqa: E501
        """StatLocalDeviceVirtualServiceDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._health = None
        self._failure_reason = None
        self._addresses = None
        self._port = None
        self._protocol = None
        self._vip_ports = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if addresses is not None:
            self.addresses = addresses
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if vip_ports is not None:
            self.vip_ports = vip_ports

    @property
    def name(self):
        """Gets the name of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务名称  # noqa: E501

        :return: The name of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务名称  # noqa: E501

        :param name: The name of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def health(self):
        """Gets the health of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :return: The health of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :param health: The health of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务故障原因  # noqa: E501

        :return: The failure_reason of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务故障原因  # noqa: E501

        :param failure_reason: The failure_reason of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def addresses(self):
        """Gets the addresses of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务ip  # noqa: E501

        :return: The addresses of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务ip  # noqa: E501

        :param addresses: The addresses of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def port(self):
        """Gets the port of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务端口  # noqa: E501

        :return: The port of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务端口  # noqa: E501

        :param port: The port of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务的协议  # noqa: E501

        :return: The protocol of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务的协议  # noqa: E501

        :param protocol: The protocol of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def vip_ports(self):
        """Gets the vip_ports of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501

        虚拟服务IP和端口  # noqa: E501

        :return: The vip_ports of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :rtype: list[StatLocalDeviceVirtualServiceDetailVipPorts]
        """
        return self._vip_ports

    @vip_ports.setter
    def vip_ports(self, vip_ports):
        """Sets the vip_ports of this StatLocalDeviceVirtualServiceDetail.

        虚拟服务IP和端口  # noqa: E501

        :param vip_ports: The vip_ports of this StatLocalDeviceVirtualServiceDetail.  # noqa: E501
        :type: list[StatLocalDeviceVirtualServiceDetailVipPorts]
        """

        self._vip_ports = vip_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatLocalDeviceVirtualServiceDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatLocalDeviceVirtualServiceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
