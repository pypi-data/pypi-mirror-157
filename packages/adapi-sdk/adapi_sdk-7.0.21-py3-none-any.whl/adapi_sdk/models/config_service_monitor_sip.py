# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorSip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'proto_method': 'str',
        'send_request': 'str',
        'send_header': 'list[str]',
        'expect_status_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'proto_method': 'proto_method',
        'send_request': 'send_request',
        'send_header': 'send_header',
        'expect_status_code': 'expect_status_code'
    }

    def __init__(self, name=None, description=None, type='SIP', timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', proto_method='UDP', send_request=None, send_header=None, expect_status_code='200'):  # noqa: E501
        """ConfigServiceMonitorSip - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._proto_method = None
        self._send_request = None
        self._send_header = None
        self._expect_status_code = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if proto_method is not None:
            self.proto_method = proto_method
        if send_request is not None:
            self.send_request = send_request
        if send_header is not None:
            self.send_header = send_header
        if expect_status_code is not None:
            self.expect_status_code = expect_status_code

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorSip.  # noqa: E501

        监视器名称  # noqa: E501

        :return: The name of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorSip.

        监视器名称  # noqa: E501

        :param name: The name of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorSip.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorSip.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorSip.  # noqa: E501

        监视器类型  # noqa: E501

        :return: The type of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorSip.

        监视器类型  # noqa: E501

        :param type: The type of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitorSip.  # noqa: E501

        监视器监视超时时间  # noqa: E501

        :return: The timeout of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitorSip.

        监视器监视超时时间  # noqa: E501

        :param timeout: The timeout of this ConfigServiceMonitorSip.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitorSip.  # noqa: E501

        间隔时间  # noqa: E501

        :return: The interval of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitorSip.

        间隔时间  # noqa: E501

        :param interval: The interval of this ConfigServiceMonitorSip.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitorSip.  # noqa: E501

        Format: * | {IP} | {DOMAIN} | {HOST}  # noqa: E501

        :return: The host of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitorSip.

        Format: * | {IP} | {DOMAIN} | {HOST}  # noqa: E501

        :param host: The host of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitorSip.  # noqa: E501

        监视器监视端口  # noqa: E501

        :return: The port of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitorSip.

        监视器监视端口  # noqa: E501

        :param port: The port of this ConfigServiceMonitorSip.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorSip.  # noqa: E501

        是否开启调试模式  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorSip.

        是否开启调试模式  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def proto_method(self):
        """Gets the proto_method of this ConfigServiceMonitorSip.  # noqa: E501

        协议类型  # noqa: E501

        :return: The proto_method of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._proto_method

    @proto_method.setter
    def proto_method(self, proto_method):
        """Sets the proto_method of this ConfigServiceMonitorSip.

        协议类型  # noqa: E501

        :param proto_method: The proto_method of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if proto_method not in allowed_values:
            raise ValueError(
                "Invalid value for `proto_method` ({0}), must be one of {1}"  # noqa: E501
                .format(proto_method, allowed_values)
            )

        self._proto_method = proto_method

    @property
    def send_request(self):
        """Gets the send_request of this ConfigServiceMonitorSip.  # noqa: E501

        发送请求行  # noqa: E501

        :return: The send_request of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._send_request

    @send_request.setter
    def send_request(self, send_request):
        """Sets the send_request of this ConfigServiceMonitorSip.

        发送请求行  # noqa: E501

        :param send_request: The send_request of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        if send_request is not None and len(send_request) > 255:
            raise ValueError("Invalid value for `send_request`, length must be less than or equal to `255`")  # noqa: E501

        self._send_request = send_request

    @property
    def send_header(self):
        """Gets the send_header of this ConfigServiceMonitorSip.  # noqa: E501

        发送请求头部  # noqa: E501

        :return: The send_header of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: list[str]
        """
        return self._send_header

    @send_header.setter
    def send_header(self, send_header):
        """Sets the send_header of this ConfigServiceMonitorSip.

        发送请求头部  # noqa: E501

        :param send_header: The send_header of this ConfigServiceMonitorSip.  # noqa: E501
        :type: list[str]
        """

        self._send_header = send_header

    @property
    def expect_status_code(self):
        """Gets the expect_status_code of this ConfigServiceMonitorSip.  # noqa: E501

        回复状态码  # noqa: E501

        :return: The expect_status_code of this ConfigServiceMonitorSip.  # noqa: E501
        :rtype: str
        """
        return self._expect_status_code

    @expect_status_code.setter
    def expect_status_code(self, expect_status_code):
        """Sets the expect_status_code of this ConfigServiceMonitorSip.

        回复状态码  # noqa: E501

        :param expect_status_code: The expect_status_code of this ConfigServiceMonitorSip.  # noqa: E501
        :type: str
        """
        if expect_status_code is not None and len(expect_status_code) > 255:
            raise ValueError("Invalid value for `expect_status_code`, length must be less than or equal to `255`")  # noqa: E501
        if expect_status_code is not None and len(expect_status_code) < 3:
            raise ValueError("Invalid value for `expect_status_code`, length must be greater than or equal to `3`")  # noqa: E501

        self._expect_status_code = expect_status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorSip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorSip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
