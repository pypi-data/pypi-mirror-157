# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_profile_cache import ConfigHttpProfileCache  # noqa: F401,E501
from adapi_sdk.models.config_http_profile_compression import ConfigHttpProfileCompression  # noqa: F401,E501
from adapi_sdk.models.config_http_profile_source_address import ConfigHttpProfileSourceAddress  # noqa: F401,E501


class ConfigHttpProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'cache': 'ConfigHttpProfileCache',
        'compression': 'ConfigHttpProfileCompression',
        'source_address': 'ConfigHttpProfileSourceAddress'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'cache': 'cache',
        'compression': 'compression',
        'source_address': 'source_address'
    }

    def __init__(self, name=None, description=None, cache=None, compression=None, source_address=None):  # noqa: E501
        """ConfigHttpProfile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._cache = None
        self._compression = None
        self._source_address = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if cache is not None:
            self.cache = cache
        if compression is not None:
            self.compression = compression
        if source_address is not None:
            self.source_address = source_address

    @property
    def name(self):
        """Gets the name of this ConfigHttpProfile.  # noqa: E501

        必选参数；指定HTTP优化策略的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigHttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigHttpProfile.

        必选参数；指定HTTP优化策略的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigHttpProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigHttpProfile.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigHttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigHttpProfile.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigHttpProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cache(self):
        """Gets the cache of this ConfigHttpProfile.  # noqa: E501


        :return: The cache of this ConfigHttpProfile.  # noqa: E501
        :rtype: ConfigHttpProfileCache
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this ConfigHttpProfile.


        :param cache: The cache of this ConfigHttpProfile.  # noqa: E501
        :type: ConfigHttpProfileCache
        """

        self._cache = cache

    @property
    def compression(self):
        """Gets the compression of this ConfigHttpProfile.  # noqa: E501


        :return: The compression of this ConfigHttpProfile.  # noqa: E501
        :rtype: ConfigHttpProfileCompression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this ConfigHttpProfile.


        :param compression: The compression of this ConfigHttpProfile.  # noqa: E501
        :type: ConfigHttpProfileCompression
        """

        self._compression = compression

    @property
    def source_address(self):
        """Gets the source_address of this ConfigHttpProfile.  # noqa: E501


        :return: The source_address of this ConfigHttpProfile.  # noqa: E501
        :rtype: ConfigHttpProfileSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigHttpProfile.


        :param source_address: The source_address of this ConfigHttpProfile.  # noqa: E501
        :type: ConfigHttpProfileSourceAddress
        """

        self._source_address = source_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
