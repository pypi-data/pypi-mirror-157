# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorMysqlDatabaseSyncStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_replication_timeout': 'str',
        'replication_timeout': 'int'
    }

    attribute_map = {
        'check_replication_timeout': 'check_replication_timeout',
        'replication_timeout': 'replication_timeout'
    }

    def __init__(self, check_replication_timeout='DISABLE', replication_timeout=None):  # noqa: E501
        """ConfigServiceMonitorMysqlDatabaseSyncStatus - a model defined in Swagger"""  # noqa: E501

        self._check_replication_timeout = None
        self._replication_timeout = None
        self.discriminator = None

        if check_replication_timeout is not None:
            self.check_replication_timeout = check_replication_timeout
        if replication_timeout is not None:
            self.replication_timeout = replication_timeout

    @property
    def check_replication_timeout(self):
        """Gets the check_replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501

        可选参数;指定是否监视同步超时,默认disable  # noqa: E501

        :return: The check_replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501
        :rtype: str
        """
        return self._check_replication_timeout

    @check_replication_timeout.setter
    def check_replication_timeout(self, check_replication_timeout):
        """Sets the check_replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.

        可选参数;指定是否监视同步超时,默认disable  # noqa: E501

        :param check_replication_timeout: The check_replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if check_replication_timeout not in allowed_values:
            raise ValueError(
                "Invalid value for `check_replication_timeout` ({0}), must be one of {1}"  # noqa: E501
                .format(check_replication_timeout, allowed_values)
            )

        self._check_replication_timeout = check_replication_timeout

    @property
    def replication_timeout(self):
        """Gets the replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501

        可选参数;指定同步超时时间  # noqa: E501

        :return: The replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501
        :rtype: int
        """
        return self._replication_timeout

    @replication_timeout.setter
    def replication_timeout(self, replication_timeout):
        """Sets the replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.

        可选参数;指定同步超时时间  # noqa: E501

        :param replication_timeout: The replication_timeout of this ConfigServiceMonitorMysqlDatabaseSyncStatus.  # noqa: E501
        :type: int
        """
        if replication_timeout is not None and replication_timeout > 3600:  # noqa: E501
            raise ValueError("Invalid value for `replication_timeout`, must be a value less than or equal to `3600`")  # noqa: E501
        if replication_timeout is not None and replication_timeout < 0:  # noqa: E501
            raise ValueError("Invalid value for `replication_timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._replication_timeout = replication_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorMysqlDatabaseSyncStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorMysqlDatabaseSyncStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
