# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsRecordMxMxRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'priority': 'int',
        'ttl': 'int'
    }

    attribute_map = {
        'host': 'host',
        'priority': 'priority',
        'ttl': 'ttl'
    }

    def __init__(self, host=None, priority=None, ttl=None):  # noqa: E501
        """ConfigDnsRecordMxMxRecords - a model defined in Swagger"""  # noqa: E501

        self._host = None
        self._priority = None
        self._ttl = None
        self.discriminator = None

        self.host = host
        self.priority = priority
        if ttl is not None:
            self.ttl = ttl

    @property
    def host(self):
        """Gets the host of this ConfigDnsRecordMxMxRecords.  # noqa: E501

        主机名，校验格式为单个域名（最大长度250）或IPv4地址  # noqa: E501

        :return: The host of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigDnsRecordMxMxRecords.

        主机名，校验格式为单个域名（最大长度250）或IPv4地址  # noqa: E501

        :param host: The host of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def priority(self):
        """Gets the priority of this ConfigDnsRecordMxMxRecords.  # noqa: E501

        优先级，16位无符号整数，取值范围[0,65535]  # noqa: E501

        :return: The priority of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigDnsRecordMxMxRecords.

        优先级，16位无符号整数，取值范围[0,65535]  # noqa: E501

        :param priority: The priority of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501
        if priority is not None and priority > 65535:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def ttl(self):
        """Gets the ttl of this ConfigDnsRecordMxMxRecords.  # noqa: E501

        TTL取值范围为[0,2147483647]，单位秒  # noqa: E501

        :return: The ttl of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigDnsRecordMxMxRecords.

        TTL取值范围为[0,2147483647]，单位秒  # noqa: E501

        :param ttl: The ttl of this ConfigDnsRecordMxMxRecords.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsRecordMxMxRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsRecordMxMxRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
