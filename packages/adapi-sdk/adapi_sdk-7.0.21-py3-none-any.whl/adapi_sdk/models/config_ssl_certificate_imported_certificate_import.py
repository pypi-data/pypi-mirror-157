# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_certificate_private_key_with_token import ConfigCertificatePrivateKeyWithToken  # noqa: F401,E501


class ConfigSslCertificateImportedCertificateImport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'password': 'str',
        'pk_password': 'str',
        'encrypted_password': 'str',
        'certificate_chains': 'list[ConfigCertificatePrivateKeyWithToken]',
        'project': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'password': 'password',
        'pk_password': 'pk_password',
        'encrypted_password': 'encrypted_password',
        'certificate_chains': 'certificate_chains',
        'project': 'project'
    }

    def __init__(self, name=None, description=None, type='IMPORTED-CERTIFICATE', password=None, pk_password=None, encrypted_password=None, certificate_chains=None, project=None):  # noqa: E501
        """ConfigSslCertificateImportedCertificateImport - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._password = None
        self._pk_password = None
        self._encrypted_password = None
        self._certificate_chains = None
        self._project = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        self.certificate_chains = certificate_chains
        if project is not None:
            self.project = project

    @property
    def name(self):
        """Gets the name of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        证书名称  # noqa: E501

        :return: The name of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSslCertificateImportedCertificateImport.

        证书名称  # noqa: E501

        :param name: The name of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        证书描述  # noqa: E501

        :return: The description of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSslCertificateImportedCertificateImport.

        证书描述  # noqa: E501

        :param description: The description of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        证书类型  # noqa: E501

        :return: The type of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigSslCertificateImportedCertificateImport.

        证书类型  # noqa: E501

        :param type: The type of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """
        allowed_values = ["IMPORTED-CERTIFICATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def password(self):
        """Gets the password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        指定私钥加密密码  # noqa: E501

        :return: The password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigSslCertificateImportedCertificateImport.

        指定私钥加密密码  # noqa: E501

        :param password: The password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        指定加密的私钥加密密码  # noqa: E501

        :return: The pk_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigSslCertificateImportedCertificateImport.

        指定加密的私钥加密密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        指定加密的私钥加密密码  # noqa: E501

        :return: The encrypted_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigSslCertificateImportedCertificateImport.

        指定加密的私钥加密密码  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def certificate_chains(self):
        """Gets the certificate_chains of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        证书链  # noqa: E501

        :return: The certificate_chains of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: list[ConfigCertificatePrivateKeyWithToken]
        """
        return self._certificate_chains

    @certificate_chains.setter
    def certificate_chains(self, certificate_chains):
        """Sets the certificate_chains of this ConfigSslCertificateImportedCertificateImport.

        证书链  # noqa: E501

        :param certificate_chains: The certificate_chains of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: list[ConfigCertificatePrivateKeyWithToken]
        """
        if certificate_chains is None:
            raise ValueError("Invalid value for `certificate_chains`, must not be `None`")  # noqa: E501

        self._certificate_chains = certificate_chains

    @property
    def project(self):
        """Gets the project of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501

        项目名称  # noqa: E501

        :return: The project of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConfigSslCertificateImportedCertificateImport.

        项目名称  # noqa: E501

        :param project: The project of this ConfigSslCertificateImportedCertificateImport.  # noqa: E501
        :type: str
        """
        if project is not None and len(project) > 511:
            raise ValueError("Invalid value for `project`, length must be less than or equal to `511`")  # noqa: E501
        if project is not None and len(project) < 1:
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")  # noqa: E501

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSslCertificateImportedCertificateImport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSslCertificateImportedCertificateImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
