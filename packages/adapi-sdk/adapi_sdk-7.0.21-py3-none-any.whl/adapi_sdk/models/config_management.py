# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigManagement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[str]',
        'gateway': 'str',
        'gateway_ipv6': 'str',
        'host': 'str'
    }

    attribute_map = {
        'addresses': 'addresses',
        'gateway': 'gateway',
        'gateway_ipv6': 'gateway_ipv6',
        'host': 'host'
    }

    def __init__(self, addresses=None, gateway=None, gateway_ipv6=None, host='localhost'):  # noqa: E501
        """ConfigManagement - a model defined in Swagger"""  # noqa: E501

        self._addresses = None
        self._gateway = None
        self._gateway_ipv6 = None
        self._host = None
        self.discriminator = None

        self.addresses = addresses
        if gateway is not None:
            self.gateway = gateway
        if gateway_ipv6 is not None:
            self.gateway_ipv6 = gateway_ipv6
        if host is not None:
            self.host = host

    @property
    def addresses(self):
        """Gets the addresses of this ConfigManagement.  # noqa: E501

        管理网口地址列表  # noqa: E501

        :return: The addresses of this ConfigManagement.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ConfigManagement.

        管理网口地址列表  # noqa: E501

        :param addresses: The addresses of this ConfigManagement.  # noqa: E501
        :type: list[str]
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501

        self._addresses = addresses

    @property
    def gateway(self):
        """Gets the gateway of this ConfigManagement.  # noqa: E501

        管理网关-ipv4  # noqa: E501

        :return: The gateway of this ConfigManagement.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ConfigManagement.

        管理网关-ipv4  # noqa: E501

        :param gateway: The gateway of this ConfigManagement.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def gateway_ipv6(self):
        """Gets the gateway_ipv6 of this ConfigManagement.  # noqa: E501

        管理网关-ipv6  # noqa: E501

        :return: The gateway_ipv6 of this ConfigManagement.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ipv6

    @gateway_ipv6.setter
    def gateway_ipv6(self, gateway_ipv6):
        """Sets the gateway_ipv6 of this ConfigManagement.

        管理网关-ipv6  # noqa: E501

        :param gateway_ipv6: The gateway_ipv6 of this ConfigManagement.  # noqa: E501
        :type: str
        """

        self._gateway_ipv6 = gateway_ipv6

    @property
    def host(self):
        """Gets the host of this ConfigManagement.  # noqa: E501

        主机名  # noqa: E501

        :return: The host of this ConfigManagement.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigManagement.

        主机名  # noqa: E501

        :param host: The host of this ConfigManagement.  # noqa: E501
        :type: str
        """
        if host is not None and len(host) > 63:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `63`")  # noqa: E501
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigManagement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigManagement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
