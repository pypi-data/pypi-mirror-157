# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_qos_profile_dos_attack_control_http_url_rules import ConfigQosProfileDosAttackControlHttpUrlRules  # noqa: F401,E501


class ConfigQosProfileDosAttackControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'service': 'str',
        'statistical_time': 'int',
        'request_or_query_threshold': 'int',
        'http_url_rules': 'list[ConfigQosProfileDosAttackControlHttpUrlRules]'
    }

    attribute_map = {
        'state': 'state',
        'service': 'service',
        'statistical_time': 'statistical_time',
        'request_or_query_threshold': 'request_or_query_threshold',
        'http_url_rules': 'http_url_rules'
    }

    def __init__(self, state='DISABLE', service='HTTP', statistical_time=None, request_or_query_threshold=None, http_url_rules=None):  # noqa: E501
        """ConfigQosProfileDosAttackControl - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._service = None
        self._statistical_time = None
        self._request_or_query_threshold = None
        self._http_url_rules = None
        self.discriminator = None

        self.state = state
        if service is not None:
            self.service = service
        if statistical_time is not None:
            self.statistical_time = statistical_time
        if request_or_query_threshold is not None:
            self.request_or_query_threshold = request_or_query_threshold
        if http_url_rules is not None:
            self.http_url_rules = http_url_rules

    @property
    def state(self):
        """Gets the state of this ConfigQosProfileDosAttackControl.  # noqa: E501

        可选参数;指定是否启用DoS防护,enable表示启用,disable表示禁用；默认禁用  # noqa: E501

        :return: The state of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigQosProfileDosAttackControl.

        可选参数;指定是否启用DoS防护,enable表示启用,disable表示禁用；默认禁用  # noqa: E501

        :param state: The state of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def service(self):
        """Gets the service of this ConfigQosProfileDosAttackControl.  # noqa: E501

        可选参数;指定服务类型,支持http和dns,默认为http  # noqa: E501

        :return: The service of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigQosProfileDosAttackControl.

        可选参数;指定服务类型,支持http和dns,默认为http  # noqa: E501

        :param service: The service of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP", "DNS"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def statistical_time(self):
        """Gets the statistical_time of this ConfigQosProfileDosAttackControl.  # noqa: E501

        可选参数;指定统计时长,默认为60,单位为s  # noqa: E501

        :return: The statistical_time of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :rtype: int
        """
        return self._statistical_time

    @statistical_time.setter
    def statistical_time(self, statistical_time):
        """Sets the statistical_time of this ConfigQosProfileDosAttackControl.

        可选参数;指定统计时长,默认为60,单位为s  # noqa: E501

        :param statistical_time: The statistical_time of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :type: int
        """
        if statistical_time is not None and statistical_time > 36000:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value less than or equal to `36000`")  # noqa: E501
        if statistical_time is not None and statistical_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._statistical_time = statistical_time

    @property
    def request_or_query_threshold(self):
        """Gets the request_or_query_threshold of this ConfigQosProfileDosAttackControl.  # noqa: E501

        可选参数;指定请求速率上限,默认为10000  # noqa: E501

        :return: The request_or_query_threshold of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :rtype: int
        """
        return self._request_or_query_threshold

    @request_or_query_threshold.setter
    def request_or_query_threshold(self, request_or_query_threshold):
        """Sets the request_or_query_threshold of this ConfigQosProfileDosAttackControl.

        可选参数;指定请求速率上限,默认为10000  # noqa: E501

        :param request_or_query_threshold: The request_or_query_threshold of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :type: int
        """
        if request_or_query_threshold is not None and request_or_query_threshold > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `request_or_query_threshold`, must be a value less than or equal to `1000000`")  # noqa: E501
        if request_or_query_threshold is not None and request_or_query_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `request_or_query_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._request_or_query_threshold = request_or_query_threshold

    @property
    def http_url_rules(self):
        """Gets the http_url_rules of this ConfigQosProfileDosAttackControl.  # noqa: E501

        可选参数;指定针对具体url的Dos防护处理方式  # noqa: E501

        :return: The http_url_rules of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :rtype: list[ConfigQosProfileDosAttackControlHttpUrlRules]
        """
        return self._http_url_rules

    @http_url_rules.setter
    def http_url_rules(self, http_url_rules):
        """Sets the http_url_rules of this ConfigQosProfileDosAttackControl.

        可选参数;指定针对具体url的Dos防护处理方式  # noqa: E501

        :param http_url_rules: The http_url_rules of this ConfigQosProfileDosAttackControl.  # noqa: E501
        :type: list[ConfigQosProfileDosAttackControlHttpUrlRules]
        """

        self._http_url_rules = http_url_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfileDosAttackControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfileDosAttackControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
