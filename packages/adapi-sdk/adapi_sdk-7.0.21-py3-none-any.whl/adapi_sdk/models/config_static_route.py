# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_static_route_cluster_gateways import ConfigStaticRouteClusterGateways  # noqa: F401,E501


class ConfigStaticRoute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'subnet': 'str',
        'gateway': 'str',
        'cluster_gateways': 'list[ConfigStaticRouteClusterGateways]',
        'priority': 'int',
        'redistribute': 'str',
        'monitor_detect': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'subnet': 'subnet',
        'gateway': 'gateway',
        'cluster_gateways': 'cluster_gateways',
        'priority': 'priority',
        'redistribute': 'redistribute',
        'monitor_detect': 'monitor_detect'
    }

    def __init__(self, name=None, description=None, state='ENABLE', subnet=None, gateway=None, cluster_gateways=None, priority=None, redistribute='DISABLE', monitor_detect='DISABLE'):  # noqa: E501
        """ConfigStaticRoute - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._subnet = None
        self._gateway = None
        self._cluster_gateways = None
        self._priority = None
        self._redistribute = None
        self._monitor_detect = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        self.subnet = subnet
        self.gateway = gateway
        if cluster_gateways is not None:
            self.cluster_gateways = cluster_gateways
        if priority is not None:
            self.priority = priority
        if redistribute is not None:
            self.redistribute = redistribute
        if monitor_detect is not None:
            self.monitor_detect = monitor_detect

    @property
    def name(self):
        """Gets the name of this ConfigStaticRoute.  # noqa: E501

        配置名称  # noqa: E501

        :return: The name of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigStaticRoute.

        配置名称  # noqa: E501

        :param name: The name of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigStaticRoute.  # noqa: E501

        管理标签及备注描述信息  # noqa: E501

        :return: The description of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigStaticRoute.

        管理标签及备注描述信息  # noqa: E501

        :param description: The description of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigStaticRoute.  # noqa: E501

        启/禁用（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The state of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigStaticRoute.

        启/禁用（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param state: The state of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subnet(self):
        """Gets the subnet of this ConfigStaticRoute.  # noqa: E501

        子网范围  # noqa: E501

        :return: The subnet of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ConfigStaticRoute.

        子网范围  # noqa: E501

        :param subnet: The subnet of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")  # noqa: E501

        self._subnet = subnet

    @property
    def gateway(self):
        """Gets the gateway of this ConfigStaticRoute.  # noqa: E501

        网关（集群模式下默认网关）  # noqa: E501

        :return: The gateway of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ConfigStaticRoute.

        网关（集群模式下默认网关）  # noqa: E501

        :param gateway: The gateway of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    @property
    def cluster_gateways(self):
        """Gets the cluster_gateways of this ConfigStaticRoute.  # noqa: E501

        集群成员网关列表（仅在集群模式下生效）  # noqa: E501

        :return: The cluster_gateways of this ConfigStaticRoute.  # noqa: E501
        :rtype: list[ConfigStaticRouteClusterGateways]
        """
        return self._cluster_gateways

    @cluster_gateways.setter
    def cluster_gateways(self, cluster_gateways):
        """Sets the cluster_gateways of this ConfigStaticRoute.

        集群成员网关列表（仅在集群模式下生效）  # noqa: E501

        :param cluster_gateways: The cluster_gateways of this ConfigStaticRoute.  # noqa: E501
        :type: list[ConfigStaticRouteClusterGateways]
        """

        self._cluster_gateways = cluster_gateways

    @property
    def priority(self):
        """Gets the priority of this ConfigStaticRoute.  # noqa: E501

        路由权重/代价值  # noqa: E501

        :return: The priority of this ConfigStaticRoute.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigStaticRoute.

        路由权重/代价值  # noqa: E501

        :param priority: The priority of this ConfigStaticRoute.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def redistribute(self):
        """Gets the redistribute of this ConfigStaticRoute.  # noqa: E501

        支持动态路由重分发（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The redistribute of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._redistribute

    @redistribute.setter
    def redistribute(self, redistribute):
        """Sets the redistribute of this ConfigStaticRoute.

        支持动态路由重分发（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param redistribute: The redistribute of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute, allowed_values)
            )

        self._redistribute = redistribute

    @property
    def monitor_detect(self):
        """Gets the monitor_detect of this ConfigStaticRoute.  # noqa: E501

        网关健康检查（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The monitor_detect of this ConfigStaticRoute.  # noqa: E501
        :rtype: str
        """
        return self._monitor_detect

    @monitor_detect.setter
    def monitor_detect(self, monitor_detect):
        """Sets the monitor_detect of this ConfigStaticRoute.

        网关健康检查（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param monitor_detect: The monitor_detect of this ConfigStaticRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if monitor_detect not in allowed_values:
            raise ValueError(
                "Invalid value for `monitor_detect` ({0}), must be one of {1}"  # noqa: E501
                .format(monitor_detect, allowed_values)
            )

        self._monitor_detect = monitor_detect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigStaticRoute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigStaticRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
