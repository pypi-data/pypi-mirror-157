# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_source_address': 'str',
        'client_source_port': 'int',
        'client_destination_address': 'str',
        'client_destination_port': 'int',
        'protocol': 'str',
        'server_source_address': 'str',
        'server_source_port': 'int',
        'server_destination_address': 'str',
        'server_destination_port': 'int',
        'virtual_service': 'str',
        'timeout': 'int',
        'session_id': 'int'
    }

    attribute_map = {
        'client_source_address': 'client_source_address',
        'client_source_port': 'client_source_port',
        'client_destination_address': 'client_destination_address',
        'client_destination_port': 'client_destination_port',
        'protocol': 'protocol',
        'server_source_address': 'server_source_address',
        'server_source_port': 'server_source_port',
        'server_destination_address': 'server_destination_address',
        'server_destination_port': 'server_destination_port',
        'virtual_service': 'virtual_service',
        'timeout': 'timeout',
        'session_id': 'session_id'
    }

    def __init__(self, client_source_address=None, client_source_port=None, client_destination_address=None, client_destination_port=None, protocol=None, server_source_address=None, server_source_port=None, server_destination_address=None, server_destination_port=None, virtual_service=None, timeout=None, session_id=None):  # noqa: E501
        """DebugSession - a model defined in Swagger"""  # noqa: E501

        self._client_source_address = None
        self._client_source_port = None
        self._client_destination_address = None
        self._client_destination_port = None
        self._protocol = None
        self._server_source_address = None
        self._server_source_port = None
        self._server_destination_address = None
        self._server_destination_port = None
        self._virtual_service = None
        self._timeout = None
        self._session_id = None
        self.discriminator = None

        if client_source_address is not None:
            self.client_source_address = client_source_address
        if client_source_port is not None:
            self.client_source_port = client_source_port
        if client_destination_address is not None:
            self.client_destination_address = client_destination_address
        if client_destination_port is not None:
            self.client_destination_port = client_destination_port
        if protocol is not None:
            self.protocol = protocol
        if server_source_address is not None:
            self.server_source_address = server_source_address
        if server_source_port is not None:
            self.server_source_port = server_source_port
        if server_destination_address is not None:
            self.server_destination_address = server_destination_address
        if server_destination_port is not None:
            self.server_destination_port = server_destination_port
        if virtual_service is not None:
            self.virtual_service = virtual_service
        if timeout is not None:
            self.timeout = timeout
        if session_id is not None:
            self.session_id = session_id

    @property
    def client_source_address(self):
        """Gets the client_source_address of this DebugSession.  # noqa: E501

        客户端源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The client_source_address of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._client_source_address

    @client_source_address.setter
    def client_source_address(self, client_source_address):
        """Sets the client_source_address of this DebugSession.

        客户端源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param client_source_address: The client_source_address of this DebugSession.  # noqa: E501
        :type: str
        """

        self._client_source_address = client_source_address

    @property
    def client_source_port(self):
        """Gets the client_source_port of this DebugSession.  # noqa: E501

        客户端源端口，可以为单个端口，端口范围  # noqa: E501

        :return: The client_source_port of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._client_source_port

    @client_source_port.setter
    def client_source_port(self, client_source_port):
        """Sets the client_source_port of this DebugSession.

        客户端源端口，可以为单个端口，端口范围  # noqa: E501

        :param client_source_port: The client_source_port of this DebugSession.  # noqa: E501
        :type: int
        """

        self._client_source_port = client_source_port

    @property
    def client_destination_address(self):
        """Gets the client_destination_address of this DebugSession.  # noqa: E501

        客户端目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The client_destination_address of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._client_destination_address

    @client_destination_address.setter
    def client_destination_address(self, client_destination_address):
        """Sets the client_destination_address of this DebugSession.

        客户端目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param client_destination_address: The client_destination_address of this DebugSession.  # noqa: E501
        :type: str
        """

        self._client_destination_address = client_destination_address

    @property
    def client_destination_port(self):
        """Gets the client_destination_port of this DebugSession.  # noqa: E501

        客户端目的端口，可以为单个端口，端口范围  # noqa: E501

        :return: The client_destination_port of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._client_destination_port

    @client_destination_port.setter
    def client_destination_port(self, client_destination_port):
        """Sets the client_destination_port of this DebugSession.

        客户端目的端口，可以为单个端口，端口范围  # noqa: E501

        :param client_destination_port: The client_destination_port of this DebugSession.  # noqa: E501
        :type: int
        """

        self._client_destination_port = client_destination_port

    @property
    def protocol(self):
        """Gets the protocol of this DebugSession.  # noqa: E501

        协议类型，可以为协议名称，协议号  # noqa: E501

        :return: The protocol of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DebugSession.

        协议类型，可以为协议名称，协议号  # noqa: E501

        :param protocol: The protocol of this DebugSession.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def server_source_address(self):
        """Gets the server_source_address of this DebugSession.  # noqa: E501

        服务器源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The server_source_address of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._server_source_address

    @server_source_address.setter
    def server_source_address(self, server_source_address):
        """Sets the server_source_address of this DebugSession.

        服务器源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param server_source_address: The server_source_address of this DebugSession.  # noqa: E501
        :type: str
        """

        self._server_source_address = server_source_address

    @property
    def server_source_port(self):
        """Gets the server_source_port of this DebugSession.  # noqa: E501

        服务器源端口，可以为单个端口，端口范围  # noqa: E501

        :return: The server_source_port of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._server_source_port

    @server_source_port.setter
    def server_source_port(self, server_source_port):
        """Sets the server_source_port of this DebugSession.

        服务器源端口，可以为单个端口，端口范围  # noqa: E501

        :param server_source_port: The server_source_port of this DebugSession.  # noqa: E501
        :type: int
        """

        self._server_source_port = server_source_port

    @property
    def server_destination_address(self):
        """Gets the server_destination_address of this DebugSession.  # noqa: E501

        服务器目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The server_destination_address of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._server_destination_address

    @server_destination_address.setter
    def server_destination_address(self, server_destination_address):
        """Sets the server_destination_address of this DebugSession.

        服务器目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param server_destination_address: The server_destination_address of this DebugSession.  # noqa: E501
        :type: str
        """

        self._server_destination_address = server_destination_address

    @property
    def server_destination_port(self):
        """Gets the server_destination_port of this DebugSession.  # noqa: E501

        服务器目的端口，可以为单个端口，端口范围  # noqa: E501

        :return: The server_destination_port of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._server_destination_port

    @server_destination_port.setter
    def server_destination_port(self, server_destination_port):
        """Sets the server_destination_port of this DebugSession.

        服务器目的端口，可以为单个端口，端口范围  # noqa: E501

        :param server_destination_port: The server_destination_port of this DebugSession.  # noqa: E501
        :type: int
        """

        self._server_destination_port = server_destination_port

    @property
    def virtual_service(self):
        """Gets the virtual_service of this DebugSession.  # noqa: E501

        虚拟服务  # noqa: E501

        :return: The virtual_service of this DebugSession.  # noqa: E501
        :rtype: str
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this DebugSession.

        虚拟服务  # noqa: E501

        :param virtual_service: The virtual_service of this DebugSession.  # noqa: E501
        :type: str
        """

        self._virtual_service = virtual_service

    @property
    def timeout(self):
        """Gets the timeout of this DebugSession.  # noqa: E501

        超时时间  # noqa: E501

        :return: The timeout of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this DebugSession.

        超时时间  # noqa: E501

        :param timeout: The timeout of this DebugSession.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def session_id(self):
        """Gets the session_id of this DebugSession.  # noqa: E501

        session序号  # noqa: E501

        :return: The session_id of this DebugSession.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DebugSession.

        session序号  # noqa: E501

        :param session_id: The session_id of this DebugSession.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
