# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_log_syslog import ConfigDnsLogSyslog  # noqa: F401,E501


class ConfigDnsLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'virtual_service': 'list[str]',
        'log_template_state': 'str',
        'log_template': 'str',
        'response_log_template_state': 'str',
        'response_log_template': 'str',
        'syslog': 'ConfigDnsLogSyslog'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'virtual_service': 'virtual_service',
        'log_template_state': 'log_template_state',
        'log_template': 'log_template',
        'response_log_template_state': 'response_log_template_state',
        'response_log_template': 'response_log_template',
        'syslog': 'syslog'
    }

    def __init__(self, name=None, description=None, virtual_service=None, log_template_state='ENABLE', log_template='[dns_query][${query_time}][${query_id}][${src_ip_port}][${dst_ip_port}][${protocol}][${query_detail}][${query_flag}][${schedInfo}]', response_log_template_state='ENABLE', response_log_template='[dns_response][${response_time}][${query_id}][${src_ip_port}][${dst_ip_port}][${protocol}][${response_detail}][${response_flag}]', syslog=None):  # noqa: E501
        """ConfigDnsLog - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._virtual_service = None
        self._log_template_state = None
        self._log_template = None
        self._response_log_template_state = None
        self._response_log_template = None
        self._syslog = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.virtual_service = virtual_service
        if log_template_state is not None:
            self.log_template_state = log_template_state
        if log_template is not None:
            self.log_template = log_template
        if response_log_template_state is not None:
            self.response_log_template_state = response_log_template_state
        if response_log_template is not None:
            self.response_log_template = response_log_template
        if syslog is not None:
            self.syslog = syslog

    @property
    def name(self):
        """Gets the name of this ConfigDnsLog.  # noqa: E501

        名称  # noqa: E501

        :return: The name of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnsLog.

        名称  # noqa: E501

        :param name: The name of this ConfigDnsLog.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnsLog.  # noqa: E501

        描述  # noqa: E501

        :return: The description of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnsLog.

        描述  # noqa: E501

        :param description: The description of this ConfigDnsLog.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def virtual_service(self):
        """Gets the virtual_service of this ConfigDnsLog.  # noqa: E501

        指定要发送DNS日志的虚拟服务  # noqa: E501

        :return: The virtual_service of this ConfigDnsLog.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this ConfigDnsLog.

        指定要发送DNS日志的虚拟服务  # noqa: E501

        :param virtual_service: The virtual_service of this ConfigDnsLog.  # noqa: E501
        :type: list[str]
        """
        if virtual_service is None:
            raise ValueError("Invalid value for `virtual_service`, must not be `None`")  # noqa: E501

        self._virtual_service = virtual_service

    @property
    def log_template_state(self):
        """Gets the log_template_state of this ConfigDnsLog.  # noqa: E501

        DNS请求日志启/禁用状态  # noqa: E501

        :return: The log_template_state of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._log_template_state

    @log_template_state.setter
    def log_template_state(self, log_template_state):
        """Sets the log_template_state of this ConfigDnsLog.

        DNS请求日志启/禁用状态  # noqa: E501

        :param log_template_state: The log_template_state of this ConfigDnsLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if log_template_state not in allowed_values:
            raise ValueError(
                "Invalid value for `log_template_state` ({0}), must be one of {1}"  # noqa: E501
                .format(log_template_state, allowed_values)
            )

        self._log_template_state = log_template_state

    @property
    def log_template(self):
        """Gets the log_template of this ConfigDnsLog.  # noqa: E501

        请求日志所有待选内容如下| ${query_time}:请求时间 ${query_id}:请求ID ${src_ip_port}:源IP和端口 ${dst_ip_port}:目的IP和端口 ${protocol}:协议 ${query_detail}:请求详情 ${query_flag}:请求标记 ${ecs}:EDNS客户端子网 ${schedInfo}:调度信息  # noqa: E501

        :return: The log_template of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._log_template

    @log_template.setter
    def log_template(self, log_template):
        """Sets the log_template of this ConfigDnsLog.

        请求日志所有待选内容如下| ${query_time}:请求时间 ${query_id}:请求ID ${src_ip_port}:源IP和端口 ${dst_ip_port}:目的IP和端口 ${protocol}:协议 ${query_detail}:请求详情 ${query_flag}:请求标记 ${ecs}:EDNS客户端子网 ${schedInfo}:调度信息  # noqa: E501

        :param log_template: The log_template of this ConfigDnsLog.  # noqa: E501
        :type: str
        """
        if log_template is not None and len(log_template) > 255:
            raise ValueError("Invalid value for `log_template`, length must be less than or equal to `255`")  # noqa: E501
        if log_template is not None and len(log_template) < 1:
            raise ValueError("Invalid value for `log_template`, length must be greater than or equal to `1`")  # noqa: E501

        self._log_template = log_template

    @property
    def response_log_template_state(self):
        """Gets the response_log_template_state of this ConfigDnsLog.  # noqa: E501

        DNS应答日志启/禁用状态  # noqa: E501

        :return: The response_log_template_state of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._response_log_template_state

    @response_log_template_state.setter
    def response_log_template_state(self, response_log_template_state):
        """Sets the response_log_template_state of this ConfigDnsLog.

        DNS应答日志启/禁用状态  # noqa: E501

        :param response_log_template_state: The response_log_template_state of this ConfigDnsLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if response_log_template_state not in allowed_values:
            raise ValueError(
                "Invalid value for `response_log_template_state` ({0}), must be one of {1}"  # noqa: E501
                .format(response_log_template_state, allowed_values)
            )

        self._response_log_template_state = response_log_template_state

    @property
    def response_log_template(self):
        """Gets the response_log_template of this ConfigDnsLog.  # noqa: E501

        应答日志所有待选内容如下 | ${response_time}:应答时间 ${query_id}:请求ID ${src_ip_port}:源IP和端口 ${dst_ip_port}:目的IP和端口 ${protocol}:协议 ${query_detail}:请求详情 ${response_detail}:应答详情 ${response_flag}:应答标记  # noqa: E501

        :return: The response_log_template of this ConfigDnsLog.  # noqa: E501
        :rtype: str
        """
        return self._response_log_template

    @response_log_template.setter
    def response_log_template(self, response_log_template):
        """Sets the response_log_template of this ConfigDnsLog.

        应答日志所有待选内容如下 | ${response_time}:应答时间 ${query_id}:请求ID ${src_ip_port}:源IP和端口 ${dst_ip_port}:目的IP和端口 ${protocol}:协议 ${query_detail}:请求详情 ${response_detail}:应答详情 ${response_flag}:应答标记  # noqa: E501

        :param response_log_template: The response_log_template of this ConfigDnsLog.  # noqa: E501
        :type: str
        """
        if response_log_template is not None and len(response_log_template) > 255:
            raise ValueError("Invalid value for `response_log_template`, length must be less than or equal to `255`")  # noqa: E501
        if response_log_template is not None and len(response_log_template) < 1:
            raise ValueError("Invalid value for `response_log_template`, length must be greater than or equal to `1`")  # noqa: E501

        self._response_log_template = response_log_template

    @property
    def syslog(self):
        """Gets the syslog of this ConfigDnsLog.  # noqa: E501


        :return: The syslog of this ConfigDnsLog.  # noqa: E501
        :rtype: ConfigDnsLogSyslog
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this ConfigDnsLog.


        :param syslog: The syslog of this ConfigDnsLog.  # noqa: E501
        :type: ConfigDnsLogSyslog
        """

        self._syslog = syslog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
