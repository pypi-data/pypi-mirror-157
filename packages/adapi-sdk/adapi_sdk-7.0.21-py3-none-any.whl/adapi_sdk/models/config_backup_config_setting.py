# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_backup_config_setting_external_storage import ConfigBackupConfigSettingExternalStorage  # noqa: F401,E501
from adapi_sdk.models.config_backup_config_setting_local_storage import ConfigBackupConfigSettingLocalStorage  # noqa: F401,E501


class ConfigBackupConfigSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename_prefix': 'str',
        'local_storage': 'ConfigBackupConfigSettingLocalStorage',
        'external_storage': 'ConfigBackupConfigSettingExternalStorage'
    }

    attribute_map = {
        'filename_prefix': 'filename_prefix',
        'local_storage': 'local_storage',
        'external_storage': 'external_storage'
    }

    def __init__(self, filename_prefix=None, local_storage=None, external_storage=None):  # noqa: E501
        """ConfigBackupConfigSetting - a model defined in Swagger"""  # noqa: E501

        self._filename_prefix = None
        self._local_storage = None
        self._external_storage = None
        self.discriminator = None

        if filename_prefix is not None:
            self.filename_prefix = filename_prefix
        if local_storage is not None:
            self.local_storage = local_storage
        if external_storage is not None:
            self.external_storage = external_storage

    @property
    def filename_prefix(self):
        """Gets the filename_prefix of this ConfigBackupConfigSetting.  # noqa: E501

        备份文件名前缀  # noqa: E501

        :return: The filename_prefix of this ConfigBackupConfigSetting.  # noqa: E501
        :rtype: str
        """
        return self._filename_prefix

    @filename_prefix.setter
    def filename_prefix(self, filename_prefix):
        """Sets the filename_prefix of this ConfigBackupConfigSetting.

        备份文件名前缀  # noqa: E501

        :param filename_prefix: The filename_prefix of this ConfigBackupConfigSetting.  # noqa: E501
        :type: str
        """

        self._filename_prefix = filename_prefix

    @property
    def local_storage(self):
        """Gets the local_storage of this ConfigBackupConfigSetting.  # noqa: E501


        :return: The local_storage of this ConfigBackupConfigSetting.  # noqa: E501
        :rtype: ConfigBackupConfigSettingLocalStorage
        """
        return self._local_storage

    @local_storage.setter
    def local_storage(self, local_storage):
        """Sets the local_storage of this ConfigBackupConfigSetting.


        :param local_storage: The local_storage of this ConfigBackupConfigSetting.  # noqa: E501
        :type: ConfigBackupConfigSettingLocalStorage
        """

        self._local_storage = local_storage

    @property
    def external_storage(self):
        """Gets the external_storage of this ConfigBackupConfigSetting.  # noqa: E501


        :return: The external_storage of this ConfigBackupConfigSetting.  # noqa: E501
        :rtype: ConfigBackupConfigSettingExternalStorage
        """
        return self._external_storage

    @external_storage.setter
    def external_storage(self, external_storage):
        """Sets the external_storage of this ConfigBackupConfigSetting.


        :param external_storage: The external_storage of this ConfigBackupConfigSetting.  # noqa: E501
        :type: ConfigBackupConfigSettingExternalStorage
        """

        self._external_storage = external_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigBackupConfigSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigBackupConfigSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
