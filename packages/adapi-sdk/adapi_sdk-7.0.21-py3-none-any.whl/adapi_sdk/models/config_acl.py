# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_acl_destination_address import ConfigAclDestinationAddress  # noqa: F401,E501
from adapi_sdk.models.config_acl_source_address import ConfigAclSourceAddress  # noqa: F401,E501


class ConfigAcl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'position': 'int',
        'state': 'str',
        'inbound_links': 'list[str]',
        'source_address': 'ConfigAclSourceAddress',
        'destination_address': 'ConfigAclDestinationAddress',
        'protocol': 'str',
        'protocol_number': 'int',
        'icmp_types': 'list[int]',
        'source_ports': 'str',
        'destination_ports': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'position': 'position',
        'state': 'state',
        'inbound_links': 'inbound_links',
        'source_address': 'source_address',
        'destination_address': 'destination_address',
        'protocol': 'protocol',
        'protocol_number': 'protocol_number',
        'icmp_types': 'icmp_types',
        'source_ports': 'source_ports',
        'destination_ports': 'destination_ports',
        'policy': 'policy'
    }

    def __init__(self, name=None, description=None, position=None, state='ENABLE', inbound_links=None, source_address=None, destination_address=None, protocol='ALL', protocol_number=None, icmp_types=None, source_ports='ALL', destination_ports='ALL', policy=None):  # noqa: E501
        """ConfigAcl - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._position = None
        self._state = None
        self._inbound_links = None
        self._source_address = None
        self._destination_address = None
        self._protocol = None
        self._protocol_number = None
        self._icmp_types = None
        self._source_ports = None
        self._destination_ports = None
        self._policy = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if position is not None:
            self.position = position
        if state is not None:
            self.state = state
        if inbound_links is not None:
            self.inbound_links = inbound_links
        self.source_address = source_address
        self.destination_address = destination_address
        if protocol is not None:
            self.protocol = protocol
        if protocol_number is not None:
            self.protocol_number = protocol_number
        if icmp_types is not None:
            self.icmp_types = icmp_types
        if source_ports is not None:
            self.source_ports = source_ports
        if destination_ports is not None:
            self.destination_ports = destination_ports
        self.policy = policy

    @property
    def name(self):
        """Gets the name of this ConfigAcl.  # noqa: E501

        必选参数；指定TCP策略的名称, 在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigAcl.

        必选参数；指定TCP策略的名称, 在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigAcl.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigAcl.  # noqa: E501

        可选参数；用来对此配置增加额外的备注  # noqa: E501

        :return: The description of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigAcl.

        可选参数；用来对此配置增加额外的备注  # noqa: E501

        :param description: The description of this ConfigAcl.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def position(self):
        """Gets the position of this ConfigAcl.  # noqa: E501

        可选参数；指定此配置的位置序号，默认为最后一条配置  # noqa: E501

        :return: The position of this ConfigAcl.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ConfigAcl.

        可选参数；指定此配置的位置序号，默认为最后一条配置  # noqa: E501

        :param position: The position of this ConfigAcl.  # noqa: E501
        :type: int
        """
        if position is not None and position > 65535:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `65535`")  # noqa: E501
        if position is not None and position < 1:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")  # noqa: E501

        self._position = position

    @property
    def state(self):
        """Gets the state of this ConfigAcl.  # noqa: E501

        可选参数；指定是否启用，enable表示启用，disable表示禁用；默认为启用  # noqa: E501

        :return: The state of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigAcl.

        可选参数；指定是否启用，enable表示启用，disable表示禁用；默认为启用  # noqa: E501

        :param state: The state of this ConfigAcl.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def inbound_links(self):
        """Gets the inbound_links of this ConfigAcl.  # noqa: E501

        可选参数；指定入接口，可以选择所有链路或指定链路，默认为所有链路  # noqa: E501

        :return: The inbound_links of this ConfigAcl.  # noqa: E501
        :rtype: list[str]
        """
        return self._inbound_links

    @inbound_links.setter
    def inbound_links(self, inbound_links):
        """Sets the inbound_links of this ConfigAcl.

        可选参数；指定入接口，可以选择所有链路或指定链路，默认为所有链路  # noqa: E501

        :param inbound_links: The inbound_links of this ConfigAcl.  # noqa: E501
        :type: list[str]
        """

        self._inbound_links = inbound_links

    @property
    def source_address(self):
        """Gets the source_address of this ConfigAcl.  # noqa: E501


        :return: The source_address of this ConfigAcl.  # noqa: E501
        :rtype: ConfigAclSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigAcl.


        :param source_address: The source_address of this ConfigAcl.  # noqa: E501
        :type: ConfigAclSourceAddress
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def destination_address(self):
        """Gets the destination_address of this ConfigAcl.  # noqa: E501


        :return: The destination_address of this ConfigAcl.  # noqa: E501
        :rtype: ConfigAclDestinationAddress
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this ConfigAcl.


        :param destination_address: The destination_address of this ConfigAcl.  # noqa: E501
        :type: ConfigAclDestinationAddress
        """
        if destination_address is None:
            raise ValueError("Invalid value for `destination_address`, must not be `None`")  # noqa: E501

        self._destination_address = destination_address

    @property
    def protocol(self):
        """Gets the protocol of this ConfigAcl.  # noqa: E501

        可选参数；指定协议，默认为所有协议  # noqa: E501

        :return: The protocol of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConfigAcl.

        可选参数；指定协议，默认为所有协议  # noqa: E501

        :param protocol: The protocol of this ConfigAcl.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "TCP", "UDP", "ICMP", "ICMPV6", "OTHER"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def protocol_number(self):
        """Gets the protocol_number of this ConfigAcl.  # noqa: E501

        可选参数；指定协议号，如果protocol为other，需要指定协议号  # noqa: E501

        :return: The protocol_number of this ConfigAcl.  # noqa: E501
        :rtype: int
        """
        return self._protocol_number

    @protocol_number.setter
    def protocol_number(self, protocol_number):
        """Sets the protocol_number of this ConfigAcl.

        可选参数；指定协议号，如果protocol为other，需要指定协议号  # noqa: E501

        :param protocol_number: The protocol_number of this ConfigAcl.  # noqa: E501
        :type: int
        """
        if protocol_number is not None and protocol_number > 255:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value less than or equal to `255`")  # noqa: E501
        if protocol_number is not None and protocol_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protocol_number = protocol_number

    @property
    def icmp_types(self):
        """Gets the icmp_types of this ConfigAcl.  # noqa: E501

        可选参数；指定ICMP具体类型，0-回显应答；3-目的不可达；4-源端关闭；5-重定向；8-回显请求；9-路由器通告；10-路由器请求；11-超时；12-参数问题；13-时间戳请求；14-时间戳应答；15-信息请求；16-信息应答；17-地址掩码请求；18-地址掩码应答  # noqa: E501

        :return: The icmp_types of this ConfigAcl.  # noqa: E501
        :rtype: list[int]
        """
        return self._icmp_types

    @icmp_types.setter
    def icmp_types(self, icmp_types):
        """Sets the icmp_types of this ConfigAcl.

        可选参数；指定ICMP具体类型，0-回显应答；3-目的不可达；4-源端关闭；5-重定向；8-回显请求；9-路由器通告；10-路由器请求；11-超时；12-参数问题；13-时间戳请求；14-时间戳应答；15-信息请求；16-信息应答；17-地址掩码请求；18-地址掩码应答  # noqa: E501

        :param icmp_types: The icmp_types of this ConfigAcl.  # noqa: E501
        :type: list[int]
        """

        self._icmp_types = icmp_types

    @property
    def source_ports(self):
        """Gets the source_ports of this ConfigAcl.  # noqa: E501

        可选参数；指定源端口范围，默认为所有  # noqa: E501

        :return: The source_ports of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this ConfigAcl.

        可选参数；指定源端口范围，默认为所有  # noqa: E501

        :param source_ports: The source_ports of this ConfigAcl.  # noqa: E501
        :type: str
        """

        self._source_ports = source_ports

    @property
    def destination_ports(self):
        """Gets the destination_ports of this ConfigAcl.  # noqa: E501

        可选参数；指定目的端口范围，默认为所有  # noqa: E501

        :return: The destination_ports of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this ConfigAcl.

        可选参数；指定目的端口范围，默认为所有  # noqa: E501

        :param destination_ports: The destination_ports of this ConfigAcl.  # noqa: E501
        :type: str
        """

        self._destination_ports = destination_ports

    @property
    def policy(self):
        """Gets the policy of this ConfigAcl.  # noqa: E501

        必选参数；allow表示允许，deny表示拒绝  # noqa: E501

        :return: The policy of this ConfigAcl.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigAcl.

        必选参数；allow表示允许，deny表示拒绝  # noqa: E501

        :param policy: The policy of this ConfigAcl.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        allowed_values = ["ALLOW", "DENY"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigAcl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigAcl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
