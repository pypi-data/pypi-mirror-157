# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_report_task_dns_analysis import ConfigReportTaskDnsAnalysis  # noqa: F401,E501
from adapi_sdk.models.config_report_task_ha_analysis import ConfigReportTaskHaAnalysis  # noqa: F401,E501
from adapi_sdk.models.config_report_task_link_analysis import ConfigReportTaskLinkAnalysis  # noqa: F401,E501
from adapi_sdk.models.config_report_task_policy_route_analysis import ConfigReportTaskPolicyRouteAnalysis  # noqa: F401,E501
from adapi_sdk.models.config_report_task_pool_analysis import ConfigReportTaskPoolAnalysis  # noqa: F401,E501
from adapi_sdk.models.config_report_task_virtual_service_analysis import ConfigReportTaskVirtualServiceAnalysis  # noqa: F401,E501


class ConfigReportTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'policy': 'str',
        'link_analysis': 'ConfigReportTaskLinkAnalysis',
        'pool_analysis': 'ConfigReportTaskPoolAnalysis',
        'virtual_service_analysis': 'ConfigReportTaskVirtualServiceAnalysis',
        'policy_route_analysis': 'ConfigReportTaskPolicyRouteAnalysis',
        'dns_analysis': 'ConfigReportTaskDnsAnalysis',
        'ha_analysis': 'ConfigReportTaskHaAnalysis'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'policy': 'policy',
        'link_analysis': 'link_analysis',
        'pool_analysis': 'pool_analysis',
        'virtual_service_analysis': 'virtual_service_analysis',
        'policy_route_analysis': 'policy_route_analysis',
        'dns_analysis': 'dns_analysis',
        'ha_analysis': 'ha_analysis'
    }

    def __init__(self, name=None, description=None, policy='MANUAL', link_analysis=None, pool_analysis=None, virtual_service_analysis=None, policy_route_analysis=None, dns_analysis=None, ha_analysis=None):  # noqa: E501
        """ConfigReportTask - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._policy = None
        self._link_analysis = None
        self._pool_analysis = None
        self._virtual_service_analysis = None
        self._policy_route_analysis = None
        self._dns_analysis = None
        self._ha_analysis = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if policy is not None:
            self.policy = policy
        if link_analysis is not None:
            self.link_analysis = link_analysis
        if pool_analysis is not None:
            self.pool_analysis = pool_analysis
        if virtual_service_analysis is not None:
            self.virtual_service_analysis = virtual_service_analysis
        if policy_route_analysis is not None:
            self.policy_route_analysis = policy_route_analysis
        if dns_analysis is not None:
            self.dns_analysis = dns_analysis
        if ha_analysis is not None:
            self.ha_analysis = ha_analysis

    @property
    def name(self):
        """Gets the name of this ConfigReportTask.  # noqa: E501

        必选参数；指定报表样式的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigReportTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigReportTask.

        必选参数；指定报表样式的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigReportTask.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigReportTask.  # noqa: E501

        可选参数；附加的描述信息  # noqa: E501

        :return: The description of this ConfigReportTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigReportTask.

        可选参数；附加的描述信息  # noqa: E501

        :param description: The description of this ConfigReportTask.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def policy(self):
        """Gets the policy of this ConfigReportTask.  # noqa: E501

        可选参数；指定按照报表样式生成的报表的生成方式；manual-手动导出；按照间隔时间（daily-日/weekly-周/monthly-月/yearly-年），根据报表样式，将生成的报表根据report-mail配置发送到指定邮箱  # noqa: E501

        :return: The policy of this ConfigReportTask.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigReportTask.

        可选参数；指定按照报表样式生成的报表的生成方式；manual-手动导出；按照间隔时间（daily-日/weekly-周/monthly-月/yearly-年），根据报表样式，将生成的报表根据report-mail配置发送到指定邮箱  # noqa: E501

        :param policy: The policy of this ConfigReportTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANUAL", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def link_analysis(self):
        """Gets the link_analysis of this ConfigReportTask.  # noqa: E501


        :return: The link_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskLinkAnalysis
        """
        return self._link_analysis

    @link_analysis.setter
    def link_analysis(self, link_analysis):
        """Sets the link_analysis of this ConfigReportTask.


        :param link_analysis: The link_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskLinkAnalysis
        """

        self._link_analysis = link_analysis

    @property
    def pool_analysis(self):
        """Gets the pool_analysis of this ConfigReportTask.  # noqa: E501


        :return: The pool_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskPoolAnalysis
        """
        return self._pool_analysis

    @pool_analysis.setter
    def pool_analysis(self, pool_analysis):
        """Sets the pool_analysis of this ConfigReportTask.


        :param pool_analysis: The pool_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskPoolAnalysis
        """

        self._pool_analysis = pool_analysis

    @property
    def virtual_service_analysis(self):
        """Gets the virtual_service_analysis of this ConfigReportTask.  # noqa: E501


        :return: The virtual_service_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskVirtualServiceAnalysis
        """
        return self._virtual_service_analysis

    @virtual_service_analysis.setter
    def virtual_service_analysis(self, virtual_service_analysis):
        """Sets the virtual_service_analysis of this ConfigReportTask.


        :param virtual_service_analysis: The virtual_service_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskVirtualServiceAnalysis
        """

        self._virtual_service_analysis = virtual_service_analysis

    @property
    def policy_route_analysis(self):
        """Gets the policy_route_analysis of this ConfigReportTask.  # noqa: E501


        :return: The policy_route_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskPolicyRouteAnalysis
        """
        return self._policy_route_analysis

    @policy_route_analysis.setter
    def policy_route_analysis(self, policy_route_analysis):
        """Sets the policy_route_analysis of this ConfigReportTask.


        :param policy_route_analysis: The policy_route_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskPolicyRouteAnalysis
        """

        self._policy_route_analysis = policy_route_analysis

    @property
    def dns_analysis(self):
        """Gets the dns_analysis of this ConfigReportTask.  # noqa: E501


        :return: The dns_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskDnsAnalysis
        """
        return self._dns_analysis

    @dns_analysis.setter
    def dns_analysis(self, dns_analysis):
        """Sets the dns_analysis of this ConfigReportTask.


        :param dns_analysis: The dns_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskDnsAnalysis
        """

        self._dns_analysis = dns_analysis

    @property
    def ha_analysis(self):
        """Gets the ha_analysis of this ConfigReportTask.  # noqa: E501


        :return: The ha_analysis of this ConfigReportTask.  # noqa: E501
        :rtype: ConfigReportTaskHaAnalysis
        """
        return self._ha_analysis

    @ha_analysis.setter
    def ha_analysis(self, ha_analysis):
        """Sets the ha_analysis of this ConfigReportTask.


        :param ha_analysis: The ha_analysis of this ConfigReportTask.  # noqa: E501
        :type: ConfigReportTaskHaAnalysis
        """

        self._ha_analysis = ha_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigReportTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigReportTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
