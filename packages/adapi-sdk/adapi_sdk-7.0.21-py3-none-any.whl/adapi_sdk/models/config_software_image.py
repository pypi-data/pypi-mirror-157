# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_software_image_specifications import ConfigSoftwareImageSpecifications  # noqa: F401,E501


class ConfigSoftwareImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'size_mb': 'int',
        'last_modify': 'str',
        'compatibility': 'str',
        'specifications': 'list[ConfigSoftwareImageSpecifications]',
        'software': 'str',
        'version': 'str',
        'build': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'size_mb': 'size_mb',
        'last_modify': 'last_modify',
        'compatibility': 'compatibility',
        'specifications': 'specifications',
        'software': 'software',
        'version': 'version',
        'build': 'build'
    }

    def __init__(self, name=None, description=None, size_mb=None, last_modify=None, compatibility=None, specifications=None, software=None, version=None, build=None):  # noqa: E501
        """ConfigSoftwareImage - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._size_mb = None
        self._last_modify = None
        self._compatibility = None
        self._specifications = None
        self._software = None
        self._version = None
        self._build = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if size_mb is not None:
            self.size_mb = size_mb
        if last_modify is not None:
            self.last_modify = last_modify
        if compatibility is not None:
            self.compatibility = compatibility
        if specifications is not None:
            self.specifications = specifications
        if software is not None:
            self.software = software
        if version is not None:
            self.version = version
        if build is not None:
            self.build = build

    @property
    def name(self):
        """Gets the name of this ConfigSoftwareImage.  # noqa: E501

        镜像文件名  # noqa: E501

        :return: The name of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSoftwareImage.

        镜像文件名  # noqa: E501

        :param name: The name of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSoftwareImage.  # noqa: E501

        镜像包描述信息  # noqa: E501

        :return: The description of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSoftwareImage.

        镜像包描述信息  # noqa: E501

        :param description: The description of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def size_mb(self):
        """Gets the size_mb of this ConfigSoftwareImage.  # noqa: E501

        镜像大小  # noqa: E501

        :return: The size_mb of this ConfigSoftwareImage.  # noqa: E501
        :rtype: int
        """
        return self._size_mb

    @size_mb.setter
    def size_mb(self, size_mb):
        """Sets the size_mb of this ConfigSoftwareImage.

        镜像大小  # noqa: E501

        :param size_mb: The size_mb of this ConfigSoftwareImage.  # noqa: E501
        :type: int
        """

        self._size_mb = size_mb

    @property
    def last_modify(self):
        """Gets the last_modify of this ConfigSoftwareImage.  # noqa: E501

        镜像文件最近修改时间  # noqa: E501

        :return: The last_modify of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._last_modify

    @last_modify.setter
    def last_modify(self, last_modify):
        """Sets the last_modify of this ConfigSoftwareImage.

        镜像文件最近修改时间  # noqa: E501

        :param last_modify: The last_modify of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._last_modify = last_modify

    @property
    def compatibility(self):
        """Gets the compatibility of this ConfigSoftwareImage.  # noqa: E501

        当前系统安装器对镜像包的兼容性检查结果  # noqa: E501

        :return: The compatibility of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this ConfigSoftwareImage.

        当前系统安装器对镜像包的兼容性检查结果  # noqa: E501

        :param compatibility: The compatibility of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPATIBLE", "IMCOMPATIBLE"]  # noqa: E501
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"  # noqa: E501
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def specifications(self):
        """Gets the specifications of this ConfigSoftwareImage.  # noqa: E501

        分区规格列表  # noqa: E501

        :return: The specifications of this ConfigSoftwareImage.  # noqa: E501
        :rtype: list[ConfigSoftwareImageSpecifications]
        """
        return self._specifications

    @specifications.setter
    def specifications(self, specifications):
        """Sets the specifications of this ConfigSoftwareImage.

        分区规格列表  # noqa: E501

        :param specifications: The specifications of this ConfigSoftwareImage.  # noqa: E501
        :type: list[ConfigSoftwareImageSpecifications]
        """

        self._specifications = specifications

    @property
    def software(self):
        """Gets the software of this ConfigSoftwareImage.  # noqa: E501

        系统软件  # noqa: E501

        :return: The software of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this ConfigSoftwareImage.

        系统软件  # noqa: E501

        :param software: The software of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._software = software

    @property
    def version(self):
        """Gets the version of this ConfigSoftwareImage.  # noqa: E501

        软件版本  # noqa: E501

        :return: The version of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigSoftwareImage.

        软件版本  # noqa: E501

        :param version: The version of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this ConfigSoftwareImage.  # noqa: E501

        软件Build信息  # noqa: E501

        :return: The build of this ConfigSoftwareImage.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ConfigSoftwareImage.

        软件Build信息  # noqa: E501

        :param build: The build of this ConfigSoftwareImage.  # noqa: E501
        :type: str
        """

        self._build = build

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSoftwareImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSoftwareImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
