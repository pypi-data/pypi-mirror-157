# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_profile_access_control import ConfigDnsProfileAccessControl  # noqa: F401,E501


class ConfigDnsProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'module_gslb': 'str',
        'module_zone': 'str',
        'module_ldns': 'str',
        'policy': 'str',
        'return_ip': 'str',
        'record_rotate': 'str',
        'edns_cache_capacity_byte': 'int',
        'edns_client_subnet_insert': 'str',
        'access_control': 'list[ConfigDnsProfileAccessControl]',
        'alert': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'module_gslb': 'module_gslb',
        'module_zone': 'module_zone',
        'module_ldns': 'module_ldns',
        'policy': 'policy',
        'return_ip': 'return_ip',
        'record_rotate': 'record_rotate',
        'edns_cache_capacity_byte': 'edns_cache_capacity_byte',
        'edns_client_subnet_insert': 'edns_client_subnet_insert',
        'access_control': 'access_control',
        'alert': 'alert'
    }

    def __init__(self, name=None, description=None, module_gslb='ENABLE', module_zone='ENABLE', module_ldns='DISABLE', policy='REFUSE', return_ip=None, record_rotate=None, edns_cache_capacity_byte=None, edns_client_subnet_insert='DISABLE', access_control=None, alert='ENABLE'):  # noqa: E501
        """ConfigDnsProfile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._module_gslb = None
        self._module_zone = None
        self._module_ldns = None
        self._policy = None
        self._return_ip = None
        self._record_rotate = None
        self._edns_cache_capacity_byte = None
        self._edns_client_subnet_insert = None
        self._access_control = None
        self._alert = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if module_gslb is not None:
            self.module_gslb = module_gslb
        if module_zone is not None:
            self.module_zone = module_zone
        if module_ldns is not None:
            self.module_ldns = module_ldns
        if policy is not None:
            self.policy = policy
        if return_ip is not None:
            self.return_ip = return_ip
        if record_rotate is not None:
            self.record_rotate = record_rotate
        if edns_cache_capacity_byte is not None:
            self.edns_cache_capacity_byte = edns_cache_capacity_byte
        if edns_client_subnet_insert is not None:
            self.edns_client_subnet_insert = edns_client_subnet_insert
        if access_control is not None:
            self.access_control = access_control
        if alert is not None:
            self.alert = alert

    @property
    def name(self):
        """Gets the name of this ConfigDnsProfile.  # noqa: E501

        指定DNS策略的名称, 在DNS策略配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnsProfile.

        指定DNS策略的名称, 在DNS策略配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnsProfile.  # noqa: E501

        对该DNS策略进行额外的信息补充。  # noqa: E501

        :return: The description of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnsProfile.

        对该DNS策略进行额外的信息补充。  # noqa: E501

        :param description: The description of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def module_gslb(self):
        """Gets the module_gslb of this ConfigDnsProfile.  # noqa: E501

        GSLB功能模块  # noqa: E501

        :return: The module_gslb of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._module_gslb

    @module_gslb.setter
    def module_gslb(self, module_gslb):
        """Sets the module_gslb of this ConfigDnsProfile.

        GSLB功能模块  # noqa: E501

        :param module_gslb: The module_gslb of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if module_gslb not in allowed_values:
            raise ValueError(
                "Invalid value for `module_gslb` ({0}), must be one of {1}"  # noqa: E501
                .format(module_gslb, allowed_values)
            )

        self._module_gslb = module_gslb

    @property
    def module_zone(self):
        """Gets the module_zone of this ConfigDnsProfile.  # noqa: E501

        权威域功能模块  # noqa: E501

        :return: The module_zone of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._module_zone

    @module_zone.setter
    def module_zone(self, module_zone):
        """Sets the module_zone of this ConfigDnsProfile.

        权威域功能模块  # noqa: E501

        :param module_zone: The module_zone of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if module_zone not in allowed_values:
            raise ValueError(
                "Invalid value for `module_zone` ({0}), must be one of {1}"  # noqa: E501
                .format(module_zone, allowed_values)
            )

        self._module_zone = module_zone

    @property
    def module_ldns(self):
        """Gets the module_ldns of this ConfigDnsProfile.  # noqa: E501

        LDNS功能模块  # noqa: E501

        :return: The module_ldns of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._module_ldns

    @module_ldns.setter
    def module_ldns(self, module_ldns):
        """Sets the module_ldns of this ConfigDnsProfile.

        LDNS功能模块  # noqa: E501

        :param module_ldns: The module_ldns of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if module_ldns not in allowed_values:
            raise ValueError(
                "Invalid value for `module_ldns` ({0}), must be one of {1}"  # noqa: E501
                .format(module_ldns, allowed_values)
            )

        self._module_ldns = module_ldns

    @property
    def policy(self):
        """Gets the policy of this ConfigDnsProfile.  # noqa: E501

        失败动作，默认为拒绝。  # noqa: E501

        :return: The policy of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigDnsProfile.

        失败动作，默认为拒绝。  # noqa: E501

        :param policy: The policy of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["DROP", "REFUSE", "NXDOMAIN", "RETURN-IP"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def return_ip(self):
        """Gets the return_ip of this ConfigDnsProfile.  # noqa: E501

        对应失败动作中的RETURN-IP，校验格式为单个IPv4/IPv6地址  # noqa: E501

        :return: The return_ip of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._return_ip

    @return_ip.setter
    def return_ip(self, return_ip):
        """Sets the return_ip of this ConfigDnsProfile.

        对应失败动作中的RETURN-IP，校验格式为单个IPv4/IPv6地址  # noqa: E501

        :param return_ip: The return_ip of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """

        self._return_ip = return_ip

    @property
    def record_rotate(self):
        """Gets the record_rotate of this ConfigDnsProfile.  # noqa: E501

        应答记录轮转  # noqa: E501

        :return: The record_rotate of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._record_rotate

    @record_rotate.setter
    def record_rotate(self, record_rotate):
        """Sets the record_rotate of this ConfigDnsProfile.

        应答记录轮转  # noqa: E501

        :param record_rotate: The record_rotate of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if record_rotate not in allowed_values:
            raise ValueError(
                "Invalid value for `record_rotate` ({0}), must be one of {1}"  # noqa: E501
                .format(record_rotate, allowed_values)
            )

        self._record_rotate = record_rotate

    @property
    def edns_cache_capacity_byte(self):
        """Gets the edns_cache_capacity_byte of this ConfigDnsProfile.  # noqa: E501

        EDNS缓冲区大小（单位：字节），取值范围[512,65535]  # noqa: E501

        :return: The edns_cache_capacity_byte of this ConfigDnsProfile.  # noqa: E501
        :rtype: int
        """
        return self._edns_cache_capacity_byte

    @edns_cache_capacity_byte.setter
    def edns_cache_capacity_byte(self, edns_cache_capacity_byte):
        """Sets the edns_cache_capacity_byte of this ConfigDnsProfile.

        EDNS缓冲区大小（单位：字节），取值范围[512,65535]  # noqa: E501

        :param edns_cache_capacity_byte: The edns_cache_capacity_byte of this ConfigDnsProfile.  # noqa: E501
        :type: int
        """
        if edns_cache_capacity_byte is not None and edns_cache_capacity_byte > 65535:  # noqa: E501
            raise ValueError("Invalid value for `edns_cache_capacity_byte`, must be a value less than or equal to `65535`")  # noqa: E501
        if edns_cache_capacity_byte is not None and edns_cache_capacity_byte < 512:  # noqa: E501
            raise ValueError("Invalid value for `edns_cache_capacity_byte`, must be a value greater than or equal to `512`")  # noqa: E501

        self._edns_cache_capacity_byte = edns_cache_capacity_byte

    @property
    def edns_client_subnet_insert(self):
        """Gets the edns_client_subnet_insert of this ConfigDnsProfile.  # noqa: E501

        ECS插入，默认禁用  # noqa: E501

        :return: The edns_client_subnet_insert of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._edns_client_subnet_insert

    @edns_client_subnet_insert.setter
    def edns_client_subnet_insert(self, edns_client_subnet_insert):
        """Sets the edns_client_subnet_insert of this ConfigDnsProfile.

        ECS插入，默认禁用  # noqa: E501

        :param edns_client_subnet_insert: The edns_client_subnet_insert of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if edns_client_subnet_insert not in allowed_values:
            raise ValueError(
                "Invalid value for `edns_client_subnet_insert` ({0}), must be one of {1}"  # noqa: E501
                .format(edns_client_subnet_insert, allowed_values)
            )

        self._edns_client_subnet_insert = edns_client_subnet_insert

    @property
    def access_control(self):
        """Gets the access_control of this ConfigDnsProfile.  # noqa: E501

        用来指定DNS策略的ACL策略，最多配置100条; 该参数为一个对象列表,可以通过add或者delete指令添加并发连接数控制策略。  # noqa: E501

        :return: The access_control of this ConfigDnsProfile.  # noqa: E501
        :rtype: list[ConfigDnsProfileAccessControl]
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """Sets the access_control of this ConfigDnsProfile.

        用来指定DNS策略的ACL策略，最多配置100条; 该参数为一个对象列表,可以通过add或者delete指令添加并发连接数控制策略。  # noqa: E501

        :param access_control: The access_control of this ConfigDnsProfile.  # noqa: E501
        :type: list[ConfigDnsProfileAccessControl]
        """

        self._access_control = access_control

    @property
    def alert(self):
        """Gets the alert of this ConfigDnsProfile.  # noqa: E501

        ACL/DDOS告警,ENABLE 表示启用;DISABLE 表示禁用。  # noqa: E501

        :return: The alert of this ConfigDnsProfile.  # noqa: E501
        :rtype: str
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this ConfigDnsProfile.

        ACL/DDOS告警,ENABLE 表示启用;DISABLE 表示禁用。  # noqa: E501

        :param alert: The alert of this ConfigDnsProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if alert not in allowed_values:
            raise ValueError(
                "Invalid value for `alert` ({0}), must be one of {1}"  # noqa: E501
                .format(alert, allowed_values)
            )

        self._alert = alert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
