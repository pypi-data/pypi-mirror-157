# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLinkMonitorIcmpv6(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'debug_mode': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'debug_mode': 'debug_mode'
    }

    def __init__(self, name=None, description=None, type='ICMPV6', timeout=None, interval=None, host='*', debug_mode='DISABLE'):  # noqa: E501
        """ConfigLinkMonitorIcmpv6 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._debug_mode = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if debug_mode is not None:
            self.debug_mode = debug_mode

    @property
    def name(self):
        """Gets the name of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        必选参数；配置名称  # noqa: E501

        :return: The name of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigLinkMonitorIcmpv6.

        必选参数；配置名称  # noqa: E501

        :param name: The name of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        可选参数；所创建监视器描述标签  # noqa: E501

        :return: The description of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigLinkMonitorIcmpv6.

        可选参数；所创建监视器描述标签  # noqa: E501

        :param description: The description of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        可选参数；链路健康检查类型（icmpv6），默认值icmpv6  # noqa: E501

        :return: The type of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigLinkMonitorIcmpv6.

        可选参数；链路健康检查类型（icmpv6），默认值icmpv6  # noqa: E501

        :param type: The type of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: str
        """
        allowed_values = ["ICMPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        可选参数；超时时间（单位：秒），默认值16  # noqa: E501

        :return: The timeout of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigLinkMonitorIcmpv6.

        可选参数；超时时间（单位：秒），默认值16  # noqa: E501

        :param timeout: The timeout of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 255:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `255`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        可选参数；探测间隔时间（单位：秒），默认值5  # noqa: E501

        :return: The interval of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigLinkMonitorIcmpv6.

        可选参数；探测间隔时间（单位：秒），默认值5  # noqa: E501

        :param interval: The interval of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 255:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `255`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        可选参数；监视地址，长度为1~256字节，必须为IPV6地址或域名格式  # noqa: E501

        :return: The host of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigLinkMonitorIcmpv6.

        可选参数；监视地址，长度为1~256字节，必须为IPV6地址或域名格式  # noqa: E501

        :param host: The host of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: str
        """
        if host is not None and len(host) > 256:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `256`")  # noqa: E501
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigLinkMonitorIcmpv6.  # noqa: E501

        开启调试日志（enable-启用/disable-禁用），默认值disable  # noqa: E501

        :return: The debug_mode of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigLinkMonitorIcmpv6.

        开启调试日志（enable-启用/disable-禁用），默认值disable  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigLinkMonitorIcmpv6.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLinkMonitorIcmpv6, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLinkMonitorIcmpv6):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
