# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLocalDnsSettingCache(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_cache_capacity_mb': 'int',
        'resource_record_cache_capacity_mb': 'int',
        'key_cache_capacity_mb': 'int',
        'negative_cache_capacity_mb': 'int',
        'cache_ttl_minimum': 'int',
        'cache_ttl_maximum': 'int',
        'negative_cache_ttl': 'int'
    }

    attribute_map = {
        'message_cache_capacity_mb': 'message_cache_capacity_mb',
        'resource_record_cache_capacity_mb': 'resource_record_cache_capacity_mb',
        'key_cache_capacity_mb': 'key_cache_capacity_mb',
        'negative_cache_capacity_mb': 'negative_cache_capacity_mb',
        'cache_ttl_minimum': 'cache_ttl_minimum',
        'cache_ttl_maximum': 'cache_ttl_maximum',
        'negative_cache_ttl': 'negative_cache_ttl'
    }

    def __init__(self, message_cache_capacity_mb=None, resource_record_cache_capacity_mb=None, key_cache_capacity_mb=None, negative_cache_capacity_mb=None, cache_ttl_minimum=None, cache_ttl_maximum=None, negative_cache_ttl=None):  # noqa: E501
        """ConfigLocalDnsSettingCache - a model defined in Swagger"""  # noqa: E501

        self._message_cache_capacity_mb = None
        self._resource_record_cache_capacity_mb = None
        self._key_cache_capacity_mb = None
        self._negative_cache_capacity_mb = None
        self._cache_ttl_minimum = None
        self._cache_ttl_maximum = None
        self._negative_cache_ttl = None
        self.discriminator = None

        if message_cache_capacity_mb is not None:
            self.message_cache_capacity_mb = message_cache_capacity_mb
        if resource_record_cache_capacity_mb is not None:
            self.resource_record_cache_capacity_mb = resource_record_cache_capacity_mb
        if key_cache_capacity_mb is not None:
            self.key_cache_capacity_mb = key_cache_capacity_mb
        if negative_cache_capacity_mb is not None:
            self.negative_cache_capacity_mb = negative_cache_capacity_mb
        if cache_ttl_minimum is not None:
            self.cache_ttl_minimum = cache_ttl_minimum
        if cache_ttl_maximum is not None:
            self.cache_ttl_maximum = cache_ttl_maximum
        if negative_cache_ttl is not None:
            self.negative_cache_ttl = negative_cache_ttl

    @property
    def message_cache_capacity_mb(self):
        """Gets the message_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501

        MSG缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :return: The message_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._message_cache_capacity_mb

    @message_cache_capacity_mb.setter
    def message_cache_capacity_mb(self, message_cache_capacity_mb):
        """Sets the message_cache_capacity_mb of this ConfigLocalDnsSettingCache.

        MSG缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :param message_cache_capacity_mb: The message_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if message_cache_capacity_mb is not None and message_cache_capacity_mb > 512:  # noqa: E501
            raise ValueError("Invalid value for `message_cache_capacity_mb`, must be a value less than or equal to `512`")  # noqa: E501
        if message_cache_capacity_mb is not None and message_cache_capacity_mb < 1:  # noqa: E501
            raise ValueError("Invalid value for `message_cache_capacity_mb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._message_cache_capacity_mb = message_cache_capacity_mb

    @property
    def resource_record_cache_capacity_mb(self):
        """Gets the resource_record_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501

        RR缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :return: The resource_record_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._resource_record_cache_capacity_mb

    @resource_record_cache_capacity_mb.setter
    def resource_record_cache_capacity_mb(self, resource_record_cache_capacity_mb):
        """Sets the resource_record_cache_capacity_mb of this ConfigLocalDnsSettingCache.

        RR缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :param resource_record_cache_capacity_mb: The resource_record_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if resource_record_cache_capacity_mb is not None and resource_record_cache_capacity_mb > 512:  # noqa: E501
            raise ValueError("Invalid value for `resource_record_cache_capacity_mb`, must be a value less than or equal to `512`")  # noqa: E501
        if resource_record_cache_capacity_mb is not None and resource_record_cache_capacity_mb < 1:  # noqa: E501
            raise ValueError("Invalid value for `resource_record_cache_capacity_mb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._resource_record_cache_capacity_mb = resource_record_cache_capacity_mb

    @property
    def key_cache_capacity_mb(self):
        """Gets the key_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501

        密钥缓存大小（单位：MB），非必填，取值范围[1,1024]  # noqa: E501

        :return: The key_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._key_cache_capacity_mb

    @key_cache_capacity_mb.setter
    def key_cache_capacity_mb(self, key_cache_capacity_mb):
        """Sets the key_cache_capacity_mb of this ConfigLocalDnsSettingCache.

        密钥缓存大小（单位：MB），非必填，取值范围[1,1024]  # noqa: E501

        :param key_cache_capacity_mb: The key_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if key_cache_capacity_mb is not None and key_cache_capacity_mb > 1024:  # noqa: E501
            raise ValueError("Invalid value for `key_cache_capacity_mb`, must be a value less than or equal to `1024`")  # noqa: E501
        if key_cache_capacity_mb is not None and key_cache_capacity_mb < 1:  # noqa: E501
            raise ValueError("Invalid value for `key_cache_capacity_mb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._key_cache_capacity_mb = key_cache_capacity_mb

    @property
    def negative_cache_capacity_mb(self):
        """Gets the negative_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501

        否定记录缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :return: The negative_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._negative_cache_capacity_mb

    @negative_cache_capacity_mb.setter
    def negative_cache_capacity_mb(self, negative_cache_capacity_mb):
        """Sets the negative_cache_capacity_mb of this ConfigLocalDnsSettingCache.

        否定记录缓存大小（单位：MB），取值范围[1,512]  # noqa: E501

        :param negative_cache_capacity_mb: The negative_cache_capacity_mb of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if negative_cache_capacity_mb is not None and negative_cache_capacity_mb > 512:  # noqa: E501
            raise ValueError("Invalid value for `negative_cache_capacity_mb`, must be a value less than or equal to `512`")  # noqa: E501
        if negative_cache_capacity_mb is not None and negative_cache_capacity_mb < 1:  # noqa: E501
            raise ValueError("Invalid value for `negative_cache_capacity_mb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._negative_cache_capacity_mb = negative_cache_capacity_mb

    @property
    def cache_ttl_minimum(self):
        """Gets the cache_ttl_minimum of this ConfigLocalDnsSettingCache.  # noqa: E501

        全局缓存时间下限（单位：秒），下限为0  # noqa: E501

        :return: The cache_ttl_minimum of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._cache_ttl_minimum

    @cache_ttl_minimum.setter
    def cache_ttl_minimum(self, cache_ttl_minimum):
        """Sets the cache_ttl_minimum of this ConfigLocalDnsSettingCache.

        全局缓存时间下限（单位：秒），下限为0  # noqa: E501

        :param cache_ttl_minimum: The cache_ttl_minimum of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if cache_ttl_minimum is not None and cache_ttl_minimum > 86400:  # noqa: E501
            raise ValueError("Invalid value for `cache_ttl_minimum`, must be a value less than or equal to `86400`")  # noqa: E501
        if cache_ttl_minimum is not None and cache_ttl_minimum < 0:  # noqa: E501
            raise ValueError("Invalid value for `cache_ttl_minimum`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cache_ttl_minimum = cache_ttl_minimum

    @property
    def cache_ttl_maximum(self):
        """Gets the cache_ttl_maximum of this ConfigLocalDnsSettingCache.  # noqa: E501

        全局缓存时间上限（单位：秒），上限为86400。并且所填下限值不能大于上限值  # noqa: E501

        :return: The cache_ttl_maximum of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._cache_ttl_maximum

    @cache_ttl_maximum.setter
    def cache_ttl_maximum(self, cache_ttl_maximum):
        """Sets the cache_ttl_maximum of this ConfigLocalDnsSettingCache.

        全局缓存时间上限（单位：秒），上限为86400。并且所填下限值不能大于上限值  # noqa: E501

        :param cache_ttl_maximum: The cache_ttl_maximum of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if cache_ttl_maximum is not None and cache_ttl_maximum > 86400:  # noqa: E501
            raise ValueError("Invalid value for `cache_ttl_maximum`, must be a value less than or equal to `86400`")  # noqa: E501
        if cache_ttl_maximum is not None and cache_ttl_maximum < 0:  # noqa: E501
            raise ValueError("Invalid value for `cache_ttl_maximum`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cache_ttl_maximum = cache_ttl_maximum

    @property
    def negative_cache_ttl(self):
        """Gets the negative_cache_ttl of this ConfigLocalDnsSettingCache.  # noqa: E501

        否定记录最大缓存时间（单位：秒），取值范围[0,86400]  # noqa: E501

        :return: The negative_cache_ttl of this ConfigLocalDnsSettingCache.  # noqa: E501
        :rtype: int
        """
        return self._negative_cache_ttl

    @negative_cache_ttl.setter
    def negative_cache_ttl(self, negative_cache_ttl):
        """Sets the negative_cache_ttl of this ConfigLocalDnsSettingCache.

        否定记录最大缓存时间（单位：秒），取值范围[0,86400]  # noqa: E501

        :param negative_cache_ttl: The negative_cache_ttl of this ConfigLocalDnsSettingCache.  # noqa: E501
        :type: int
        """
        if negative_cache_ttl is not None and negative_cache_ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `negative_cache_ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if negative_cache_ttl is not None and negative_cache_ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `negative_cache_ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._negative_cache_ttl = negative_cache_ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalDnsSettingCache, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalDnsSettingCache):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
