# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceHost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'address': 'str',
        'state': 'str',
        'weight': 'int',
        'connection_limit': 'int',
        'connection_rate_limit': 'int',
        'request_rate_limit': 'int',
        'dns_query_interval': 'int',
        'dns_query_down_interval': 'int',
        'associated_domain': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'address': 'address',
        'state': 'state',
        'weight': 'weight',
        'connection_limit': 'connection_limit',
        'connection_rate_limit': 'connection_rate_limit',
        'request_rate_limit': 'request_rate_limit',
        'dns_query_interval': 'dns_query_interval',
        'dns_query_down_interval': 'dns_query_down_interval',
        'associated_domain': 'associated_domain'
    }

    def __init__(self, name=None, description=None, type='ADDRESS', address=None, state='ENABLE', weight=None, connection_limit=None, connection_rate_limit=None, request_rate_limit=None, dns_query_interval=None, dns_query_down_interval=None, associated_domain=None):  # noqa: E501
        """ConfigServiceHost - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._address = None
        self._state = None
        self._weight = None
        self._connection_limit = None
        self._connection_rate_limit = None
        self._request_rate_limit = None
        self._dns_query_interval = None
        self._dns_query_down_interval = None
        self._associated_domain = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        self.address = address
        if state is not None:
            self.state = state
        if weight is not None:
            self.weight = weight
        if connection_limit is not None:
            self.connection_limit = connection_limit
        if connection_rate_limit is not None:
            self.connection_rate_limit = connection_rate_limit
        if request_rate_limit is not None:
            self.request_rate_limit = request_rate_limit
        if dns_query_interval is not None:
            self.dns_query_interval = dns_query_interval
        if dns_query_down_interval is not None:
            self.dns_query_down_interval = dns_query_down_interval
        if associated_domain is not None:
            self.associated_domain = associated_domain

    @property
    def name(self):
        """Gets the name of this ConfigServiceHost.  # noqa: E501

        必选参数；指定会话保持的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceHost.

        必选参数；指定会话保持的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceHost.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceHost.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceHost.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceHost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceHost.  # noqa: E501

        可选字段;指定主机的地址类型,address表示为IP地址,domain表示为域名主机,默认为address  # noqa: E501

        :return: The type of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceHost.

        可选字段;指定主机的地址类型,address表示为IP地址,domain表示为域名主机,默认为address  # noqa: E501

        :param type: The type of this ConfigServiceHost.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADDRESS", "DOMAIN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def address(self):
        """Gets the address of this ConfigServiceHost.  # noqa: E501

        必选字段;指定主机的具体地址信息,需和type指定的类型一致  # noqa: E501

        :return: The address of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigServiceHost.

        必选字段;指定主机的具体地址信息,需和type指定的类型一致  # noqa: E501

        :param address: The address of this ConfigServiceHost.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if address is not None and len(address) > 255:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")  # noqa: E501
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def state(self):
        """Gets the state of this ConfigServiceHost.  # noqa: E501

        可选字段;指定业务主机的状态,enable表示启用,disable表示平滑退出,offline表示禁用;默认enable  # noqa: E501

        :return: The state of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigServiceHost.

        可选字段;指定业务主机的状态,enable表示启用,disable表示平滑退出,offline表示禁用;默认enable  # noqa: E501

        :param state: The state of this ConfigServiceHost.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE", "OFFLINE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def weight(self):
        """Gets the weight of this ConfigServiceHost.  # noqa: E501

        可选字段;指定业务主机的权重,取值范围为[1,100],默认为10  # noqa: E501

        :return: The weight of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigServiceHost.

        可选字段;指定业务主机的权重,取值范围为[1,100],默认为10  # noqa: E501

        :param weight: The weight of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._weight = weight

    @property
    def connection_limit(self):
        """Gets the connection_limit of this ConfigServiceHost.  # noqa: E501

        可选字段;指定业务主机的并发连接数阈值,默认为0,表示不限制  # noqa: E501

        :return: The connection_limit of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._connection_limit

    @connection_limit.setter
    def connection_limit(self, connection_limit):
        """Sets the connection_limit of this ConfigServiceHost.

        可选字段;指定业务主机的并发连接数阈值,默认为0,表示不限制  # noqa: E501

        :param connection_limit: The connection_limit of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if connection_limit is not None and connection_limit > 100000000:  # noqa: E501
            raise ValueError("Invalid value for `connection_limit`, must be a value less than or equal to `100000000`")  # noqa: E501
        if connection_limit is not None and connection_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `connection_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_limit = connection_limit

    @property
    def connection_rate_limit(self):
        """Gets the connection_rate_limit of this ConfigServiceHost.  # noqa: E501

        可选字段;指定业务主机的新建连接数阈值,默认为0,表示不限制  # noqa: E501

        :return: The connection_rate_limit of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._connection_rate_limit

    @connection_rate_limit.setter
    def connection_rate_limit(self, connection_rate_limit):
        """Sets the connection_rate_limit of this ConfigServiceHost.

        可选字段;指定业务主机的新建连接数阈值,默认为0,表示不限制  # noqa: E501

        :param connection_rate_limit: The connection_rate_limit of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if connection_rate_limit is not None and connection_rate_limit > 100000000:  # noqa: E501
            raise ValueError("Invalid value for `connection_rate_limit`, must be a value less than or equal to `100000000`")  # noqa: E501
        if connection_rate_limit is not None and connection_rate_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `connection_rate_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_rate_limit = connection_rate_limit

    @property
    def request_rate_limit(self):
        """Gets the request_rate_limit of this ConfigServiceHost.  # noqa: E501

        可选字段;指定业务主机的请求速率阈值,默认为0,表示不限制  # noqa: E501

        :return: The request_rate_limit of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._request_rate_limit

    @request_rate_limit.setter
    def request_rate_limit(self, request_rate_limit):
        """Sets the request_rate_limit of this ConfigServiceHost.

        可选字段;指定业务主机的请求速率阈值,默认为0,表示不限制  # noqa: E501

        :param request_rate_limit: The request_rate_limit of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if request_rate_limit is not None and request_rate_limit > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_limit`, must be a value less than or equal to `1000000`")  # noqa: E501
        if request_rate_limit is not None and request_rate_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._request_rate_limit = request_rate_limit

    @property
    def dns_query_interval(self):
        """Gets the dns_query_interval of this ConfigServiceHost.  # noqa: E501

        可选字段;指定DNS查询间隔,默认为0,表示使用TTL中的时间,单位为s  # noqa: E501

        :return: The dns_query_interval of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._dns_query_interval

    @dns_query_interval.setter
    def dns_query_interval(self, dns_query_interval):
        """Sets the dns_query_interval of this ConfigServiceHost.

        可选字段;指定DNS查询间隔,默认为0,表示使用TTL中的时间,单位为s  # noqa: E501

        :param dns_query_interval: The dns_query_interval of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if dns_query_interval is not None and dns_query_interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `dns_query_interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if dns_query_interval is not None and dns_query_interval < 0:  # noqa: E501
            raise ValueError("Invalid value for `dns_query_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dns_query_interval = dns_query_interval

    @property
    def dns_query_down_interval(self):
        """Gets the dns_query_down_interval of this ConfigServiceHost.  # noqa: E501

        可选字段;指定域名业务主机离线后的DNS查询间隔时间,默认为5s  # noqa: E501

        :return: The dns_query_down_interval of this ConfigServiceHost.  # noqa: E501
        :rtype: int
        """
        return self._dns_query_down_interval

    @dns_query_down_interval.setter
    def dns_query_down_interval(self, dns_query_down_interval):
        """Sets the dns_query_down_interval of this ConfigServiceHost.

        可选字段;指定域名业务主机离线后的DNS查询间隔时间,默认为5s  # noqa: E501

        :param dns_query_down_interval: The dns_query_down_interval of this ConfigServiceHost.  # noqa: E501
        :type: int
        """
        if dns_query_down_interval is not None and dns_query_down_interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `dns_query_down_interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if dns_query_down_interval is not None and dns_query_down_interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `dns_query_down_interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._dns_query_down_interval = dns_query_down_interval

    @property
    def associated_domain(self):
        """Gets the associated_domain of this ConfigServiceHost.  # noqa: E501

        只读字段;显示关联的域名信息  # noqa: E501

        :return: The associated_domain of this ConfigServiceHost.  # noqa: E501
        :rtype: str
        """
        return self._associated_domain

    @associated_domain.setter
    def associated_domain(self, associated_domain):
        """Sets the associated_domain of this ConfigServiceHost.

        只读字段;显示关联的域名信息  # noqa: E501

        :param associated_domain: The associated_domain of this ConfigServiceHost.  # noqa: E501
        :type: str
        """

        self._associated_domain = associated_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceHost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceHost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
