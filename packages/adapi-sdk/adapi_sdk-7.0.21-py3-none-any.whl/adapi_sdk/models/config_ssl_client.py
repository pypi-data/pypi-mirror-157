# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_ssl_cipher_suites import ConfigSslCipherSuites  # noqa: F401,E501
from adapi_sdk.models.config_ssl_client_peer_auth_fail_rules import ConfigSslClientPeerAuthFailRules  # noqa: F401,E501
from adapi_sdk.models.config_ssl_client_peer_auth_url_rules import ConfigSslClientPeerAuthUrlRules  # noqa: F401,E501
from adapi_sdk.models.config_ssl_client_session_resume import ConfigSslClientSessionResume  # noqa: F401,E501


class ConfigSslClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'service': 'str',
        'certificate_ecdsa': 'str',
        'certificate_rsa': 'str',
        'protocols': 'list[str]',
        'protocol_disabled_policy': 'str',
        'protocol_disabled_http_response': 'str',
        'cipher_suites': 'list[ConfigSslCipherSuites]',
        'sni': 'str',
        'session_resume': 'ConfigSslClientSessionResume',
        'session_ticket': 'str',
        'peer_auth_state': 'str',
        'peer_auth_certificate': 'str',
        'peer_auth_url': 'str',
        'peer_auth_url_rules': 'list[ConfigSslClientPeerAuthUrlRules]',
        'peer_auth_chain_depth': 'int',
        'peer_auth_ca': 'str',
        'peer_auth_crls': 'list[str]',
        'peer_auth_fail_rules': 'list[ConfigSslClientPeerAuthFailRules]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'service': 'service',
        'certificate_ecdsa': 'certificate_ecdsa',
        'certificate_rsa': 'certificate_rsa',
        'protocols': 'protocols',
        'protocol_disabled_policy': 'protocol_disabled_policy',
        'protocol_disabled_http_response': 'protocol_disabled_http_response',
        'cipher_suites': 'cipher_suites',
        'sni': 'sni',
        'session_resume': 'session_resume',
        'session_ticket': 'session_ticket',
        'peer_auth_state': 'peer_auth_state',
        'peer_auth_certificate': 'peer_auth_certificate',
        'peer_auth_url': 'peer_auth_url',
        'peer_auth_url_rules': 'peer_auth_url_rules',
        'peer_auth_chain_depth': 'peer_auth_chain_depth',
        'peer_auth_ca': 'peer_auth_ca',
        'peer_auth_crls': 'peer_auth_crls',
        'peer_auth_fail_rules': 'peer_auth_fail_rules'
    }

    def __init__(self, name=None, description=None, service='SSL-OFFLOAD-HTTPS', certificate_ecdsa=None, certificate_rsa=None, protocols=None, protocol_disabled_policy='DENY', protocol_disabled_http_response=None, cipher_suites=None, sni=None, session_resume=None, session_ticket='ENABLE', peer_auth_state='DISABLE', peer_auth_certificate='REQUIRED', peer_auth_url='ALL', peer_auth_url_rules=None, peer_auth_chain_depth=None, peer_auth_ca=None, peer_auth_crls=None, peer_auth_fail_rules=None):  # noqa: E501
        """ConfigSslClient - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._service = None
        self._certificate_ecdsa = None
        self._certificate_rsa = None
        self._protocols = None
        self._protocol_disabled_policy = None
        self._protocol_disabled_http_response = None
        self._cipher_suites = None
        self._sni = None
        self._session_resume = None
        self._session_ticket = None
        self._peer_auth_state = None
        self._peer_auth_certificate = None
        self._peer_auth_url = None
        self._peer_auth_url_rules = None
        self._peer_auth_chain_depth = None
        self._peer_auth_ca = None
        self._peer_auth_crls = None
        self._peer_auth_fail_rules = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if service is not None:
            self.service = service
        if certificate_ecdsa is not None:
            self.certificate_ecdsa = certificate_ecdsa
        if certificate_rsa is not None:
            self.certificate_rsa = certificate_rsa
        if protocols is not None:
            self.protocols = protocols
        if protocol_disabled_policy is not None:
            self.protocol_disabled_policy = protocol_disabled_policy
        if protocol_disabled_http_response is not None:
            self.protocol_disabled_http_response = protocol_disabled_http_response
        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if sni is not None:
            self.sni = sni
        if session_resume is not None:
            self.session_resume = session_resume
        if session_ticket is not None:
            self.session_ticket = session_ticket
        if peer_auth_state is not None:
            self.peer_auth_state = peer_auth_state
        if peer_auth_certificate is not None:
            self.peer_auth_certificate = peer_auth_certificate
        if peer_auth_url is not None:
            self.peer_auth_url = peer_auth_url
        if peer_auth_url_rules is not None:
            self.peer_auth_url_rules = peer_auth_url_rules
        if peer_auth_chain_depth is not None:
            self.peer_auth_chain_depth = peer_auth_chain_depth
        if peer_auth_ca is not None:
            self.peer_auth_ca = peer_auth_ca
        if peer_auth_crls is not None:
            self.peer_auth_crls = peer_auth_crls
        if peer_auth_fail_rules is not None:
            self.peer_auth_fail_rules = peer_auth_fail_rules

    @property
    def name(self):
        """Gets the name of this ConfigSslClient.  # noqa: E501

        必选参数；指定SSL卸载策略的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSslClient.

        必选参数；指定SSL卸载策略的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSslClient.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSslClient.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigSslClient.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def service(self):
        """Gets the service of this ConfigSslClient.  # noqa: E501

        可选参数;指定SSL策略的服务类型,ssl-offload表示基于tcp的ssl服务;ssl-offload-https表示基于http的ssl服务;默认为ssl-offload-https  # noqa: E501

        :return: The service of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigSslClient.

        可选参数;指定SSL策略的服务类型,ssl-offload表示基于tcp的ssl服务;ssl-offload-https表示基于http的ssl服务;默认为ssl-offload-https  # noqa: E501

        :param service: The service of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSL-OFFLOAD", "SSL-OFFLOAD-HTTPS"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def certificate_ecdsa(self):
        """Gets the certificate_ecdsa of this ConfigSslClient.  # noqa: E501

        可选参数;指定ecdsa类型的服务器证书,默认为none,表示不使用ecdsa的证书  # noqa: E501

        :return: The certificate_ecdsa of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._certificate_ecdsa

    @certificate_ecdsa.setter
    def certificate_ecdsa(self, certificate_ecdsa):
        """Sets the certificate_ecdsa of this ConfigSslClient.

        可选参数;指定ecdsa类型的服务器证书,默认为none,表示不使用ecdsa的证书  # noqa: E501

        :param certificate_ecdsa: The certificate_ecdsa of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        if certificate_ecdsa is not None and len(certificate_ecdsa) > 80:
            raise ValueError("Invalid value for `certificate_ecdsa`, length must be less than or equal to `80`")  # noqa: E501
        if certificate_ecdsa is not None and len(certificate_ecdsa) < 1:
            raise ValueError("Invalid value for `certificate_ecdsa`, length must be greater than or equal to `1`")  # noqa: E501

        self._certificate_ecdsa = certificate_ecdsa

    @property
    def certificate_rsa(self):
        """Gets the certificate_rsa of this ConfigSslClient.  # noqa: E501

        可选参数;指定rsa类型的服务器证书,默认为none,表示不使用rsa的证书  # noqa: E501

        :return: The certificate_rsa of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._certificate_rsa

    @certificate_rsa.setter
    def certificate_rsa(self, certificate_rsa):
        """Sets the certificate_rsa of this ConfigSslClient.

        可选参数;指定rsa类型的服务器证书,默认为none,表示不使用rsa的证书  # noqa: E501

        :param certificate_rsa: The certificate_rsa of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        if certificate_rsa is not None and len(certificate_rsa) > 80:
            raise ValueError("Invalid value for `certificate_rsa`, length must be less than or equal to `80`")  # noqa: E501
        if certificate_rsa is not None and len(certificate_rsa) < 1:
            raise ValueError("Invalid value for `certificate_rsa`, length must be greater than or equal to `1`")  # noqa: E501

        self._certificate_rsa = certificate_rsa

    @property
    def protocols(self):
        """Gets the protocols of this ConfigSslClient.  # noqa: E501

        可选参数;指定服务端支持的ssl协议,默认为tls1.0、tls1.1和tls1.2  # noqa: E501

        :return: The protocols of this ConfigSslClient.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ConfigSslClient.

        可选参数;指定服务端支持的ssl协议,默认为tls1.0、tls1.1和tls1.2  # noqa: E501

        :param protocols: The protocols of this ConfigSslClient.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SSLV3", "TLS1.0", "TLS1.1", "TLS1.2"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def protocol_disabled_policy(self):
        """Gets the protocol_disabled_policy of this ConfigSslClient.  # noqa: E501

        可选参数;指定协议未启用时的策略,deny表示拒绝,http-response-and-deny表示返回指定页面[只适用于ssl-offload-https类型],默认为deny  # noqa: E501

        :return: The protocol_disabled_policy of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._protocol_disabled_policy

    @protocol_disabled_policy.setter
    def protocol_disabled_policy(self, protocol_disabled_policy):
        """Sets the protocol_disabled_policy of this ConfigSslClient.

        可选参数;指定协议未启用时的策略,deny表示拒绝,http-response-and-deny表示返回指定页面[只适用于ssl-offload-https类型],默认为deny  # noqa: E501

        :param protocol_disabled_policy: The protocol_disabled_policy of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["DENY", "HTTP-RESPONSE-AND-DENY"]  # noqa: E501
        if protocol_disabled_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_disabled_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol_disabled_policy, allowed_values)
            )

        self._protocol_disabled_policy = protocol_disabled_policy

    @property
    def protocol_disabled_http_response(self):
        """Gets the protocol_disabled_http_response of this ConfigSslClient.  # noqa: E501

        可选参数;指定协议未启用时的返回页面,当protocol_disabled_policy为http-response-and-deny时该参数必填  # noqa: E501

        :return: The protocol_disabled_http_response of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._protocol_disabled_http_response

    @protocol_disabled_http_response.setter
    def protocol_disabled_http_response(self, protocol_disabled_http_response):
        """Sets the protocol_disabled_http_response of this ConfigSslClient.

        可选参数;指定协议未启用时的返回页面,当protocol_disabled_policy为http-response-and-deny时该参数必填  # noqa: E501

        :param protocol_disabled_http_response: The protocol_disabled_http_response of this ConfigSslClient.  # noqa: E501
        :type: str
        """

        self._protocol_disabled_http_response = protocol_disabled_http_response

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this ConfigSslClient.  # noqa: E501

        加密算法集合  # noqa: E501

        :return: The cipher_suites of this ConfigSslClient.  # noqa: E501
        :rtype: list[ConfigSslCipherSuites]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this ConfigSslClient.

        加密算法集合  # noqa: E501

        :param cipher_suites: The cipher_suites of this ConfigSslClient.  # noqa: E501
        :type: list[ConfigSslCipherSuites]
        """

        self._cipher_suites = cipher_suites

    @property
    def sni(self):
        """Gets the sni of this ConfigSslClient.  # noqa: E501

        可选参数;指定SNI备用名称  # noqa: E501

        :return: The sni of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this ConfigSslClient.

        可选参数;指定SNI备用名称  # noqa: E501

        :param sni: The sni of this ConfigSslClient.  # noqa: E501
        :type: str
        """

        self._sni = sni

    @property
    def session_resume(self):
        """Gets the session_resume of this ConfigSslClient.  # noqa: E501


        :return: The session_resume of this ConfigSslClient.  # noqa: E501
        :rtype: ConfigSslClientSessionResume
        """
        return self._session_resume

    @session_resume.setter
    def session_resume(self, session_resume):
        """Sets the session_resume of this ConfigSslClient.


        :param session_resume: The session_resume of this ConfigSslClient.  # noqa: E501
        :type: ConfigSslClientSessionResume
        """

        self._session_resume = session_resume

    @property
    def session_ticket(self):
        """Gets the session_ticket of this ConfigSslClient.  # noqa: E501

        可选参数;指定session_ticket的状态,enable表示启用,disable表示禁用;默认为启用  # noqa: E501

        :return: The session_ticket of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._session_ticket

    @session_ticket.setter
    def session_ticket(self, session_ticket):
        """Sets the session_ticket of this ConfigSslClient.

        可选参数;指定session_ticket的状态,enable表示启用,disable表示禁用;默认为启用  # noqa: E501

        :param session_ticket: The session_ticket of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if session_ticket not in allowed_values:
            raise ValueError(
                "Invalid value for `session_ticket` ({0}), must be one of {1}"  # noqa: E501
                .format(session_ticket, allowed_values)
            )

        self._session_ticket = session_ticket

    @property
    def peer_auth_state(self):
        """Gets the peer_auth_state of this ConfigSslClient.  # noqa: E501

        可选参数;指定客户端认证的状态,enable表示启用,disable表示禁用;默认为disable  # noqa: E501

        :return: The peer_auth_state of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_state

    @peer_auth_state.setter
    def peer_auth_state(self, peer_auth_state):
        """Sets the peer_auth_state of this ConfigSslClient.

        可选参数;指定客户端认证的状态,enable表示启用,disable表示禁用;默认为disable  # noqa: E501

        :param peer_auth_state: The peer_auth_state of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if peer_auth_state not in allowed_values:
            raise ValueError(
                "Invalid value for `peer_auth_state` ({0}), must be one of {1}"  # noqa: E501
                .format(peer_auth_state, allowed_values)
            )

        self._peer_auth_state = peer_auth_state

    @property
    def peer_auth_certificate(self):
        """Gets the peer_auth_certificate of this ConfigSslClient.  # noqa: E501

        可选参数;指定客户端证书的必要性,required表示必须,optional表示可选;默认为required  # noqa: E501

        :return: The peer_auth_certificate of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_certificate

    @peer_auth_certificate.setter
    def peer_auth_certificate(self, peer_auth_certificate):
        """Sets the peer_auth_certificate of this ConfigSslClient.

        可选参数;指定客户端证书的必要性,required表示必须,optional表示可选;默认为required  # noqa: E501

        :param peer_auth_certificate: The peer_auth_certificate of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUIRED", "OPTIONAL"]  # noqa: E501
        if peer_auth_certificate not in allowed_values:
            raise ValueError(
                "Invalid value for `peer_auth_certificate` ({0}), must be one of {1}"  # noqa: E501
                .format(peer_auth_certificate, allowed_values)
            )

        self._peer_auth_certificate = peer_auth_certificate

    @property
    def peer_auth_url(self):
        """Gets the peer_auth_url of this ConfigSslClient.  # noqa: E501

        可选参数;指定客户端认证url策略,默认为all,表示所有url均为客户端认证  # noqa: E501

        :return: The peer_auth_url of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_url

    @peer_auth_url.setter
    def peer_auth_url(self, peer_auth_url):
        """Sets the peer_auth_url of this ConfigSslClient.

        可选参数;指定客户端认证url策略,默认为all,表示所有url均为客户端认证  # noqa: E501

        :param peer_auth_url: The peer_auth_url of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "RULE"]  # noqa: E501
        if peer_auth_url not in allowed_values:
            raise ValueError(
                "Invalid value for `peer_auth_url` ({0}), must be one of {1}"  # noqa: E501
                .format(peer_auth_url, allowed_values)
            )

        self._peer_auth_url = peer_auth_url

    @property
    def peer_auth_url_rules(self):
        """Gets the peer_auth_url_rules of this ConfigSslClient.  # noqa: E501

        可选参数;指定url客户端认证策略,该参数是一个对象参数列表,支持add/delete进行对象的添加和删除。url_pattern_wildcard来指定url,url_pattern_case_sensitive表示是否区分大小写,action指定是否做客户端认证[auth表示需要客户端认证;no-auth表示无客户端认证]  # noqa: E501

        :return: The peer_auth_url_rules of this ConfigSslClient.  # noqa: E501
        :rtype: list[ConfigSslClientPeerAuthUrlRules]
        """
        return self._peer_auth_url_rules

    @peer_auth_url_rules.setter
    def peer_auth_url_rules(self, peer_auth_url_rules):
        """Sets the peer_auth_url_rules of this ConfigSslClient.

        可选参数;指定url客户端认证策略,该参数是一个对象参数列表,支持add/delete进行对象的添加和删除。url_pattern_wildcard来指定url,url_pattern_case_sensitive表示是否区分大小写,action指定是否做客户端认证[auth表示需要客户端认证;no-auth表示无客户端认证]  # noqa: E501

        :param peer_auth_url_rules: The peer_auth_url_rules of this ConfigSslClient.  # noqa: E501
        :type: list[ConfigSslClientPeerAuthUrlRules]
        """

        self._peer_auth_url_rules = peer_auth_url_rules

    @property
    def peer_auth_chain_depth(self):
        """Gets the peer_auth_chain_depth of this ConfigSslClient.  # noqa: E501

        可选参数;指定客户端证书链深度,取值范围为[1,32],默认为9  # noqa: E501

        :return: The peer_auth_chain_depth of this ConfigSslClient.  # noqa: E501
        :rtype: int
        """
        return self._peer_auth_chain_depth

    @peer_auth_chain_depth.setter
    def peer_auth_chain_depth(self, peer_auth_chain_depth):
        """Sets the peer_auth_chain_depth of this ConfigSslClient.

        可选参数;指定客户端证书链深度,取值范围为[1,32],默认为9  # noqa: E501

        :param peer_auth_chain_depth: The peer_auth_chain_depth of this ConfigSslClient.  # noqa: E501
        :type: int
        """
        if peer_auth_chain_depth is not None and peer_auth_chain_depth > 32:  # noqa: E501
            raise ValueError("Invalid value for `peer_auth_chain_depth`, must be a value less than or equal to `32`")  # noqa: E501
        if peer_auth_chain_depth is not None and peer_auth_chain_depth < 1:  # noqa: E501
            raise ValueError("Invalid value for `peer_auth_chain_depth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._peer_auth_chain_depth = peer_auth_chain_depth

    @property
    def peer_auth_ca(self):
        """Gets the peer_auth_ca of this ConfigSslClient.  # noqa: E501

        可选参数;指定CA证书  # noqa: E501

        :return: The peer_auth_ca of this ConfigSslClient.  # noqa: E501
        :rtype: str
        """
        return self._peer_auth_ca

    @peer_auth_ca.setter
    def peer_auth_ca(self, peer_auth_ca):
        """Sets the peer_auth_ca of this ConfigSslClient.

        可选参数;指定CA证书  # noqa: E501

        :param peer_auth_ca: The peer_auth_ca of this ConfigSslClient.  # noqa: E501
        :type: str
        """
        if peer_auth_ca is not None and len(peer_auth_ca) > 80:
            raise ValueError("Invalid value for `peer_auth_ca`, length must be less than or equal to `80`")  # noqa: E501
        if peer_auth_ca is not None and len(peer_auth_ca) < 1:
            raise ValueError("Invalid value for `peer_auth_ca`, length must be greater than or equal to `1`")  # noqa: E501

        self._peer_auth_ca = peer_auth_ca

    @property
    def peer_auth_crls(self):
        """Gets the peer_auth_crls of this ConfigSslClient.  # noqa: E501

        可选参数;指定吊销列表  # noqa: E501

        :return: The peer_auth_crls of this ConfigSslClient.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_auth_crls

    @peer_auth_crls.setter
    def peer_auth_crls(self, peer_auth_crls):
        """Sets the peer_auth_crls of this ConfigSslClient.

        可选参数;指定吊销列表  # noqa: E501

        :param peer_auth_crls: The peer_auth_crls of this ConfigSslClient.  # noqa: E501
        :type: list[str]
        """

        self._peer_auth_crls = peer_auth_crls

    @property
    def peer_auth_fail_rules(self):
        """Gets the peer_auth_fail_rules of this ConfigSslClient.  # noqa: E501

        可选参数;指定认证失败策略,该参数为对象参数列表,支持add/delete进行对象的添加和删除。reason指定失败原因,action指定失败动作,http_response指定返回页面;默认规则为deny  # noqa: E501

        :return: The peer_auth_fail_rules of this ConfigSslClient.  # noqa: E501
        :rtype: list[ConfigSslClientPeerAuthFailRules]
        """
        return self._peer_auth_fail_rules

    @peer_auth_fail_rules.setter
    def peer_auth_fail_rules(self, peer_auth_fail_rules):
        """Sets the peer_auth_fail_rules of this ConfigSslClient.

        可选参数;指定认证失败策略,该参数为对象参数列表,支持add/delete进行对象的添加和删除。reason指定失败原因,action指定失败动作,http_response指定返回页面;默认规则为deny  # noqa: E501

        :param peer_auth_fail_rules: The peer_auth_fail_rules of this ConfigSslClient.  # noqa: E501
        :type: list[ConfigSslClientPeerAuthFailRules]
        """

        self._peer_auth_fail_rules = peer_auth_fail_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSslClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSslClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
