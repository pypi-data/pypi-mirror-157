# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_pre_rule_tcp_forward_source_address import ConfigPreRuleTcpForwardSourceAddress  # noqa: F401,E501
from adapi_sdk.models.config_ssl_match_component1 import ConfigSslMatchComponent1  # noqa: F401,E501
from adapi_sdk.models.config_str_match_component1 import ConfigStrMatchComponent1  # noqa: F401,E501


class ConfigPreRuleSslOffload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'service': 'str',
        'source_address': 'ConfigPreRuleTcpForwardSourceAddress',
        'tcp_stream_rule': 'ConfigStrMatchComponent1',
        'ssl_version_rule': 'str',
        'ssl_variable_rules': 'list[ConfigSslMatchComponent1]',
        'action': 'str',
        'sched_pool': 'str',
        'sched_failure': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'service': 'service',
        'source_address': 'source_address',
        'tcp_stream_rule': 'tcp_stream_rule',
        'ssl_version_rule': 'ssl_version_rule',
        'ssl_variable_rules': 'ssl_variable_rules',
        'action': 'action',
        'sched_pool': 'sched_pool',
        'sched_failure': 'sched_failure'
    }

    def __init__(self, name=None, description=None, service='SSL-OFFLOAD', source_address=None, tcp_stream_rule=None, ssl_version_rule='ALL', ssl_variable_rules=None, action='SCHED-POOL', sched_pool=None, sched_failure='NEXT-RULE'):  # noqa: E501
        """ConfigPreRuleSslOffload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._service = None
        self._source_address = None
        self._tcp_stream_rule = None
        self._ssl_version_rule = None
        self._ssl_variable_rules = None
        self._action = None
        self._sched_pool = None
        self._sched_failure = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if service is not None:
            self.service = service
        if source_address is not None:
            self.source_address = source_address
        if tcp_stream_rule is not None:
            self.tcp_stream_rule = tcp_stream_rule
        if ssl_version_rule is not None:
            self.ssl_version_rule = ssl_version_rule
        if ssl_variable_rules is not None:
            self.ssl_variable_rules = ssl_variable_rules
        if action is not None:
            self.action = action
        if sched_pool is not None:
            self.sched_pool = sched_pool
        if sched_failure is not None:
            self.sched_failure = sched_failure

    @property
    def name(self):
        """Gets the name of this ConfigPreRuleSslOffload.  # noqa: E501

        必选参数；指定前置策略的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPreRuleSslOffload.

        必选参数；指定前置策略的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPreRuleSslOffload.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def service(self):
        """Gets the service of this ConfigPreRuleSslOffload.  # noqa: E501

        必选参数；指定前置策略的类型；SSL前置策略中，此字段设置为ssl-offload。  # noqa: E501

        :return: The service of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigPreRuleSslOffload.

        必选参数；指定前置策略的类型；SSL前置策略中，此字段设置为ssl-offload。  # noqa: E501

        :param service: The service of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSL-OFFLOAD"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def source_address(self):
        """Gets the source_address of this ConfigPreRuleSslOffload.  # noqa: E501


        :return: The source_address of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: ConfigPreRuleTcpForwardSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigPreRuleSslOffload.


        :param source_address: The source_address of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: ConfigPreRuleTcpForwardSourceAddress
        """

        self._source_address = source_address

    @property
    def tcp_stream_rule(self):
        """Gets the tcp_stream_rule of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；tcp流匹配规则  # noqa: E501

        :return: The tcp_stream_rule of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: ConfigStrMatchComponent1
        """
        return self._tcp_stream_rule

    @tcp_stream_rule.setter
    def tcp_stream_rule(self, tcp_stream_rule):
        """Sets the tcp_stream_rule of this ConfigPreRuleSslOffload.

        可选参数；tcp流匹配规则  # noqa: E501

        :param tcp_stream_rule: The tcp_stream_rule of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: ConfigStrMatchComponent1
        """

        self._tcp_stream_rule = tcp_stream_rule

    @property
    def ssl_version_rule(self):
        """Gets the ssl_version_rule of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；指定匹配的SSL版本，可选的版本有：all（所有）、V1、V2、V3，默认为all  # noqa: E501

        :return: The ssl_version_rule of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._ssl_version_rule

    @ssl_version_rule.setter
    def ssl_version_rule(self, ssl_version_rule):
        """Sets the ssl_version_rule of this ConfigPreRuleSslOffload.

        可选参数；指定匹配的SSL版本，可选的版本有：all（所有）、V1、V2、V3，默认为all  # noqa: E501

        :param ssl_version_rule: The ssl_version_rule of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "V1", "V2", "V3"]  # noqa: E501
        if ssl_version_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_version_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_version_rule, allowed_values)
            )

        self._ssl_version_rule = ssl_version_rule

    @property
    def ssl_variable_rules(self):
        """Gets the ssl_variable_rules of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；指定匹配的SSL证书变量  # noqa: E501

        :return: The ssl_variable_rules of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: list[ConfigSslMatchComponent1]
        """
        return self._ssl_variable_rules

    @ssl_variable_rules.setter
    def ssl_variable_rules(self, ssl_variable_rules):
        """Sets the ssl_variable_rules of this ConfigPreRuleSslOffload.

        可选参数；指定匹配的SSL证书变量  # noqa: E501

        :param ssl_variable_rules: The ssl_variable_rules of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: list[ConfigSslMatchComponent1]
        """

        self._ssl_variable_rules = ssl_variable_rules

    @property
    def action(self):
        """Gets the action of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；指定该前置策略匹配后的执行动作，可选的动作有：sched-pool（调度节点池）、tcp-fin（FIN关闭连接）、tcp-rst（RST关闭连接）。  # noqa: E501

        :return: The action of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigPreRuleSslOffload.

        可选参数；指定该前置策略匹配后的执行动作，可选的动作有：sched-pool（调度节点池）、tcp-fin（FIN关闭连接）、tcp-rst（RST关闭连接）。  # noqa: E501

        :param action: The action of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCHED-POOL", "TCP-FIN", "TCP-RST"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def sched_pool(self):
        """Gets the sched_pool of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；执行动作为sched-pool时，指定调度的节点池。  # noqa: E501

        :return: The sched_pool of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._sched_pool

    @sched_pool.setter
    def sched_pool(self, sched_pool):
        """Sets the sched_pool of this ConfigPreRuleSslOffload.

        可选参数；执行动作为sched-pool时，指定调度的节点池。  # noqa: E501

        :param sched_pool: The sched_pool of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """

        self._sched_pool = sched_pool

    @property
    def sched_failure(self):
        """Gets the sched_failure of this ConfigPreRuleSslOffload.  # noqa: E501

        可选参数；执行动作为sched-pool时，指定调度失败后的执行动作，可选的动作有：next-rule（匹配下一条）、tcp-fin（FIN关闭连接）、tcp-rst（RST关闭连接），默认为继续匹配下一条策略。  # noqa: E501

        :return: The sched_failure of this ConfigPreRuleSslOffload.  # noqa: E501
        :rtype: str
        """
        return self._sched_failure

    @sched_failure.setter
    def sched_failure(self, sched_failure):
        """Sets the sched_failure of this ConfigPreRuleSslOffload.

        可选参数；执行动作为sched-pool时，指定调度失败后的执行动作，可选的动作有：next-rule（匹配下一条）、tcp-fin（FIN关闭连接）、tcp-rst（RST关闭连接），默认为继续匹配下一条策略。  # noqa: E501

        :param sched_failure: The sched_failure of this ConfigPreRuleSslOffload.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEXT-RULE", "TCP-FIN", "TCP-RST"]  # noqa: E501
        if sched_failure not in allowed_values:
            raise ValueError(
                "Invalid value for `sched_failure` ({0}), must be one of {1}"  # noqa: E501
                .format(sched_failure, allowed_values)
            )

        self._sched_failure = sched_failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPreRuleSslOffload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPreRuleSslOffload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
