# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_cluster_join_alternate_ha import ConfigClusterJoinAlternateHa  # noqa: F401,E501
from adapi_sdk.models.config_cluster_join_ha import ConfigClusterJoinHa  # noqa: F401,E501


class ConfigClusterJoin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_ha_address': 'str',
        'cluster_username': 'str',
        'cluster_password': 'str',
        'pk_cluster_password': 'str',
        'ha': 'ConfigClusterJoinHa',
        'alternate_ha': 'ConfigClusterJoinAlternateHa'
    }

    attribute_map = {
        'cluster_ha_address': 'cluster_ha_address',
        'cluster_username': 'cluster_username',
        'cluster_password': 'cluster_password',
        'pk_cluster_password': 'pk_cluster_password',
        'ha': 'ha',
        'alternate_ha': 'alternate_ha'
    }

    def __init__(self, cluster_ha_address=None, cluster_username=None, cluster_password=None, pk_cluster_password=None, ha=None, alternate_ha=None):  # noqa: E501
        """ConfigClusterJoin - a model defined in Swagger"""  # noqa: E501

        self._cluster_ha_address = None
        self._cluster_username = None
        self._cluster_password = None
        self._pk_cluster_password = None
        self._ha = None
        self._alternate_ha = None
        self.discriminator = None

        self.cluster_ha_address = cluster_ha_address
        self.cluster_username = cluster_username
        if cluster_password is not None:
            self.cluster_password = cluster_password
        if pk_cluster_password is not None:
            self.pk_cluster_password = pk_cluster_password
        self.ha = ha
        self.alternate_ha = alternate_ha

    @property
    def cluster_ha_address(self):
        """Gets the cluster_ha_address of this ConfigClusterJoin.  # noqa: E501

        集群主心跳IP，填写要加入的集群内任意一台在线设备的主心跳口IP即可  # noqa: E501

        :return: The cluster_ha_address of this ConfigClusterJoin.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ha_address

    @cluster_ha_address.setter
    def cluster_ha_address(self, cluster_ha_address):
        """Sets the cluster_ha_address of this ConfigClusterJoin.

        集群主心跳IP，填写要加入的集群内任意一台在线设备的主心跳口IP即可  # noqa: E501

        :param cluster_ha_address: The cluster_ha_address of this ConfigClusterJoin.  # noqa: E501
        :type: str
        """
        if cluster_ha_address is None:
            raise ValueError("Invalid value for `cluster_ha_address`, must not be `None`")  # noqa: E501

        self._cluster_ha_address = cluster_ha_address

    @property
    def cluster_username(self):
        """Gets the cluster_username of this ConfigClusterJoin.  # noqa: E501

        集群用户名，填写要加入的集群内具有高可用权限的用户的用户名  # noqa: E501

        :return: The cluster_username of this ConfigClusterJoin.  # noqa: E501
        :rtype: str
        """
        return self._cluster_username

    @cluster_username.setter
    def cluster_username(self, cluster_username):
        """Sets the cluster_username of this ConfigClusterJoin.

        集群用户名，填写要加入的集群内具有高可用权限的用户的用户名  # noqa: E501

        :param cluster_username: The cluster_username of this ConfigClusterJoin.  # noqa: E501
        :type: str
        """
        if cluster_username is None:
            raise ValueError("Invalid value for `cluster_username`, must not be `None`")  # noqa: E501

        self._cluster_username = cluster_username

    @property
    def cluster_password(self):
        """Gets the cluster_password of this ConfigClusterJoin.  # noqa: E501

        集群用户密码，填写要加入的集群内具有高可用权限的用户的用户密码  # noqa: E501

        :return: The cluster_password of this ConfigClusterJoin.  # noqa: E501
        :rtype: str
        """
        return self._cluster_password

    @cluster_password.setter
    def cluster_password(self, cluster_password):
        """Sets the cluster_password of this ConfigClusterJoin.

        集群用户密码，填写要加入的集群内具有高可用权限的用户的用户密码  # noqa: E501

        :param cluster_password: The cluster_password of this ConfigClusterJoin.  # noqa: E501
        :type: str
        """

        self._cluster_password = cluster_password

    @property
    def pk_cluster_password(self):
        """Gets the pk_cluster_password of this ConfigClusterJoin.  # noqa: E501

        加密集群用户密码  # noqa: E501

        :return: The pk_cluster_password of this ConfigClusterJoin.  # noqa: E501
        :rtype: str
        """
        return self._pk_cluster_password

    @pk_cluster_password.setter
    def pk_cluster_password(self, pk_cluster_password):
        """Sets the pk_cluster_password of this ConfigClusterJoin.

        加密集群用户密码  # noqa: E501

        :param pk_cluster_password: The pk_cluster_password of this ConfigClusterJoin.  # noqa: E501
        :type: str
        """

        self._pk_cluster_password = pk_cluster_password

    @property
    def ha(self):
        """Gets the ha of this ConfigClusterJoin.  # noqa: E501


        :return: The ha of this ConfigClusterJoin.  # noqa: E501
        :rtype: ConfigClusterJoinHa
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this ConfigClusterJoin.


        :param ha: The ha of this ConfigClusterJoin.  # noqa: E501
        :type: ConfigClusterJoinHa
        """
        if ha is None:
            raise ValueError("Invalid value for `ha`, must not be `None`")  # noqa: E501

        self._ha = ha

    @property
    def alternate_ha(self):
        """Gets the alternate_ha of this ConfigClusterJoin.  # noqa: E501


        :return: The alternate_ha of this ConfigClusterJoin.  # noqa: E501
        :rtype: ConfigClusterJoinAlternateHa
        """
        return self._alternate_ha

    @alternate_ha.setter
    def alternate_ha(self, alternate_ha):
        """Sets the alternate_ha of this ConfigClusterJoin.


        :param alternate_ha: The alternate_ha of this ConfigClusterJoin.  # noqa: E501
        :type: ConfigClusterJoinAlternateHa
        """
        if alternate_ha is None:
            raise ValueError("Invalid value for `alternate_ha`, must not be `None`")  # noqa: E501

        self._alternate_ha = alternate_ha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigClusterJoin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigClusterJoin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
