# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_bond_interfaces import ConfigBondInterfaces  # noqa: F401,E501


class ConfigBond(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'interfaces': 'list[ConfigBondInterfaces]',
        'aggregate_policy': 'str',
        'hash_policy': 'str',
        '_8023ad_mode': 'str',
        'mtu': 'int',
        'device_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'interfaces': 'interfaces',
        'aggregate_policy': 'aggregate_policy',
        'hash_policy': 'hash_policy',
        '_8023ad_mode': '8023ad_mode',
        'mtu': 'mtu',
        'device_name': 'device_name'
    }

    def __init__(self, name=None, description=None, interfaces=None, aggregate_policy=None, hash_policy='SRC-DST-IP-MAC', _8023ad_mode='ACTIVE', mtu=None, device_name=None):  # noqa: E501
        """ConfigBond - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._interfaces = None
        self._aggregate_policy = None
        self._hash_policy = None
        self.__8023ad_mode = None
        self._mtu = None
        self._device_name = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if interfaces is not None:
            self.interfaces = interfaces
        if aggregate_policy is not None:
            self.aggregate_policy = aggregate_policy
        if hash_policy is not None:
            self.hash_policy = hash_policy
        if _8023ad_mode is not None:
            self._8023ad_mode = _8023ad_mode
        if mtu is not None:
            self.mtu = mtu
        if device_name is not None:
            self.device_name = device_name

    @property
    def name(self):
        """Gets the name of this ConfigBond.  # noqa: E501

        必选参数；配置名称  # noqa: E501

        :return: The name of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigBond.

        必选参数；配置名称  # noqa: E501

        :param name: The name of this ConfigBond.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigBond.  # noqa: E501

        可选参数；所创建bond口描述标签  # noqa: E501

        :return: The description of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigBond.

        可选参数；所创建bond口描述标签  # noqa: E501

        :param description: The description of this ConfigBond.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def interfaces(self):
        """Gets the interfaces of this ConfigBond.  # noqa: E501

        必选参数；引用口配置  # noqa: E501

        :return: The interfaces of this ConfigBond.  # noqa: E501
        :rtype: list[ConfigBondInterfaces]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this ConfigBond.

        必选参数；引用口配置  # noqa: E501

        :param interfaces: The interfaces of this ConfigBond.  # noqa: E501
        :type: list[ConfigBondInterfaces]
        """

        self._interfaces = interfaces

    @property
    def aggregate_policy(self):
        """Gets the aggregate_policy of this ConfigBond.  # noqa: E501

        可选参数；聚合绑定策略（hash:哈希/round-robin:轮询/8023ad:802.3ad/active-backup:冗余双网卡），默认值hash。  # noqa: E501

        :return: The aggregate_policy of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_policy

    @aggregate_policy.setter
    def aggregate_policy(self, aggregate_policy):
        """Sets the aggregate_policy of this ConfigBond.

        可选参数；聚合绑定策略（hash:哈希/round-robin:轮询/8023ad:802.3ad/active-backup:冗余双网卡），默认值hash。  # noqa: E501

        :param aggregate_policy: The aggregate_policy of this ConfigBond.  # noqa: E501
        :type: str
        """
        allowed_values = ["HASH", "ROUND-ROBIN", "8023AD", "ACTIVE-BACKUP"]  # noqa: E501
        if aggregate_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregate_policy, allowed_values)
            )

        self._aggregate_policy = aggregate_policy

    @property
    def hash_policy(self):
        """Gets the hash_policy of this ConfigBond.  # noqa: E501

        可选参数；聚合策略为hash时，所采用的hash算法（dst-mac: 按目的mac哈希/src-dst-ip:按源ip和目的ip哈希/src-dst-ip-mac:按源ip+目的ip+源mac+目的mac哈希/src-dst-mac:按源mac和目的mac哈希），默认值src-dst-ip-mac  # noqa: E501

        :return: The hash_policy of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self._hash_policy

    @hash_policy.setter
    def hash_policy(self, hash_policy):
        """Sets the hash_policy of this ConfigBond.

        可选参数；聚合策略为hash时，所采用的hash算法（dst-mac: 按目的mac哈希/src-dst-ip:按源ip和目的ip哈希/src-dst-ip-mac:按源ip+目的ip+源mac+目的mac哈希/src-dst-mac:按源mac和目的mac哈希），默认值src-dst-ip-mac  # noqa: E501

        :param hash_policy: The hash_policy of this ConfigBond.  # noqa: E501
        :type: str
        """
        allowed_values = ["SRC-DST-IP-MAC", "SRC-DST-IP", "SRC-DST-MAC", "DST-MAC"]  # noqa: E501
        if hash_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `hash_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(hash_policy, allowed_values)
            )

        self._hash_policy = hash_policy

    @property
    def _8023ad_mode(self):
        """Gets the _8023ad_mode of this ConfigBond.  # noqa: E501

        可选参数；聚合策略为802.3ad时，所采用的模式（active-主动/passive-被动），默认值active  # noqa: E501

        :return: The _8023ad_mode of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self.__8023ad_mode

    @_8023ad_mode.setter
    def _8023ad_mode(self, _8023ad_mode):
        """Sets the _8023ad_mode of this ConfigBond.

        可选参数；聚合策略为802.3ad时，所采用的模式（active-主动/passive-被动），默认值active  # noqa: E501

        :param _8023ad_mode: The _8023ad_mode of this ConfigBond.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "PASSIVE"]  # noqa: E501
        if _8023ad_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `_8023ad_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(_8023ad_mode, allowed_values)
            )

        self.__8023ad_mode = _8023ad_mode

    @property
    def mtu(self):
        """Gets the mtu of this ConfigBond.  # noqa: E501

        可选参数；mtu设置设备名称  # noqa: E501

        :return: The mtu of this ConfigBond.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this ConfigBond.

        可选参数；mtu设置设备名称  # noqa: E501

        :param mtu: The mtu of this ConfigBond.  # noqa: E501
        :type: int
        """
        if mtu is not None and mtu > 1500:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `1500`")  # noqa: E501
        if mtu is not None and mtu < 576:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `576`")  # noqa: E501

        self._mtu = mtu

    @property
    def device_name(self):
        """Gets the device_name of this ConfigBond.  # noqa: E501

        可选字段；bond设备名  # noqa: E501

        :return: The device_name of this ConfigBond.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ConfigBond.

        可选字段；bond设备名  # noqa: E501

        :param device_name: The device_name of this ConfigBond.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigBond, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigBond):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
