# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigBgpNeighbors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'as_number': 'int'
    }

    attribute_map = {
        'ip': 'ip',
        'as_number': 'as_number'
    }

    def __init__(self, ip=None, as_number=None):  # noqa: E501
        """ConfigBgpNeighbors - a model defined in Swagger"""  # noqa: E501

        self._ip = None
        self._as_number = None
        self.discriminator = None

        self.ip = ip
        self.as_number = as_number

    @property
    def ip(self):
        """Gets the ip of this ConfigBgpNeighbors.  # noqa: E501

        邻居ip，必须为IPv4地址格式。  # noqa: E501

        :return: The ip of this ConfigBgpNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ConfigBgpNeighbors.

        邻居ip，必须为IPv4地址格式。  # noqa: E501

        :param ip: The ip of this ConfigBgpNeighbors.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def as_number(self):
        """Gets the as_number of this ConfigBgpNeighbors.  # noqa: E501

        邻居as号，必须为1~4294967295之间的整数。  # noqa: E501

        :return: The as_number of this ConfigBgpNeighbors.  # noqa: E501
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this ConfigBgpNeighbors.

        邻居as号，必须为1~4294967295之间的整数。  # noqa: E501

        :param as_number: The as_number of this ConfigBgpNeighbors.  # noqa: E501
        :type: int
        """
        if as_number is None:
            raise ValueError("Invalid value for `as_number`, must not be `None`")  # noqa: E501
        if as_number is not None and as_number > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `as_number`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if as_number is not None and as_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `as_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._as_number = as_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigBgpNeighbors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigBgpNeighbors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
