# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system': 'str',
        'api': 'str',
        'compatible': 'list[str]',
        'package': 'str',
        'modules': 'list[str]',
        'patch_tags': 'list[str]'
    }

    attribute_map = {
        'system': 'system',
        'api': 'api',
        'compatible': 'compatible',
        'package': 'package',
        'modules': 'modules',
        'patch_tags': 'patch_tags'
    }

    def __init__(self, system=None, api=None, compatible=None, package=None, modules=None, patch_tags=None):  # noqa: E501
        """ConfigVersion - a model defined in Swagger"""  # noqa: E501

        self._system = None
        self._api = None
        self._compatible = None
        self._package = None
        self._modules = None
        self._patch_tags = None
        self.discriminator = None

        if system is not None:
            self.system = system
        if api is not None:
            self.api = api
        if compatible is not None:
            self.compatible = compatible
        if package is not None:
            self.package = package
        if modules is not None:
            self.modules = modules
        if patch_tags is not None:
            self.patch_tags = patch_tags

    @property
    def system(self):
        """Gets the system of this ConfigVersion.  # noqa: E501

        获取当前系统版本  # noqa: E501

        :return: The system of this ConfigVersion.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ConfigVersion.

        获取当前系统版本  # noqa: E501

        :param system: The system of this ConfigVersion.  # noqa: E501
        :type: str
        """

        self._system = system

    @property
    def api(self):
        """Gets the api of this ConfigVersion.  # noqa: E501

        获取当前系统api版本  # noqa: E501

        :return: The api of this ConfigVersion.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this ConfigVersion.

        获取当前系统api版本  # noqa: E501

        :param api: The api of this ConfigVersion.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def compatible(self):
        """Gets the compatible of this ConfigVersion.  # noqa: E501

        当前系统兼容的api版本  # noqa: E501

        :return: The compatible of this ConfigVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._compatible

    @compatible.setter
    def compatible(self, compatible):
        """Sets the compatible of this ConfigVersion.

        当前系统兼容的api版本  # noqa: E501

        :param compatible: The compatible of this ConfigVersion.  # noqa: E501
        :type: list[str]
        """

        self._compatible = compatible

    @property
    def package(self):
        """Gets the package of this ConfigVersion.  # noqa: E501

        系统软件包日期  # noqa: E501

        :return: The package of this ConfigVersion.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this ConfigVersion.

        系统软件包日期  # noqa: E501

        :param package: The package of this ConfigVersion.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def modules(self):
        """Gets the modules of this ConfigVersion.  # noqa: E501

        模块信息  # noqa: E501

        :return: The modules of this ConfigVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this ConfigVersion.

        模块信息  # noqa: E501

        :param modules: The modules of this ConfigVersion.  # noqa: E501
        :type: list[str]
        """

        self._modules = modules

    @property
    def patch_tags(self):
        """Gets the patch_tags of this ConfigVersion.  # noqa: E501

        补丁信息  # noqa: E501

        :return: The patch_tags of this ConfigVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._patch_tags

    @patch_tags.setter
    def patch_tags(self, patch_tags):
        """Sets the patch_tags of this ConfigVersion.

        补丁信息  # noqa: E501

        :param patch_tags: The patch_tags of this ConfigVersion.  # noqa: E501
        :type: list[str]
        """

        self._patch_tags = patch_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
