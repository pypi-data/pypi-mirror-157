# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLocalDnsSettingResolution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ipv6_prefer': 'str',
        'max_query_per_second': 'int',
        'edns_cache_capacity_byte': 'int',
        'root_hints': 'list[str]'
    }

    attribute_map = {
        'ipv6_prefer': 'ipv6_prefer',
        'max_query_per_second': 'max_query_per_second',
        'edns_cache_capacity_byte': 'edns_cache_capacity_byte',
        'root_hints': 'root_hints'
    }

    def __init__(self, ipv6_prefer='DISABLE', max_query_per_second=None, edns_cache_capacity_byte=None, root_hints=None):  # noqa: E501
        """ConfigLocalDnsSettingResolution - a model defined in Swagger"""  # noqa: E501

        self._ipv6_prefer = None
        self._max_query_per_second = None
        self._edns_cache_capacity_byte = None
        self._root_hints = None
        self.discriminator = None

        if ipv6_prefer is not None:
            self.ipv6_prefer = ipv6_prefer
        if max_query_per_second is not None:
            self.max_query_per_second = max_query_per_second
        if edns_cache_capacity_byte is not None:
            self.edns_cache_capacity_byte = edns_cache_capacity_byte
        if root_hints is not None:
            self.root_hints = root_hints

    @property
    def ipv6_prefer(self):
        """Gets the ipv6_prefer of this ConfigLocalDnsSettingResolution.  # noqa: E501

        IPv6优先。LDNS优先采用IPv6作为传输协议  # noqa: E501

        :return: The ipv6_prefer of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_prefer

    @ipv6_prefer.setter
    def ipv6_prefer(self, ipv6_prefer):
        """Sets the ipv6_prefer of this ConfigLocalDnsSettingResolution.

        IPv6优先。LDNS优先采用IPv6作为传输协议  # noqa: E501

        :param ipv6_prefer: The ipv6_prefer of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ipv6_prefer not in allowed_values:
            raise ValueError(
                "Invalid value for `ipv6_prefer` ({0}), must be one of {1}"  # noqa: E501
                .format(ipv6_prefer, allowed_values)
            )

        self._ipv6_prefer = ipv6_prefer

    @property
    def max_query_per_second(self):
        """Gets the max_query_per_second of this ConfigLocalDnsSettingResolution.  # noqa: E501

        最大请求速率（QPS），取值范围[0,1000000]  # noqa: E501

        :return: The max_query_per_second of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :rtype: int
        """
        return self._max_query_per_second

    @max_query_per_second.setter
    def max_query_per_second(self, max_query_per_second):
        """Sets the max_query_per_second of this ConfigLocalDnsSettingResolution.

        最大请求速率（QPS），取值范围[0,1000000]  # noqa: E501

        :param max_query_per_second: The max_query_per_second of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :type: int
        """
        if max_query_per_second is not None and max_query_per_second > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `max_query_per_second`, must be a value less than or equal to `1000000`")  # noqa: E501
        if max_query_per_second is not None and max_query_per_second < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_query_per_second`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_query_per_second = max_query_per_second

    @property
    def edns_cache_capacity_byte(self):
        """Gets the edns_cache_capacity_byte of this ConfigLocalDnsSettingResolution.  # noqa: E501

        EDNS缓冲区大小（单位：字节），取值范围[512,65535]  # noqa: E501

        :return: The edns_cache_capacity_byte of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :rtype: int
        """
        return self._edns_cache_capacity_byte

    @edns_cache_capacity_byte.setter
    def edns_cache_capacity_byte(self, edns_cache_capacity_byte):
        """Sets the edns_cache_capacity_byte of this ConfigLocalDnsSettingResolution.

        EDNS缓冲区大小（单位：字节），取值范围[512,65535]  # noqa: E501

        :param edns_cache_capacity_byte: The edns_cache_capacity_byte of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :type: int
        """
        if edns_cache_capacity_byte is not None and edns_cache_capacity_byte > 65535:  # noqa: E501
            raise ValueError("Invalid value for `edns_cache_capacity_byte`, must be a value less than or equal to `65535`")  # noqa: E501
        if edns_cache_capacity_byte is not None and edns_cache_capacity_byte < 512:  # noqa: E501
            raise ValueError("Invalid value for `edns_cache_capacity_byte`, must be a value greater than or equal to `512`")  # noqa: E501

        self._edns_cache_capacity_byte = edns_cache_capacity_byte

    @property
    def root_hints(self):
        """Gets the root_hints of this ConfigLocalDnsSettingResolution.  # noqa: E501

        根服务器地址。至少配1条，最多配置50条。默认值为 | 198.41.0.4 199.9.14.201 192.33.4.12 199.7.91.13 192.203.230.10 192.5.5.241 192.112.36.4 198.97.190.53 192.36.148.17 192.58.128.30 193.0.14.129 199.7.83.42 202.12.27.33 2001:503:ba3e::2:30 2001:500:200::b 2001:500:2::c 2001:500:2d::d 2001:500:a8::e 2001:500:2f::f 2001:500:12::d0d 2001:500:1::53 2001:7fe::53 2001:503:c27::2:30 2001:7fd::1 2001:500:9f::42 2001:dc3::35  # noqa: E501

        :return: The root_hints of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :rtype: list[str]
        """
        return self._root_hints

    @root_hints.setter
    def root_hints(self, root_hints):
        """Sets the root_hints of this ConfigLocalDnsSettingResolution.

        根服务器地址。至少配1条，最多配置50条。默认值为 | 198.41.0.4 199.9.14.201 192.33.4.12 199.7.91.13 192.203.230.10 192.5.5.241 192.112.36.4 198.97.190.53 192.36.148.17 192.58.128.30 193.0.14.129 199.7.83.42 202.12.27.33 2001:503:ba3e::2:30 2001:500:200::b 2001:500:2::c 2001:500:2d::d 2001:500:a8::e 2001:500:2f::f 2001:500:12::d0d 2001:500:1::53 2001:7fe::53 2001:503:c27::2:30 2001:7fd::1 2001:500:9f::42 2001:dc3::35  # noqa: E501

        :param root_hints: The root_hints of this ConfigLocalDnsSettingResolution.  # noqa: E501
        :type: list[str]
        """

        self._root_hints = root_hints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalDnsSettingResolution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalDnsSettingResolution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
