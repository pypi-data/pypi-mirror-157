# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_defence_http_flood_defence_url_rules import ConfigHttpDefenceHttpFloodDefenceUrlRules  # noqa: F401,E501
from adapi_sdk.models.config_http_defence_http_flood_defence_vs_common_rule import ConfigHttpDefenceHttpFloodDefenceVsCommonRule  # noqa: F401,E501


class ConfigHttpDefenceHttpFloodDefence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'policy': 'str',
        'vs_common_rule': 'ConfigHttpDefenceHttpFloodDefenceVsCommonRule',
        'url_rules': 'list[ConfigHttpDefenceHttpFloodDefenceUrlRules]'
    }

    attribute_map = {
        'state': 'state',
        'policy': 'policy',
        'vs_common_rule': 'vs_common_rule',
        'url_rules': 'url_rules'
    }

    def __init__(self, state='ENABLE', policy='HEADER-INSERT', vs_common_rule=None, url_rules=None):  # noqa: E501
        """ConfigHttpDefenceHttpFloodDefence - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._policy = None
        self._vs_common_rule = None
        self._url_rules = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if policy is not None:
            self.policy = policy
        if vs_common_rule is not None:
            self.vs_common_rule = vs_common_rule
        if url_rules is not None:
            self.url_rules = url_rules

    @property
    def state(self):
        """Gets the state of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501

        可选参数；泛洪攻击的配置开关，enable表示启用，disable表示禁用；默认为enable。  # noqa: E501

        :return: The state of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigHttpDefenceHttpFloodDefence.

        可选参数；泛洪攻击的配置开关，enable表示启用，disable表示禁用；默认为enable。  # noqa: E501

        :param state: The state of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def policy(self):
        """Gets the policy of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501

        可选参数；攻击防护策略，header-insert表示插入HTTP头部，js-inject表示注入JS脚本，默认为header-inert。  # noqa: E501

        :return: The policy of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigHttpDefenceHttpFloodDefence.

        可选参数；攻击防护策略，header-insert表示插入HTTP头部，js-inject表示注入JS脚本，默认为header-inert。  # noqa: E501

        :param policy: The policy of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEADER-INSERT", "JS-INJECT"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def vs_common_rule(self):
        """Gets the vs_common_rule of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501


        :return: The vs_common_rule of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :rtype: ConfigHttpDefenceHttpFloodDefenceVsCommonRule
        """
        return self._vs_common_rule

    @vs_common_rule.setter
    def vs_common_rule(self, vs_common_rule):
        """Sets the vs_common_rule of this ConfigHttpDefenceHttpFloodDefence.


        :param vs_common_rule: The vs_common_rule of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :type: ConfigHttpDefenceHttpFloodDefenceVsCommonRule
        """

        self._vs_common_rule = vs_common_rule

    @property
    def url_rules(self):
        """Gets the url_rules of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501

        URL匹配条件列表  # noqa: E501

        :return: The url_rules of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :rtype: list[ConfigHttpDefenceHttpFloodDefenceUrlRules]
        """
        return self._url_rules

    @url_rules.setter
    def url_rules(self, url_rules):
        """Sets the url_rules of this ConfigHttpDefenceHttpFloodDefence.

        URL匹配条件列表  # noqa: E501

        :param url_rules: The url_rules of this ConfigHttpDefenceHttpFloodDefence.  # noqa: E501
        :type: list[ConfigHttpDefenceHttpFloodDefenceUrlRules]
        """

        self._url_rules = url_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpDefenceHttpFloodDefence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpDefenceHttpFloodDefence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
