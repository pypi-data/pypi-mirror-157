# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigRip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'redistribute_default_route': 'str',
        'redistribute_static_route': 'str',
        'redistribute_ospf': 'str',
        'networks': 'list[str]'
    }

    attribute_map = {
        'state': 'state',
        'redistribute_default_route': 'redistribute_default_route',
        'redistribute_static_route': 'redistribute_static_route',
        'redistribute_ospf': 'redistribute_ospf',
        'networks': 'networks'
    }

    def __init__(self, state='ENABLE', redistribute_default_route='DISABLE', redistribute_static_route='DISABLE', redistribute_ospf='DISABLE', networks=None):  # noqa: E501
        """ConfigRip - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._redistribute_default_route = None
        self._redistribute_static_route = None
        self._redistribute_ospf = None
        self._networks = None
        self.discriminator = None

        self.state = state
        if redistribute_default_route is not None:
            self.redistribute_default_route = redistribute_default_route
        if redistribute_static_route is not None:
            self.redistribute_static_route = redistribute_static_route
        if redistribute_ospf is not None:
            self.redistribute_ospf = redistribute_ospf
        if networks is not None:
            self.networks = networks

    @property
    def state(self):
        """Gets the state of this ConfigRip.  # noqa: E501

        rip全局配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The state of this ConfigRip.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigRip.

        rip全局配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param state: The state of this ConfigRip.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def redistribute_default_route(self):
        """Gets the redistribute_default_route of this ConfigRip.  # noqa: E501

        默认路由强制重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_default_route of this ConfigRip.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_default_route

    @redistribute_default_route.setter
    def redistribute_default_route(self, redistribute_default_route):
        """Sets the redistribute_default_route of this ConfigRip.

        默认路由强制重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_default_route: The redistribute_default_route of this ConfigRip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_default_route not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_default_route` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_default_route, allowed_values)
            )

        self._redistribute_default_route = redistribute_default_route

    @property
    def redistribute_static_route(self):
        """Gets the redistribute_static_route of this ConfigRip.  # noqa: E501

        静态路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_static_route of this ConfigRip.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_static_route

    @redistribute_static_route.setter
    def redistribute_static_route(self, redistribute_static_route):
        """Sets the redistribute_static_route of this ConfigRip.

        静态路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_static_route: The redistribute_static_route of this ConfigRip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_static_route not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_static_route` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_static_route, allowed_values)
            )

        self._redistribute_static_route = redistribute_static_route

    @property
    def redistribute_ospf(self):
        """Gets the redistribute_ospf of this ConfigRip.  # noqa: E501

        OSPF路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_ospf of this ConfigRip.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_ospf

    @redistribute_ospf.setter
    def redistribute_ospf(self, redistribute_ospf):
        """Sets the redistribute_ospf of this ConfigRip.

        OSPF路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_ospf: The redistribute_ospf of this ConfigRip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_ospf not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_ospf` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_ospf, allowed_values)
            )

        self._redistribute_ospf = redistribute_ospf

    @property
    def networks(self):
        """Gets the networks of this ConfigRip.  # noqa: E501

        发布网段元素列表，必须为 IPv4地址/掩码 格式。  # noqa: E501

        :return: The networks of this ConfigRip.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ConfigRip.

        发布网段元素列表，必须为 IPv4地址/掩码 格式。  # noqa: E501

        :param networks: The networks of this ConfigRip.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigRip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigRip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
