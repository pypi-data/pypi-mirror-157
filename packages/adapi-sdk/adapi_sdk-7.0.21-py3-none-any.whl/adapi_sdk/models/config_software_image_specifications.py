# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigSoftwareImageSpecifications(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'size_mb': 'int',
        'standard': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'size_mb': 'size_mb',
        'standard': 'standard'
    }

    def __init__(self, title=None, description=None, size_mb=None, standard=None):  # noqa: E501
        """ConfigSoftwareImageSpecifications - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._description = None
        self._size_mb = None
        self._standard = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if size_mb is not None:
            self.size_mb = size_mb
        if standard is not None:
            self.standard = standard

    @property
    def title(self):
        """Gets the title of this ConfigSoftwareImageSpecifications.  # noqa: E501

        规格名称  # noqa: E501

        :return: The title of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConfigSoftwareImageSpecifications.

        规格名称  # noqa: E501

        :param title: The title of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ConfigSoftwareImageSpecifications.  # noqa: E501

        规格描述信息  # noqa: E501

        :return: The description of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSoftwareImageSpecifications.

        规格描述信息  # noqa: E501

        :param description: The description of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def size_mb(self):
        """Gets the size_mb of this ConfigSoftwareImageSpecifications.  # noqa: E501

        空间要求（单位MB）  # noqa: E501

        :return: The size_mb of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :rtype: int
        """
        return self._size_mb

    @size_mb.setter
    def size_mb(self, size_mb):
        """Sets the size_mb of this ConfigSoftwareImageSpecifications.

        空间要求（单位MB）  # noqa: E501

        :param size_mb: The size_mb of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :type: int
        """

        self._size_mb = size_mb

    @property
    def standard(self):
        """Gets the standard of this ConfigSoftwareImageSpecifications.  # noqa: E501

        默认规格（推荐选项）  # noqa: E501

        :return: The standard of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this ConfigSoftwareImageSpecifications.

        默认规格（推荐选项）  # noqa: E501

        :param standard: The standard of this ConfigSoftwareImageSpecifications.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if standard not in allowed_values:
            raise ValueError(
                "Invalid value for `standard` ({0}), must be one of {1}"  # noqa: E501
                .format(standard, allowed_values)
            )

        self._standard = standard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSoftwareImageSpecifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSoftwareImageSpecifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
