# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigAlertEventCpuUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'threshold_percent': 'int',
        'persist': 'int'
    }

    attribute_map = {
        'state': 'state',
        'threshold_percent': 'threshold_percent',
        'persist': 'persist'
    }

    def __init__(self, state='DISABLE', threshold_percent=None, persist=None):  # noqa: E501
        """ConfigAlertEventCpuUsage - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._threshold_percent = None
        self._persist = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if threshold_percent is not None:
            self.threshold_percent = threshold_percent
        if persist is not None:
            self.persist = persist

    @property
    def state(self):
        """Gets the state of this ConfigAlertEventCpuUsage.  # noqa: E501

        CPU负荷告警启/禁用状态  # noqa: E501

        :return: The state of this ConfigAlertEventCpuUsage.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigAlertEventCpuUsage.

        CPU负荷告警启/禁用状态  # noqa: E501

        :param state: The state of this ConfigAlertEventCpuUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def threshold_percent(self):
        """Gets the threshold_percent of this ConfigAlertEventCpuUsage.  # noqa: E501

        CPU负荷阈值  # noqa: E501

        :return: The threshold_percent of this ConfigAlertEventCpuUsage.  # noqa: E501
        :rtype: int
        """
        return self._threshold_percent

    @threshold_percent.setter
    def threshold_percent(self, threshold_percent):
        """Sets the threshold_percent of this ConfigAlertEventCpuUsage.

        CPU负荷阈值  # noqa: E501

        :param threshold_percent: The threshold_percent of this ConfigAlertEventCpuUsage.  # noqa: E501
        :type: int
        """
        if threshold_percent is not None and threshold_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `threshold_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if threshold_percent is not None and threshold_percent < 1:  # noqa: E501
            raise ValueError("Invalid value for `threshold_percent`, must be a value greater than or equal to `1`")  # noqa: E501

        self._threshold_percent = threshold_percent

    @property
    def persist(self):
        """Gets the persist of this ConfigAlertEventCpuUsage.  # noqa: E501

        持续时间  # noqa: E501

        :return: The persist of this ConfigAlertEventCpuUsage.  # noqa: E501
        :rtype: int
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this ConfigAlertEventCpuUsage.

        持续时间  # noqa: E501

        :param persist: The persist of this ConfigAlertEventCpuUsage.  # noqa: E501
        :type: int
        """
        if persist is not None and persist > 300:  # noqa: E501
            raise ValueError("Invalid value for `persist`, must be a value less than or equal to `300`")  # noqa: E501
        if persist is not None and persist < 1:  # noqa: E501
            raise ValueError("Invalid value for `persist`, must be a value greater than or equal to `1`")  # noqa: E501

        self._persist = persist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigAlertEventCpuUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigAlertEventCpuUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
