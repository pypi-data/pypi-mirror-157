# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHttpDefenceSlowAttackDefence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'connection_timeout': 'int',
        'request_timeout': 'int',
        'minimum_receive_rate_byte': 'int'
    }

    attribute_map = {
        'state': 'state',
        'connection_timeout': 'connection_timeout',
        'request_timeout': 'request_timeout',
        'minimum_receive_rate_byte': 'minimum_receive_rate_byte'
    }

    def __init__(self, state='ENABLE', connection_timeout=None, request_timeout=None, minimum_receive_rate_byte=None):  # noqa: E501
        """ConfigHttpDefenceSlowAttackDefence - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._connection_timeout = None
        self._request_timeout = None
        self._minimum_receive_rate_byte = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout
        if request_timeout is not None:
            self.request_timeout = request_timeout
        if minimum_receive_rate_byte is not None:
            self.minimum_receive_rate_byte = minimum_receive_rate_byte

    @property
    def state(self):
        """Gets the state of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501

        可选参数；慢速攻击的配置开关，enable表示启用，disable表示禁用；默认为enable。  # noqa: E501

        :return: The state of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigHttpDefenceSlowAttackDefence.

        可选参数；慢速攻击的配置开关，enable表示启用，disable表示禁用；默认为enable。  # noqa: E501

        :param state: The state of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501

        可选参数；设置连接超时时间，取值范围为[1,65535]，默认为1800，单位s。  # noqa: E501

        :return: The connection_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this ConfigHttpDefenceSlowAttackDefence.

        可选参数；设置连接超时时间，取值范围为[1,65535]，默认为1800，单位s。  # noqa: E501

        :param connection_timeout: The connection_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :type: int
        """
        if connection_timeout is not None and connection_timeout > 65535:  # noqa: E501
            raise ValueError("Invalid value for `connection_timeout`, must be a value less than or equal to `65535`")  # noqa: E501
        if connection_timeout is not None and connection_timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `connection_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._connection_timeout = connection_timeout

    @property
    def request_timeout(self):
        """Gets the request_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501

        可选参数；设置请求超时时间，取值范围为[1,65535]，默认为300，单位s。  # noqa: E501

        :return: The request_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :rtype: int
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """Sets the request_timeout of this ConfigHttpDefenceSlowAttackDefence.

        可选参数；设置请求超时时间，取值范围为[1,65535]，默认为300，单位s。  # noqa: E501

        :param request_timeout: The request_timeout of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :type: int
        """
        if request_timeout is not None and request_timeout > 65535:  # noqa: E501
            raise ValueError("Invalid value for `request_timeout`, must be a value less than or equal to `65535`")  # noqa: E501
        if request_timeout is not None and request_timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `request_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._request_timeout = request_timeout

    @property
    def minimum_receive_rate_byte(self):
        """Gets the minimum_receive_rate_byte of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501

        可选参数；设置最小传输速率时，取值范围为[1,65535]，默认为100，单位byte/s。  # noqa: E501

        :return: The minimum_receive_rate_byte of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :rtype: int
        """
        return self._minimum_receive_rate_byte

    @minimum_receive_rate_byte.setter
    def minimum_receive_rate_byte(self, minimum_receive_rate_byte):
        """Sets the minimum_receive_rate_byte of this ConfigHttpDefenceSlowAttackDefence.

        可选参数；设置最小传输速率时，取值范围为[1,65535]，默认为100，单位byte/s。  # noqa: E501

        :param minimum_receive_rate_byte: The minimum_receive_rate_byte of this ConfigHttpDefenceSlowAttackDefence.  # noqa: E501
        :type: int
        """
        if minimum_receive_rate_byte is not None and minimum_receive_rate_byte > 65535:  # noqa: E501
            raise ValueError("Invalid value for `minimum_receive_rate_byte`, must be a value less than or equal to `65535`")  # noqa: E501
        if minimum_receive_rate_byte is not None and minimum_receive_rate_byte < 1:  # noqa: E501
            raise ValueError("Invalid value for `minimum_receive_rate_byte`, must be a value greater than or equal to `1`")  # noqa: E501

        self._minimum_receive_rate_byte = minimum_receive_rate_byte

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpDefenceSlowAttackDefence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpDefenceSlowAttackDefence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
