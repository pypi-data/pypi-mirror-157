# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.debug_policy_route_simulator_simulate_trace import DebugPolicyRouteSimulatorSimulateTrace  # noqa: F401,E501


class DebugPolicyRouteSimulator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_address': 'str',
        'source_port': 'int',
        'destination_address': 'str',
        'destination_port': 'int',
        'inbound_link': 'str',
        'protocol': 'str',
        'protocol_number': 'int',
        'tos': 'int',
        'simulate_trace': 'list[DebugPolicyRouteSimulatorSimulateTrace]'
    }

    attribute_map = {
        'source_address': 'source_address',
        'source_port': 'source_port',
        'destination_address': 'destination_address',
        'destination_port': 'destination_port',
        'inbound_link': 'inbound_link',
        'protocol': 'protocol',
        'protocol_number': 'protocol_number',
        'tos': 'tos',
        'simulate_trace': 'simulate_trace'
    }

    def __init__(self, source_address=None, source_port=None, destination_address=None, destination_port=None, inbound_link=None, protocol='TCP', protocol_number=None, tos=None, simulate_trace=None):  # noqa: E501
        """DebugPolicyRouteSimulator - a model defined in Swagger"""  # noqa: E501

        self._source_address = None
        self._source_port = None
        self._destination_address = None
        self._destination_port = None
        self._inbound_link = None
        self._protocol = None
        self._protocol_number = None
        self._tos = None
        self._simulate_trace = None
        self.discriminator = None

        self.source_address = source_address
        if source_port is not None:
            self.source_port = source_port
        self.destination_address = destination_address
        if destination_port is not None:
            self.destination_port = destination_port
        if inbound_link is not None:
            self.inbound_link = inbound_link
        if protocol is not None:
            self.protocol = protocol
        if protocol_number is not None:
            self.protocol_number = protocol_number
        if tos is not None:
            self.tos = tos
        if simulate_trace is not None:
            self.simulate_trace = simulate_trace

    @property
    def source_address(self):
        """Gets the source_address of this DebugPolicyRouteSimulator.  # noqa: E501

        源ip地址，格式是ip地址格式  # noqa: E501

        :return: The source_address of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this DebugPolicyRouteSimulator.

        源ip地址，格式是ip地址格式  # noqa: E501

        :param source_address: The source_address of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: str
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def source_port(self):
        """Gets the source_port of this DebugPolicyRouteSimulator.  # noqa: E501

        源端口  # noqa: E501

        :return: The source_port of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: int
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this DebugPolicyRouteSimulator.

        源端口  # noqa: E501

        :param source_port: The source_port of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: int
        """
        if source_port is not None and source_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `source_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if source_port is not None and source_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `source_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._source_port = source_port

    @property
    def destination_address(self):
        """Gets the destination_address of this DebugPolicyRouteSimulator.  # noqa: E501

        源ip地址，格式是ip地址格式  # noqa: E501

        :return: The destination_address of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this DebugPolicyRouteSimulator.

        源ip地址，格式是ip地址格式  # noqa: E501

        :param destination_address: The destination_address of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: str
        """
        if destination_address is None:
            raise ValueError("Invalid value for `destination_address`, must not be `None`")  # noqa: E501

        self._destination_address = destination_address

    @property
    def destination_port(self):
        """Gets the destination_port of this DebugPolicyRouteSimulator.  # noqa: E501

        目的端口  # noqa: E501

        :return: The destination_port of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this DebugPolicyRouteSimulator.

        目的端口  # noqa: E501

        :param destination_port: The destination_port of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: int
        """
        if destination_port is not None and destination_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `destination_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if destination_port is not None and destination_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `destination_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._destination_port = destination_port

    @property
    def inbound_link(self):
        """Gets the inbound_link of this DebugPolicyRouteSimulator.  # noqa: E501

        入接口，格式为LOCAL-SYSTEM或者链路的名字  # noqa: E501

        :return: The inbound_link of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: str
        """
        return self._inbound_link

    @inbound_link.setter
    def inbound_link(self, inbound_link):
        """Sets the inbound_link of this DebugPolicyRouteSimulator.

        入接口，格式为LOCAL-SYSTEM或者链路的名字  # noqa: E501

        :param inbound_link: The inbound_link of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: str
        """

        self._inbound_link = inbound_link

    @property
    def protocol(self):
        """Gets the protocol of this DebugPolicyRouteSimulator.  # noqa: E501

        协议类型  # noqa: E501

        :return: The protocol of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DebugPolicyRouteSimulator.

        协议类型  # noqa: E501

        :param protocol: The protocol of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: str
        """
        allowed_values = ["TCP", "UDP", "ICMP", "OTHER"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def protocol_number(self):
        """Gets the protocol_number of this DebugPolicyRouteSimulator.  # noqa: E501

        协议号  # noqa: E501

        :return: The protocol_number of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: int
        """
        return self._protocol_number

    @protocol_number.setter
    def protocol_number(self, protocol_number):
        """Sets the protocol_number of this DebugPolicyRouteSimulator.

        协议号  # noqa: E501

        :param protocol_number: The protocol_number of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: int
        """

        self._protocol_number = protocol_number

    @property
    def tos(self):
        """Gets the tos of this DebugPolicyRouteSimulator.  # noqa: E501

        流量传输标识,tos值，必须为0~255之间的整数  # noqa: E501

        :return: The tos of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: int
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this DebugPolicyRouteSimulator.

        流量传输标识,tos值，必须为0~255之间的整数  # noqa: E501

        :param tos: The tos of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: int
        """
        if tos is not None and tos > 255:  # noqa: E501
            raise ValueError("Invalid value for `tos`, must be a value less than or equal to `255`")  # noqa: E501
        if tos is not None and tos < 0:  # noqa: E501
            raise ValueError("Invalid value for `tos`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tos = tos

    @property
    def simulate_trace(self):
        """Gets the simulate_trace of this DebugPolicyRouteSimulator.  # noqa: E501

        模拟跟踪结果  # noqa: E501

        :return: The simulate_trace of this DebugPolicyRouteSimulator.  # noqa: E501
        :rtype: list[DebugPolicyRouteSimulatorSimulateTrace]
        """
        return self._simulate_trace

    @simulate_trace.setter
    def simulate_trace(self, simulate_trace):
        """Sets the simulate_trace of this DebugPolicyRouteSimulator.

        模拟跟踪结果  # noqa: E501

        :param simulate_trace: The simulate_trace of this DebugPolicyRouteSimulator.  # noqa: E501
        :type: list[DebugPolicyRouteSimulatorSimulateTrace]
        """

        self._simulate_trace = simulate_trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugPolicyRouteSimulator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugPolicyRouteSimulator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
