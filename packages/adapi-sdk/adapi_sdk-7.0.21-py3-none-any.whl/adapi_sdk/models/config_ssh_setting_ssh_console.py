# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigSshSettingSshConsole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_timeout': 'int',
        'ssh_port': 'int',
        'ssh_status': 'str'
    }

    attribute_map = {
        'session_timeout': 'session_timeout',
        'ssh_port': 'ssh_port',
        'ssh_status': 'ssh_status'
    }

    def __init__(self, session_timeout=None, ssh_port=None, ssh_status='DISABLE'):  # noqa: E501
        """ConfigSshSettingSshConsole - a model defined in Swagger"""  # noqa: E501

        self._session_timeout = None
        self._ssh_port = None
        self._ssh_status = None
        self.discriminator = None

        if session_timeout is not None:
            self.session_timeout = session_timeout
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if ssh_status is not None:
            self.ssh_status = ssh_status

    @property
    def session_timeout(self):
        """Gets the session_timeout of this ConfigSshSettingSshConsole.  # noqa: E501

        ssh会话超时时间  # noqa: E501

        :return: The session_timeout of this ConfigSshSettingSshConsole.  # noqa: E501
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this ConfigSshSettingSshConsole.

        ssh会话超时时间  # noqa: E501

        :param session_timeout: The session_timeout of this ConfigSshSettingSshConsole.  # noqa: E501
        :type: int
        """
        if session_timeout is not None and session_timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `session_timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if session_timeout is not None and session_timeout < 60:  # noqa: E501
            raise ValueError("Invalid value for `session_timeout`, must be a value greater than or equal to `60`")  # noqa: E501

        self._session_timeout = session_timeout

    @property
    def ssh_port(self):
        """Gets the ssh_port of this ConfigSshSettingSshConsole.  # noqa: E501

        ssh会话端口  # noqa: E501

        :return: The ssh_port of this ConfigSshSettingSshConsole.  # noqa: E501
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this ConfigSshSettingSshConsole.

        ssh会话端口  # noqa: E501

        :param ssh_port: The ssh_port of this ConfigSshSettingSshConsole.  # noqa: E501
        :type: int
        """
        if ssh_port is not None and ssh_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `ssh_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if ssh_port is not None and ssh_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `ssh_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ssh_port = ssh_port

    @property
    def ssh_status(self):
        """Gets the ssh_status of this ConfigSshSettingSshConsole.  # noqa: E501

        ssh启/禁用  # noqa: E501

        :return: The ssh_status of this ConfigSshSettingSshConsole.  # noqa: E501
        :rtype: str
        """
        return self._ssh_status

    @ssh_status.setter
    def ssh_status(self, ssh_status):
        """Sets the ssh_status of this ConfigSshSettingSshConsole.

        ssh启/禁用  # noqa: E501

        :param ssh_status: The ssh_status of this ConfigSshSettingSshConsole.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ssh_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ssh_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ssh_status, allowed_values)
            )

        self._ssh_status = ssh_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSshSettingSshConsole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSshSettingSshConsole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
