# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNoticeLicenceBasicSnInspection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'type': 'str',
        'client': 'str',
        'trial_available': 'str',
        'base_countdown_day': 'str',
        'illegal_reason': 'str',
        'disable_reason': 'str',
        'illegal_authorized_countdown_day': 'str',
        'update_expire': 'str'
    }

    attribute_map = {
        'result': 'result',
        'type': 'type',
        'client': 'client',
        'trial_available': 'trial_available',
        'base_countdown_day': 'base_countdown_day',
        'illegal_reason': 'illegal_reason',
        'disable_reason': 'disable_reason',
        'illegal_authorized_countdown_day': 'illegal_authorized_countdown_day',
        'update_expire': 'update_expire'
    }

    def __init__(self, result=None, type=None, client=None, trial_available=None, base_countdown_day=None, illegal_reason=None, disable_reason=None, illegal_authorized_countdown_day=None, update_expire=None):  # noqa: E501
        """ConfigNoticeLicenceBasicSnInspection - a model defined in Swagger"""  # noqa: E501

        self._result = None
        self._type = None
        self._client = None
        self._trial_available = None
        self._base_countdown_day = None
        self._illegal_reason = None
        self._disable_reason = None
        self._illegal_authorized_countdown_day = None
        self._update_expire = None
        self.discriminator = None

        if result is not None:
            self.result = result
        if type is not None:
            self.type = type
        if client is not None:
            self.client = client
        if trial_available is not None:
            self.trial_available = trial_available
        if base_countdown_day is not None:
            self.base_countdown_day = base_countdown_day
        if illegal_reason is not None:
            self.illegal_reason = illegal_reason
        if disable_reason is not None:
            self.disable_reason = disable_reason
        if illegal_authorized_countdown_day is not None:
            self.illegal_authorized_countdown_day = illegal_authorized_countdown_day
        if update_expire is not None:
            self.update_expire = update_expire

    @property
    def result(self):
        """Gets the result of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权状态，ACTIVE为已授权，INACTIVE为未授权，EXPIRE-REC为授权成功后15天，EXPIRE-SOON为非试用授权且授权剩余时间少于60天， EXPIRE-TRIAL为试用授权且授权剩余时间少于60天  # noqa: E501

        :return: The result of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ConfigNoticeLicenceBasicSnInspection.

        授权状态，ACTIVE为已授权，INACTIVE为未授权，EXPIRE-REC为授权成功后15天，EXPIRE-SOON为非试用授权且授权剩余时间少于60天， EXPIRE-TRIAL为试用授权且授权剩余时间少于60天  # noqa: E501

        :param result: The result of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "EXPIRE-REC", "EXPIRE-SOON", "EXPIRE-TRIAL"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def type(self):
        """Gets the type of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权类型，虚拟机有VLS、TRAIL、ONLINE，物理机有SN、MAD的授权方式  # noqa: E501

        :return: The type of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigNoticeLicenceBasicSnInspection.

        授权类型，虚拟机有VLS、TRAIL、ONLINE，物理机有SN、MAD的授权方式  # noqa: E501

        :param type: The type of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["VLS", "TRAIL", "ONLINE", "SN", "MAD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def client(self):
        """Gets the client of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权用户信息  # noqa: E501

        :return: The client of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ConfigNoticeLicenceBasicSnInspection.

        授权用户信息  # noqa: E501

        :param client: The client of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def trial_available(self):
        """Gets the trial_available of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        是否可以试用，刚部署时可以试用，若曾经授权过则不能再试用  # noqa: E501

        :return: The trial_available of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._trial_available

    @trial_available.setter
    def trial_available(self, trial_available):
        """Sets the trial_available of this ConfigNoticeLicenceBasicSnInspection.

        是否可以试用，刚部署时可以试用，若曾经授权过则不能再试用  # noqa: E501

        :param trial_available: The trial_available of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if trial_available not in allowed_values:
            raise ValueError(
                "Invalid value for `trial_available` ({0}), must be one of {1}"  # noqa: E501
                .format(trial_available, allowed_values)
            )

        self._trial_available = trial_available

    @property
    def base_countdown_day(self):
        """Gets the base_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权剩余天数，为“.”时为永久授权  # noqa: E501

        :return: The base_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._base_countdown_day

    @base_countdown_day.setter
    def base_countdown_day(self, base_countdown_day):
        """Sets the base_countdown_day of this ConfigNoticeLicenceBasicSnInspection.

        授权剩余天数，为“.”时为永久授权  # noqa: E501

        :param base_countdown_day: The base_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """

        self._base_countdown_day = base_countdown_day

    @property
    def illegal_reason(self):
        """Gets the illegal_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权不可用原因NO_ERROR为设备授权错误，NETWORK_ERROR无法连接网络，RESOURCE_ERR系统配置超限，TIME_EXPIRED授权过期，ADMIN_DISABLE系统被服务器拒绝授权，SN_VOID授权已失效，VLS_OUT_OF_HEARTBEAT未能持续获取授权，VLS_NETWORK_ERROR未能持续获取授权  # noqa: E501

        :return: The illegal_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._illegal_reason

    @illegal_reason.setter
    def illegal_reason(self, illegal_reason):
        """Sets the illegal_reason of this ConfigNoticeLicenceBasicSnInspection.

        授权不可用原因NO_ERROR为设备授权错误，NETWORK_ERROR无法连接网络，RESOURCE_ERR系统配置超限，TIME_EXPIRED授权过期，ADMIN_DISABLE系统被服务器拒绝授权，SN_VOID授权已失效，VLS_OUT_OF_HEARTBEAT未能持续获取授权，VLS_NETWORK_ERROR未能持续获取授权  # noqa: E501

        :param illegal_reason: The illegal_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_ERROR", "NETWORK_ERROR", "RESOURCE_ERR", "TIME_EXPIRED", "ADMIN_DISABLE", "SN_VOID", "VLS_OUT_OF_HEARTBEAT", "VLS_NETWORK_ERROR", ""]  # noqa: E501
        if illegal_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `illegal_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(illegal_reason, allowed_values)
            )

        self._illegal_reason = illegal_reason

    @property
    def disable_reason(self):
        """Gets the disable_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        获取设备被禁用的原因  # noqa: E501

        :return: The disable_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._disable_reason

    @disable_reason.setter
    def disable_reason(self, disable_reason):
        """Sets the disable_reason of this ConfigNoticeLicenceBasicSnInspection.

        获取设备被禁用的原因  # noqa: E501

        :param disable_reason: The disable_reason of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["ILLEGAL__REASON__NO_ERROR", "ILLEGAL__REASON__NETWORK_ERROR", "ILLEGAL__REASON__DEV_RESOURCE_ERR", "ILLEGAL__REASON__TIME_EXPIRED", "ILLEGAL__REASON__ADMIN_DISABLE"]  # noqa: E501
        if disable_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `disable_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(disable_reason, allowed_values)
            )

        self._disable_reason = disable_reason

    @property
    def illegal_authorized_countdown_day(self):
        """Gets the illegal_authorized_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        由于授权非法，距离业务中断的时间  # noqa: E501

        :return: The illegal_authorized_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._illegal_authorized_countdown_day

    @illegal_authorized_countdown_day.setter
    def illegal_authorized_countdown_day(self, illegal_authorized_countdown_day):
        """Sets the illegal_authorized_countdown_day of this ConfigNoticeLicenceBasicSnInspection.

        由于授权非法，距离业务中断的时间  # noqa: E501

        :param illegal_authorized_countdown_day: The illegal_authorized_countdown_day of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """

        self._illegal_authorized_countdown_day = illegal_authorized_countdown_day

    @property
    def update_expire(self):
        """Gets the update_expire of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501

        授权过期时间  # noqa: E501

        :return: The update_expire of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :rtype: str
        """
        return self._update_expire

    @update_expire.setter
    def update_expire(self, update_expire):
        """Sets the update_expire of this ConfigNoticeLicenceBasicSnInspection.

        授权过期时间  # noqa: E501

        :param update_expire: The update_expire of this ConfigNoticeLicenceBasicSnInspection.  # noqa: E501
        :type: str
        """

        self._update_expire = update_expire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNoticeLicenceBasicSnInspection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNoticeLicenceBasicSnInspection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
