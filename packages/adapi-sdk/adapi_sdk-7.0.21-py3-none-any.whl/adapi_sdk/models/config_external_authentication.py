# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_external_authentication_ldap import ConfigExternalAuthenticationLdap  # noqa: F401,E501
from adapi_sdk.models.config_external_authentication_radius import ConfigExternalAuthenticationRadius  # noqa: F401,E501
from adapi_sdk.models.config_external_authentication_tacacs import ConfigExternalAuthenticationTacacs  # noqa: F401,E501


class ConfigExternalAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'method': 'str',
        'radius': 'ConfigExternalAuthenticationRadius',
        'ldap': 'ConfigExternalAuthenticationLdap',
        'tacacs': 'ConfigExternalAuthenticationTacacs'
    }

    attribute_map = {
        'state': 'state',
        'method': 'method',
        'radius': 'radius',
        'ldap': 'ldap',
        'tacacs': 'tacacs'
    }

    def __init__(self, state='DISABLE', method=None, radius=None, ldap=None, tacacs=None):  # noqa: E501
        """ConfigExternalAuthentication - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._method = None
        self._radius = None
        self._ldap = None
        self._tacacs = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if method is not None:
            self.method = method
        if radius is not None:
            self.radius = radius
        if ldap is not None:
            self.ldap = ldap
        if tacacs is not None:
            self.tacacs = tacacs

    @property
    def state(self):
        """Gets the state of this ConfigExternalAuthentication.  # noqa: E501

        启禁用  # noqa: E501

        :return: The state of this ConfigExternalAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigExternalAuthentication.

        启禁用  # noqa: E501

        :param state: The state of this ConfigExternalAuthentication.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def method(self):
        """Gets the method of this ConfigExternalAuthentication.  # noqa: E501

        类型  # noqa: E501

        :return: The method of this ConfigExternalAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigExternalAuthentication.

        类型  # noqa: E501

        :param method: The method of this ConfigExternalAuthentication.  # noqa: E501
        :type: str
        """
        allowed_values = ["RADIUS", "LDAP", "TACACS"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def radius(self):
        """Gets the radius of this ConfigExternalAuthentication.  # noqa: E501


        :return: The radius of this ConfigExternalAuthentication.  # noqa: E501
        :rtype: ConfigExternalAuthenticationRadius
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this ConfigExternalAuthentication.


        :param radius: The radius of this ConfigExternalAuthentication.  # noqa: E501
        :type: ConfigExternalAuthenticationRadius
        """

        self._radius = radius

    @property
    def ldap(self):
        """Gets the ldap of this ConfigExternalAuthentication.  # noqa: E501


        :return: The ldap of this ConfigExternalAuthentication.  # noqa: E501
        :rtype: ConfigExternalAuthenticationLdap
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this ConfigExternalAuthentication.


        :param ldap: The ldap of this ConfigExternalAuthentication.  # noqa: E501
        :type: ConfigExternalAuthenticationLdap
        """

        self._ldap = ldap

    @property
    def tacacs(self):
        """Gets the tacacs of this ConfigExternalAuthentication.  # noqa: E501


        :return: The tacacs of this ConfigExternalAuthentication.  # noqa: E501
        :rtype: ConfigExternalAuthenticationTacacs
        """
        return self._tacacs

    @tacacs.setter
    def tacacs(self, tacacs):
        """Sets the tacacs of this ConfigExternalAuthentication.


        :param tacacs: The tacacs of this ConfigExternalAuthentication.  # noqa: E501
        :type: ConfigExternalAuthenticationTacacs
        """

        self._tacacs = tacacs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigExternalAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigExternalAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
