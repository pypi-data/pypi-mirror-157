# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_alert_event_cpu_usage import ConfigAlertEventCpuUsage  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_disk_usage import ConfigAlertEventDiskUsage  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_log_content_match import ConfigAlertEventLogContentMatch  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_memory_usage import ConfigAlertEventMemoryUsage  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_system_connection import ConfigAlertEventSystemConnection  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_system_new_conns import ConfigAlertEventSystemNewConns  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_system_throughput import ConfigAlertEventSystemThroughput  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_vs_connection import ConfigAlertEventVsConnection  # noqa: F401,E501
from adapi_sdk.models.config_alert_event_vs_new_conns import ConfigAlertEventVsNewConns  # noqa: F401,E501


class ConfigAlertEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_down': 'str',
        'ddos_attack': 'str',
        'node_down': 'str',
        'vs_down': 'str',
        'ha_failure': 'str',
        'certificate_expired': 'str',
        'crl_update_fail': 'str',
        'cpu_usage': 'ConfigAlertEventCpuUsage',
        'memory_usage': 'ConfigAlertEventMemoryUsage',
        'disk_usage': 'ConfigAlertEventDiskUsage',
        'system_connection': 'ConfigAlertEventSystemConnection',
        'vs_connection': 'ConfigAlertEventVsConnection',
        'vs_new_conns': 'ConfigAlertEventVsNewConns',
        'system_new_conns': 'ConfigAlertEventSystemNewConns',
        'system_throughput': 'ConfigAlertEventSystemThroughput',
        'log_content_match': 'ConfigAlertEventLogContentMatch'
    }

    attribute_map = {
        'link_down': 'link_down',
        'ddos_attack': 'ddos_attack',
        'node_down': 'node_down',
        'vs_down': 'vs_down',
        'ha_failure': 'ha_failure',
        'certificate_expired': 'certificate_expired',
        'crl_update_fail': 'crl_update_fail',
        'cpu_usage': 'cpu_usage',
        'memory_usage': 'memory_usage',
        'disk_usage': 'disk_usage',
        'system_connection': 'system_connection',
        'vs_connection': 'vs_connection',
        'vs_new_conns': 'vs_new_conns',
        'system_new_conns': 'system_new_conns',
        'system_throughput': 'system_throughput',
        'log_content_match': 'log_content_match'
    }

    def __init__(self, link_down='DISABLE', ddos_attack='DISABLE', node_down='DISABLE', vs_down='DISABLE', ha_failure='DISABLE', certificate_expired='DISABLE', crl_update_fail='DISABLE', cpu_usage=None, memory_usage=None, disk_usage=None, system_connection=None, vs_connection=None, vs_new_conns=None, system_new_conns=None, system_throughput=None, log_content_match=None):  # noqa: E501
        """ConfigAlertEvent - a model defined in Swagger"""  # noqa: E501

        self._link_down = None
        self._ddos_attack = None
        self._node_down = None
        self._vs_down = None
        self._ha_failure = None
        self._certificate_expired = None
        self._crl_update_fail = None
        self._cpu_usage = None
        self._memory_usage = None
        self._disk_usage = None
        self._system_connection = None
        self._vs_connection = None
        self._vs_new_conns = None
        self._system_new_conns = None
        self._system_throughput = None
        self._log_content_match = None
        self.discriminator = None

        if link_down is not None:
            self.link_down = link_down
        if ddos_attack is not None:
            self.ddos_attack = ddos_attack
        if node_down is not None:
            self.node_down = node_down
        if vs_down is not None:
            self.vs_down = vs_down
        if ha_failure is not None:
            self.ha_failure = ha_failure
        if certificate_expired is not None:
            self.certificate_expired = certificate_expired
        if crl_update_fail is not None:
            self.crl_update_fail = crl_update_fail
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if disk_usage is not None:
            self.disk_usage = disk_usage
        if system_connection is not None:
            self.system_connection = system_connection
        if vs_connection is not None:
            self.vs_connection = vs_connection
        if vs_new_conns is not None:
            self.vs_new_conns = vs_new_conns
        if system_new_conns is not None:
            self.system_new_conns = system_new_conns
        if system_throughput is not None:
            self.system_throughput = system_throughput
        if log_content_match is not None:
            self.log_content_match = log_content_match

    @property
    def link_down(self):
        """Gets the link_down of this ConfigAlertEvent.  # noqa: E501

        链路故障  # noqa: E501

        :return: The link_down of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._link_down

    @link_down.setter
    def link_down(self, link_down):
        """Sets the link_down of this ConfigAlertEvent.

        链路故障  # noqa: E501

        :param link_down: The link_down of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if link_down not in allowed_values:
            raise ValueError(
                "Invalid value for `link_down` ({0}), must be one of {1}"  # noqa: E501
                .format(link_down, allowed_values)
            )

        self._link_down = link_down

    @property
    def ddos_attack(self):
        """Gets the ddos_attack of this ConfigAlertEvent.  # noqa: E501

        网络攻击  # noqa: E501

        :return: The ddos_attack of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._ddos_attack

    @ddos_attack.setter
    def ddos_attack(self, ddos_attack):
        """Sets the ddos_attack of this ConfigAlertEvent.

        网络攻击  # noqa: E501

        :param ddos_attack: The ddos_attack of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ddos_attack not in allowed_values:
            raise ValueError(
                "Invalid value for `ddos_attack` ({0}), must be one of {1}"  # noqa: E501
                .format(ddos_attack, allowed_values)
            )

        self._ddos_attack = ddos_attack

    @property
    def node_down(self):
        """Gets the node_down of this ConfigAlertEvent.  # noqa: E501

        节点故障  # noqa: E501

        :return: The node_down of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._node_down

    @node_down.setter
    def node_down(self, node_down):
        """Sets the node_down of this ConfigAlertEvent.

        节点故障  # noqa: E501

        :param node_down: The node_down of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if node_down not in allowed_values:
            raise ValueError(
                "Invalid value for `node_down` ({0}), must be one of {1}"  # noqa: E501
                .format(node_down, allowed_values)
            )

        self._node_down = node_down

    @property
    def vs_down(self):
        """Gets the vs_down of this ConfigAlertEvent.  # noqa: E501

        虚拟服务故障  # noqa: E501

        :return: The vs_down of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._vs_down

    @vs_down.setter
    def vs_down(self, vs_down):
        """Sets the vs_down of this ConfigAlertEvent.

        虚拟服务故障  # noqa: E501

        :param vs_down: The vs_down of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if vs_down not in allowed_values:
            raise ValueError(
                "Invalid value for `vs_down` ({0}), must be one of {1}"  # noqa: E501
                .format(vs_down, allowed_values)
            )

        self._vs_down = vs_down

    @property
    def ha_failure(self):
        """Gets the ha_failure of this ConfigAlertEvent.  # noqa: E501

        高可用性故障  # noqa: E501

        :return: The ha_failure of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._ha_failure

    @ha_failure.setter
    def ha_failure(self, ha_failure):
        """Sets the ha_failure of this ConfigAlertEvent.

        高可用性故障  # noqa: E501

        :param ha_failure: The ha_failure of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ha_failure not in allowed_values:
            raise ValueError(
                "Invalid value for `ha_failure` ({0}), must be one of {1}"  # noqa: E501
                .format(ha_failure, allowed_values)
            )

        self._ha_failure = ha_failure

    @property
    def certificate_expired(self):
        """Gets the certificate_expired of this ConfigAlertEvent.  # noqa: E501

        证书过期  # noqa: E501

        :return: The certificate_expired of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._certificate_expired

    @certificate_expired.setter
    def certificate_expired(self, certificate_expired):
        """Sets the certificate_expired of this ConfigAlertEvent.

        证书过期  # noqa: E501

        :param certificate_expired: The certificate_expired of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if certificate_expired not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_expired` ({0}), must be one of {1}"  # noqa: E501
                .format(certificate_expired, allowed_values)
            )

        self._certificate_expired = certificate_expired

    @property
    def crl_update_fail(self):
        """Gets the crl_update_fail of this ConfigAlertEvent.  # noqa: E501

        CRL更新失败  # noqa: E501

        :return: The crl_update_fail of this ConfigAlertEvent.  # noqa: E501
        :rtype: str
        """
        return self._crl_update_fail

    @crl_update_fail.setter
    def crl_update_fail(self, crl_update_fail):
        """Sets the crl_update_fail of this ConfigAlertEvent.

        CRL更新失败  # noqa: E501

        :param crl_update_fail: The crl_update_fail of this ConfigAlertEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if crl_update_fail not in allowed_values:
            raise ValueError(
                "Invalid value for `crl_update_fail` ({0}), must be one of {1}"  # noqa: E501
                .format(crl_update_fail, allowed_values)
            )

        self._crl_update_fail = crl_update_fail

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this ConfigAlertEvent.  # noqa: E501


        :return: The cpu_usage of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventCpuUsage
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this ConfigAlertEvent.


        :param cpu_usage: The cpu_usage of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventCpuUsage
        """

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self):
        """Gets the memory_usage of this ConfigAlertEvent.  # noqa: E501


        :return: The memory_usage of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventMemoryUsage
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this ConfigAlertEvent.


        :param memory_usage: The memory_usage of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventMemoryUsage
        """

        self._memory_usage = memory_usage

    @property
    def disk_usage(self):
        """Gets the disk_usage of this ConfigAlertEvent.  # noqa: E501


        :return: The disk_usage of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventDiskUsage
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage):
        """Sets the disk_usage of this ConfigAlertEvent.


        :param disk_usage: The disk_usage of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventDiskUsage
        """

        self._disk_usage = disk_usage

    @property
    def system_connection(self):
        """Gets the system_connection of this ConfigAlertEvent.  # noqa: E501


        :return: The system_connection of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventSystemConnection
        """
        return self._system_connection

    @system_connection.setter
    def system_connection(self, system_connection):
        """Sets the system_connection of this ConfigAlertEvent.


        :param system_connection: The system_connection of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventSystemConnection
        """

        self._system_connection = system_connection

    @property
    def vs_connection(self):
        """Gets the vs_connection of this ConfigAlertEvent.  # noqa: E501


        :return: The vs_connection of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventVsConnection
        """
        return self._vs_connection

    @vs_connection.setter
    def vs_connection(self, vs_connection):
        """Sets the vs_connection of this ConfigAlertEvent.


        :param vs_connection: The vs_connection of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventVsConnection
        """

        self._vs_connection = vs_connection

    @property
    def vs_new_conns(self):
        """Gets the vs_new_conns of this ConfigAlertEvent.  # noqa: E501


        :return: The vs_new_conns of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventVsNewConns
        """
        return self._vs_new_conns

    @vs_new_conns.setter
    def vs_new_conns(self, vs_new_conns):
        """Sets the vs_new_conns of this ConfigAlertEvent.


        :param vs_new_conns: The vs_new_conns of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventVsNewConns
        """

        self._vs_new_conns = vs_new_conns

    @property
    def system_new_conns(self):
        """Gets the system_new_conns of this ConfigAlertEvent.  # noqa: E501


        :return: The system_new_conns of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventSystemNewConns
        """
        return self._system_new_conns

    @system_new_conns.setter
    def system_new_conns(self, system_new_conns):
        """Sets the system_new_conns of this ConfigAlertEvent.


        :param system_new_conns: The system_new_conns of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventSystemNewConns
        """

        self._system_new_conns = system_new_conns

    @property
    def system_throughput(self):
        """Gets the system_throughput of this ConfigAlertEvent.  # noqa: E501


        :return: The system_throughput of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventSystemThroughput
        """
        return self._system_throughput

    @system_throughput.setter
    def system_throughput(self, system_throughput):
        """Sets the system_throughput of this ConfigAlertEvent.


        :param system_throughput: The system_throughput of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventSystemThroughput
        """

        self._system_throughput = system_throughput

    @property
    def log_content_match(self):
        """Gets the log_content_match of this ConfigAlertEvent.  # noqa: E501


        :return: The log_content_match of this ConfigAlertEvent.  # noqa: E501
        :rtype: ConfigAlertEventLogContentMatch
        """
        return self._log_content_match

    @log_content_match.setter
    def log_content_match(self, log_content_match):
        """Sets the log_content_match of this ConfigAlertEvent.


        :param log_content_match: The log_content_match of this ConfigAlertEvent.  # noqa: E501
        :type: ConfigAlertEventLogContentMatch
        """

        self._log_content_match = log_content_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigAlertEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigAlertEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
