# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_link_arp_detect import ConfigLinkArpDetect  # noqa: F401,E501
from adapi_sdk.models.config_link_cluster_addresses import ConfigLinkClusterAddresses  # noqa: F401,E501
from adapi_sdk.models.config_link_cluster_gateways import ConfigLinkClusterGateways  # noqa: F401,E501
from adapi_sdk.models.config_link_failsafe import ConfigLinkFailsafe  # noqa: F401,E501
from adapi_sdk.models.config_link_gateway_arp_detect import ConfigLinkGatewayArpDetect  # noqa: F401,E501
from adapi_sdk.models.config_link_interface import ConfigLinkInterface  # noqa: F401,E501
from adapi_sdk.models.config_link_monitors import ConfigLinkMonitors  # noqa: F401,E501


class ConfigLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'type': 'str',
        'interface': 'ConfigLinkInterface',
        'username': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'echo_retransmission_interval': 'int',
        'echo_retransmission_count': 'int',
        'auto_dial': 'str',
        'auto_dial_interval': 'int',
        'mtu': 'int',
        'mac_address': 'str',
        'addresses': 'list[str]',
        'cluster_addresses': 'list[ConfigLinkClusterAddresses]',
        'cluster_gateways': 'list[ConfigLinkClusterGateways]',
        'auto_snat': 'str',
        'upstream_bandwidth_mbps': 'int',
        'upstream_busy_percent': 'int',
        'downstream_bandwidth_mbps': 'int',
        'downstream_busy_percent': 'int',
        'gateway_arp_detect': 'ConfigLinkGatewayArpDetect',
        'arp_detect': 'ConfigLinkArpDetect',
        'monitors': 'list[ConfigLinkMonitors]',
        'cable_plugin_detect': 'str',
        'failsafe': 'ConfigLinkFailsafe',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'type': 'type',
        'interface': 'interface',
        'username': 'username',
        'password': 'password',
        'encrypted_password': 'encrypted_password',
        'echo_retransmission_interval': 'echo_retransmission_interval',
        'echo_retransmission_count': 'echo_retransmission_count',
        'auto_dial': 'auto_dial',
        'auto_dial_interval': 'auto_dial_interval',
        'mtu': 'mtu',
        'mac_address': 'mac_address',
        'addresses': 'addresses',
        'cluster_addresses': 'cluster_addresses',
        'cluster_gateways': 'cluster_gateways',
        'auto_snat': 'auto_snat',
        'upstream_bandwidth_mbps': 'upstream_bandwidth_mbps',
        'upstream_busy_percent': 'upstream_busy_percent',
        'downstream_bandwidth_mbps': 'downstream_bandwidth_mbps',
        'downstream_busy_percent': 'downstream_busy_percent',
        'gateway_arp_detect': 'gateway_arp_detect',
        'arp_detect': 'arp_detect',
        'monitors': 'monitors',
        'cable_plugin_detect': 'cable_plugin_detect',
        'failsafe': 'failsafe',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, state='ENABLE', type=None, interface=None, username=None, password=None, encrypted_password=None, echo_retransmission_interval=None, echo_retransmission_count=None, auto_dial='ENABLE', auto_dial_interval=None, mtu=None, mac_address='指定MAC地址', addresses=None, cluster_addresses=None, cluster_gateways=None, auto_snat='DISABLE', upstream_bandwidth_mbps=None, upstream_busy_percent=None, downstream_bandwidth_mbps=None, downstream_busy_percent=None, gateway_arp_detect=None, arp_detect=None, monitors=None, cable_plugin_detect='DISABLE', failsafe=None, netns='default'):  # noqa: E501
        """ConfigLink - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._type = None
        self._interface = None
        self._username = None
        self._password = None
        self._encrypted_password = None
        self._echo_retransmission_interval = None
        self._echo_retransmission_count = None
        self._auto_dial = None
        self._auto_dial_interval = None
        self._mtu = None
        self._mac_address = None
        self._addresses = None
        self._cluster_addresses = None
        self._cluster_gateways = None
        self._auto_snat = None
        self._upstream_bandwidth_mbps = None
        self._upstream_busy_percent = None
        self._downstream_bandwidth_mbps = None
        self._downstream_busy_percent = None
        self._gateway_arp_detect = None
        self._arp_detect = None
        self._monitors = None
        self._cable_plugin_detect = None
        self._failsafe = None
        self._netns = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        self.interface = interface
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if echo_retransmission_interval is not None:
            self.echo_retransmission_interval = echo_retransmission_interval
        if echo_retransmission_count is not None:
            self.echo_retransmission_count = echo_retransmission_count
        if auto_dial is not None:
            self.auto_dial = auto_dial
        if auto_dial_interval is not None:
            self.auto_dial_interval = auto_dial_interval
        if mtu is not None:
            self.mtu = mtu
        if mac_address is not None:
            self.mac_address = mac_address
        if addresses is not None:
            self.addresses = addresses
        if cluster_addresses is not None:
            self.cluster_addresses = cluster_addresses
        if cluster_gateways is not None:
            self.cluster_gateways = cluster_gateways
        if auto_snat is not None:
            self.auto_snat = auto_snat
        if upstream_bandwidth_mbps is not None:
            self.upstream_bandwidth_mbps = upstream_bandwidth_mbps
        if upstream_busy_percent is not None:
            self.upstream_busy_percent = upstream_busy_percent
        if downstream_bandwidth_mbps is not None:
            self.downstream_bandwidth_mbps = downstream_bandwidth_mbps
        if downstream_busy_percent is not None:
            self.downstream_busy_percent = downstream_busy_percent
        if gateway_arp_detect is not None:
            self.gateway_arp_detect = gateway_arp_detect
        if arp_detect is not None:
            self.arp_detect = arp_detect
        if monitors is not None:
            self.monitors = monitors
        if cable_plugin_detect is not None:
            self.cable_plugin_detect = cable_plugin_detect
        if failsafe is not None:
            self.failsafe = failsafe
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this ConfigLink.  # noqa: E501

        配置名称  # noqa: E501

        :return: The name of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigLink.

        配置名称  # noqa: E501

        :param name: The name of this ConfigLink.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigLink.  # noqa: E501

        业务标签及备注信息描述  # noqa: E501

        :return: The description of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigLink.

        业务标签及备注信息描述  # noqa: E501

        :param description: The description of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigLink.  # noqa: E501

        配置启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The state of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigLink.

        配置启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param state: The state of this ConfigLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ConfigLink.  # noqa: E501

        类别（LAN/WAN/PPPOE）  # noqa: E501

        :return: The type of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigLink.

        类别（LAN/WAN/PPPOE）  # noqa: E501

        :param type: The type of this ConfigLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["LAN", "WAN", "PPPOE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def interface(self):
        """Gets the interface of this ConfigLink.  # noqa: E501


        :return: The interface of this ConfigLink.  # noqa: E501
        :rtype: ConfigLinkInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ConfigLink.


        :param interface: The interface of this ConfigLink.  # noqa: E501
        :type: ConfigLinkInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def username(self):
        """Gets the username of this ConfigLink.  # noqa: E501

        用户名  # noqa: E501

        :return: The username of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigLink.

        用户名  # noqa: E501

        :param username: The username of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigLink.  # noqa: E501

        密码  # noqa: E501

        :return: The password of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigLink.

        密码  # noqa: E501

        :param password: The password of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigLink.  # noqa: E501

        加密密码  # noqa: E501

        :return: The encrypted_password of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigLink.

        加密密码  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def echo_retransmission_interval(self):
        """Gets the echo_retransmission_interval of this ConfigLink.  # noqa: E501

        ECHO重传间隔时间（单位：秒）  # noqa: E501

        :return: The echo_retransmission_interval of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._echo_retransmission_interval

    @echo_retransmission_interval.setter
    def echo_retransmission_interval(self, echo_retransmission_interval):
        """Sets the echo_retransmission_interval of this ConfigLink.

        ECHO重传间隔时间（单位：秒）  # noqa: E501

        :param echo_retransmission_interval: The echo_retransmission_interval of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._echo_retransmission_interval = echo_retransmission_interval

    @property
    def echo_retransmission_count(self):
        """Gets the echo_retransmission_count of this ConfigLink.  # noqa: E501

        ECHO重传次数（单位：次）  # noqa: E501

        :return: The echo_retransmission_count of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._echo_retransmission_count

    @echo_retransmission_count.setter
    def echo_retransmission_count(self, echo_retransmission_count):
        """Sets the echo_retransmission_count of this ConfigLink.

        ECHO重传次数（单位：次）  # noqa: E501

        :param echo_retransmission_count: The echo_retransmission_count of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._echo_retransmission_count = echo_retransmission_count

    @property
    def auto_dial(self):
        """Gets the auto_dial of this ConfigLink.  # noqa: E501

        自动拨号启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The auto_dial of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._auto_dial

    @auto_dial.setter
    def auto_dial(self, auto_dial):
        """Sets the auto_dial of this ConfigLink.

        自动拨号启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param auto_dial: The auto_dial of this ConfigLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if auto_dial not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_dial` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_dial, allowed_values)
            )

        self._auto_dial = auto_dial

    @property
    def auto_dial_interval(self):
        """Gets the auto_dial_interval of this ConfigLink.  # noqa: E501

        自动拨号间隔（单位：次）  # noqa: E501

        :return: The auto_dial_interval of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._auto_dial_interval

    @auto_dial_interval.setter
    def auto_dial_interval(self, auto_dial_interval):
        """Sets the auto_dial_interval of this ConfigLink.

        自动拨号间隔（单位：次）  # noqa: E501

        :param auto_dial_interval: The auto_dial_interval of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._auto_dial_interval = auto_dial_interval

    @property
    def mtu(self):
        """Gets the mtu of this ConfigLink.  # noqa: E501

        最大传输单元大小（单位：字节）  # noqa: E501

        :return: The mtu of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this ConfigLink.

        最大传输单元大小（单位：字节）  # noqa: E501

        :param mtu: The mtu of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def mac_address(self):
        """Gets the mac_address of this ConfigLink.  # noqa: E501


        :return: The mac_address of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ConfigLink.


        :param mac_address: The mac_address of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def addresses(self):
        """Gets the addresses of this ConfigLink.  # noqa: E501

        地址列表（集群模式浮动IP地址）  # noqa: E501

        :return: The addresses of this ConfigLink.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ConfigLink.

        地址列表（集群模式浮动IP地址）  # noqa: E501

        :param addresses: The addresses of this ConfigLink.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def cluster_addresses(self):
        """Gets the cluster_addresses of this ConfigLink.  # noqa: E501

        集群成员静态IP地址（仅在集群模式下生效）  # noqa: E501

        :return: The cluster_addresses of this ConfigLink.  # noqa: E501
        :rtype: list[ConfigLinkClusterAddresses]
        """
        return self._cluster_addresses

    @cluster_addresses.setter
    def cluster_addresses(self, cluster_addresses):
        """Sets the cluster_addresses of this ConfigLink.

        集群成员静态IP地址（仅在集群模式下生效）  # noqa: E501

        :param cluster_addresses: The cluster_addresses of this ConfigLink.  # noqa: E501
        :type: list[ConfigLinkClusterAddresses]
        """

        self._cluster_addresses = cluster_addresses

    @property
    def cluster_gateways(self):
        """Gets the cluster_gateways of this ConfigLink.  # noqa: E501

        集群网关（仅在集群模式下生效）  # noqa: E501

        :return: The cluster_gateways of this ConfigLink.  # noqa: E501
        :rtype: list[ConfigLinkClusterGateways]
        """
        return self._cluster_gateways

    @cluster_gateways.setter
    def cluster_gateways(self, cluster_gateways):
        """Sets the cluster_gateways of this ConfigLink.

        集群网关（仅在集群模式下生效）  # noqa: E501

        :param cluster_gateways: The cluster_gateways of this ConfigLink.  # noqa: E501
        :type: list[ConfigLinkClusterGateways]
        """

        self._cluster_gateways = cluster_gateways

    @property
    def auto_snat(self):
        """Gets the auto_snat of this ConfigLink.  # noqa: E501

        自动SNAT（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The auto_snat of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._auto_snat

    @auto_snat.setter
    def auto_snat(self, auto_snat):
        """Sets the auto_snat of this ConfigLink.

        自动SNAT（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param auto_snat: The auto_snat of this ConfigLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if auto_snat not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_snat` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_snat, allowed_values)
            )

        self._auto_snat = auto_snat

    @property
    def upstream_bandwidth_mbps(self):
        """Gets the upstream_bandwidth_mbps of this ConfigLink.  # noqa: E501

        WAN链路上行宽带（单位：Mbps）  # noqa: E501

        :return: The upstream_bandwidth_mbps of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._upstream_bandwidth_mbps

    @upstream_bandwidth_mbps.setter
    def upstream_bandwidth_mbps(self, upstream_bandwidth_mbps):
        """Sets the upstream_bandwidth_mbps of this ConfigLink.

        WAN链路上行宽带（单位：Mbps）  # noqa: E501

        :param upstream_bandwidth_mbps: The upstream_bandwidth_mbps of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._upstream_bandwidth_mbps = upstream_bandwidth_mbps

    @property
    def upstream_busy_percent(self):
        """Gets the upstream_busy_percent of this ConfigLink.  # noqa: E501

        WAN链路上行宽带繁忙比例  # noqa: E501

        :return: The upstream_busy_percent of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._upstream_busy_percent

    @upstream_busy_percent.setter
    def upstream_busy_percent(self, upstream_busy_percent):
        """Sets the upstream_busy_percent of this ConfigLink.

        WAN链路上行宽带繁忙比例  # noqa: E501

        :param upstream_busy_percent: The upstream_busy_percent of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._upstream_busy_percent = upstream_busy_percent

    @property
    def downstream_bandwidth_mbps(self):
        """Gets the downstream_bandwidth_mbps of this ConfigLink.  # noqa: E501

        WAN链路下行宽带（单位：Mbps）  # noqa: E501

        :return: The downstream_bandwidth_mbps of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._downstream_bandwidth_mbps

    @downstream_bandwidth_mbps.setter
    def downstream_bandwidth_mbps(self, downstream_bandwidth_mbps):
        """Sets the downstream_bandwidth_mbps of this ConfigLink.

        WAN链路下行宽带（单位：Mbps）  # noqa: E501

        :param downstream_bandwidth_mbps: The downstream_bandwidth_mbps of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._downstream_bandwidth_mbps = downstream_bandwidth_mbps

    @property
    def downstream_busy_percent(self):
        """Gets the downstream_busy_percent of this ConfigLink.  # noqa: E501

        WAN链路下行宽带繁忙比例  # noqa: E501

        :return: The downstream_busy_percent of this ConfigLink.  # noqa: E501
        :rtype: int
        """
        return self._downstream_busy_percent

    @downstream_busy_percent.setter
    def downstream_busy_percent(self, downstream_busy_percent):
        """Sets the downstream_busy_percent of this ConfigLink.

        WAN链路下行宽带繁忙比例  # noqa: E501

        :param downstream_busy_percent: The downstream_busy_percent of this ConfigLink.  # noqa: E501
        :type: int
        """

        self._downstream_busy_percent = downstream_busy_percent

    @property
    def gateway_arp_detect(self):
        """Gets the gateway_arp_detect of this ConfigLink.  # noqa: E501


        :return: The gateway_arp_detect of this ConfigLink.  # noqa: E501
        :rtype: ConfigLinkGatewayArpDetect
        """
        return self._gateway_arp_detect

    @gateway_arp_detect.setter
    def gateway_arp_detect(self, gateway_arp_detect):
        """Sets the gateway_arp_detect of this ConfigLink.


        :param gateway_arp_detect: The gateway_arp_detect of this ConfigLink.  # noqa: E501
        :type: ConfigLinkGatewayArpDetect
        """

        self._gateway_arp_detect = gateway_arp_detect

    @property
    def arp_detect(self):
        """Gets the arp_detect of this ConfigLink.  # noqa: E501


        :return: The arp_detect of this ConfigLink.  # noqa: E501
        :rtype: ConfigLinkArpDetect
        """
        return self._arp_detect

    @arp_detect.setter
    def arp_detect(self, arp_detect):
        """Sets the arp_detect of this ConfigLink.


        :param arp_detect: The arp_detect of this ConfigLink.  # noqa: E501
        :type: ConfigLinkArpDetect
        """

        self._arp_detect = arp_detect

    @property
    def monitors(self):
        """Gets the monitors of this ConfigLink.  # noqa: E501


        :return: The monitors of this ConfigLink.  # noqa: E501
        :rtype: list[ConfigLinkMonitors]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this ConfigLink.


        :param monitors: The monitors of this ConfigLink.  # noqa: E501
        :type: list[ConfigLinkMonitors]
        """

        self._monitors = monitors

    @property
    def cable_plugin_detect(self):
        """Gets the cable_plugin_detect of this ConfigLink.  # noqa: E501


        :return: The cable_plugin_detect of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._cable_plugin_detect

    @cable_plugin_detect.setter
    def cable_plugin_detect(self, cable_plugin_detect):
        """Sets the cable_plugin_detect of this ConfigLink.


        :param cable_plugin_detect: The cable_plugin_detect of this ConfigLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if cable_plugin_detect not in allowed_values:
            raise ValueError(
                "Invalid value for `cable_plugin_detect` ({0}), must be one of {1}"  # noqa: E501
                .format(cable_plugin_detect, allowed_values)
            )

        self._cable_plugin_detect = cable_plugin_detect

    @property
    def failsafe(self):
        """Gets the failsafe of this ConfigLink.  # noqa: E501


        :return: The failsafe of this ConfigLink.  # noqa: E501
        :rtype: ConfigLinkFailsafe
        """
        return self._failsafe

    @failsafe.setter
    def failsafe(self, failsafe):
        """Sets the failsafe of this ConfigLink.


        :param failsafe: The failsafe of this ConfigLink.  # noqa: E501
        :type: ConfigLinkFailsafe
        """

        self._failsafe = failsafe

    @property
    def netns(self):
        """Gets the netns of this ConfigLink.  # noqa: E501


        :return: The netns of this ConfigLink.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this ConfigLink.


        :param netns: The netns of this ConfigLink.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
