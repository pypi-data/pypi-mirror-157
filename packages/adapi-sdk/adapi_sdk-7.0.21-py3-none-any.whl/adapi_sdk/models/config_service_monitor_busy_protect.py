# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorBusyProtect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protect_time': 'int',
        'retry_times': 'int',
        'set_offline_when_protect_fail': 'str'
    }

    attribute_map = {
        'protect_time': 'protect_time',
        'retry_times': 'retry_times',
        'set_offline_when_protect_fail': 'set_offline_when_protect_fail'
    }

    def __init__(self, protect_time=None, retry_times=None, set_offline_when_protect_fail='DISABLE'):  # noqa: E501
        """ConfigServiceMonitorBusyProtect - a model defined in Swagger"""  # noqa: E501

        self._protect_time = None
        self._retry_times = None
        self._set_offline_when_protect_fail = None
        self.discriminator = None

        if protect_time is not None:
            self.protect_time = protect_time
        if retry_times is not None:
            self.retry_times = retry_times
        if set_offline_when_protect_fail is not None:
            self.set_offline_when_protect_fail = set_offline_when_protect_fail

    @property
    def protect_time(self):
        """Gets the protect_time of this ConfigServiceMonitorBusyProtect.  # noqa: E501


        :return: The protect_time of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :rtype: int
        """
        return self._protect_time

    @protect_time.setter
    def protect_time(self, protect_time):
        """Sets the protect_time of this ConfigServiceMonitorBusyProtect.


        :param protect_time: The protect_time of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :type: int
        """

        self._protect_time = protect_time

    @property
    def retry_times(self):
        """Gets the retry_times of this ConfigServiceMonitorBusyProtect.  # noqa: E501


        :return: The retry_times of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :rtype: int
        """
        return self._retry_times

    @retry_times.setter
    def retry_times(self, retry_times):
        """Sets the retry_times of this ConfigServiceMonitorBusyProtect.


        :param retry_times: The retry_times of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :type: int
        """

        self._retry_times = retry_times

    @property
    def set_offline_when_protect_fail(self):
        """Gets the set_offline_when_protect_fail of this ConfigServiceMonitorBusyProtect.  # noqa: E501


        :return: The set_offline_when_protect_fail of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :rtype: str
        """
        return self._set_offline_when_protect_fail

    @set_offline_when_protect_fail.setter
    def set_offline_when_protect_fail(self, set_offline_when_protect_fail):
        """Sets the set_offline_when_protect_fail of this ConfigServiceMonitorBusyProtect.


        :param set_offline_when_protect_fail: The set_offline_when_protect_fail of this ConfigServiceMonitorBusyProtect.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if set_offline_when_protect_fail not in allowed_values:
            raise ValueError(
                "Invalid value for `set_offline_when_protect_fail` ({0}), must be one of {1}"  # noqa: E501
                .format(set_offline_when_protect_fail, allowed_values)
            )

        self._set_offline_when_protect_fail = set_offline_when_protect_fail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorBusyProtect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorBusyProtect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
