# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_service_monitor_oracle_database_query_result import ConfigServiceMonitorOracleDatabaseQueryResult  # noqa: F401,E501


class ConfigServiceMonitorOracleDatabase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str',
        'encrypted_password': 'str',
        'database': 'str',
        'query_string': 'str',
        'query_result': 'ConfigServiceMonitorOracleDatabaseQueryResult'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password',
        'encrypted_password': 'encrypted_password',
        'database': 'database',
        'query_string': 'query_string',
        'query_result': 'query_result'
    }

    def __init__(self, name=None, description=None, type='ORACLE-DATABASE', timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', username=None, password=None, pk_password=None, encrypted_password=None, database=None, query_string=None, query_result=None):  # noqa: E501
        """ConfigServiceMonitorOracleDatabase - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._username = None
        self._password = None
        self._pk_password = None
        self._encrypted_password = None
        self._database = None
        self._query_string = None
        self._query_result = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if database is not None:
            self.database = database
        if query_string is not None:
            self.query_string = query_string
        if query_result is not None:
            self.query_result = query_result

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorOracleDatabase.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorOracleDatabase.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorOracleDatabase.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        allowed_values = ["ORACLE-DATABASE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；设置监视超时时间。  # noqa: E501

        :return: The timeout of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitorOracleDatabase.

        可选参数；设置监视超时时间。  # noqa: E501

        :param timeout: The timeout of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；设置监视间隔时间。  # noqa: E501

        :return: The interval of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitorOracleDatabase.

        可选参数；设置监视间隔时间。  # noqa: E501

        :param interval: The interval of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址  # noqa: E501

        :return: The host of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitorOracleDatabase.

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址  # noqa: E501

        :param host: The host of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；指定监视端口；取值范围[0,65535]，默认为1521  # noqa: E501

        :return: The port of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitorOracleDatabase.

        可选参数；指定监视端口；取值范围[0,65535]，默认为1521  # noqa: E501

        :param port: The port of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorOracleDatabase.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def username(self):
        """Gets the username of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；指定数据库用户名  # noqa: E501

        :return: The username of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigServiceMonitorOracleDatabase.

        可选参数；指定数据库用户名  # noqa: E501

        :param username: The username of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 63:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `63`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；指定数据库用户的密码  # noqa: E501

        :return: The password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigServiceMonitorOracleDatabase.

        可选参数；指定数据库用户的密码  # noqa: E501

        :param password: The password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 63:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `63`")  # noqa: E501

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        旧密码  # noqa: E501

        :return: The pk_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigServiceMonitorOracleDatabase.

        旧密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；已加密的用户名密码  # noqa: E501

        :return: The encrypted_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigServiceMonitorOracleDatabase.

        可选参数；已加密的用户名密码  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def database(self):
        """Gets the database of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数；指定数据库名称  # noqa: E501

        :return: The database of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ConfigServiceMonitorOracleDatabase.

        可选参数；指定数据库名称  # noqa: E501

        :param database: The database of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        if database is not None and len(database) > 63:
            raise ValueError("Invalid value for `database`, length must be less than or equal to `63`")  # noqa: E501

        self._database = database

    @property
    def query_string(self):
        """Gets the query_string of this ConfigServiceMonitorOracleDatabase.  # noqa: E501

        可选参数;指定查询语句  # noqa: E501

        :return: The query_string of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this ConfigServiceMonitorOracleDatabase.

        可选参数;指定查询语句  # noqa: E501

        :param query_string: The query_string of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: str
        """
        if query_string is not None and len(query_string) > 2048:
            raise ValueError("Invalid value for `query_string`, length must be less than or equal to `2048`")  # noqa: E501

        self._query_string = query_string

    @property
    def query_result(self):
        """Gets the query_result of this ConfigServiceMonitorOracleDatabase.  # noqa: E501


        :return: The query_result of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :rtype: ConfigServiceMonitorOracleDatabaseQueryResult
        """
        return self._query_result

    @query_result.setter
    def query_result(self, query_result):
        """Sets the query_result of this ConfigServiceMonitorOracleDatabase.


        :param query_result: The query_result of this ConfigServiceMonitorOracleDatabase.  # noqa: E501
        :type: ConfigServiceMonitorOracleDatabaseQueryResult
        """

        self._query_result = query_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorOracleDatabase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorOracleDatabase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
