# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_member_alternate_ha import ConfigMemberAlternateHa  # noqa: F401,E501
from adapi_sdk.models.config_member_ha import ConfigMemberHa  # noqa: F401,E501


class ConfigMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'ha': 'ConfigMemberHa',
        'alternate_ha': 'ConfigMemberAlternateHa',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'ha': 'ha',
        'alternate_ha': 'alternate_ha',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password'
    }

    def __init__(self, name=None, description=None, state='ENABLE', ha=None, alternate_ha=None, username=None, password=None, pk_password=None):  # noqa: E501
        """ConfigMember - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._ha = None
        self._alternate_ha = None
        self._username = None
        self._password = None
        self._pk_password = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if ha is not None:
            self.ha = ha
        if alternate_ha is not None:
            self.alternate_ha = alternate_ha
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password

    @property
    def name(self):
        """Gets the name of this ConfigMember.  # noqa: E501

        指定成员的名称，在集群成员列表中必须唯一  # noqa: E501

        :return: The name of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigMember.

        指定成员的名称，在集群成员列表中必须唯一  # noqa: E501

        :param name: The name of this ConfigMember.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigMember.  # noqa: E501

        成员的描述  # noqa: E501

        :return: The description of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigMember.

        成员的描述  # noqa: E501

        :param description: The description of this ConfigMember.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigMember.  # noqa: E501

        成员的启禁用状态，enable 表示启用，disable 表示禁用  # noqa: E501

        :return: The state of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigMember.

        成员的启禁用状态，enable 表示启用，disable 表示禁用  # noqa: E501

        :param state: The state of this ConfigMember.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ha(self):
        """Gets the ha of this ConfigMember.  # noqa: E501


        :return: The ha of this ConfigMember.  # noqa: E501
        :rtype: ConfigMemberHa
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this ConfigMember.


        :param ha: The ha of this ConfigMember.  # noqa: E501
        :type: ConfigMemberHa
        """

        self._ha = ha

    @property
    def alternate_ha(self):
        """Gets the alternate_ha of this ConfigMember.  # noqa: E501


        :return: The alternate_ha of this ConfigMember.  # noqa: E501
        :rtype: ConfigMemberAlternateHa
        """
        return self._alternate_ha

    @alternate_ha.setter
    def alternate_ha(self, alternate_ha):
        """Sets the alternate_ha of this ConfigMember.


        :param alternate_ha: The alternate_ha of this ConfigMember.  # noqa: E501
        :type: ConfigMemberAlternateHa
        """

        self._alternate_ha = alternate_ha

    @property
    def username(self):
        """Gets the username of this ConfigMember.  # noqa: E501

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的用户名  # noqa: E501

        :return: The username of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigMember.

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的用户名  # noqa: E501

        :param username: The username of this ConfigMember.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigMember.  # noqa: E501

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的用户密码  # noqa: E501

        :return: The password of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigMember.

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的用户密码  # noqa: E501

        :param password: The password of this ConfigMember.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigMember.  # noqa: E501

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的加密用户密码  # noqa: E501

        :return: The pk_password of this ConfigMember.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigMember.

        禁用成员和删除成员时的权限校验，请填写具有高可用权限用户的加密用户密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigMember.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
