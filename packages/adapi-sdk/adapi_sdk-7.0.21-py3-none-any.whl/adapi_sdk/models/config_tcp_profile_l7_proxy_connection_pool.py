# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigTcpProfileL7ProxyConnectionPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'size': 'int',
        'age': 'int',
        'source_address_prefix': 'int',
        'ipv6_source_address_prefix': 'int'
    }

    attribute_map = {
        'state': 'state',
        'size': 'size',
        'age': 'age',
        'source_address_prefix': 'source_address_prefix',
        'ipv6_source_address_prefix': 'ipv6_source_address_prefix'
    }

    def __init__(self, state='ENABLE', size=None, age=None, source_address_prefix=None, ipv6_source_address_prefix=None):  # noqa: E501
        """ConfigTcpProfileL7ProxyConnectionPool - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._size = None
        self._age = None
        self._source_address_prefix = None
        self._ipv6_source_address_prefix = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if size is not None:
            self.size = size
        if age is not None:
            self.age = age
        if source_address_prefix is not None:
            self.source_address_prefix = source_address_prefix
        if ipv6_source_address_prefix is not None:
            self.ipv6_source_address_prefix = ipv6_source_address_prefix

    @property
    def state(self):
        """Gets the state of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501

        必选参数；指定是否启用TCP连接池，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The state of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigTcpProfileL7ProxyConnectionPool.

        必选参数；指定是否启用TCP连接池，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param state: The state of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def size(self):
        """Gets the size of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501

        可选参数；指定连接池大小，默认为1024  # noqa: E501

        :return: The size of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ConfigTcpProfileL7ProxyConnectionPool.

        可选参数；指定连接池大小，默认为1024  # noqa: E501

        :param size: The size of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :type: int
        """
        if size is not None and size > 64000:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `64000`")  # noqa: E501
        if size is not None and size < 1:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._size = size

    @property
    def age(self):
        """Gets the age of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501

        可选参数；指定超时时间，默认为60  # noqa: E501

        :return: The age of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ConfigTcpProfileL7ProxyConnectionPool.

        可选参数；指定超时时间，默认为60  # noqa: E501

        :param age: The age of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :type: int
        """
        if age is not None and age > 86400:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value less than or equal to `86400`")  # noqa: E501
        if age is not None and age < 60:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `60`")  # noqa: E501

        self._age = age

    @property
    def source_address_prefix(self):
        """Gets the source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501

        可选参数；指定源IPv4掩码，默认为0  # noqa: E501

        :return: The source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :rtype: int
        """
        return self._source_address_prefix

    @source_address_prefix.setter
    def source_address_prefix(self, source_address_prefix):
        """Sets the source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.

        可选参数；指定源IPv4掩码，默认为0  # noqa: E501

        :param source_address_prefix: The source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :type: int
        """
        if source_address_prefix is not None and source_address_prefix > 32:  # noqa: E501
            raise ValueError("Invalid value for `source_address_prefix`, must be a value less than or equal to `32`")  # noqa: E501
        if source_address_prefix is not None and source_address_prefix < 0:  # noqa: E501
            raise ValueError("Invalid value for `source_address_prefix`, must be a value greater than or equal to `0`")  # noqa: E501

        self._source_address_prefix = source_address_prefix

    @property
    def ipv6_source_address_prefix(self):
        """Gets the ipv6_source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501

        可选参数；指定源IPv6掩码，默认为0  # noqa: E501

        :return: The ipv6_source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_source_address_prefix

    @ipv6_source_address_prefix.setter
    def ipv6_source_address_prefix(self, ipv6_source_address_prefix):
        """Sets the ipv6_source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.

        可选参数；指定源IPv6掩码，默认为0  # noqa: E501

        :param ipv6_source_address_prefix: The ipv6_source_address_prefix of this ConfigTcpProfileL7ProxyConnectionPool.  # noqa: E501
        :type: int
        """
        if ipv6_source_address_prefix is not None and ipv6_source_address_prefix > 128:  # noqa: E501
            raise ValueError("Invalid value for `ipv6_source_address_prefix`, must be a value less than or equal to `128`")  # noqa: E501
        if ipv6_source_address_prefix is not None and ipv6_source_address_prefix < 0:  # noqa: E501
            raise ValueError("Invalid value for `ipv6_source_address_prefix`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ipv6_source_address_prefix = ipv6_source_address_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigTcpProfileL7ProxyConnectionPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigTcpProfileL7ProxyConnectionPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
