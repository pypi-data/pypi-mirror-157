# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_service_type import ConfigServiceType  # noqa: F401,E501
from adapi_sdk.models.config_virtual_service_connection_limits import ConfigVirtualServiceConnectionLimits  # noqa: F401,E501


class ConfigVirtualService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'service': 'ConfigServiceType',
        'vips': 'list[str]',
        'inbound_links': 'list[str]',
        'vports': 'list[str]',
        'pool': 'str',
        'pre_rules': 'list[str]',
        'snat': 'str',
        'snat_pool': 'str',
        'source_port': 'str',
        'dnat': 'str',
        'dnat_translated_address': 'str',
        'dnat_translated_port': 'int',
        'dns_profile': 'str',
        'tcp_profile': 'str',
        'qos_profile': 'str',
        'connection_limits': 'list[ConfigVirtualServiceConnectionLimits]',
        'connection_limits_type': 'str',
        'ipros': 'list[str]',
        'notify_status_to_vip': 'str',
        'force_keep_alive': 'str',
        'location_rewrite': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'service': 'service',
        'vips': 'vips',
        'inbound_links': 'inbound_links',
        'vports': 'vports',
        'pool': 'pool',
        'pre_rules': 'pre_rules',
        'snat': 'snat',
        'snat_pool': 'snat_pool',
        'source_port': 'source_port',
        'dnat': 'dnat',
        'dnat_translated_address': 'dnat_translated_address',
        'dnat_translated_port': 'dnat_translated_port',
        'dns_profile': 'dns_profile',
        'tcp_profile': 'tcp_profile',
        'qos_profile': 'qos_profile',
        'connection_limits': 'connection_limits',
        'connection_limits_type': 'connection_limits_type',
        'ipros': 'ipros',
        'notify_status_to_vip': 'notify_status_to_vip',
        'force_keep_alive': 'force_keep_alive',
        'location_rewrite': 'location_rewrite'
    }

    def __init__(self, name=None, description=None, state='ENABLE', service=None, vips=None, inbound_links=None, vports=None, pool=None, pre_rules=None, snat='AUTO-MAP', snat_pool=None, source_port='PRESERVE', dnat='ENABLE', dnat_translated_address=None, dnat_translated_port=None, dns_profile='NONE', tcp_profile='NONE', qos_profile='NONE', connection_limits=None, connection_limits_type='SINGLE-SOURCE-IP', ipros=None, notify_status_to_vip='ENABLE', force_keep_alive='ENABLE', location_rewrite='ENABLE'):  # noqa: E501
        """ConfigVirtualService - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._service = None
        self._vips = None
        self._inbound_links = None
        self._vports = None
        self._pool = None
        self._pre_rules = None
        self._snat = None
        self._snat_pool = None
        self._source_port = None
        self._dnat = None
        self._dnat_translated_address = None
        self._dnat_translated_port = None
        self._dns_profile = None
        self._tcp_profile = None
        self._qos_profile = None
        self._connection_limits = None
        self._connection_limits_type = None
        self._ipros = None
        self._notify_status_to_vip = None
        self._force_keep_alive = None
        self._location_rewrite = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        self.service = service
        self.vips = vips
        if inbound_links is not None:
            self.inbound_links = inbound_links
        self.vports = vports
        self.pool = pool
        if pre_rules is not None:
            self.pre_rules = pre_rules
        if snat is not None:
            self.snat = snat
        if snat_pool is not None:
            self.snat_pool = snat_pool
        if source_port is not None:
            self.source_port = source_port
        if dnat is not None:
            self.dnat = dnat
        if dnat_translated_address is not None:
            self.dnat_translated_address = dnat_translated_address
        if dnat_translated_port is not None:
            self.dnat_translated_port = dnat_translated_port
        if dns_profile is not None:
            self.dns_profile = dns_profile
        if tcp_profile is not None:
            self.tcp_profile = tcp_profile
        if qos_profile is not None:
            self.qos_profile = qos_profile
        if connection_limits is not None:
            self.connection_limits = connection_limits
        if connection_limits_type is not None:
            self.connection_limits_type = connection_limits_type
        if ipros is not None:
            self.ipros = ipros
        if notify_status_to_vip is not None:
            self.notify_status_to_vip = notify_status_to_vip
        if force_keep_alive is not None:
            self.force_keep_alive = force_keep_alive
        if location_rewrite is not None:
            self.location_rewrite = location_rewrite

    @property
    def name(self):
        """Gets the name of this ConfigVirtualService.  # noqa: E501

        指定DNS服务的名称, 在DNS服务配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigVirtualService.

        指定DNS服务的名称, 在DNS服务配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigVirtualService.  # noqa: E501

        可以对该DNS服务进行额外的信息补充。  # noqa: E501

        :return: The description of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVirtualService.

        可以对该DNS服务进行额外的信息补充。  # noqa: E501

        :param description: The description of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigVirtualService.  # noqa: E501

        DNS服务的配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The state of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigVirtualService.

        DNS服务的配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param state: The state of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def service(self):
        """Gets the service of this ConfigVirtualService.  # noqa: E501

        DNS服务类型  # noqa: E501

        :return: The service of this ConfigVirtualService.  # noqa: E501
        :rtype: ConfigServiceType
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigVirtualService.

        DNS服务类型  # noqa: E501

        :param service: The service of this ConfigVirtualService.  # noqa: E501
        :type: ConfigServiceType
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def vips(self):
        """Gets the vips of this ConfigVirtualService.  # noqa: E501

        DNS服务VIP地址  # noqa: E501

        :return: The vips of this ConfigVirtualService.  # noqa: E501
        :rtype: list[str]
        """
        return self._vips

    @vips.setter
    def vips(self, vips):
        """Sets the vips of this ConfigVirtualService.

        DNS服务VIP地址  # noqa: E501

        :param vips: The vips of this ConfigVirtualService.  # noqa: E501
        :type: list[str]
        """
        if vips is None:
            raise ValueError("Invalid value for `vips`, must not be `None`")  # noqa: E501

        self._vips = vips

    @property
    def inbound_links(self):
        """Gets the inbound_links of this ConfigVirtualService.  # noqa: E501

        指定入口链路,待选框内容还包括网络部署-网络接口-链路IP下的内容  # noqa: E501

        :return: The inbound_links of this ConfigVirtualService.  # noqa: E501
        :rtype: list[str]
        """
        return self._inbound_links

    @inbound_links.setter
    def inbound_links(self, inbound_links):
        """Sets the inbound_links of this ConfigVirtualService.

        指定入口链路,待选框内容还包括网络部署-网络接口-链路IP下的内容  # noqa: E501

        :param inbound_links: The inbound_links of this ConfigVirtualService.  # noqa: E501
        :type: list[str]
        """

        self._inbound_links = inbound_links

    @property
    def vports(self):
        """Gets the vports of this ConfigVirtualService.  # noqa: E501

        DNS服务端口  # noqa: E501

        :return: The vports of this ConfigVirtualService.  # noqa: E501
        :rtype: list[str]
        """
        return self._vports

    @vports.setter
    def vports(self, vports):
        """Sets the vports of this ConfigVirtualService.

        DNS服务端口  # noqa: E501

        :param vports: The vports of this ConfigVirtualService.  # noqa: E501
        :type: list[str]
        """
        if vports is None:
            raise ValueError("Invalid value for `vports`, must not be `None`")  # noqa: E501

        self._vports = vports

    @property
    def pool(self):
        """Gets the pool of this ConfigVirtualService.  # noqa: E501

        指定DNS服务调度的默认节点池。  # noqa: E501

        :return: The pool of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this ConfigVirtualService.

        指定DNS服务调度的默认节点池。  # noqa: E501

        :param pool: The pool of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        if pool is None:
            raise ValueError("Invalid value for `pool`, must not be `None`")  # noqa: E501

        self._pool = pool

    @property
    def pre_rules(self):
        """Gets the pre_rules of this ConfigVirtualService.  # noqa: E501

        指定DNS服务的前置调度策略规则。该参数为一个对象列表, 可以通过add或者delete指令添加前置策略规则。  # noqa: E501

        :return: The pre_rules of this ConfigVirtualService.  # noqa: E501
        :rtype: list[str]
        """
        return self._pre_rules

    @pre_rules.setter
    def pre_rules(self, pre_rules):
        """Sets the pre_rules of this ConfigVirtualService.

        指定DNS服务的前置调度策略规则。该参数为一个对象列表, 可以通过add或者delete指令添加前置策略规则。  # noqa: E501

        :param pre_rules: The pre_rules of this ConfigVirtualService.  # noqa: E501
        :type: list[str]
        """

        self._pre_rules = pre_rules

    @property
    def snat(self):
        """Gets the snat of this ConfigVirtualService.  # noqa: E501

        用来指定DNS服务是否做SNAT地址转换, 默认auto-map;disable表示禁用;auto-map表示使用自动SNAT,系统会自动选择源地址;snat-pool: 表示使用指定的地址作为转换后的源地址。  # noqa: E501

        :return: The snat of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._snat

    @snat.setter
    def snat(self, snat):
        """Sets the snat of this ConfigVirtualService.

        用来指定DNS服务是否做SNAT地址转换, 默认auto-map;disable表示禁用;auto-map表示使用自动SNAT,系统会自动选择源地址;snat-pool: 表示使用指定的地址作为转换后的源地址。  # noqa: E501

        :param snat: The snat of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO-MAP", "SNAT-POOL", "DISABLE"]  # noqa: E501
        if snat not in allowed_values:
            raise ValueError(
                "Invalid value for `snat` ({0}), must be one of {1}"  # noqa: E501
                .format(snat, allowed_values)
            )

        self._snat = snat

    @property
    def snat_pool(self):
        """Gets the snat_pool of this ConfigVirtualService.  # noqa: E501

        指定snat转后的地址集合,当参数snat指定为snat-pool时, 该参数必选。  # noqa: E501

        :return: The snat_pool of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._snat_pool

    @snat_pool.setter
    def snat_pool(self, snat_pool):
        """Sets the snat_pool of this ConfigVirtualService.

        指定snat转后的地址集合,当参数snat指定为snat-pool时, 该参数必选。  # noqa: E501

        :param snat_pool: The snat_pool of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._snat_pool = snat_pool

    @property
    def source_port(self):
        """Gets the source_port of this ConfigVirtualService.  # noqa: E501

        指定源端口转换策略;preserve表示尝试保持源端口,preserve-strict表示严格保持源端口,change表示改变源端口,默认为change  # noqa: E501

        :return: The source_port of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this ConfigVirtualService.

        指定源端口转换策略;preserve表示尝试保持源端口,preserve-strict表示严格保持源端口,change表示改变源端口,默认为change  # noqa: E501

        :param source_port: The source_port of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRESERVE", "PRESERVE-STRICT", "CHANGE"]  # noqa: E501
        if source_port not in allowed_values:
            raise ValueError(
                "Invalid value for `source_port` ({0}), must be one of {1}"  # noqa: E501
                .format(source_port, allowed_values)
            )

        self._source_port = source_port

    @property
    def dnat(self):
        """Gets the dnat of this ConfigVirtualService.  # noqa: E501

        用来指定DNS服务是否做目的地址和端口转换, 默认启用;disable表示禁用;enable表示启用;specify表示指定IP端口。  # noqa: E501

        :return: The dnat of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._dnat

    @dnat.setter
    def dnat(self, dnat):
        """Sets the dnat of this ConfigVirtualService.

        用来指定DNS服务是否做目的地址和端口转换, 默认启用;disable表示禁用;enable表示启用;specify表示指定IP端口。  # noqa: E501

        :param dnat: The dnat of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE", "SPECIFY"]  # noqa: E501
        if dnat not in allowed_values:
            raise ValueError(
                "Invalid value for `dnat` ({0}), must be one of {1}"  # noqa: E501
                .format(dnat, allowed_values)
            )

        self._dnat = dnat

    @property
    def dnat_translated_address(self):
        """Gets the dnat_translated_address of this ConfigVirtualService.  # noqa: E501

        指定的DNAT地址  # noqa: E501

        :return: The dnat_translated_address of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._dnat_translated_address

    @dnat_translated_address.setter
    def dnat_translated_address(self, dnat_translated_address):
        """Sets the dnat_translated_address of this ConfigVirtualService.

        指定的DNAT地址  # noqa: E501

        :param dnat_translated_address: The dnat_translated_address of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._dnat_translated_address = dnat_translated_address

    @property
    def dnat_translated_port(self):
        """Gets the dnat_translated_port of this ConfigVirtualService.  # noqa: E501

        指定的DNAT端口  # noqa: E501

        :return: The dnat_translated_port of this ConfigVirtualService.  # noqa: E501
        :rtype: int
        """
        return self._dnat_translated_port

    @dnat_translated_port.setter
    def dnat_translated_port(self, dnat_translated_port):
        """Sets the dnat_translated_port of this ConfigVirtualService.

        指定的DNAT端口  # noqa: E501

        :param dnat_translated_port: The dnat_translated_port of this ConfigVirtualService.  # noqa: E501
        :type: int
        """
        if dnat_translated_port is not None and dnat_translated_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `dnat_translated_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if dnat_translated_port is not None and dnat_translated_port < 0:  # noqa: E501
            raise ValueError("Invalid value for `dnat_translated_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dnat_translated_port = dnat_translated_port

    @property
    def dns_profile(self):
        """Gets the dns_profile of this ConfigVirtualService.  # noqa: E501

        针对类型为DNS-UDP或DNS-TCP的DNS服务指定DNS策略，默认为 none,表示使用默认参数。  # noqa: E501

        :return: The dns_profile of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._dns_profile

    @dns_profile.setter
    def dns_profile(self, dns_profile):
        """Sets the dns_profile of this ConfigVirtualService.

        针对类型为DNS-UDP或DNS-TCP的DNS服务指定DNS策略，默认为 none,表示使用默认参数。  # noqa: E501

        :param dns_profile: The dns_profile of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._dns_profile = dns_profile

    @property
    def tcp_profile(self):
        """Gets the tcp_profile of this ConfigVirtualService.  # noqa: E501

        仅针对类型为DNS-TCP的DNS服务指定TCP策略,默认为 none,表示使用默认参数。  # noqa: E501

        :return: The tcp_profile of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._tcp_profile

    @tcp_profile.setter
    def tcp_profile(self, tcp_profile):
        """Sets the tcp_profile of this ConfigVirtualService.

        仅针对类型为DNS-TCP的DNS服务指定TCP策略,默认为 none,表示使用默认参数。  # noqa: E501

        :param tcp_profile: The tcp_profile of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._tcp_profile = tcp_profile

    @property
    def qos_profile(self):
        """Gets the qos_profile of this ConfigVirtualService.  # noqa: E501

        用来指定DNS服务的流量控制策略,默认为none,表示不启用。  # noqa: E501

        :return: The qos_profile of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._qos_profile

    @qos_profile.setter
    def qos_profile(self, qos_profile):
        """Sets the qos_profile of this ConfigVirtualService.

        用来指定DNS服务的流量控制策略,默认为none,表示不启用。  # noqa: E501

        :param qos_profile: The qos_profile of this ConfigVirtualService.  # noqa: E501
        :type: str
        """

        self._qos_profile = qos_profile

    @property
    def connection_limits(self):
        """Gets the connection_limits of this ConfigVirtualService.  # noqa: E501

        用来指定DNS服务的连接数控制策略;该参数为一个对象列表,可以通过add或者delete指令添加并发连接数控制策略。  # noqa: E501

        :return: The connection_limits of this ConfigVirtualService.  # noqa: E501
        :rtype: list[ConfigVirtualServiceConnectionLimits]
        """
        return self._connection_limits

    @connection_limits.setter
    def connection_limits(self, connection_limits):
        """Sets the connection_limits of this ConfigVirtualService.

        用来指定DNS服务的连接数控制策略;该参数为一个对象列表,可以通过add或者delete指令添加并发连接数控制策略。  # noqa: E501

        :param connection_limits: The connection_limits of this ConfigVirtualService.  # noqa: E501
        :type: list[ConfigVirtualServiceConnectionLimits]
        """

        self._connection_limits = connection_limits

    @property
    def connection_limits_type(self):
        """Gets the connection_limits_type of this ConfigVirtualService.  # noqa: E501

        连接数限制类型  # noqa: E501

        :return: The connection_limits_type of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._connection_limits_type

    @connection_limits_type.setter
    def connection_limits_type(self, connection_limits_type):
        """Sets the connection_limits_type of this ConfigVirtualService.

        连接数限制类型  # noqa: E501

        :param connection_limits_type: The connection_limits_type of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL-SOURCE-IP", "SINGLE-SOURCE-IP"]  # noqa: E501
        if connection_limits_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_limits_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_limits_type, allowed_values)
            )

        self._connection_limits_type = connection_limits_type

    @property
    def ipros(self):
        """Gets the ipros of this ConfigVirtualService.  # noqa: E501

        DNS服务引用的ipro  # noqa: E501

        :return: The ipros of this ConfigVirtualService.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipros

    @ipros.setter
    def ipros(self, ipros):
        """Sets the ipros of this ConfigVirtualService.

        DNS服务引用的ipro  # noqa: E501

        :param ipros: The ipros of this ConfigVirtualService.  # noqa: E501
        :type: list[str]
        """

        self._ipros = ipros

    @property
    def notify_status_to_vip(self):
        """Gets the notify_status_to_vip of this ConfigVirtualService.  # noqa: E501

        DNS服务状态是否通知虚拟IP  # noqa: E501

        :return: The notify_status_to_vip of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._notify_status_to_vip

    @notify_status_to_vip.setter
    def notify_status_to_vip(self, notify_status_to_vip):
        """Sets the notify_status_to_vip of this ConfigVirtualService.

        DNS服务状态是否通知虚拟IP  # noqa: E501

        :param notify_status_to_vip: The notify_status_to_vip of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if notify_status_to_vip not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_status_to_vip` ({0}), must be one of {1}"  # noqa: E501
                .format(notify_status_to_vip, allowed_values)
            )

        self._notify_status_to_vip = notify_status_to_vip

    @property
    def force_keep_alive(self):
        """Gets the force_keep_alive of this ConfigVirtualService.  # noqa: E501

        强制客户端保持长连接,默认为enable。  # noqa: E501

        :return: The force_keep_alive of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._force_keep_alive

    @force_keep_alive.setter
    def force_keep_alive(self, force_keep_alive):
        """Sets the force_keep_alive of this ConfigVirtualService.

        强制客户端保持长连接,默认为enable。  # noqa: E501

        :param force_keep_alive: The force_keep_alive of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if force_keep_alive not in allowed_values:
            raise ValueError(
                "Invalid value for `force_keep_alive` ({0}), must be one of {1}"  # noqa: E501
                .format(force_keep_alive, allowed_values)
            )

        self._force_keep_alive = force_keep_alive

    @property
    def location_rewrite(self):
        """Gets the location_rewrite of this ConfigVirtualService.  # noqa: E501

        Location重写  # noqa: E501

        :return: The location_rewrite of this ConfigVirtualService.  # noqa: E501
        :rtype: str
        """
        return self._location_rewrite

    @location_rewrite.setter
    def location_rewrite(self, location_rewrite):
        """Sets the location_rewrite of this ConfigVirtualService.

        Location重写  # noqa: E501

        :param location_rewrite: The location_rewrite of this ConfigVirtualService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if location_rewrite not in allowed_values:
            raise ValueError(
                "Invalid value for `location_rewrite` ({0}), must be one of {1}"  # noqa: E501
                .format(location_rewrite, allowed_values)
            )

        self._location_rewrite = location_rewrite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVirtualService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVirtualService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
