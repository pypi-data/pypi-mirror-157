# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugServiceLogRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_log_id': 'int',
        '_date': 'str',
        'time': 'str',
        'level': 'str',
        'module': 'str',
        'detail': 'str'
    }

    attribute_map = {
        'service_log_id': 'service_log_id',
        '_date': 'date',
        'time': 'time',
        'level': 'level',
        'module': 'module',
        'detail': 'detail'
    }

    def __init__(self, service_log_id=None, _date=None, time=None, level=None, module=None, detail=None):  # noqa: E501
        """DebugServiceLogRow - a model defined in Swagger"""  # noqa: E501

        self._service_log_id = None
        self.__date = None
        self._time = None
        self._level = None
        self._module = None
        self._detail = None
        self.discriminator = None

        if service_log_id is not None:
            self.service_log_id = service_log_id
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if level is not None:
            self.level = level
        if module is not None:
            self.module = module
        if detail is not None:
            self.detail = detail

    @property
    def service_log_id(self):
        """Gets the service_log_id of this DebugServiceLogRow.  # noqa: E501

        服务日志ID  # noqa: E501

        :return: The service_log_id of this DebugServiceLogRow.  # noqa: E501
        :rtype: int
        """
        return self._service_log_id

    @service_log_id.setter
    def service_log_id(self, service_log_id):
        """Sets the service_log_id of this DebugServiceLogRow.

        服务日志ID  # noqa: E501

        :param service_log_id: The service_log_id of this DebugServiceLogRow.  # noqa: E501
        :type: int
        """

        self._service_log_id = service_log_id

    @property
    def _date(self):
        """Gets the _date of this DebugServiceLogRow.  # noqa: E501

        打此条日志的日期  # noqa: E501

        :return: The _date of this DebugServiceLogRow.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DebugServiceLogRow.

        打此条日志的日期  # noqa: E501

        :param _date: The _date of this DebugServiceLogRow.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this DebugServiceLogRow.  # noqa: E501

        打此条日志的时间  # noqa: E501

        :return: The time of this DebugServiceLogRow.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DebugServiceLogRow.

        打此条日志的时间  # noqa: E501

        :param time: The time of this DebugServiceLogRow.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def level(self):
        """Gets the level of this DebugServiceLogRow.  # noqa: E501

        日志级别  # noqa: E501

        :return: The level of this DebugServiceLogRow.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DebugServiceLogRow.

        日志级别  # noqa: E501

        :param level: The level of this DebugServiceLogRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "ALERT", "ERROR", "DEBUG"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def module(self):
        """Gets the module of this DebugServiceLogRow.  # noqa: E501

        日志所属模块  # noqa: E501

        :return: The module of this DebugServiceLogRow.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this DebugServiceLogRow.

        日志所属模块  # noqa: E501

        :param module: The module of this DebugServiceLogRow.  # noqa: E501
        :type: str
        """

        self._module = module

    @property
    def detail(self):
        """Gets the detail of this DebugServiceLogRow.  # noqa: E501

        日志详情  # noqa: E501

        :return: The detail of this DebugServiceLogRow.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DebugServiceLogRow.

        日志详情  # noqa: E501

        :param detail: The detail of this DebugServiceLogRow.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugServiceLogRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugServiceLogRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
