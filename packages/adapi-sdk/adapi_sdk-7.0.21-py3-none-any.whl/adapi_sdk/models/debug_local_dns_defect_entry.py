# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugLocalDnsDefectEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'source_address': 'str',
        'zone_attribute': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'source_address': 'source_address',
        'zone_attribute': 'zone_attribute'
    }

    def __init__(self, timestamp=None, source_address=None, zone_attribute=None):  # noqa: E501
        """DebugLocalDnsDefectEntry - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._source_address = None
        self._zone_attribute = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if source_address is not None:
            self.source_address = source_address
        if zone_attribute is not None:
            self.zone_attribute = zone_attribute

    @property
    def timestamp(self):
        """Gets the timestamp of this DebugLocalDnsDefectEntry.  # noqa: E501

        LDBS缺失记录时间  # noqa: E501

        :return: The timestamp of this DebugLocalDnsDefectEntry.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DebugLocalDnsDefectEntry.

        LDBS缺失记录时间  # noqa: E501

        :param timestamp: The timestamp of this DebugLocalDnsDefectEntry.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def source_address(self):
        """Gets the source_address of this DebugLocalDnsDefectEntry.  # noqa: E501

        LDBS缺失记录源ip地址  # noqa: E501

        :return: The source_address of this DebugLocalDnsDefectEntry.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this DebugLocalDnsDefectEntry.

        LDBS缺失记录源ip地址  # noqa: E501

        :param source_address: The source_address of this DebugLocalDnsDefectEntry.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def zone_attribute(self):
        """Gets the zone_attribute of this DebugLocalDnsDefectEntry.  # noqa: E501

        LDBS缺失记录区域属性  # noqa: E501

        :return: The zone_attribute of this DebugLocalDnsDefectEntry.  # noqa: E501
        :rtype: str
        """
        return self._zone_attribute

    @zone_attribute.setter
    def zone_attribute(self, zone_attribute):
        """Sets the zone_attribute of this DebugLocalDnsDefectEntry.

        LDBS缺失记录区域属性  # noqa: E501

        :param zone_attribute: The zone_attribute of this DebugLocalDnsDefectEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["KNOWN", "UNKNOWN"]  # noqa: E501
        if zone_attribute not in allowed_values:
            raise ValueError(
                "Invalid value for `zone_attribute` ({0}), must be one of {1}"  # noqa: E501
                .format(zone_attribute, allowed_values)
            )

        self._zone_attribute = zone_attribute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugLocalDnsDefectEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugLocalDnsDefectEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
