# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugSmtpVerifyAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'username': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'pk_password': 'str'
    }

    attribute_map = {
        'state': 'state',
        'username': 'username',
        'password': 'password',
        'encrypted_password': 'encrypted_password',
        'pk_password': 'pk_password'
    }

    def __init__(self, state='DISABLE', username=None, password=None, encrypted_password=None, pk_password=None):  # noqa: E501
        """DebugSmtpVerifyAuthentication - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._username = None
        self._password = None
        self._encrypted_password = None
        self._pk_password = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if pk_password is not None:
            self.pk_password = pk_password

    @property
    def state(self):
        """Gets the state of this DebugSmtpVerifyAuthentication.  # noqa: E501

        启禁用  # noqa: E501

        :return: The state of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DebugSmtpVerifyAuthentication.

        启禁用  # noqa: E501

        :param state: The state of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def username(self):
        """Gets the username of this DebugSmtpVerifyAuthentication.  # noqa: E501

        用户名  # noqa: E501

        :return: The username of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DebugSmtpVerifyAuthentication.

        用户名  # noqa: E501

        :param username: The username of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 63:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `63`")  # noqa: E501
        if username is not None and len(username) < 0:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `0`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this DebugSmtpVerifyAuthentication.  # noqa: E501

        密码，可选参数，但与pk_password与encrypted_password三者必有其一  # noqa: E501

        :return: The password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DebugSmtpVerifyAuthentication.

        密码，可选参数，但与pk_password与encrypted_password三者必有其一  # noqa: E501

        :param password: The password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 49:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `49`")  # noqa: E501
        if password is not None and len(password) < 0:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this DebugSmtpVerifyAuthentication.  # noqa: E501

        密码密文，可选参数，但与pk_password与password三者必有其一  # noqa: E501

        :return: The encrypted_password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this DebugSmtpVerifyAuthentication.

        密码密文，可选参数，但与pk_password与password三者必有其一  # noqa: E501

        :param encrypted_password: The encrypted_password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def pk_password(self):
        """Gets the pk_password of this DebugSmtpVerifyAuthentication.  # noqa: E501

        密码密文，可选参数，但与password与encrypted_password三者必有其一  # noqa: E501

        :return: The pk_password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this DebugSmtpVerifyAuthentication.

        密码密文，可选参数，但与password与encrypted_password三者必有其一  # noqa: E501

        :param pk_password: The pk_password of this DebugSmtpVerifyAuthentication.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugSmtpVerifyAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugSmtpVerifyAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
