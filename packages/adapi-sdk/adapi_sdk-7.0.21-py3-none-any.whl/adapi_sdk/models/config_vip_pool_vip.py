# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_vip_pool_vip_related_virtual_service import ConfigVipPoolVipRelatedVirtualService  # noqa: F401,E501


class ConfigVipPoolVip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'static_ip': 'str',
        'vs_vip': 'str',
        'link_pppoe': 'str',
        'port': 'int',
        'priority': 'int',
        'protocol': 'str',
        'monitor_inherit': 'str',
        'service_monitors': 'list[str]',
        'available_requirement': 'int',
        'related_virtual_service': 'list[ConfigVipPoolVipRelatedVirtualService]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'static_ip': 'static_ip',
        'vs_vip': 'vs_vip',
        'link_pppoe': 'link_pppoe',
        'port': 'port',
        'priority': 'priority',
        'protocol': 'protocol',
        'monitor_inherit': 'monitor_inherit',
        'service_monitors': 'service_monitors',
        'available_requirement': 'available_requirement',
        'related_virtual_service': 'related_virtual_service'
    }

    def __init__(self, name=None, description=None, type='STATIC-IP', static_ip=None, vs_vip=None, link_pppoe=None, port=None, priority=None, protocol='TCP', monitor_inherit='ENABLE', service_monitors=None, available_requirement=None, related_virtual_service=None):  # noqa: E501
        """ConfigVipPoolVip - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._static_ip = None
        self._vs_vip = None
        self._link_pppoe = None
        self._port = None
        self._priority = None
        self._protocol = None
        self._monitor_inherit = None
        self._service_monitors = None
        self._available_requirement = None
        self._related_virtual_service = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if static_ip is not None:
            self.static_ip = static_ip
        if vs_vip is not None:
            self.vs_vip = vs_vip
        if link_pppoe is not None:
            self.link_pppoe = link_pppoe
        if port is not None:
            self.port = port
        if priority is not None:
            self.priority = priority
        if protocol is not None:
            self.protocol = protocol
        if monitor_inherit is not None:
            self.monitor_inherit = monitor_inherit
        if service_monitors is not None:
            self.service_monitors = service_monitors
        if available_requirement is not None:
            self.available_requirement = available_requirement
        if related_virtual_service is not None:
            self.related_virtual_service = related_virtual_service

    @property
    def name(self):
        """Gets the name of this ConfigVipPoolVip.  # noqa: E501

        虚拟IP名称  # noqa: E501

        :return: The name of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigVipPoolVip.

        虚拟IP名称  # noqa: E501

        :param name: The name of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigVipPoolVip.  # noqa: E501

        虚拟IP描述信息  # noqa: E501

        :return: The description of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVipPoolVip.

        虚拟IP描述信息  # noqa: E501

        :param description: The description of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigVipPoolVip.  # noqa: E501

        虚拟IP类型，默认为STATIC-IP  # noqa: E501

        :return: The type of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigVipPoolVip.

        虚拟IP类型，默认为STATIC-IP  # noqa: E501

        :param type: The type of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATIC-IP", "VS-VIP", "LINK-PPPOE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def static_ip(self):
        """Gets the static_ip of this ConfigVipPoolVip.  # noqa: E501

        静态IP  # noqa: E501

        :return: The static_ip of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._static_ip

    @static_ip.setter
    def static_ip(self, static_ip):
        """Sets the static_ip of this ConfigVipPoolVip.

        静态IP  # noqa: E501

        :param static_ip: The static_ip of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """

        self._static_ip = static_ip

    @property
    def vs_vip(self):
        """Gets the vs_vip of this ConfigVipPoolVip.  # noqa: E501

        虚拟IP，来自虚拟服务上的IP  # noqa: E501

        :return: The vs_vip of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._vs_vip

    @vs_vip.setter
    def vs_vip(self, vs_vip):
        """Sets the vs_vip of this ConfigVipPoolVip.

        虚拟IP，来自虚拟服务上的IP  # noqa: E501

        :param vs_vip: The vs_vip of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """

        self._vs_vip = vs_vip

    @property
    def link_pppoe(self):
        """Gets the link_pppoe of this ConfigVipPoolVip.  # noqa: E501

        Format: {link-wan}  # noqa: E501

        :return: The link_pppoe of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._link_pppoe

    @link_pppoe.setter
    def link_pppoe(self, link_pppoe):
        """Sets the link_pppoe of this ConfigVipPoolVip.

        Format: {link-wan}  # noqa: E501

        :param link_pppoe: The link_pppoe of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """

        self._link_pppoe = link_pppoe

    @property
    def port(self):
        """Gets the port of this ConfigVipPoolVip.  # noqa: E501

        端口  # noqa: E501

        :return: The port of this ConfigVipPoolVip.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigVipPoolVip.

        端口  # noqa: E501

        :param port: The port of this ConfigVipPoolVip.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def priority(self):
        """Gets the priority of this ConfigVipPoolVip.  # noqa: E501

        优先级，默认10  # noqa: E501

        :return: The priority of this ConfigVipPoolVip.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigVipPoolVip.

        优先级，默认10  # noqa: E501

        :param priority: The priority of this ConfigVipPoolVip.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this ConfigVipPoolVip.  # noqa: E501

        协议，默认TCP  # noqa: E501

        :return: The protocol of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConfigVipPoolVip.

        协议，默认TCP  # noqa: E501

        :param protocol: The protocol of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def monitor_inherit(self):
        """Gets the monitor_inherit of this ConfigVipPoolVip.  # noqa: E501

        监视器继承，默认ENABLE  # noqa: E501

        :return: The monitor_inherit of this ConfigVipPoolVip.  # noqa: E501
        :rtype: str
        """
        return self._monitor_inherit

    @monitor_inherit.setter
    def monitor_inherit(self, monitor_inherit):
        """Sets the monitor_inherit of this ConfigVipPoolVip.

        监视器继承，默认ENABLE  # noqa: E501

        :param monitor_inherit: The monitor_inherit of this ConfigVipPoolVip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if monitor_inherit not in allowed_values:
            raise ValueError(
                "Invalid value for `monitor_inherit` ({0}), must be one of {1}"  # noqa: E501
                .format(monitor_inherit, allowed_values)
            )

        self._monitor_inherit = monitor_inherit

    @property
    def service_monitors(self):
        """Gets the service_monitors of this ConfigVipPoolVip.  # noqa: E501

        监视器列表，监视器数量为0-5  # noqa: E501

        :return: The service_monitors of this ConfigVipPoolVip.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_monitors

    @service_monitors.setter
    def service_monitors(self, service_monitors):
        """Sets the service_monitors of this ConfigVipPoolVip.

        监视器列表，监视器数量为0-5  # noqa: E501

        :param service_monitors: The service_monitors of this ConfigVipPoolVip.  # noqa: E501
        :type: list[str]
        """

        self._service_monitors = service_monitors

    @property
    def available_requirement(self):
        """Gets the available_requirement of this ConfigVipPoolVip.  # noqa: E501

        虚拟IP有效条件，0表示所有检查方法通过时虚拟IP在线，默认为0  # noqa: E501

        :return: The available_requirement of this ConfigVipPoolVip.  # noqa: E501
        :rtype: int
        """
        return self._available_requirement

    @available_requirement.setter
    def available_requirement(self, available_requirement):
        """Sets the available_requirement of this ConfigVipPoolVip.

        虚拟IP有效条件，0表示所有检查方法通过时虚拟IP在线，默认为0  # noqa: E501

        :param available_requirement: The available_requirement of this ConfigVipPoolVip.  # noqa: E501
        :type: int
        """
        if available_requirement is not None and available_requirement > 5:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value less than or equal to `5`")  # noqa: E501
        if available_requirement is not None and available_requirement < 0:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value greater than or equal to `0`")  # noqa: E501

        self._available_requirement = available_requirement

    @property
    def related_virtual_service(self):
        """Gets the related_virtual_service of this ConfigVipPoolVip.  # noqa: E501

        关联虚拟服务列表  # noqa: E501

        :return: The related_virtual_service of this ConfigVipPoolVip.  # noqa: E501
        :rtype: list[ConfigVipPoolVipRelatedVirtualService]
        """
        return self._related_virtual_service

    @related_virtual_service.setter
    def related_virtual_service(self, related_virtual_service):
        """Sets the related_virtual_service of this ConfigVipPoolVip.

        关联虚拟服务列表  # noqa: E501

        :param related_virtual_service: The related_virtual_service of this ConfigVipPoolVip.  # noqa: E501
        :type: list[ConfigVipPoolVipRelatedVirtualService]
        """

        self._related_virtual_service = related_virtual_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVipPoolVip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVipPoolVip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
