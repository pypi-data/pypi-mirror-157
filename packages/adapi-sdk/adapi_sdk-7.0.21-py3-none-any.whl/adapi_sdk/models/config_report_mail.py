# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigReportMail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smtp': 'str',
        'title': 'str',
        'receipt_to': 'str',
        'mail_from': 'str'
    }

    attribute_map = {
        'smtp': 'smtp',
        'title': 'title',
        'receipt_to': 'receipt_to',
        'mail_from': 'mail_from'
    }

    def __init__(self, smtp='NONE', title=None, receipt_to=None, mail_from=None):  # noqa: E501
        """ConfigReportMail - a model defined in Swagger"""  # noqa: E501

        self._smtp = None
        self._title = None
        self._receipt_to = None
        self._mail_from = None
        self.discriminator = None

        if smtp is not None:
            self.smtp = smtp
        if title is not None:
            self.title = title
        if receipt_to is not None:
            self.receipt_to = receipt_to
        if mail_from is not None:
            self.mail_from = mail_from

    @property
    def smtp(self):
        """Gets the smtp of this ConfigReportMail.  # noqa: E501

        可选参数；指定stmp服务器，默认值为none  # noqa: E501

        :return: The smtp of this ConfigReportMail.  # noqa: E501
        :rtype: str
        """
        return self._smtp

    @smtp.setter
    def smtp(self, smtp):
        """Sets the smtp of this ConfigReportMail.

        可选参数；指定stmp服务器，默认值为none  # noqa: E501

        :param smtp: The smtp of this ConfigReportMail.  # noqa: E501
        :type: str
        """

        self._smtp = smtp

    @property
    def title(self):
        """Gets the title of this ConfigReportMail.  # noqa: E501

        可选参数；指定邮件标题  # noqa: E501

        :return: The title of this ConfigReportMail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConfigReportMail.

        可选参数；指定邮件标题  # noqa: E501

        :param title: The title of this ConfigReportMail.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")  # noqa: E501

        self._title = title

    @property
    def receipt_to(self):
        """Gets the receipt_to of this ConfigReportMail.  # noqa: E501

        可选参数；指定邮件的发送方  # noqa: E501

        :return: The receipt_to of this ConfigReportMail.  # noqa: E501
        :rtype: str
        """
        return self._receipt_to

    @receipt_to.setter
    def receipt_to(self, receipt_to):
        """Sets the receipt_to of this ConfigReportMail.

        可选参数；指定邮件的发送方  # noqa: E501

        :param receipt_to: The receipt_to of this ConfigReportMail.  # noqa: E501
        :type: str
        """
        if receipt_to is not None and len(receipt_to) > 255:
            raise ValueError("Invalid value for `receipt_to`, length must be less than or equal to `255`")  # noqa: E501

        self._receipt_to = receipt_to

    @property
    def mail_from(self):
        """Gets the mail_from of this ConfigReportMail.  # noqa: E501

        可选参数；指定邮件的接收方  # noqa: E501

        :return: The mail_from of this ConfigReportMail.  # noqa: E501
        :rtype: str
        """
        return self._mail_from

    @mail_from.setter
    def mail_from(self, mail_from):
        """Sets the mail_from of this ConfigReportMail.

        可选参数；指定邮件的接收方  # noqa: E501

        :param mail_from: The mail_from of this ConfigReportMail.  # noqa: E501
        :type: str
        """
        if mail_from is not None and len(mail_from) > 255:
            raise ValueError("Invalid value for `mail_from`, length must be less than or equal to `255`")  # noqa: E501

        self._mail_from = mail_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigReportMail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigReportMail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
