# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsIntranetRecordTxt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'type': 'str',
        'txt_record': 'str',
        'ttl': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'type': 'type',
        'txt_record': 'txt_record',
        'ttl': 'ttl'
    }

    def __init__(self, name=None, description=None, state='ENABLE', type='TXT', txt_record=None, ttl=None):  # noqa: E501
        """ConfigDnsIntranetRecordTxt - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._type = None
        self._txt_record = None
        self._ttl = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        self.txt_record = txt_record
        if ttl is not None:
            self.ttl = ttl

    @property
    def name(self):
        """Gets the name of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        必选参数；内网DNS记录——TXT记录的域名。  # noqa: E501

        :return: The name of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnsIntranetRecordTxt.

        必选参数；内网DNS记录——TXT记录的域名。  # noqa: E501

        :param name: The name of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnsIntranetRecordTxt.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        可选参数；记录的状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :return: The state of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDnsIntranetRecordTxt.

        可选参数；记录的状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :param state: The state of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        可选参数；记录的类型，TXT记录的类型为txt。  # noqa: E501

        :return: The type of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigDnsIntranetRecordTxt.

        可选参数；记录的类型，TXT记录的类型为txt。  # noqa: E501

        :param type: The type of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: str
        """
        allowed_values = ["TXT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def txt_record(self):
        """Gets the txt_record of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        必选参数；TXT值记录列表，类型为字符串，如v=‘spf1 include:spf.test.com -all’。  # noqa: E501

        :return: The txt_record of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: str
        """
        return self._txt_record

    @txt_record.setter
    def txt_record(self, txt_record):
        """Sets the txt_record of this ConfigDnsIntranetRecordTxt.

        必选参数；TXT值记录列表，类型为字符串，如v=‘spf1 include:spf.test.com -all’。  # noqa: E501

        :param txt_record: The txt_record of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: str
        """
        if txt_record is None:
            raise ValueError("Invalid value for `txt_record`, must not be `None`")  # noqa: E501
        if txt_record is not None and len(txt_record) > 255:
            raise ValueError("Invalid value for `txt_record`, length must be less than or equal to `255`")  # noqa: E501
        if txt_record is not None and len(txt_record) < 1:
            raise ValueError("Invalid value for `txt_record`, length must be greater than or equal to `1`")  # noqa: E501

        self._txt_record = txt_record

    @property
    def ttl(self):
        """Gets the ttl of this ConfigDnsIntranetRecordTxt.  # noqa: E501

        可选参数；TXT记录的TTL，类型为整数，单位是秒，默认是60。  # noqa: E501

        :return: The ttl of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigDnsIntranetRecordTxt.

        可选参数；TXT记录的TTL，类型为整数，单位是秒，默认是60。  # noqa: E501

        :param ttl: The ttl of this ConfigDnsIntranetRecordTxt.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsIntranetRecordTxt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsIntranetRecordTxt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
