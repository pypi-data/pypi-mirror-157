# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatStatisticUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BIT_PER_SECOND = "BIT-PER-SECOND"
    KILO_BIT_PER_SECOND = "KILO-BIT-PER-SECOND"
    KIBI_BIT_PER_SECOND = "KIBI-BIT-PER-SECOND"
    MEGA_BIT_PER_SECOND = "MEGA-BIT-PER-SECOND"
    MEBI_BIT_PER_SECOND = "MEBI-BIT-PER-SECOND"
    GIGA_BIT_PER_SECOND = "GIGA-BIT-PER-SECOND"
    GIBI_BIT_PER_SECOND = "GIBI-BIT-PER-SECOND"
    TRANSACTION_PER_SECOND = "TRANSACTION-PER-SECOND"
    REQUEST_PER_SECOND = "REQUEST-PER-SECOND"
    PACKET_PER_SECOND = "PACKET-PER-SECOND"
    QUERY_PER_SECOND = "QUERY-PER-SECOND"
    BYTE = "BYTE"
    KILO_BYTE = "KILO-BYTE"
    KIBI_BYTE = "KIBI-BYTE"
    MEGA_BYTE = "MEGA-BYTE"
    MEBI_BYTE = "MEBI-BYTE"
    GIGA_BYTE = "GIGA-BYTE"
    GIBI_BYTE = "GIBI-BYTE"
    TIME = "TIME"
    SECOND = "SECOND"
    MILLISECOND = "MILLISECOND"
    HEALTH_STATUS = "HEALTH-STATUS"
    PERCENT = "PERCENT"
    COUNT = "COUNT"
    DEGREE_CENTGRADE = "DEGREE-CENTGRADE"
    REVOLUTION_PER_MINUTE = "REVOLUTION-PER-MINUTE"
    _ = "<..>"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """StatStatisticUnit - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatStatisticUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatStatisticUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
