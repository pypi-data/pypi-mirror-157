# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigWebServiceLoginProtect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'statistical_time': 'int',
        'fail_times': 'int',
        'block_time': 'int'
    }

    attribute_map = {
        'state': 'state',
        'statistical_time': 'statistical_time',
        'fail_times': 'fail_times',
        'block_time': 'block_time'
    }

    def __init__(self, state='ENABLE', statistical_time=None, fail_times=None, block_time=None):  # noqa: E501
        """ConfigWebServiceLoginProtect - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._statistical_time = None
        self._fail_times = None
        self._block_time = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if statistical_time is not None:
            self.statistical_time = statistical_time
        if fail_times is not None:
            self.fail_times = fail_times
        if block_time is not None:
            self.block_time = block_time

    @property
    def state(self):
        """Gets the state of this ConfigWebServiceLoginProtect.  # noqa: E501

        启用禁用登录保护  # noqa: E501

        :return: The state of this ConfigWebServiceLoginProtect.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigWebServiceLoginProtect.

        启用禁用登录保护  # noqa: E501

        :param state: The state of this ConfigWebServiceLoginProtect.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def statistical_time(self):
        """Gets the statistical_time of this ConfigWebServiceLoginProtect.  # noqa: E501

        统计时长  # noqa: E501

        :return: The statistical_time of this ConfigWebServiceLoginProtect.  # noqa: E501
        :rtype: int
        """
        return self._statistical_time

    @statistical_time.setter
    def statistical_time(self, statistical_time):
        """Sets the statistical_time of this ConfigWebServiceLoginProtect.

        统计时长  # noqa: E501

        :param statistical_time: The statistical_time of this ConfigWebServiceLoginProtect.  # noqa: E501
        :type: int
        """
        if statistical_time is not None and statistical_time > 31536000:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value less than or equal to `31536000`")  # noqa: E501
        if statistical_time is not None and statistical_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._statistical_time = statistical_time

    @property
    def fail_times(self):
        """Gets the fail_times of this ConfigWebServiceLoginProtect.  # noqa: E501

        登录失败次数  # noqa: E501

        :return: The fail_times of this ConfigWebServiceLoginProtect.  # noqa: E501
        :rtype: int
        """
        return self._fail_times

    @fail_times.setter
    def fail_times(self, fail_times):
        """Sets the fail_times of this ConfigWebServiceLoginProtect.

        登录失败次数  # noqa: E501

        :param fail_times: The fail_times of this ConfigWebServiceLoginProtect.  # noqa: E501
        :type: int
        """
        if fail_times is not None and fail_times > 5:  # noqa: E501
            raise ValueError("Invalid value for `fail_times`, must be a value less than or equal to `5`")  # noqa: E501
        if fail_times is not None and fail_times < 1:  # noqa: E501
            raise ValueError("Invalid value for `fail_times`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fail_times = fail_times

    @property
    def block_time(self):
        """Gets the block_time of this ConfigWebServiceLoginProtect.  # noqa: E501

        禁止登录时间  # noqa: E501

        :return: The block_time of this ConfigWebServiceLoginProtect.  # noqa: E501
        :rtype: int
        """
        return self._block_time

    @block_time.setter
    def block_time(self, block_time):
        """Sets the block_time of this ConfigWebServiceLoginProtect.

        禁止登录时间  # noqa: E501

        :param block_time: The block_time of this ConfigWebServiceLoginProtect.  # noqa: E501
        :type: int
        """
        if block_time is not None and block_time > 31536000:  # noqa: E501
            raise ValueError("Invalid value for `block_time`, must be a value less than or equal to `31536000`")  # noqa: E501
        if block_time is not None and block_time < 300:  # noqa: E501
            raise ValueError("Invalid value for `block_time`, must be a value greater than or equal to `300`")  # noqa: E501

        self._block_time = block_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigWebServiceLoginProtect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigWebServiceLoginProtect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
