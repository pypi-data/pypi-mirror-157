# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_service_monitor_busy_protect import ConfigServiceMonitorBusyProtect  # noqa: F401,E501
from adapi_sdk.models.config_service_monitor_query_result import ConfigServiceMonitorQueryResult  # noqa: F401,E501
from adapi_sdk.models.config_service_monitor_radius_attributes import ConfigServiceMonitorRadiusAttributes  # noqa: F401,E501
from adapi_sdk.models.config_service_monitor_sync_status import ConfigServiceMonitorSyncStatus  # noqa: F401,E501


class ConfigServiceMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'gateway_detect': 'str',
        'send_content': 'str',
        'receive_cache_size': 'int',
        'receive_content_match': 'str',
        'case_sensitive': 'str',
        'reverse_result': 'str',
        'send_content_before_disconnect': 'str',
        'hexadecimal_mode': 'str',
        'http_request_url': 'str',
        'expect_status_code': 'str',
        'ssl_cipher': 'str',
        'client_certificate': 'str',
        'username': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'access_path': 'str',
        'ftp_mode': 'str',
        'radius_type': 'str',
        'encrypted_shared_secret': 'str',
        'radius_authenticate_method': 'str',
        'radius_attributes': 'list[ConfigServiceMonitorRadiusAttributes]',
        'outbound_link': 'str',
        'source_address': 'str',
        'dns_query_domain': 'str',
        'expect_dns_answer': 'str',
        'base_dn': 'str',
        'search_filter': 'str',
        'secure': 'str',
        'mandatory_attributes': 'str',
        'chase_referrals': 'str',
        'snmp_community': 'str',
        'statistical_time': 'int',
        'statistical_object': 'str',
        'rst_packet_threshold': 'int',
        'zero_window_percent': 'int',
        'action': 'str',
        'busy_protect': 'ConfigServiceMonitorBusyProtect',
        'http_url_samples': 'list[str]',
        'abnormal_status_codes': 'list[int]',
        'http_response_timeout': 'int',
        'http_statistical_time': 'int',
        'abnormal_http_response_threshold': 'int',
        'database': 'str',
        'mysql_detect_method': 'str',
        'query_string': 'str',
        'query_result': 'ConfigServiceMonitorQueryResult',
        'sync_status': 'ConfigServiceMonitorSyncStatus',
        'monitor_expression': 'str',
        'cli_command': 'str',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'gateway_detect': 'gateway_detect',
        'send_content': 'send_content',
        'receive_cache_size': 'receive_cache_size',
        'receive_content_match': 'receive_content_match',
        'case_sensitive': 'case_sensitive',
        'reverse_result': 'reverse_result',
        'send_content_before_disconnect': 'send_content_before_disconnect',
        'hexadecimal_mode': 'hexadecimal_mode',
        'http_request_url': 'http_request_url',
        'expect_status_code': 'expect_status_code',
        'ssl_cipher': 'ssl_cipher',
        'client_certificate': 'client_certificate',
        'username': 'username',
        'password': 'password',
        'encrypted_password': 'encrypted_password',
        'access_path': 'access_path',
        'ftp_mode': 'ftp_mode',
        'radius_type': 'radius_type',
        'encrypted_shared_secret': 'encrypted_shared_secret',
        'radius_authenticate_method': 'radius_authenticate_method',
        'radius_attributes': 'radius_attributes',
        'outbound_link': 'outbound_link',
        'source_address': 'source_address',
        'dns_query_domain': 'dns_query_domain',
        'expect_dns_answer': 'expect_dns_answer',
        'base_dn': 'base_dn',
        'search_filter': 'search_filter',
        'secure': 'secure',
        'mandatory_attributes': 'mandatory_attributes',
        'chase_referrals': 'chase_referrals',
        'snmp_community': 'snmp_community',
        'statistical_time': 'statistical_time',
        'statistical_object': 'statistical_object',
        'rst_packet_threshold': 'rst_packet_threshold',
        'zero_window_percent': 'zero_window_percent',
        'action': 'action',
        'busy_protect': 'busy_protect',
        'http_url_samples': 'http_url_samples',
        'abnormal_status_codes': 'abnormal_status_codes',
        'http_response_timeout': 'http_response_timeout',
        'http_statistical_time': 'http_statistical_time',
        'abnormal_http_response_threshold': 'abnormal_http_response_threshold',
        'database': 'database',
        'mysql_detect_method': 'mysql_detect_method',
        'query_string': 'query_string',
        'query_result': 'query_result',
        'sync_status': 'sync_status',
        'monitor_expression': 'monitor_expression',
        'cli_command': 'cli_command',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, type=None, timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', gateway_detect='DISABLE', send_content=None, receive_cache_size=None, receive_content_match=None, case_sensitive='DISABLE', reverse_result='DISABLE', send_content_before_disconnect=None, hexadecimal_mode='DISABLE', http_request_url=None, expect_status_code='200;302', ssl_cipher='DEFAULT:+SHA:+3DES:+kEDH', client_certificate='NONE', username=None, password=None, encrypted_password=None, access_path=None, ftp_mode='PASV', radius_type=None, encrypted_shared_secret=None, radius_authenticate_method=None, radius_attributes=None, outbound_link=None, source_address=None, dns_query_domain=None, expect_dns_answer=None, base_dn=None, search_filter=None, secure='NONE', mandatory_attributes='DISABLE', chase_referrals='ENABLE', snmp_community='public', statistical_time=None, statistical_object='RST-PACKET', rst_packet_threshold=None, zero_window_percent=None, action='BUSY-PROTECT', busy_protect=None, http_url_samples=None, abnormal_status_codes=None, http_response_timeout=None, http_statistical_time=None, abnormal_http_response_threshold=None, database=None, mysql_detect_method='QUERY-RESULT', query_string=None, query_result=None, sync_status=None, monitor_expression=None, cli_command=None, netns='default'):  # noqa: E501
        """ConfigServiceMonitor - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._gateway_detect = None
        self._send_content = None
        self._receive_cache_size = None
        self._receive_content_match = None
        self._case_sensitive = None
        self._reverse_result = None
        self._send_content_before_disconnect = None
        self._hexadecimal_mode = None
        self._http_request_url = None
        self._expect_status_code = None
        self._ssl_cipher = None
        self._client_certificate = None
        self._username = None
        self._password = None
        self._encrypted_password = None
        self._access_path = None
        self._ftp_mode = None
        self._radius_type = None
        self._encrypted_shared_secret = None
        self._radius_authenticate_method = None
        self._radius_attributes = None
        self._outbound_link = None
        self._source_address = None
        self._dns_query_domain = None
        self._expect_dns_answer = None
        self._base_dn = None
        self._search_filter = None
        self._secure = None
        self._mandatory_attributes = None
        self._chase_referrals = None
        self._snmp_community = None
        self._statistical_time = None
        self._statistical_object = None
        self._rst_packet_threshold = None
        self._zero_window_percent = None
        self._action = None
        self._busy_protect = None
        self._http_url_samples = None
        self._abnormal_status_codes = None
        self._http_response_timeout = None
        self._http_statistical_time = None
        self._abnormal_http_response_threshold = None
        self._database = None
        self._mysql_detect_method = None
        self._query_string = None
        self._query_result = None
        self._sync_status = None
        self._monitor_expression = None
        self._cli_command = None
        self._netns = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if gateway_detect is not None:
            self.gateway_detect = gateway_detect
        if send_content is not None:
            self.send_content = send_content
        if receive_cache_size is not None:
            self.receive_cache_size = receive_cache_size
        if receive_content_match is not None:
            self.receive_content_match = receive_content_match
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if reverse_result is not None:
            self.reverse_result = reverse_result
        if send_content_before_disconnect is not None:
            self.send_content_before_disconnect = send_content_before_disconnect
        if hexadecimal_mode is not None:
            self.hexadecimal_mode = hexadecimal_mode
        if http_request_url is not None:
            self.http_request_url = http_request_url
        if expect_status_code is not None:
            self.expect_status_code = expect_status_code
        if ssl_cipher is not None:
            self.ssl_cipher = ssl_cipher
        if client_certificate is not None:
            self.client_certificate = client_certificate
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if access_path is not None:
            self.access_path = access_path
        if ftp_mode is not None:
            self.ftp_mode = ftp_mode
        if radius_type is not None:
            self.radius_type = radius_type
        if encrypted_shared_secret is not None:
            self.encrypted_shared_secret = encrypted_shared_secret
        if radius_authenticate_method is not None:
            self.radius_authenticate_method = radius_authenticate_method
        if radius_attributes is not None:
            self.radius_attributes = radius_attributes
        if outbound_link is not None:
            self.outbound_link = outbound_link
        if source_address is not None:
            self.source_address = source_address
        if dns_query_domain is not None:
            self.dns_query_domain = dns_query_domain
        if expect_dns_answer is not None:
            self.expect_dns_answer = expect_dns_answer
        if base_dn is not None:
            self.base_dn = base_dn
        if search_filter is not None:
            self.search_filter = search_filter
        if secure is not None:
            self.secure = secure
        if mandatory_attributes is not None:
            self.mandatory_attributes = mandatory_attributes
        if chase_referrals is not None:
            self.chase_referrals = chase_referrals
        if snmp_community is not None:
            self.snmp_community = snmp_community
        if statistical_time is not None:
            self.statistical_time = statistical_time
        if statistical_object is not None:
            self.statistical_object = statistical_object
        if rst_packet_threshold is not None:
            self.rst_packet_threshold = rst_packet_threshold
        if zero_window_percent is not None:
            self.zero_window_percent = zero_window_percent
        if action is not None:
            self.action = action
        if busy_protect is not None:
            self.busy_protect = busy_protect
        if http_url_samples is not None:
            self.http_url_samples = http_url_samples
        if abnormal_status_codes is not None:
            self.abnormal_status_codes = abnormal_status_codes
        if http_response_timeout is not None:
            self.http_response_timeout = http_response_timeout
        if http_statistical_time is not None:
            self.http_statistical_time = http_statistical_time
        if abnormal_http_response_threshold is not None:
            self.abnormal_http_response_threshold = abnormal_http_response_threshold
        if database is not None:
            self.database = database
        if mysql_detect_method is not None:
            self.mysql_detect_method = mysql_detect_method
        if query_string is not None:
            self.query_string = query_string
        if query_result is not None:
            self.query_result = query_result
        if sync_status is not None:
            self.sync_status = sync_status
        if monitor_expression is not None:
            self.monitor_expression = monitor_expression
        if cli_command is not None:
            self.cli_command = cli_command
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitor.  # noqa: E501


        :return: The name of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitor.


        :param name: The name of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitor.  # noqa: E501


        :return: The description of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitor.


        :param description: The description of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitor.  # noqa: E501


        :return: The type of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitor.


        :param type: The type of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ICMP", "ICMPV6", "CONNECT-TCP", "CONNECT-UDP", "CONNECT-SSL", "HTTP", "HTTPS", "FTP", "RADIUS", "TCP-HALF-OPEN", "DNS", "LDAP", "SNMP", "PASSIVE-TCP", "PASSIVE-HTTP", "ORACLE-DATABASE", "MSSQL-DATABASE", "MYSQL-DATABASE", "MONITOR-EXPRESSION", "EXTERNAL-MONITOR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitor.  # noqa: E501


        :return: The timeout of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitor.


        :param timeout: The timeout of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitor.  # noqa: E501


        :return: The interval of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitor.


        :param interval: The interval of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitor.  # noqa: E501

        Format: * | {IP} | {DOMAIN} | {HOST}  # noqa: E501

        :return: The host of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitor.

        Format: * | {IP} | {DOMAIN} | {HOST}  # noqa: E501

        :param host: The host of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitor.  # noqa: E501


        :return: The port of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitor.


        :param port: The port of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitor.  # noqa: E501


        :return: The debug_mode of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitor.


        :param debug_mode: The debug_mode of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def gateway_detect(self):
        """Gets the gateway_detect of this ConfigServiceMonitor.  # noqa: E501


        :return: The gateway_detect of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._gateway_detect

    @gateway_detect.setter
    def gateway_detect(self, gateway_detect):
        """Sets the gateway_detect of this ConfigServiceMonitor.


        :param gateway_detect: The gateway_detect of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if gateway_detect not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_detect` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_detect, allowed_values)
            )

        self._gateway_detect = gateway_detect

    @property
    def send_content(self):
        """Gets the send_content of this ConfigServiceMonitor.  # noqa: E501


        :return: The send_content of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._send_content

    @send_content.setter
    def send_content(self, send_content):
        """Sets the send_content of this ConfigServiceMonitor.


        :param send_content: The send_content of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._send_content = send_content

    @property
    def receive_cache_size(self):
        """Gets the receive_cache_size of this ConfigServiceMonitor.  # noqa: E501


        :return: The receive_cache_size of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._receive_cache_size

    @receive_cache_size.setter
    def receive_cache_size(self, receive_cache_size):
        """Sets the receive_cache_size of this ConfigServiceMonitor.


        :param receive_cache_size: The receive_cache_size of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._receive_cache_size = receive_cache_size

    @property
    def receive_content_match(self):
        """Gets the receive_content_match of this ConfigServiceMonitor.  # noqa: E501


        :return: The receive_content_match of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._receive_content_match

    @receive_content_match.setter
    def receive_content_match(self, receive_content_match):
        """Sets the receive_content_match of this ConfigServiceMonitor.


        :param receive_content_match: The receive_content_match of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._receive_content_match = receive_content_match

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this ConfigServiceMonitor.  # noqa: E501

        Lose effectiveness with HEXADECIMAL modes  # noqa: E501

        :return: The case_sensitive of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this ConfigServiceMonitor.

        Lose effectiveness with HEXADECIMAL modes  # noqa: E501

        :param case_sensitive: The case_sensitive of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if case_sensitive not in allowed_values:
            raise ValueError(
                "Invalid value for `case_sensitive` ({0}), must be one of {1}"  # noqa: E501
                .format(case_sensitive, allowed_values)
            )

        self._case_sensitive = case_sensitive

    @property
    def reverse_result(self):
        """Gets the reverse_result of this ConfigServiceMonitor.  # noqa: E501


        :return: The reverse_result of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._reverse_result

    @reverse_result.setter
    def reverse_result(self, reverse_result):
        """Sets the reverse_result of this ConfigServiceMonitor.


        :param reverse_result: The reverse_result of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if reverse_result not in allowed_values:
            raise ValueError(
                "Invalid value for `reverse_result` ({0}), must be one of {1}"  # noqa: E501
                .format(reverse_result, allowed_values)
            )

        self._reverse_result = reverse_result

    @property
    def send_content_before_disconnect(self):
        """Gets the send_content_before_disconnect of this ConfigServiceMonitor.  # noqa: E501


        :return: The send_content_before_disconnect of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._send_content_before_disconnect

    @send_content_before_disconnect.setter
    def send_content_before_disconnect(self, send_content_before_disconnect):
        """Sets the send_content_before_disconnect of this ConfigServiceMonitor.


        :param send_content_before_disconnect: The send_content_before_disconnect of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._send_content_before_disconnect = send_content_before_disconnect

    @property
    def hexadecimal_mode(self):
        """Gets the hexadecimal_mode of this ConfigServiceMonitor.  # noqa: E501


        :return: The hexadecimal_mode of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._hexadecimal_mode

    @hexadecimal_mode.setter
    def hexadecimal_mode(self, hexadecimal_mode):
        """Sets the hexadecimal_mode of this ConfigServiceMonitor.


        :param hexadecimal_mode: The hexadecimal_mode of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if hexadecimal_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `hexadecimal_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(hexadecimal_mode, allowed_values)
            )

        self._hexadecimal_mode = hexadecimal_mode

    @property
    def http_request_url(self):
        """Gets the http_request_url of this ConfigServiceMonitor.  # noqa: E501


        :return: The http_request_url of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._http_request_url

    @http_request_url.setter
    def http_request_url(self, http_request_url):
        """Sets the http_request_url of this ConfigServiceMonitor.


        :param http_request_url: The http_request_url of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._http_request_url = http_request_url

    @property
    def expect_status_code(self):
        """Gets the expect_status_code of this ConfigServiceMonitor.  # noqa: E501


        :return: The expect_status_code of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._expect_status_code

    @expect_status_code.setter
    def expect_status_code(self, expect_status_code):
        """Sets the expect_status_code of this ConfigServiceMonitor.


        :param expect_status_code: The expect_status_code of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._expect_status_code = expect_status_code

    @property
    def ssl_cipher(self):
        """Gets the ssl_cipher of this ConfigServiceMonitor.  # noqa: E501


        :return: The ssl_cipher of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._ssl_cipher

    @ssl_cipher.setter
    def ssl_cipher(self, ssl_cipher):
        """Sets the ssl_cipher of this ConfigServiceMonitor.


        :param ssl_cipher: The ssl_cipher of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._ssl_cipher = ssl_cipher

    @property
    def client_certificate(self):
        """Gets the client_certificate of this ConfigServiceMonitor.  # noqa: E501


        :return: The client_certificate of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this ConfigServiceMonitor.


        :param client_certificate: The client_certificate of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "{certificate}"]  # noqa: E501
        if client_certificate not in allowed_values:
            raise ValueError(
                "Invalid value for `client_certificate` ({0}), must be one of {1}"  # noqa: E501
                .format(client_certificate, allowed_values)
            )

        self._client_certificate = client_certificate

    @property
    def username(self):
        """Gets the username of this ConfigServiceMonitor.  # noqa: E501


        :return: The username of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigServiceMonitor.


        :param username: The username of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigServiceMonitor.  # noqa: E501


        :return: The password of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigServiceMonitor.


        :param password: The password of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigServiceMonitor.  # noqa: E501


        :return: The encrypted_password of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigServiceMonitor.


        :param encrypted_password: The encrypted_password of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def access_path(self):
        """Gets the access_path of this ConfigServiceMonitor.  # noqa: E501


        :return: The access_path of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._access_path

    @access_path.setter
    def access_path(self, access_path):
        """Sets the access_path of this ConfigServiceMonitor.


        :param access_path: The access_path of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._access_path = access_path

    @property
    def ftp_mode(self):
        """Gets the ftp_mode of this ConfigServiceMonitor.  # noqa: E501


        :return: The ftp_mode of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._ftp_mode

    @ftp_mode.setter
    def ftp_mode(self, ftp_mode):
        """Sets the ftp_mode of this ConfigServiceMonitor.


        :param ftp_mode: The ftp_mode of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASV", "PORT"]  # noqa: E501
        if ftp_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ftp_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(ftp_mode, allowed_values)
            )

        self._ftp_mode = ftp_mode

    @property
    def radius_type(self):
        """Gets the radius_type of this ConfigServiceMonitor.  # noqa: E501


        :return: The radius_type of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._radius_type

    @radius_type.setter
    def radius_type(self, radius_type):
        """Sets the radius_type of this ConfigServiceMonitor.


        :param radius_type: The radius_type of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCESS-REQUEST", "ACCOUNTING-REQUEST"]  # noqa: E501
        if radius_type not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_type` ({0}), must be one of {1}"  # noqa: E501
                .format(radius_type, allowed_values)
            )

        self._radius_type = radius_type

    @property
    def encrypted_shared_secret(self):
        """Gets the encrypted_shared_secret of this ConfigServiceMonitor.  # noqa: E501


        :return: The encrypted_shared_secret of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_shared_secret

    @encrypted_shared_secret.setter
    def encrypted_shared_secret(self, encrypted_shared_secret):
        """Sets the encrypted_shared_secret of this ConfigServiceMonitor.


        :param encrypted_shared_secret: The encrypted_shared_secret of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._encrypted_shared_secret = encrypted_shared_secret

    @property
    def radius_authenticate_method(self):
        """Gets the radius_authenticate_method of this ConfigServiceMonitor.  # noqa: E501

        Require property for ACCESS-REQUEST packet  # noqa: E501

        :return: The radius_authenticate_method of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._radius_authenticate_method

    @radius_authenticate_method.setter
    def radius_authenticate_method(self, radius_authenticate_method):
        """Sets the radius_authenticate_method of this ConfigServiceMonitor.

        Require property for ACCESS-REQUEST packet  # noqa: E501

        :param radius_authenticate_method: The radius_authenticate_method of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["PAP", "CHAP"]  # noqa: E501
        if radius_authenticate_method not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_authenticate_method` ({0}), must be one of {1}"  # noqa: E501
                .format(radius_authenticate_method, allowed_values)
            )

        self._radius_authenticate_method = radius_authenticate_method

    @property
    def radius_attributes(self):
        """Gets the radius_attributes of this ConfigServiceMonitor.  # noqa: E501


        :return: The radius_attributes of this ConfigServiceMonitor.  # noqa: E501
        :rtype: list[ConfigServiceMonitorRadiusAttributes]
        """
        return self._radius_attributes

    @radius_attributes.setter
    def radius_attributes(self, radius_attributes):
        """Sets the radius_attributes of this ConfigServiceMonitor.


        :param radius_attributes: The radius_attributes of this ConfigServiceMonitor.  # noqa: E501
        :type: list[ConfigServiceMonitorRadiusAttributes]
        """

        self._radius_attributes = radius_attributes

    @property
    def outbound_link(self):
        """Gets the outbound_link of this ConfigServiceMonitor.  # noqa: E501

        Format: {WAN} | {LAN}  # noqa: E501

        :return: The outbound_link of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._outbound_link

    @outbound_link.setter
    def outbound_link(self, outbound_link):
        """Sets the outbound_link of this ConfigServiceMonitor.

        Format: {WAN} | {LAN}  # noqa: E501

        :param outbound_link: The outbound_link of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._outbound_link = outbound_link

    @property
    def source_address(self):
        """Gets the source_address of this ConfigServiceMonitor.  # noqa: E501


        :return: The source_address of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigServiceMonitor.


        :param source_address: The source_address of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def dns_query_domain(self):
        """Gets the dns_query_domain of this ConfigServiceMonitor.  # noqa: E501


        :return: The dns_query_domain of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._dns_query_domain

    @dns_query_domain.setter
    def dns_query_domain(self, dns_query_domain):
        """Sets the dns_query_domain of this ConfigServiceMonitor.


        :param dns_query_domain: The dns_query_domain of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._dns_query_domain = dns_query_domain

    @property
    def expect_dns_answer(self):
        """Gets the expect_dns_answer of this ConfigServiceMonitor.  # noqa: E501

        Format: {IP} | {DOMAIN}  # noqa: E501

        :return: The expect_dns_answer of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._expect_dns_answer

    @expect_dns_answer.setter
    def expect_dns_answer(self, expect_dns_answer):
        """Sets the expect_dns_answer of this ConfigServiceMonitor.

        Format: {IP} | {DOMAIN}  # noqa: E501

        :param expect_dns_answer: The expect_dns_answer of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._expect_dns_answer = expect_dns_answer

    @property
    def base_dn(self):
        """Gets the base_dn of this ConfigServiceMonitor.  # noqa: E501


        :return: The base_dn of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this ConfigServiceMonitor.


        :param base_dn: The base_dn of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._base_dn = base_dn

    @property
    def search_filter(self):
        """Gets the search_filter of this ConfigServiceMonitor.  # noqa: E501


        :return: The search_filter of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this ConfigServiceMonitor.


        :param search_filter: The search_filter of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._search_filter = search_filter

    @property
    def secure(self):
        """Gets the secure of this ConfigServiceMonitor.  # noqa: E501


        :return: The secure of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this ConfigServiceMonitor.


        :param secure: The secure of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "TLS"]  # noqa: E501
        if secure not in allowed_values:
            raise ValueError(
                "Invalid value for `secure` ({0}), must be one of {1}"  # noqa: E501
                .format(secure, allowed_values)
            )

        self._secure = secure

    @property
    def mandatory_attributes(self):
        """Gets the mandatory_attributes of this ConfigServiceMonitor.  # noqa: E501


        :return: The mandatory_attributes of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_attributes

    @mandatory_attributes.setter
    def mandatory_attributes(self, mandatory_attributes):
        """Sets the mandatory_attributes of this ConfigServiceMonitor.


        :param mandatory_attributes: The mandatory_attributes of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if mandatory_attributes not in allowed_values:
            raise ValueError(
                "Invalid value for `mandatory_attributes` ({0}), must be one of {1}"  # noqa: E501
                .format(mandatory_attributes, allowed_values)
            )

        self._mandatory_attributes = mandatory_attributes

    @property
    def chase_referrals(self):
        """Gets the chase_referrals of this ConfigServiceMonitor.  # noqa: E501


        :return: The chase_referrals of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._chase_referrals

    @chase_referrals.setter
    def chase_referrals(self, chase_referrals):
        """Sets the chase_referrals of this ConfigServiceMonitor.


        :param chase_referrals: The chase_referrals of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if chase_referrals not in allowed_values:
            raise ValueError(
                "Invalid value for `chase_referrals` ({0}), must be one of {1}"  # noqa: E501
                .format(chase_referrals, allowed_values)
            )

        self._chase_referrals = chase_referrals

    @property
    def snmp_community(self):
        """Gets the snmp_community of this ConfigServiceMonitor.  # noqa: E501


        :return: The snmp_community of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._snmp_community

    @snmp_community.setter
    def snmp_community(self, snmp_community):
        """Sets the snmp_community of this ConfigServiceMonitor.


        :param snmp_community: The snmp_community of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._snmp_community = snmp_community

    @property
    def statistical_time(self):
        """Gets the statistical_time of this ConfigServiceMonitor.  # noqa: E501


        :return: The statistical_time of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._statistical_time

    @statistical_time.setter
    def statistical_time(self, statistical_time):
        """Sets the statistical_time of this ConfigServiceMonitor.


        :param statistical_time: The statistical_time of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._statistical_time = statistical_time

    @property
    def statistical_object(self):
        """Gets the statistical_object of this ConfigServiceMonitor.  # noqa: E501


        :return: The statistical_object of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._statistical_object

    @statistical_object.setter
    def statistical_object(self, statistical_object):
        """Sets the statistical_object of this ConfigServiceMonitor.


        :param statistical_object: The statistical_object of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["RST-PACKET", "ZERO-WINDOW"]  # noqa: E501
        if statistical_object not in allowed_values:
            raise ValueError(
                "Invalid value for `statistical_object` ({0}), must be one of {1}"  # noqa: E501
                .format(statistical_object, allowed_values)
            )

        self._statistical_object = statistical_object

    @property
    def rst_packet_threshold(self):
        """Gets the rst_packet_threshold of this ConfigServiceMonitor.  # noqa: E501


        :return: The rst_packet_threshold of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._rst_packet_threshold

    @rst_packet_threshold.setter
    def rst_packet_threshold(self, rst_packet_threshold):
        """Sets the rst_packet_threshold of this ConfigServiceMonitor.


        :param rst_packet_threshold: The rst_packet_threshold of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._rst_packet_threshold = rst_packet_threshold

    @property
    def zero_window_percent(self):
        """Gets the zero_window_percent of this ConfigServiceMonitor.  # noqa: E501


        :return: The zero_window_percent of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._zero_window_percent

    @zero_window_percent.setter
    def zero_window_percent(self, zero_window_percent):
        """Sets the zero_window_percent of this ConfigServiceMonitor.


        :param zero_window_percent: The zero_window_percent of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._zero_window_percent = zero_window_percent

    @property
    def action(self):
        """Gets the action of this ConfigServiceMonitor.  # noqa: E501


        :return: The action of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigServiceMonitor.


        :param action: The action of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUSY-PROTECT", "SET-OFFLINE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigServiceMonitor.  # noqa: E501


        :return: The busy_protect of this ConfigServiceMonitor.  # noqa: E501
        :rtype: ConfigServiceMonitorBusyProtect
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigServiceMonitor.


        :param busy_protect: The busy_protect of this ConfigServiceMonitor.  # noqa: E501
        :type: ConfigServiceMonitorBusyProtect
        """

        self._busy_protect = busy_protect

    @property
    def http_url_samples(self):
        """Gets the http_url_samples of this ConfigServiceMonitor.  # noqa: E501


        :return: The http_url_samples of this ConfigServiceMonitor.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_url_samples

    @http_url_samples.setter
    def http_url_samples(self, http_url_samples):
        """Sets the http_url_samples of this ConfigServiceMonitor.


        :param http_url_samples: The http_url_samples of this ConfigServiceMonitor.  # noqa: E501
        :type: list[str]
        """

        self._http_url_samples = http_url_samples

    @property
    def abnormal_status_codes(self):
        """Gets the abnormal_status_codes of this ConfigServiceMonitor.  # noqa: E501


        :return: The abnormal_status_codes of this ConfigServiceMonitor.  # noqa: E501
        :rtype: list[int]
        """
        return self._abnormal_status_codes

    @abnormal_status_codes.setter
    def abnormal_status_codes(self, abnormal_status_codes):
        """Sets the abnormal_status_codes of this ConfigServiceMonitor.


        :param abnormal_status_codes: The abnormal_status_codes of this ConfigServiceMonitor.  # noqa: E501
        :type: list[int]
        """

        self._abnormal_status_codes = abnormal_status_codes

    @property
    def http_response_timeout(self):
        """Gets the http_response_timeout of this ConfigServiceMonitor.  # noqa: E501


        :return: The http_response_timeout of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._http_response_timeout

    @http_response_timeout.setter
    def http_response_timeout(self, http_response_timeout):
        """Sets the http_response_timeout of this ConfigServiceMonitor.


        :param http_response_timeout: The http_response_timeout of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._http_response_timeout = http_response_timeout

    @property
    def http_statistical_time(self):
        """Gets the http_statistical_time of this ConfigServiceMonitor.  # noqa: E501


        :return: The http_statistical_time of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._http_statistical_time

    @http_statistical_time.setter
    def http_statistical_time(self, http_statistical_time):
        """Sets the http_statistical_time of this ConfigServiceMonitor.


        :param http_statistical_time: The http_statistical_time of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._http_statistical_time = http_statistical_time

    @property
    def abnormal_http_response_threshold(self):
        """Gets the abnormal_http_response_threshold of this ConfigServiceMonitor.  # noqa: E501


        :return: The abnormal_http_response_threshold of this ConfigServiceMonitor.  # noqa: E501
        :rtype: int
        """
        return self._abnormal_http_response_threshold

    @abnormal_http_response_threshold.setter
    def abnormal_http_response_threshold(self, abnormal_http_response_threshold):
        """Sets the abnormal_http_response_threshold of this ConfigServiceMonitor.


        :param abnormal_http_response_threshold: The abnormal_http_response_threshold of this ConfigServiceMonitor.  # noqa: E501
        :type: int
        """

        self._abnormal_http_response_threshold = abnormal_http_response_threshold

    @property
    def database(self):
        """Gets the database of this ConfigServiceMonitor.  # noqa: E501


        :return: The database of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ConfigServiceMonitor.


        :param database: The database of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def mysql_detect_method(self):
        """Gets the mysql_detect_method of this ConfigServiceMonitor.  # noqa: E501


        :return: The mysql_detect_method of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._mysql_detect_method

    @mysql_detect_method.setter
    def mysql_detect_method(self, mysql_detect_method):
        """Sets the mysql_detect_method of this ConfigServiceMonitor.


        :param mysql_detect_method: The mysql_detect_method of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["QUERY-RESULT", "SYNC-STATUS"]  # noqa: E501
        if mysql_detect_method not in allowed_values:
            raise ValueError(
                "Invalid value for `mysql_detect_method` ({0}), must be one of {1}"  # noqa: E501
                .format(mysql_detect_method, allowed_values)
            )

        self._mysql_detect_method = mysql_detect_method

    @property
    def query_string(self):
        """Gets the query_string of this ConfigServiceMonitor.  # noqa: E501


        :return: The query_string of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this ConfigServiceMonitor.


        :param query_string: The query_string of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def query_result(self):
        """Gets the query_result of this ConfigServiceMonitor.  # noqa: E501


        :return: The query_result of this ConfigServiceMonitor.  # noqa: E501
        :rtype: ConfigServiceMonitorQueryResult
        """
        return self._query_result

    @query_result.setter
    def query_result(self, query_result):
        """Sets the query_result of this ConfigServiceMonitor.


        :param query_result: The query_result of this ConfigServiceMonitor.  # noqa: E501
        :type: ConfigServiceMonitorQueryResult
        """

        self._query_result = query_result

    @property
    def sync_status(self):
        """Gets the sync_status of this ConfigServiceMonitor.  # noqa: E501


        :return: The sync_status of this ConfigServiceMonitor.  # noqa: E501
        :rtype: ConfigServiceMonitorSyncStatus
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this ConfigServiceMonitor.


        :param sync_status: The sync_status of this ConfigServiceMonitor.  # noqa: E501
        :type: ConfigServiceMonitorSyncStatus
        """

        self._sync_status = sync_status

    @property
    def monitor_expression(self):
        """Gets the monitor_expression of this ConfigServiceMonitor.  # noqa: E501


        :return: The monitor_expression of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._monitor_expression

    @monitor_expression.setter
    def monitor_expression(self, monitor_expression):
        """Sets the monitor_expression of this ConfigServiceMonitor.


        :param monitor_expression: The monitor_expression of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._monitor_expression = monitor_expression

    @property
    def cli_command(self):
        """Gets the cli_command of this ConfigServiceMonitor.  # noqa: E501


        :return: The cli_command of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._cli_command

    @cli_command.setter
    def cli_command(self, cli_command):
        """Sets the cli_command of this ConfigServiceMonitor.


        :param cli_command: The cli_command of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._cli_command = cli_command

    @property
    def netns(self):
        """Gets the netns of this ConfigServiceMonitor.  # noqa: E501


        :return: The netns of this ConfigServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this ConfigServiceMonitor.


        :param netns: The netns of this ConfigServiceMonitor.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
