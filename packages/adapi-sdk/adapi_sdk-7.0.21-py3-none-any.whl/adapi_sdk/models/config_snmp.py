# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_snmp_permit_source_address import ConfigSnmpPermitSourceAddress  # noqa: F401,E501


class ConfigSnmp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'community': 'str',
        'pk_community': 'str',
        'encrypted_community': 'str',
        'privileges': 'str',
        'permit_source_address': 'ConfigSnmpPermitSourceAddress'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'community': 'community',
        'pk_community': 'pk_community',
        'encrypted_community': 'encrypted_community',
        'privileges': 'privileges',
        'permit_source_address': 'permit_source_address'
    }

    def __init__(self, name=None, description=None, state='ENABLE', community=None, pk_community=None, encrypted_community=None, privileges='GET', permit_source_address=None):  # noqa: E501
        """ConfigSnmp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._community = None
        self._pk_community = None
        self._encrypted_community = None
        self._privileges = None
        self._permit_source_address = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if community is not None:
            self.community = community
        if pk_community is not None:
            self.pk_community = pk_community
        if encrypted_community is not None:
            self.encrypted_community = encrypted_community
        if privileges is not None:
            self.privileges = privileges
        if permit_source_address is not None:
            self.permit_source_address = permit_source_address

    @property
    def name(self):
        """Gets the name of this ConfigSnmp.  # noqa: E501

        必选参数；指定SNMP（V1/V2C）配置的名称，在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSnmp.

        必选参数；指定SNMP（V1/V2C）配置的名称，在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigSnmp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSnmp.  # noqa: E501

        可选参数；用于对此配置增加备注  # noqa: E501

        :return: The description of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSnmp.

        可选参数；用于对此配置增加备注  # noqa: E501

        :param description: The description of this ConfigSnmp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigSnmp.  # noqa: E501

        可选参数；启禁用配置，enable表示启用，disable表示禁用，默认为enable  # noqa: E501

        :return: The state of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigSnmp.

        可选参数；启禁用配置，enable表示启用，disable表示禁用，默认为enable  # noqa: E501

        :param state: The state of this ConfigSnmp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def community(self):
        """Gets the community of this ConfigSnmp.  # noqa: E501

        可选参数；SNMP共同体，默认为public  # noqa: E501

        :return: The community of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this ConfigSnmp.

        可选参数；SNMP共同体，默认为public  # noqa: E501

        :param community: The community of this ConfigSnmp.  # noqa: E501
        :type: str
        """
        if community is not None and len(community) > 64:
            raise ValueError("Invalid value for `community`, length must be less than or equal to `64`")  # noqa: E501
        if community is not None and len(community) < 8:
            raise ValueError("Invalid value for `community`, length must be greater than or equal to `8`")  # noqa: E501

        self._community = community

    @property
    def pk_community(self):
        """Gets the pk_community of this ConfigSnmp.  # noqa: E501

        加密共同体  # noqa: E501

        :return: The pk_community of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._pk_community

    @pk_community.setter
    def pk_community(self, pk_community):
        """Sets the pk_community of this ConfigSnmp.

        加密共同体  # noqa: E501

        :param pk_community: The pk_community of this ConfigSnmp.  # noqa: E501
        :type: str
        """

        self._pk_community = pk_community

    @property
    def encrypted_community(self):
        """Gets the encrypted_community of this ConfigSnmp.  # noqa: E501

        加密共同体  # noqa: E501

        :return: The encrypted_community of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_community

    @encrypted_community.setter
    def encrypted_community(self, encrypted_community):
        """Sets the encrypted_community of this ConfigSnmp.

        加密共同体  # noqa: E501

        :param encrypted_community: The encrypted_community of this ConfigSnmp.  # noqa: E501
        :type: str
        """

        self._encrypted_community = encrypted_community

    @property
    def privileges(self):
        """Gets the privileges of this ConfigSnmp.  # noqa: E501

        可选参数；SNMP访问权限，默认为GET  # noqa: E501

        :return: The privileges of this ConfigSnmp.  # noqa: E501
        :rtype: str
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this ConfigSnmp.

        可选参数；SNMP访问权限，默认为GET  # noqa: E501

        :param privileges: The privileges of this ConfigSnmp.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET"]  # noqa: E501
        if privileges not in allowed_values:
            raise ValueError(
                "Invalid value for `privileges` ({0}), must be one of {1}"  # noqa: E501
                .format(privileges, allowed_values)
            )

        self._privileges = privileges

    @property
    def permit_source_address(self):
        """Gets the permit_source_address of this ConfigSnmp.  # noqa: E501


        :return: The permit_source_address of this ConfigSnmp.  # noqa: E501
        :rtype: ConfigSnmpPermitSourceAddress
        """
        return self._permit_source_address

    @permit_source_address.setter
    def permit_source_address(self, permit_source_address):
        """Sets the permit_source_address of this ConfigSnmp.


        :param permit_source_address: The permit_source_address of this ConfigSnmp.  # noqa: E501
        :type: ConfigSnmpPermitSourceAddress
        """

        self._permit_source_address = permit_source_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSnmp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSnmp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
