# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigExternalAuthenticationTacacs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_policy': 'str',
        'network': 'str',
        'role_name': 'str',
        'host': 'str',
        'port': 'int',
        'shared_secret': 'str',
        'pk_shared_secret': 'str',
        'encrypted_shared_secret': 'str',
        'tacacs_agreement': 'str',
        'alternate_server_host': 'str',
        'alternate_server_port': 'int',
        'alternate_server_shared_secret': 'str',
        'pk_alternate_server_shared_secret': 'str',
        'encrypted_alternate_server_shared_secret': 'str',
        'alternate_tacacs_agreement': 'str'
    }

    attribute_map = {
        'auth_policy': 'auth_policy',
        'network': 'network',
        'role_name': 'role_name',
        'host': 'host',
        'port': 'port',
        'shared_secret': 'shared_secret',
        'pk_shared_secret': 'pk_shared_secret',
        'encrypted_shared_secret': 'encrypted_shared_secret',
        'tacacs_agreement': 'tacacs_agreement',
        'alternate_server_host': 'alternate_server_host',
        'alternate_server_port': 'alternate_server_port',
        'alternate_server_shared_secret': 'alternate_server_shared_secret',
        'pk_alternate_server_shared_secret': 'pk_alternate_server_shared_secret',
        'encrypted_alternate_server_shared_secret': 'encrypted_alternate_server_shared_secret',
        'alternate_tacacs_agreement': 'alternate_tacacs_agreement'
    }

    def __init__(self, auth_policy=None, network='AUTO', role_name=None, host=None, port=None, shared_secret=None, pk_shared_secret=None, encrypted_shared_secret=None, tacacs_agreement='TACACS_PAP', alternate_server_host=None, alternate_server_port=None, alternate_server_shared_secret=None, pk_alternate_server_shared_secret=None, encrypted_alternate_server_shared_secret=None, alternate_tacacs_agreement='TACACS_PAP'):  # noqa: E501
        """ConfigExternalAuthenticationTacacs - a model defined in Swagger"""  # noqa: E501

        self._auth_policy = None
        self._network = None
        self._role_name = None
        self._host = None
        self._port = None
        self._shared_secret = None
        self._pk_shared_secret = None
        self._encrypted_shared_secret = None
        self._tacacs_agreement = None
        self._alternate_server_host = None
        self._alternate_server_port = None
        self._alternate_server_shared_secret = None
        self._pk_alternate_server_shared_secret = None
        self._encrypted_alternate_server_shared_secret = None
        self._alternate_tacacs_agreement = None
        self.discriminator = None

        if auth_policy is not None:
            self.auth_policy = auth_policy
        if network is not None:
            self.network = network
        self.role_name = role_name
        self.host = host
        if port is not None:
            self.port = port
        if shared_secret is not None:
            self.shared_secret = shared_secret
        if pk_shared_secret is not None:
            self.pk_shared_secret = pk_shared_secret
        if encrypted_shared_secret is not None:
            self.encrypted_shared_secret = encrypted_shared_secret
        if tacacs_agreement is not None:
            self.tacacs_agreement = tacacs_agreement
        if alternate_server_host is not None:
            self.alternate_server_host = alternate_server_host
        if alternate_server_port is not None:
            self.alternate_server_port = alternate_server_port
        if alternate_server_shared_secret is not None:
            self.alternate_server_shared_secret = alternate_server_shared_secret
        if pk_alternate_server_shared_secret is not None:
            self.pk_alternate_server_shared_secret = pk_alternate_server_shared_secret
        if encrypted_alternate_server_shared_secret is not None:
            self.encrypted_alternate_server_shared_secret = encrypted_alternate_server_shared_secret
        if alternate_tacacs_agreement is not None:
            self.alternate_tacacs_agreement = alternate_tacacs_agreement

    @property
    def auth_policy(self):
        """Gets the auth_policy of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        tacacs认证优先级设置  # noqa: E501

        :return: The auth_policy of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._auth_policy

    @auth_policy.setter
    def auth_policy(self, auth_policy):
        """Sets the auth_policy of this ConfigExternalAuthenticationTacacs.

        tacacs认证优先级设置  # noqa: E501

        :param auth_policy: The auth_policy of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL-FIRST", "EXTERNAL-FIRST"]  # noqa: E501
        if auth_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_policy, allowed_values)
            )

        self._auth_policy = auth_policy

    @property
    def network(self):
        """Gets the network of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigExternalAuthenticationTacacs.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def role_name(self):
        """Gets the role_name of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        引用的角色名称  # noqa: E501

        :return: The role_name of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ConfigExternalAuthenticationTacacs.

        引用的角色名称  # noqa: E501

        :param role_name: The role_name of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def host(self):
        """Gets the host of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        主机地址  # noqa: E501

        :return: The host of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigExternalAuthenticationTacacs.

        主机地址  # noqa: E501

        :param host: The host of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        端口范围  # noqa: E501

        :return: The port of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigExternalAuthenticationTacacs.

        端口范围  # noqa: E501

        :param port: The port of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def shared_secret(self):
        """Gets the shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        共享密钥  # noqa: E501

        :return: The shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this ConfigExternalAuthenticationTacacs.

        共享密钥  # noqa: E501

        :param shared_secret: The shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        if shared_secret is not None and len(shared_secret) > 128:
            raise ValueError("Invalid value for `shared_secret`, length must be less than or equal to `128`")  # noqa: E501
        if shared_secret is not None and len(shared_secret) < 0:
            raise ValueError("Invalid value for `shared_secret`, length must be greater than or equal to `0`")  # noqa: E501

        self._shared_secret = shared_secret

    @property
    def pk_shared_secret(self):
        """Gets the pk_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        共享密钥  # noqa: E501

        :return: The pk_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._pk_shared_secret

    @pk_shared_secret.setter
    def pk_shared_secret(self, pk_shared_secret):
        """Sets the pk_shared_secret of this ConfigExternalAuthenticationTacacs.

        共享密钥  # noqa: E501

        :param pk_shared_secret: The pk_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """

        self._pk_shared_secret = pk_shared_secret

    @property
    def encrypted_shared_secret(self):
        """Gets the encrypted_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        共享密钥-加密  # noqa: E501

        :return: The encrypted_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_shared_secret

    @encrypted_shared_secret.setter
    def encrypted_shared_secret(self, encrypted_shared_secret):
        """Sets the encrypted_shared_secret of this ConfigExternalAuthenticationTacacs.

        共享密钥-加密  # noqa: E501

        :param encrypted_shared_secret: The encrypted_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """

        self._encrypted_shared_secret = encrypted_shared_secret

    @property
    def tacacs_agreement(self):
        """Gets the tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        采用协议  # noqa: E501

        :return: The tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._tacacs_agreement

    @tacacs_agreement.setter
    def tacacs_agreement(self, tacacs_agreement):
        """Sets the tacacs_agreement of this ConfigExternalAuthenticationTacacs.

        采用协议  # noqa: E501

        :param tacacs_agreement: The tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        allowed_values = ["TACACS_PAP", "TACACS_CHAP"]  # noqa: E501
        if tacacs_agreement not in allowed_values:
            raise ValueError(
                "Invalid value for `tacacs_agreement` ({0}), must be one of {1}"  # noqa: E501
                .format(tacacs_agreement, allowed_values)
            )

        self._tacacs_agreement = tacacs_agreement

    @property
    def alternate_server_host(self):
        """Gets the alternate_server_host of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        备份主机地址  # noqa: E501

        :return: The alternate_server_host of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._alternate_server_host

    @alternate_server_host.setter
    def alternate_server_host(self, alternate_server_host):
        """Sets the alternate_server_host of this ConfigExternalAuthenticationTacacs.

        备份主机地址  # noqa: E501

        :param alternate_server_host: The alternate_server_host of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        if alternate_server_host is not None and len(alternate_server_host) < 0:
            raise ValueError("Invalid value for `alternate_server_host`, length must be greater than or equal to `0`")  # noqa: E501

        self._alternate_server_host = alternate_server_host

    @property
    def alternate_server_port(self):
        """Gets the alternate_server_port of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        备份主机端口范围  # noqa: E501

        :return: The alternate_server_port of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: int
        """
        return self._alternate_server_port

    @alternate_server_port.setter
    def alternate_server_port(self, alternate_server_port):
        """Sets the alternate_server_port of this ConfigExternalAuthenticationTacacs.

        备份主机端口范围  # noqa: E501

        :param alternate_server_port: The alternate_server_port of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: int
        """
        if alternate_server_port is not None and alternate_server_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `alternate_server_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if alternate_server_port is not None and alternate_server_port < 0:  # noqa: E501
            raise ValueError("Invalid value for `alternate_server_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._alternate_server_port = alternate_server_port

    @property
    def alternate_server_shared_secret(self):
        """Gets the alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        备份主机共享密钥  # noqa: E501

        :return: The alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._alternate_server_shared_secret

    @alternate_server_shared_secret.setter
    def alternate_server_shared_secret(self, alternate_server_shared_secret):
        """Sets the alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.

        备份主机共享密钥  # noqa: E501

        :param alternate_server_shared_secret: The alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        if alternate_server_shared_secret is not None and len(alternate_server_shared_secret) > 128:
            raise ValueError("Invalid value for `alternate_server_shared_secret`, length must be less than or equal to `128`")  # noqa: E501
        if alternate_server_shared_secret is not None and len(alternate_server_shared_secret) < 0:
            raise ValueError("Invalid value for `alternate_server_shared_secret`, length must be greater than or equal to `0`")  # noqa: E501

        self._alternate_server_shared_secret = alternate_server_shared_secret

    @property
    def pk_alternate_server_shared_secret(self):
        """Gets the pk_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        备份主机共享密钥  # noqa: E501

        :return: The pk_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._pk_alternate_server_shared_secret

    @pk_alternate_server_shared_secret.setter
    def pk_alternate_server_shared_secret(self, pk_alternate_server_shared_secret):
        """Sets the pk_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.

        备份主机共享密钥  # noqa: E501

        :param pk_alternate_server_shared_secret: The pk_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """

        self._pk_alternate_server_shared_secret = pk_alternate_server_shared_secret

    @property
    def encrypted_alternate_server_shared_secret(self):
        """Gets the encrypted_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        备份主机共享密钥-加密  # noqa: E501

        :return: The encrypted_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_alternate_server_shared_secret

    @encrypted_alternate_server_shared_secret.setter
    def encrypted_alternate_server_shared_secret(self, encrypted_alternate_server_shared_secret):
        """Sets the encrypted_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.

        备份主机共享密钥-加密  # noqa: E501

        :param encrypted_alternate_server_shared_secret: The encrypted_alternate_server_shared_secret of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """

        self._encrypted_alternate_server_shared_secret = encrypted_alternate_server_shared_secret

    @property
    def alternate_tacacs_agreement(self):
        """Gets the alternate_tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501

        采用协议  # noqa: E501

        :return: The alternate_tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :rtype: str
        """
        return self._alternate_tacacs_agreement

    @alternate_tacacs_agreement.setter
    def alternate_tacacs_agreement(self, alternate_tacacs_agreement):
        """Sets the alternate_tacacs_agreement of this ConfigExternalAuthenticationTacacs.

        采用协议  # noqa: E501

        :param alternate_tacacs_agreement: The alternate_tacacs_agreement of this ConfigExternalAuthenticationTacacs.  # noqa: E501
        :type: str
        """
        allowed_values = ["TACACS_PAP", "TACACS_CHAP"]  # noqa: E501
        if alternate_tacacs_agreement not in allowed_values:
            raise ValueError(
                "Invalid value for `alternate_tacacs_agreement` ({0}), must be one of {1}"  # noqa: E501
                .format(alternate_tacacs_agreement, allowed_values)
            )

        self._alternate_tacacs_agreement = alternate_tacacs_agreement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigExternalAuthenticationTacacs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigExternalAuthenticationTacacs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
