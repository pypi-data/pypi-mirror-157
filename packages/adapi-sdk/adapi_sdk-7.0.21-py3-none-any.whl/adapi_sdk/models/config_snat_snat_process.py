# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_snat_snat_process_translated_address import ConfigSnatSnatProcessTranslatedAddress  # noqa: F401,E501


class ConfigSnatSnatProcess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'translated_address': 'ConfigSnatSnatProcessTranslatedAddress',
        'policy': 'str',
        'source_port': 'str'
    }

    attribute_map = {
        'translated_address': 'translated_address',
        'policy': 'policy',
        'source_port': 'source_port'
    }

    def __init__(self, translated_address=None, policy='HASH-SRCIP-AND-DSTIP', source_port='PRESERVE'):  # noqa: E501
        """ConfigSnatSnatProcess - a model defined in Swagger"""  # noqa: E501

        self._translated_address = None
        self._policy = None
        self._source_port = None
        self.discriminator = None

        self.translated_address = translated_address
        if policy is not None:
            self.policy = policy
        if source_port is not None:
            self.source_port = source_port

    @property
    def translated_address(self):
        """Gets the translated_address of this ConfigSnatSnatProcess.  # noqa: E501


        :return: The translated_address of this ConfigSnatSnatProcess.  # noqa: E501
        :rtype: ConfigSnatSnatProcessTranslatedAddress
        """
        return self._translated_address

    @translated_address.setter
    def translated_address(self, translated_address):
        """Sets the translated_address of this ConfigSnatSnatProcess.


        :param translated_address: The translated_address of this ConfigSnatSnatProcess.  # noqa: E501
        :type: ConfigSnatSnatProcessTranslatedAddress
        """
        if translated_address is None:
            raise ValueError("Invalid value for `translated_address`, must not be `None`")  # noqa: E501

        self._translated_address = translated_address

    @property
    def policy(self):
        """Gets the policy of this ConfigSnatSnatProcess.  # noqa: E501

        转换策略，hash-srcip表示源IP哈希，hash-srcip-and-dstip表示源IP和目的IP哈希。  # noqa: E501

        :return: The policy of this ConfigSnatSnatProcess.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigSnatSnatProcess.

        转换策略，hash-srcip表示源IP哈希，hash-srcip-and-dstip表示源IP和目的IP哈希。  # noqa: E501

        :param policy: The policy of this ConfigSnatSnatProcess.  # noqa: E501
        :type: str
        """
        allowed_values = ["HASH-SRCIP", "HASH-SRCIP-AND-DSTIP"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def source_port(self):
        """Gets the source_port of this ConfigSnatSnatProcess.  # noqa: E501

        定义源端口转换策略（PRESERVE-尝试保持源端口/PRESERVE-STRICT-严格保持源端口/CHANGE-改变源端口）  # noqa: E501

        :return: The source_port of this ConfigSnatSnatProcess.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this ConfigSnatSnatProcess.

        定义源端口转换策略（PRESERVE-尝试保持源端口/PRESERVE-STRICT-严格保持源端口/CHANGE-改变源端口）  # noqa: E501

        :param source_port: The source_port of this ConfigSnatSnatProcess.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRESERVE", "PRESERVE-STRICT", "CHANGE"]  # noqa: E501
        if source_port not in allowed_values:
            raise ValueError(
                "Invalid value for `source_port` ({0}), must be one of {1}"  # noqa: E501
                .format(source_port, allowed_values)
            )

        self._source_port = source_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSnatSnatProcess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSnatSnatProcess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
