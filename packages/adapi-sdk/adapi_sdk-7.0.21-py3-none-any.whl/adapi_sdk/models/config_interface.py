# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'device': 'str',
        'occupied_by': 'str',
        'occupier': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'device': 'device',
        'occupied_by': 'occupied_by',
        'occupier': 'occupier'
    }

    def __init__(self, name=None, type=None, device=None, occupied_by='NONE', occupier=None):  # noqa: E501
        """ConfigInterface - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._device = None
        self._occupied_by = None
        self._occupier = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.device = device
        self.occupied_by = occupied_by
        if occupier is not None:
            self.occupier = occupier

    @property
    def name(self):
        """Gets the name of this ConfigInterface.  # noqa: E501

        接口名称  # noqa: E501

        :return: The name of this ConfigInterface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigInterface.

        接口名称  # noqa: E501

        :param name: The name of this ConfigInterface.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ConfigInterface.  # noqa: E501

        接口类型  # noqa: E501

        :return: The type of this ConfigInterface.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigInterface.

        接口类型  # noqa: E501

        :param type: The type of this ConfigInterface.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["COM", "PHYSICAL", "BOND", "VLAN", "BRIDGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def device(self):
        """Gets the device of this ConfigInterface.  # noqa: E501

        Device name.  # noqa: E501

        :return: The device of this ConfigInterface.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ConfigInterface.

        Device name.  # noqa: E501

        :param device: The device of this ConfigInterface.  # noqa: E501
        :type: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def occupied_by(self):
        """Gets the occupied_by of this ConfigInterface.  # noqa: E501

        使用类型  # noqa: E501

        :return: The occupied_by of this ConfigInterface.  # noqa: E501
        :rtype: str
        """
        return self._occupied_by

    @occupied_by.setter
    def occupied_by(self, occupied_by):
        """Sets the occupied_by of this ConfigInterface.

        使用类型  # noqa: E501

        :param occupied_by: The occupied_by of this ConfigInterface.  # noqa: E501
        :type: str
        """
        if occupied_by is None:
            raise ValueError("Invalid value for `occupied_by`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "NET-BOND", "NET-BRIDGE", "NET-VLAN"]  # noqa: E501
        if occupied_by not in allowed_values:
            raise ValueError(
                "Invalid value for `occupied_by` ({0}), must be one of {1}"  # noqa: E501
                .format(occupied_by, allowed_values)
            )

        self._occupied_by = occupied_by

    @property
    def occupier(self):
        """Gets the occupier of this ConfigInterface.  # noqa: E501

        引用此网口的配置列表  # noqa: E501

        :return: The occupier of this ConfigInterface.  # noqa: E501
        :rtype: list[str]
        """
        return self._occupier

    @occupier.setter
    def occupier(self, occupier):
        """Sets the occupier of this ConfigInterface.

        引用此网口的配置列表  # noqa: E501

        :param occupier: The occupier of this ConfigInterface.  # noqa: E501
        :type: list[str]
        """

        self._occupier = occupier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
