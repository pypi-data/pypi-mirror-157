# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_snat_destination_address import ConfigSnatDestinationAddress  # noqa: F401,E501
from adapi_sdk.models.config_snat_snat_process import ConfigSnatSnatProcess  # noqa: F401,E501
from adapi_sdk.models.config_snat_source_address import ConfigSnatSourceAddress  # noqa: F401,E501


class ConfigSnat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'position': 'int',
        'state': 'str',
        'type': 'str',
        'inbound_links': 'list[str]',
        'outbound_links': 'list[str]',
        'source_address': 'ConfigSnatSourceAddress',
        'destination_address': 'ConfigSnatDestinationAddress',
        'protocol': 'str',
        'protocol_number': 'int',
        'source_port': 'str',
        'destination_port': 'str',
        'snat_process': 'ConfigSnatSnatProcess'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'position': 'position',
        'state': 'state',
        'type': 'type',
        'inbound_links': 'inbound_links',
        'outbound_links': 'outbound_links',
        'source_address': 'source_address',
        'destination_address': 'destination_address',
        'protocol': 'protocol',
        'protocol_number': 'protocol_number',
        'source_port': 'source_port',
        'destination_port': 'destination_port',
        'snat_process': 'snat_process'
    }

    def __init__(self, name=None, description=None, position=None, state='ENABLE', type='IPV4', inbound_links=None, outbound_links=None, source_address=None, destination_address=None, protocol='ALL', protocol_number=None, source_port='ALL', destination_port='ALL', snat_process=None):  # noqa: E501
        """ConfigSnat - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._position = None
        self._state = None
        self._type = None
        self._inbound_links = None
        self._outbound_links = None
        self._source_address = None
        self._destination_address = None
        self._protocol = None
        self._protocol_number = None
        self._source_port = None
        self._destination_port = None
        self._snat_process = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if position is not None:
            self.position = position
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if inbound_links is not None:
            self.inbound_links = inbound_links
        if outbound_links is not None:
            self.outbound_links = outbound_links
        if source_address is not None:
            self.source_address = source_address
        if destination_address is not None:
            self.destination_address = destination_address
        if protocol is not None:
            self.protocol = protocol
        if protocol_number is not None:
            self.protocol_number = protocol_number
        if source_port is not None:
            self.source_port = source_port
        if destination_port is not None:
            self.destination_port = destination_port
        self.snat_process = snat_process

    @property
    def name(self):
        """Gets the name of this ConfigSnat.  # noqa: E501

        指定源地址转换的名称, 在源地址转换配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSnat.

        指定源地址转换的名称, 在源地址转换配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigSnat.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSnat.  # noqa: E501

        可以对该源地址转换进行额外的信息补充。  # noqa: E501

        :return: The description of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSnat.

        可以对该源地址转换进行额外的信息补充。  # noqa: E501

        :param description: The description of this ConfigSnat.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def position(self):
        """Gets the position of this ConfigSnat.  # noqa: E501

        从1开始移动配置的位置。  # noqa: E501

        :return: The position of this ConfigSnat.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ConfigSnat.

        从1开始移动配置的位置。  # noqa: E501

        :param position: The position of this ConfigSnat.  # noqa: E501
        :type: int
        """
        if position is not None and position > 65535:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `65535`")  # noqa: E501
        if position is not None and position < 0:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._position = position

    @property
    def state(self):
        """Gets the state of this ConfigSnat.  # noqa: E501

        源地址转换的配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The state of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigSnat.

        源地址转换的配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param state: The state of this ConfigSnat.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ConfigSnat.  # noqa: E501

        源地址转换的类型,ipv4 表示地址类型为V4;ipv6 表示地址类型为V6。  # noqa: E501

        :return: The type of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigSnat.

        源地址转换的类型,ipv4 表示地址类型为V4;ipv6 表示地址类型为V6。  # noqa: E501

        :param type: The type of this ConfigSnat.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def inbound_links(self):
        """Gets the inbound_links of this ConfigSnat.  # noqa: E501

        源地址转换入接口列表  # noqa: E501

        :return: The inbound_links of this ConfigSnat.  # noqa: E501
        :rtype: list[str]
        """
        return self._inbound_links

    @inbound_links.setter
    def inbound_links(self, inbound_links):
        """Sets the inbound_links of this ConfigSnat.

        源地址转换入接口列表  # noqa: E501

        :param inbound_links: The inbound_links of this ConfigSnat.  # noqa: E501
        :type: list[str]
        """

        self._inbound_links = inbound_links

    @property
    def outbound_links(self):
        """Gets the outbound_links of this ConfigSnat.  # noqa: E501

        源地址转换出接口列表  # noqa: E501

        :return: The outbound_links of this ConfigSnat.  # noqa: E501
        :rtype: list[str]
        """
        return self._outbound_links

    @outbound_links.setter
    def outbound_links(self, outbound_links):
        """Sets the outbound_links of this ConfigSnat.

        源地址转换出接口列表  # noqa: E501

        :param outbound_links: The outbound_links of this ConfigSnat.  # noqa: E501
        :type: list[str]
        """

        self._outbound_links = outbound_links

    @property
    def source_address(self):
        """Gets the source_address of this ConfigSnat.  # noqa: E501


        :return: The source_address of this ConfigSnat.  # noqa: E501
        :rtype: ConfigSnatSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigSnat.


        :param source_address: The source_address of this ConfigSnat.  # noqa: E501
        :type: ConfigSnatSourceAddress
        """

        self._source_address = source_address

    @property
    def destination_address(self):
        """Gets the destination_address of this ConfigSnat.  # noqa: E501


        :return: The destination_address of this ConfigSnat.  # noqa: E501
        :rtype: ConfigSnatDestinationAddress
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this ConfigSnat.


        :param destination_address: The destination_address of this ConfigSnat.  # noqa: E501
        :type: ConfigSnatDestinationAddress
        """

        self._destination_address = destination_address

    @property
    def protocol(self):
        """Gets the protocol of this ConfigSnat.  # noqa: E501

        协议类型，可选择TCP，UDP，ICMP，ICMPV6，ALL表示所有，OTHER表示其他。  # noqa: E501

        :return: The protocol of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConfigSnat.

        协议类型，可选择TCP，UDP，ICMP，ICMPV6，ALL表示所有，OTHER表示其他。  # noqa: E501

        :param protocol: The protocol of this ConfigSnat.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "TCP", "UDP", "ICMP", "ICMPV6", "OTHER"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def protocol_number(self):
        """Gets the protocol_number of this ConfigSnat.  # noqa: E501

        协议号，选择OTHER协议时，需要输入协议号(0-255)。  # noqa: E501

        :return: The protocol_number of this ConfigSnat.  # noqa: E501
        :rtype: int
        """
        return self._protocol_number

    @protocol_number.setter
    def protocol_number(self, protocol_number):
        """Sets the protocol_number of this ConfigSnat.

        协议号，选择OTHER协议时，需要输入协议号(0-255)。  # noqa: E501

        :param protocol_number: The protocol_number of this ConfigSnat.  # noqa: E501
        :type: int
        """
        if protocol_number is not None and protocol_number > 255:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value less than or equal to `255`")  # noqa: E501
        if protocol_number is not None and protocol_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protocol_number = protocol_number

    @property
    def source_port(self):
        """Gets the source_port of this ConfigSnat.  # noqa: E501

        转换前的源ip端口范围，ALL表示没有设置。  # noqa: E501

        :return: The source_port of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this ConfigSnat.

        转换前的源ip端口范围，ALL表示没有设置。  # noqa: E501

        :param source_port: The source_port of this ConfigSnat.  # noqa: E501
        :type: str
        """

        self._source_port = source_port

    @property
    def destination_port(self):
        """Gets the destination_port of this ConfigSnat.  # noqa: E501

        转换前的目的ip端口范围，ALL表示没有设置。  # noqa: E501

        :return: The destination_port of this ConfigSnat.  # noqa: E501
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this ConfigSnat.

        转换前的目的ip端口范围，ALL表示没有设置。  # noqa: E501

        :param destination_port: The destination_port of this ConfigSnat.  # noqa: E501
        :type: str
        """

        self._destination_port = destination_port

    @property
    def snat_process(self):
        """Gets the snat_process of this ConfigSnat.  # noqa: E501


        :return: The snat_process of this ConfigSnat.  # noqa: E501
        :rtype: ConfigSnatSnatProcess
        """
        return self._snat_process

    @snat_process.setter
    def snat_process(self, snat_process):
        """Sets the snat_process of this ConfigSnat.


        :param snat_process: The snat_process of this ConfigSnat.  # noqa: E501
        :type: ConfigSnatSnatProcess
        """
        if snat_process is None:
            raise ValueError("Invalid value for `snat_process`, must not be `None`")  # noqa: E501

        self._snat_process = snat_process

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSnat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSnat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
