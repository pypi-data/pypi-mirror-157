# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_ddosdefendlan_icmp_flood import ConfigDdosdefendlanIcmpFlood  # noqa: F401,E501
from adapi_sdk.models.config_ddosdefendlan_syn_flood import ConfigDdosdefendlanSynFlood  # noqa: F401,E501
from adapi_sdk.models.config_ddosdefendlan_udp_flood import ConfigDdosdefendlanUdpFlood  # noqa: F401,E501


class ConfigDdosDefendLan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syn_flood': 'ConfigDdosdefendlanSynFlood',
        'udp_flood': 'ConfigDdosdefendlanUdpFlood',
        'icmp_flood': 'ConfigDdosdefendlanIcmpFlood',
        'release_persist_packet': 'str',
        'source_address_white_list': 'list[str]'
    }

    attribute_map = {
        'syn_flood': 'syn_flood',
        'udp_flood': 'udp_flood',
        'icmp_flood': 'icmp_flood',
        'release_persist_packet': 'release_persist_packet',
        'source_address_white_list': 'source_address_white_list'
    }

    def __init__(self, syn_flood=None, udp_flood=None, icmp_flood=None, release_persist_packet='ENABLE', source_address_white_list=None):  # noqa: E501
        """ConfigDdosDefendLan - a model defined in Swagger"""  # noqa: E501

        self._syn_flood = None
        self._udp_flood = None
        self._icmp_flood = None
        self._release_persist_packet = None
        self._source_address_white_list = None
        self.discriminator = None

        if syn_flood is not None:
            self.syn_flood = syn_flood
        if udp_flood is not None:
            self.udp_flood = udp_flood
        if icmp_flood is not None:
            self.icmp_flood = icmp_flood
        if release_persist_packet is not None:
            self.release_persist_packet = release_persist_packet
        if source_address_white_list is not None:
            self.source_address_white_list = source_address_white_list

    @property
    def syn_flood(self):
        """Gets the syn_flood of this ConfigDdosDefendLan.  # noqa: E501


        :return: The syn_flood of this ConfigDdosDefendLan.  # noqa: E501
        :rtype: ConfigDdosdefendlanSynFlood
        """
        return self._syn_flood

    @syn_flood.setter
    def syn_flood(self, syn_flood):
        """Sets the syn_flood of this ConfigDdosDefendLan.


        :param syn_flood: The syn_flood of this ConfigDdosDefendLan.  # noqa: E501
        :type: ConfigDdosdefendlanSynFlood
        """

        self._syn_flood = syn_flood

    @property
    def udp_flood(self):
        """Gets the udp_flood of this ConfigDdosDefendLan.  # noqa: E501


        :return: The udp_flood of this ConfigDdosDefendLan.  # noqa: E501
        :rtype: ConfigDdosdefendlanUdpFlood
        """
        return self._udp_flood

    @udp_flood.setter
    def udp_flood(self, udp_flood):
        """Sets the udp_flood of this ConfigDdosDefendLan.


        :param udp_flood: The udp_flood of this ConfigDdosDefendLan.  # noqa: E501
        :type: ConfigDdosdefendlanUdpFlood
        """

        self._udp_flood = udp_flood

    @property
    def icmp_flood(self):
        """Gets the icmp_flood of this ConfigDdosDefendLan.  # noqa: E501


        :return: The icmp_flood of this ConfigDdosDefendLan.  # noqa: E501
        :rtype: ConfigDdosdefendlanIcmpFlood
        """
        return self._icmp_flood

    @icmp_flood.setter
    def icmp_flood(self, icmp_flood):
        """Sets the icmp_flood of this ConfigDdosDefendLan.


        :param icmp_flood: The icmp_flood of this ConfigDdosDefendLan.  # noqa: E501
        :type: ConfigDdosdefendlanIcmpFlood
        """

        self._icmp_flood = icmp_flood

    @property
    def release_persist_packet(self):
        """Gets the release_persist_packet of this ConfigDdosDefendLan.  # noqa: E501

        可选参数；指定放通还是丢弃已有会话的数据包，enable表示放通，disable表示丢弃，默认为放通  # noqa: E501

        :return: The release_persist_packet of this ConfigDdosDefendLan.  # noqa: E501
        :rtype: str
        """
        return self._release_persist_packet

    @release_persist_packet.setter
    def release_persist_packet(self, release_persist_packet):
        """Sets the release_persist_packet of this ConfigDdosDefendLan.

        可选参数；指定放通还是丢弃已有会话的数据包，enable表示放通，disable表示丢弃，默认为放通  # noqa: E501

        :param release_persist_packet: The release_persist_packet of this ConfigDdosDefendLan.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if release_persist_packet not in allowed_values:
            raise ValueError(
                "Invalid value for `release_persist_packet` ({0}), must be one of {1}"  # noqa: E501
                .format(release_persist_packet, allowed_values)
            )

        self._release_persist_packet = release_persist_packet

    @property
    def source_address_white_list(self):
        """Gets the source_address_white_list of this ConfigDdosDefendLan.  # noqa: E501

        可选参数；指定白名单源地址  # noqa: E501

        :return: The source_address_white_list of this ConfigDdosDefendLan.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_address_white_list

    @source_address_white_list.setter
    def source_address_white_list(self, source_address_white_list):
        """Sets the source_address_white_list of this ConfigDdosDefendLan.

        可选参数；指定白名单源地址  # noqa: E501

        :param source_address_white_list: The source_address_white_list of this ConfigDdosDefendLan.  # noqa: E501
        :type: list[str]
        """

        self._source_address_white_list = source_address_white_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDdosDefendLan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDdosDefendLan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
