# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLicence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client': 'str',
        'gwid': 'str',
        'support_expire': 'str',
        'hardware_warranty_expire': 'str',
        'basic_sn': 'str',
        'basic_state': 'str',
        'linknum': 'int',
        'ssl_sn': 'str',
        'ssl_state': 'str',
        'fast_tcp_sn': 'str',
        'fast_tcp_state': 'str',
        'http_cache_sn': 'str',
        'http_cache_state': 'str',
        'gslb_sn': 'str',
        'gslb_state': 'str',
        'software_update_sn': 'str',
        'software_update_state': 'str',
        'software_update_expire': 'str',
        'mad_sn': 'str',
        'mad_state': 'str',
        'vad_num': 'int',
        'openad_sn': 'str',
        'openad_state': 'str',
        'netns_num': 'int',
        'netns_platform_limit': 'int',
        'sn': 'str',
        'aid': 'str',
        'opr': 'str',
        'do': 'str',
        'product': 'str'
    }

    attribute_map = {
        'client': 'client',
        'gwid': 'gwid',
        'support_expire': 'support_expire',
        'hardware_warranty_expire': 'hardware_warranty_expire',
        'basic_sn': 'basic_sn',
        'basic_state': 'basic_state',
        'linknum': 'linknum',
        'ssl_sn': 'ssl_sn',
        'ssl_state': 'ssl_state',
        'fast_tcp_sn': 'fast_tcp_sn',
        'fast_tcp_state': 'fast_tcp_state',
        'http_cache_sn': 'http_cache_sn',
        'http_cache_state': 'http_cache_state',
        'gslb_sn': 'gslb_sn',
        'gslb_state': 'gslb_state',
        'software_update_sn': 'software_update_sn',
        'software_update_state': 'software_update_state',
        'software_update_expire': 'software_update_expire',
        'mad_sn': 'mad_sn',
        'mad_state': 'mad_state',
        'vad_num': 'vad_num',
        'openad_sn': 'openad_sn',
        'openad_state': 'openad_state',
        'netns_num': 'netns_num',
        'netns_platform_limit': 'netns_platform_limit',
        'sn': 'sn',
        'aid': 'aid',
        'opr': 'opr',
        'do': 'do',
        'product': 'product'
    }

    def __init__(self, client=None, gwid=None, support_expire=None, hardware_warranty_expire=None, basic_sn=None, basic_state=None, linknum=None, ssl_sn=None, ssl_state=None, fast_tcp_sn=None, fast_tcp_state=None, http_cache_sn=None, http_cache_state=None, gslb_sn=None, gslb_state=None, software_update_sn=None, software_update_state=None, software_update_expire=None, mad_sn=None, mad_state=None, vad_num=None, openad_sn=None, openad_state=None, netns_num=None, netns_platform_limit=None, sn=None, aid=None, opr=None, do=None, product=None):  # noqa: E501
        """ConfigLicence - a model defined in Swagger"""  # noqa: E501

        self._client = None
        self._gwid = None
        self._support_expire = None
        self._hardware_warranty_expire = None
        self._basic_sn = None
        self._basic_state = None
        self._linknum = None
        self._ssl_sn = None
        self._ssl_state = None
        self._fast_tcp_sn = None
        self._fast_tcp_state = None
        self._http_cache_sn = None
        self._http_cache_state = None
        self._gslb_sn = None
        self._gslb_state = None
        self._software_update_sn = None
        self._software_update_state = None
        self._software_update_expire = None
        self._mad_sn = None
        self._mad_state = None
        self._vad_num = None
        self._openad_sn = None
        self._openad_state = None
        self._netns_num = None
        self._netns_platform_limit = None
        self._sn = None
        self._aid = None
        self._opr = None
        self._do = None
        self._product = None
        self.discriminator = None

        if client is not None:
            self.client = client
        if gwid is not None:
            self.gwid = gwid
        if support_expire is not None:
            self.support_expire = support_expire
        if hardware_warranty_expire is not None:
            self.hardware_warranty_expire = hardware_warranty_expire
        if basic_sn is not None:
            self.basic_sn = basic_sn
        if basic_state is not None:
            self.basic_state = basic_state
        if linknum is not None:
            self.linknum = linknum
        if ssl_sn is not None:
            self.ssl_sn = ssl_sn
        if ssl_state is not None:
            self.ssl_state = ssl_state
        if fast_tcp_sn is not None:
            self.fast_tcp_sn = fast_tcp_sn
        if fast_tcp_state is not None:
            self.fast_tcp_state = fast_tcp_state
        if http_cache_sn is not None:
            self.http_cache_sn = http_cache_sn
        if http_cache_state is not None:
            self.http_cache_state = http_cache_state
        if gslb_sn is not None:
            self.gslb_sn = gslb_sn
        if gslb_state is not None:
            self.gslb_state = gslb_state
        if software_update_sn is not None:
            self.software_update_sn = software_update_sn
        if software_update_state is not None:
            self.software_update_state = software_update_state
        if software_update_expire is not None:
            self.software_update_expire = software_update_expire
        if mad_sn is not None:
            self.mad_sn = mad_sn
        if mad_state is not None:
            self.mad_state = mad_state
        if vad_num is not None:
            self.vad_num = vad_num
        if openad_sn is not None:
            self.openad_sn = openad_sn
        if openad_state is not None:
            self.openad_state = openad_state
        if netns_num is not None:
            self.netns_num = netns_num
        if netns_platform_limit is not None:
            self.netns_platform_limit = netns_platform_limit
        if sn is not None:
            self.sn = sn
        if aid is not None:
            self.aid = aid
        if opr is not None:
            self.opr = opr
        if do is not None:
            self.do = do
        if product is not None:
            self.product = product

    @property
    def client(self):
        """Gets the client of this ConfigLicence.  # noqa: E501

        鉴权用户名  # noqa: E501

        :return: The client of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ConfigLicence.

        鉴权用户名  # noqa: E501

        :param client: The client of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def gwid(self):
        """Gets the gwid of this ConfigLicence.  # noqa: E501

        网关ID,此字段为只读字段  # noqa: E501

        :return: The gwid of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._gwid

    @gwid.setter
    def gwid(self, gwid):
        """Sets the gwid of this ConfigLicence.

        网关ID,此字段为只读字段  # noqa: E501

        :param gwid: The gwid of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._gwid = gwid

    @property
    def support_expire(self):
        """Gets the support_expire of this ConfigLicence.  # noqa: E501

        电话服务截止日期,此字段为只读字段  # noqa: E501

        :return: The support_expire of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._support_expire

    @support_expire.setter
    def support_expire(self, support_expire):
        """Sets the support_expire of this ConfigLicence.

        电话服务截止日期,此字段为只读字段  # noqa: E501

        :param support_expire: The support_expire of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._support_expire = support_expire

    @property
    def hardware_warranty_expire(self):
        """Gets the hardware_warranty_expire of this ConfigLicence.  # noqa: E501

        硬件质保服务有效期,此字段为只读字段  # noqa: E501

        :return: The hardware_warranty_expire of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._hardware_warranty_expire

    @hardware_warranty_expire.setter
    def hardware_warranty_expire(self, hardware_warranty_expire):
        """Sets the hardware_warranty_expire of this ConfigLicence.

        硬件质保服务有效期,此字段为只读字段  # noqa: E501

        :param hardware_warranty_expire: The hardware_warranty_expire of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._hardware_warranty_expire = hardware_warranty_expire

    @property
    def basic_sn(self):
        """Gets the basic_sn of this ConfigLicence.  # noqa: E501

        基本的序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The basic_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._basic_sn

    @basic_sn.setter
    def basic_sn(self, basic_sn):
        """Sets the basic_sn of this ConfigLicence.

        基本的序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param basic_sn: The basic_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if basic_sn is not None and len(basic_sn) > 16:
            raise ValueError("Invalid value for `basic_sn`, length must be less than or equal to `16`")  # noqa: E501
        if basic_sn is not None and len(basic_sn) < 16:
            raise ValueError("Invalid value for `basic_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._basic_sn = basic_sn

    @property
    def basic_state(self):
        """Gets the basic_state of this ConfigLicence.  # noqa: E501

        基本状态信息  # noqa: E501

        :return: The basic_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._basic_state

    @basic_state.setter
    def basic_state(self, basic_state):
        """Sets the basic_state of this ConfigLicence.

        基本状态信息  # noqa: E501

        :param basic_state: The basic_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if basic_state not in allowed_values:
            raise ValueError(
                "Invalid value for `basic_state` ({0}), must be one of {1}"  # noqa: E501
                .format(basic_state, allowed_values)
            )

        self._basic_state = basic_state

    @property
    def linknum(self):
        """Gets the linknum of this ConfigLicence.  # noqa: E501

        链路数量  # noqa: E501

        :return: The linknum of this ConfigLicence.  # noqa: E501
        :rtype: int
        """
        return self._linknum

    @linknum.setter
    def linknum(self, linknum):
        """Sets the linknum of this ConfigLicence.

        链路数量  # noqa: E501

        :param linknum: The linknum of this ConfigLicence.  # noqa: E501
        :type: int
        """

        self._linknum = linknum

    @property
    def ssl_sn(self):
        """Gets the ssl_sn of this ConfigLicence.  # noqa: E501

        ssl序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The ssl_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._ssl_sn

    @ssl_sn.setter
    def ssl_sn(self, ssl_sn):
        """Sets the ssl_sn of this ConfigLicence.

        ssl序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param ssl_sn: The ssl_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if ssl_sn is not None and len(ssl_sn) > 16:
            raise ValueError("Invalid value for `ssl_sn`, length must be less than or equal to `16`")  # noqa: E501
        if ssl_sn is not None and len(ssl_sn) < 16:
            raise ValueError("Invalid value for `ssl_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._ssl_sn = ssl_sn

    @property
    def ssl_state(self):
        """Gets the ssl_state of this ConfigLicence.  # noqa: E501

        ssl授权状态信息  # noqa: E501

        :return: The ssl_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._ssl_state

    @ssl_state.setter
    def ssl_state(self, ssl_state):
        """Sets the ssl_state of this ConfigLicence.

        ssl授权状态信息  # noqa: E501

        :param ssl_state: The ssl_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if ssl_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_state` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_state, allowed_values)
            )

        self._ssl_state = ssl_state

    @property
    def fast_tcp_sn(self):
        """Gets the fast_tcp_sn of this ConfigLicence.  # noqa: E501

        tcp单边加速序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The fast_tcp_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._fast_tcp_sn

    @fast_tcp_sn.setter
    def fast_tcp_sn(self, fast_tcp_sn):
        """Sets the fast_tcp_sn of this ConfigLicence.

        tcp单边加速序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param fast_tcp_sn: The fast_tcp_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if fast_tcp_sn is not None and len(fast_tcp_sn) > 16:
            raise ValueError("Invalid value for `fast_tcp_sn`, length must be less than or equal to `16`")  # noqa: E501
        if fast_tcp_sn is not None and len(fast_tcp_sn) < 16:
            raise ValueError("Invalid value for `fast_tcp_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._fast_tcp_sn = fast_tcp_sn

    @property
    def fast_tcp_state(self):
        """Gets the fast_tcp_state of this ConfigLicence.  # noqa: E501

        tcp单边加速状态信息  # noqa: E501

        :return: The fast_tcp_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._fast_tcp_state

    @fast_tcp_state.setter
    def fast_tcp_state(self, fast_tcp_state):
        """Sets the fast_tcp_state of this ConfigLicence.

        tcp单边加速状态信息  # noqa: E501

        :param fast_tcp_state: The fast_tcp_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if fast_tcp_state not in allowed_values:
            raise ValueError(
                "Invalid value for `fast_tcp_state` ({0}), must be one of {1}"  # noqa: E501
                .format(fast_tcp_state, allowed_values)
            )

        self._fast_tcp_state = fast_tcp_state

    @property
    def http_cache_sn(self):
        """Gets the http_cache_sn of this ConfigLicence.  # noqa: E501

        http缓存序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The http_cache_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._http_cache_sn

    @http_cache_sn.setter
    def http_cache_sn(self, http_cache_sn):
        """Sets the http_cache_sn of this ConfigLicence.

        http缓存序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param http_cache_sn: The http_cache_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if http_cache_sn is not None and len(http_cache_sn) > 16:
            raise ValueError("Invalid value for `http_cache_sn`, length must be less than or equal to `16`")  # noqa: E501
        if http_cache_sn is not None and len(http_cache_sn) < 16:
            raise ValueError("Invalid value for `http_cache_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._http_cache_sn = http_cache_sn

    @property
    def http_cache_state(self):
        """Gets the http_cache_state of this ConfigLicence.  # noqa: E501

        http缓存授权状态信息  # noqa: E501

        :return: The http_cache_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._http_cache_state

    @http_cache_state.setter
    def http_cache_state(self, http_cache_state):
        """Sets the http_cache_state of this ConfigLicence.

        http缓存授权状态信息  # noqa: E501

        :param http_cache_state: The http_cache_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if http_cache_state not in allowed_values:
            raise ValueError(
                "Invalid value for `http_cache_state` ({0}), must be one of {1}"  # noqa: E501
                .format(http_cache_state, allowed_values)
            )

        self._http_cache_state = http_cache_state

    @property
    def gslb_sn(self):
        """Gets the gslb_sn of this ConfigLicence.  # noqa: E501

        全局负载序列号，必须为16位大写字母和数字组成  # noqa: E501

        :return: The gslb_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._gslb_sn

    @gslb_sn.setter
    def gslb_sn(self, gslb_sn):
        """Sets the gslb_sn of this ConfigLicence.

        全局负载序列号，必须为16位大写字母和数字组成  # noqa: E501

        :param gslb_sn: The gslb_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if gslb_sn is not None and len(gslb_sn) > 16:
            raise ValueError("Invalid value for `gslb_sn`, length must be less than or equal to `16`")  # noqa: E501
        if gslb_sn is not None and len(gslb_sn) < 16:
            raise ValueError("Invalid value for `gslb_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._gslb_sn = gslb_sn

    @property
    def gslb_state(self):
        """Gets the gslb_state of this ConfigLicence.  # noqa: E501

        全局负载状态信息  # noqa: E501

        :return: The gslb_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._gslb_state

    @gslb_state.setter
    def gslb_state(self, gslb_state):
        """Sets the gslb_state of this ConfigLicence.

        全局负载状态信息  # noqa: E501

        :param gslb_state: The gslb_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if gslb_state not in allowed_values:
            raise ValueError(
                "Invalid value for `gslb_state` ({0}), must be one of {1}"  # noqa: E501
                .format(gslb_state, allowed_values)
            )

        self._gslb_state = gslb_state

    @property
    def software_update_sn(self):
        """Gets the software_update_sn of this ConfigLicence.  # noqa: E501

        软件升级序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The software_update_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._software_update_sn

    @software_update_sn.setter
    def software_update_sn(self, software_update_sn):
        """Sets the software_update_sn of this ConfigLicence.

        软件升级序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param software_update_sn: The software_update_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if software_update_sn is not None and len(software_update_sn) > 16:
            raise ValueError("Invalid value for `software_update_sn`, length must be less than or equal to `16`")  # noqa: E501
        if software_update_sn is not None and len(software_update_sn) < 16:
            raise ValueError("Invalid value for `software_update_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._software_update_sn = software_update_sn

    @property
    def software_update_state(self):
        """Gets the software_update_state of this ConfigLicence.  # noqa: E501

        软件升级状态信息  # noqa: E501

        :return: The software_update_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._software_update_state

    @software_update_state.setter
    def software_update_state(self, software_update_state):
        """Sets the software_update_state of this ConfigLicence.

        软件升级状态信息  # noqa: E501

        :param software_update_state: The software_update_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if software_update_state not in allowed_values:
            raise ValueError(
                "Invalid value for `software_update_state` ({0}), must be one of {1}"  # noqa: E501
                .format(software_update_state, allowed_values)
            )

        self._software_update_state = software_update_state

    @property
    def software_update_expire(self):
        """Gets the software_update_expire of this ConfigLicence.  # noqa: E501

        软件升级有效日期  # noqa: E501

        :return: The software_update_expire of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._software_update_expire

    @software_update_expire.setter
    def software_update_expire(self, software_update_expire):
        """Sets the software_update_expire of this ConfigLicence.

        软件升级有效日期  # noqa: E501

        :param software_update_expire: The software_update_expire of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._software_update_expire = software_update_expire

    @property
    def mad_sn(self):
        """Gets the mad_sn of this ConfigLicence.  # noqa: E501

        MAD序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The mad_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._mad_sn

    @mad_sn.setter
    def mad_sn(self, mad_sn):
        """Sets the mad_sn of this ConfigLicence.

        MAD序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param mad_sn: The mad_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if mad_sn is not None and len(mad_sn) > 16:
            raise ValueError("Invalid value for `mad_sn`, length must be less than or equal to `16`")  # noqa: E501
        if mad_sn is not None and len(mad_sn) < 16:
            raise ValueError("Invalid value for `mad_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._mad_sn = mad_sn

    @property
    def mad_state(self):
        """Gets the mad_state of this ConfigLicence.  # noqa: E501

        MAD状态信息  # noqa: E501

        :return: The mad_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._mad_state

    @mad_state.setter
    def mad_state(self, mad_state):
        """Sets the mad_state of this ConfigLicence.

        MAD状态信息  # noqa: E501

        :param mad_state: The mad_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if mad_state not in allowed_values:
            raise ValueError(
                "Invalid value for `mad_state` ({0}), must be one of {1}"  # noqa: E501
                .format(mad_state, allowed_values)
            )

        self._mad_state = mad_state

    @property
    def vad_num(self):
        """Gets the vad_num of this ConfigLicence.  # noqa: E501

        vad授权数量  # noqa: E501

        :return: The vad_num of this ConfigLicence.  # noqa: E501
        :rtype: int
        """
        return self._vad_num

    @vad_num.setter
    def vad_num(self, vad_num):
        """Sets the vad_num of this ConfigLicence.

        vad授权数量  # noqa: E501

        :param vad_num: The vad_num of this ConfigLicence.  # noqa: E501
        :type: int
        """

        self._vad_num = vad_num

    @property
    def openad_sn(self):
        """Gets the openad_sn of this ConfigLicence.  # noqa: E501

        openad序列号；必须为16位大写字母和数字组成  # noqa: E501

        :return: The openad_sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._openad_sn

    @openad_sn.setter
    def openad_sn(self, openad_sn):
        """Sets the openad_sn of this ConfigLicence.

        openad序列号；必须为16位大写字母和数字组成  # noqa: E501

        :param openad_sn: The openad_sn of this ConfigLicence.  # noqa: E501
        :type: str
        """
        if openad_sn is not None and len(openad_sn) > 16:
            raise ValueError("Invalid value for `openad_sn`, length must be less than or equal to `16`")  # noqa: E501
        if openad_sn is not None and len(openad_sn) < 16:
            raise ValueError("Invalid value for `openad_sn`, length must be greater than or equal to `16`")  # noqa: E501

        self._openad_sn = openad_sn

    @property
    def openad_state(self):
        """Gets the openad_state of this ConfigLicence.  # noqa: E501

        openad状态信息  # noqa: E501

        :return: The openad_state of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._openad_state

    @openad_state.setter
    def openad_state(self, openad_state):
        """Sets the openad_state of this ConfigLicence.

        openad状态信息  # noqa: E501

        :param openad_state: The openad_state of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if openad_state not in allowed_values:
            raise ValueError(
                "Invalid value for `openad_state` ({0}), must be one of {1}"  # noqa: E501
                .format(openad_state, allowed_values)
            )

        self._openad_state = openad_state

    @property
    def netns_num(self):
        """Gets the netns_num of this ConfigLicence.  # noqa: E501

        netns授权数量  # noqa: E501

        :return: The netns_num of this ConfigLicence.  # noqa: E501
        :rtype: int
        """
        return self._netns_num

    @netns_num.setter
    def netns_num(self, netns_num):
        """Sets the netns_num of this ConfigLicence.

        netns授权数量  # noqa: E501

        :param netns_num: The netns_num of this ConfigLicence.  # noqa: E501
        :type: int
        """

        self._netns_num = netns_num

    @property
    def netns_platform_limit(self):
        """Gets the netns_platform_limit of this ConfigLicence.  # noqa: E501

        netns平台限制数量  # noqa: E501

        :return: The netns_platform_limit of this ConfigLicence.  # noqa: E501
        :rtype: int
        """
        return self._netns_platform_limit

    @netns_platform_limit.setter
    def netns_platform_limit(self, netns_platform_limit):
        """Sets the netns_platform_limit of this ConfigLicence.

        netns平台限制数量  # noqa: E501

        :param netns_platform_limit: The netns_platform_limit of this ConfigLicence.  # noqa: E501
        :type: int
        """

        self._netns_platform_limit = netns_platform_limit

    @property
    def sn(self):
        """Gets the sn of this ConfigLicence.  # noqa: E501

        必须为16位大写字母和数字组成  # noqa: E501

        :return: The sn of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this ConfigLicence.

        必须为16位大写字母和数字组成  # noqa: E501

        :param sn: The sn of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def aid(self):
        """Gets the aid of this ConfigLicence.  # noqa: E501

        授权ID  # noqa: E501

        :return: The aid of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._aid

    @aid.setter
    def aid(self, aid):
        """Sets the aid of this ConfigLicence.

        授权ID  # noqa: E501

        :param aid: The aid of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._aid = aid

    @property
    def opr(self):
        """Gets the opr of this ConfigLicence.  # noqa: E501

        虚拟化授权操作选项  # noqa: E501

        :return: The opr of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._opr

    @opr.setter
    def opr(self, opr):
        """Sets the opr of this ConfigLicence.

        虚拟化授权操作选项  # noqa: E501

        :param opr: The opr of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBMIT", "ONLINEAUTH", "CANCELONLINEAUTH", "RETRYVERIFY"]  # noqa: E501
        if opr not in allowed_values:
            raise ValueError(
                "Invalid value for `opr` ({0}), must be one of {1}"  # noqa: E501
                .format(opr, allowed_values)
            )

        self._opr = opr

    @property
    def do(self):
        """Gets the do of this ConfigLicence.  # noqa: E501

        虚拟化变更授权选项  # noqa: E501

        :return: The do of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._do

    @do.setter
    def do(self, do):
        """Sets the do of this ConfigLicence.

        虚拟化变更授权选项  # noqa: E501

        :param do: The do of this ConfigLicence.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHANGETOONLINE", "CHANGETOVLS"]  # noqa: E501
        if do not in allowed_values:
            raise ValueError(
                "Invalid value for `do` ({0}), must be one of {1}"  # noqa: E501
                .format(do, allowed_values)
            )

        self._do = do

    @property
    def product(self):
        """Gets the product of this ConfigLicence.  # noqa: E501

        试用产品  # noqa: E501

        :return: The product of this ConfigLicence.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ConfigLicence.

        试用产品  # noqa: E501

        :param product: The product of this ConfigLicence.  # noqa: E501
        :type: str
        """

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLicence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLicence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
