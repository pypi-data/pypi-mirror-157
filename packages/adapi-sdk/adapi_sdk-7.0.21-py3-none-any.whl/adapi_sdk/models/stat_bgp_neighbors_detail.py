# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatBgpNeighborsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'neighbor_ip': 'str',
        'neighbor_as': 'int',
        'communication_state': 'str',
        'local_address': 'str',
        'neighbor_address': 'str',
        'type': 'str'
    }

    attribute_map = {
        'neighbor_ip': 'neighbor_ip',
        'neighbor_as': 'neighbor_as',
        'communication_state': 'communication_state',
        'local_address': 'local_address',
        'neighbor_address': 'neighbor_address',
        'type': 'type'
    }

    def __init__(self, neighbor_ip=None, neighbor_as=None, communication_state=None, local_address=None, neighbor_address=None, type=None):  # noqa: E501
        """StatBgpNeighborsDetail - a model defined in Swagger"""  # noqa: E501

        self._neighbor_ip = None
        self._neighbor_as = None
        self._communication_state = None
        self._local_address = None
        self._neighbor_address = None
        self._type = None
        self.discriminator = None

        if neighbor_ip is not None:
            self.neighbor_ip = neighbor_ip
        if neighbor_as is not None:
            self.neighbor_as = neighbor_as
        if communication_state is not None:
            self.communication_state = communication_state
        if local_address is not None:
            self.local_address = local_address
        if neighbor_address is not None:
            self.neighbor_address = neighbor_address
        if type is not None:
            self.type = type

    @property
    def neighbor_ip(self):
        """Gets the neighbor_ip of this StatBgpNeighborsDetail.  # noqa: E501

        邻居IP  # noqa: E501

        :return: The neighbor_ip of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_ip

    @neighbor_ip.setter
    def neighbor_ip(self, neighbor_ip):
        """Sets the neighbor_ip of this StatBgpNeighborsDetail.

        邻居IP  # noqa: E501

        :param neighbor_ip: The neighbor_ip of this StatBgpNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._neighbor_ip = neighbor_ip

    @property
    def neighbor_as(self):
        """Gets the neighbor_as of this StatBgpNeighborsDetail.  # noqa: E501

        邻居信息  # noqa: E501

        :return: The neighbor_as of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: int
        """
        return self._neighbor_as

    @neighbor_as.setter
    def neighbor_as(self, neighbor_as):
        """Sets the neighbor_as of this StatBgpNeighborsDetail.

        邻居信息  # noqa: E501

        :param neighbor_as: The neighbor_as of this StatBgpNeighborsDetail.  # noqa: E501
        :type: int
        """

        self._neighbor_as = neighbor_as

    @property
    def communication_state(self):
        """Gets the communication_state of this StatBgpNeighborsDetail.  # noqa: E501

        当前状态  # noqa: E501

        :return: The communication_state of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._communication_state

    @communication_state.setter
    def communication_state(self, communication_state):
        """Sets the communication_state of this StatBgpNeighborsDetail.

        当前状态  # noqa: E501

        :param communication_state: The communication_state of this StatBgpNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._communication_state = communication_state

    @property
    def local_address(self):
        """Gets the local_address of this StatBgpNeighborsDetail.  # noqa: E501

        本地地址  # noqa: E501

        :return: The local_address of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this StatBgpNeighborsDetail.

        本地地址  # noqa: E501

        :param local_address: The local_address of this StatBgpNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._local_address = local_address

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this StatBgpNeighborsDetail.  # noqa: E501

        邻居地址  # noqa: E501

        :return: The neighbor_address of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this StatBgpNeighborsDetail.

        邻居地址  # noqa: E501

        :param neighbor_address: The neighbor_address of this StatBgpNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._neighbor_address = neighbor_address

    @property
    def type(self):
        """Gets the type of this StatBgpNeighborsDetail.  # noqa: E501

        邻居类型  # noqa: E501

        :return: The type of this StatBgpNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatBgpNeighborsDetail.

        邻居类型  # noqa: E501

        :param type: The type of this StatBgpNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatBgpNeighborsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatBgpNeighborsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
