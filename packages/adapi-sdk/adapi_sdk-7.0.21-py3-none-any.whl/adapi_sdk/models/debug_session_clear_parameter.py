# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugSessionClearParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'srcaddr': 'str',
        'srcport': 'str',
        'dstaddr': 'str',
        'dstport': 'str',
        'protocol': 'str',
        'virtual_service': 'str',
        'session_id': 'int'
    }

    attribute_map = {
        'srcaddr': 'srcaddr',
        'srcport': 'srcport',
        'dstaddr': 'dstaddr',
        'dstport': 'dstport',
        'protocol': 'protocol',
        'virtual_service': 'virtual_service',
        'session_id': 'session_id'
    }

    def __init__(self, srcaddr=None, srcport=None, dstaddr=None, dstport=None, protocol=None, virtual_service=None, session_id=None):  # noqa: E501
        """DebugSessionClearParameter - a model defined in Swagger"""  # noqa: E501

        self._srcaddr = None
        self._srcport = None
        self._dstaddr = None
        self._dstport = None
        self._protocol = None
        self._virtual_service = None
        self._session_id = None
        self.discriminator = None

        if srcaddr is not None:
            self.srcaddr = srcaddr
        if srcport is not None:
            self.srcport = srcport
        if dstaddr is not None:
            self.dstaddr = dstaddr
        if dstport is not None:
            self.dstport = dstport
        if protocol is not None:
            self.protocol = protocol
        if virtual_service is not None:
            self.virtual_service = virtual_service
        if session_id is not None:
            self.session_id = session_id

    @property
    def srcaddr(self):
        """Gets the srcaddr of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The srcaddr of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._srcaddr

    @srcaddr.setter
    def srcaddr(self, srcaddr):
        """Sets the srcaddr of this DebugSessionClearParameter.

        可选参数；指定源IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param srcaddr: The srcaddr of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._srcaddr = srcaddr

    @property
    def srcport(self):
        """Gets the srcport of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定源端口，可以为单个端口，端口范围  # noqa: E501

        :return: The srcport of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._srcport

    @srcport.setter
    def srcport(self, srcport):
        """Sets the srcport of this DebugSessionClearParameter.

        可选参数；指定源端口，可以为单个端口，端口范围  # noqa: E501

        :param srcport: The srcport of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._srcport = srcport

    @property
    def dstaddr(self):
        """Gets the dstaddr of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :return: The dstaddr of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._dstaddr

    @dstaddr.setter
    def dstaddr(self, dstaddr):
        """Sets the dstaddr of this DebugSessionClearParameter.

        可选参数；指定目的IP地址，可以为单个IP地址，IP地址范围  # noqa: E501

        :param dstaddr: The dstaddr of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._dstaddr = dstaddr

    @property
    def dstport(self):
        """Gets the dstport of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定目的端口，可以为单个端口，端口范围  # noqa: E501

        :return: The dstport of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._dstport

    @dstport.setter
    def dstport(self, dstport):
        """Sets the dstport of this DebugSessionClearParameter.

        可选参数；指定目的端口，可以为单个端口，端口范围  # noqa: E501

        :param dstport: The dstport of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._dstport = dstport

    @property
    def protocol(self):
        """Gets the protocol of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定协议类型，可以为协议名称，协议号  # noqa: E501

        :return: The protocol of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DebugSessionClearParameter.

        可选参数；指定协议类型，可以为协议名称，协议号  # noqa: E501

        :param protocol: The protocol of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def virtual_service(self):
        """Gets the virtual_service of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定虚拟服务  # noqa: E501

        :return: The virtual_service of this DebugSessionClearParameter.  # noqa: E501
        :rtype: str
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this DebugSessionClearParameter.

        可选参数；指定虚拟服务  # noqa: E501

        :param virtual_service: The virtual_service of this DebugSessionClearParameter.  # noqa: E501
        :type: str
        """

        self._virtual_service = virtual_service

    @property
    def session_id(self):
        """Gets the session_id of this DebugSessionClearParameter.  # noqa: E501

        可选参数；指定session_id  # noqa: E501

        :return: The session_id of this DebugSessionClearParameter.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DebugSessionClearParameter.

        可选参数；指定session_id  # noqa: E501

        :param session_id: The session_id of this DebugSessionClearParameter.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugSessionClearParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugSessionClearParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
