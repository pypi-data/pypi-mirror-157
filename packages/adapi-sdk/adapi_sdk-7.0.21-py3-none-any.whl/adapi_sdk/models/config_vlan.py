# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_vlan_interface import ConfigVlanInterface  # noqa: F401,E501


class ConfigVlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'interface': 'ConfigVlanInterface',
        'vlan_id': 'int',
        'device_name': 'str',
        'mac_address': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'interface': 'interface',
        'vlan_id': 'vlan_id',
        'device_name': 'device_name',
        'mac_address': 'mac_address'
    }

    def __init__(self, name=None, description=None, interface=None, vlan_id=None, device_name=None, mac_address=None):  # noqa: E501
        """ConfigVlan - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._interface = None
        self._vlan_id = None
        self._device_name = None
        self._mac_address = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.interface = interface
        self.vlan_id = vlan_id
        if device_name is not None:
            self.device_name = device_name
        if mac_address is not None:
            self.mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this ConfigVlan.  # noqa: E501

        必选参数；所创建vlan子接口配置名称  # noqa: E501

        :return: The name of this ConfigVlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigVlan.

        必选参数；所创建vlan子接口配置名称  # noqa: E501

        :param name: The name of this ConfigVlan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigVlan.  # noqa: E501

        可选参数；所创建vlan子接口描述标签  # noqa: E501

        :return: The description of this ConfigVlan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVlan.

        可选参数；所创建vlan子接口描述标签  # noqa: E501

        :param description: The description of this ConfigVlan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def interface(self):
        """Gets the interface of this ConfigVlan.  # noqa: E501


        :return: The interface of this ConfigVlan.  # noqa: E501
        :rtype: ConfigVlanInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ConfigVlan.


        :param interface: The interface of this ConfigVlan.  # noqa: E501
        :type: ConfigVlanInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def vlan_id(self):
        """Gets the vlan_id of this ConfigVlan.  # noqa: E501

        必选参数；vlan接口id值  # noqa: E501

        :return: The vlan_id of this ConfigVlan.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this ConfigVlan.

        必选参数；vlan接口id值  # noqa: E501

        :param vlan_id: The vlan_id of this ConfigVlan.  # noqa: E501
        :type: int
        """
        if vlan_id is None:
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")  # noqa: E501
        if vlan_id is not None and vlan_id > 4094:  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if vlan_id is not None and vlan_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def device_name(self):
        """Gets the device_name of this ConfigVlan.  # noqa: E501

        设备名称  # noqa: E501

        :return: The device_name of this ConfigVlan.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ConfigVlan.

        设备名称  # noqa: E501

        :param device_name: The device_name of this ConfigVlan.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def mac_address(self):
        """Gets the mac_address of this ConfigVlan.  # noqa: E501

        MAC地址  # noqa: E501

        :return: The mac_address of this ConfigVlan.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ConfigVlan.

        MAC地址  # noqa: E501

        :param mac_address: The mac_address of this ConfigVlan.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
