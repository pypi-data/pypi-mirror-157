# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLocalDnsSettingSecurityTrustAnchor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trust_anchor_child': 'str',
        'domain': 'str',
        'ttl': 'int',
        '_class': 'str',
        'record_type': 'str',
        'uuid': 'int',
        'algorithm_type': 'int',
        'summary_type': 'int',
        'key_label': 'int',
        'protocol': 'int',
        'value': 'str',
        'secret_key': 'str'
    }

    attribute_map = {
        'trust_anchor_child': 'trust_anchor_child',
        'domain': 'domain',
        'ttl': 'ttl',
        '_class': 'class',
        'record_type': 'record_type',
        'uuid': 'uuid',
        'algorithm_type': 'algorithm_type',
        'summary_type': 'summary_type',
        'key_label': 'key_label',
        'protocol': 'protocol',
        'value': 'value',
        'secret_key': 'secret_key'
    }

    def __init__(self, trust_anchor_child='.       86400   IN      DNSKEY  257 3 8 AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3+/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kvArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+eoZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfdRUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwNR1AkUTV74bU=', domain=None, ttl=None, _class='IN', record_type=None, uuid=None, algorithm_type=None, summary_type=None, key_label=None, protocol=None, value=None, secret_key=None):  # noqa: E501
        """ConfigLocalDnsSettingSecurityTrustAnchor - a model defined in Swagger"""  # noqa: E501

        self._trust_anchor_child = None
        self._domain = None
        self._ttl = None
        self.__class = None
        self._record_type = None
        self._uuid = None
        self._algorithm_type = None
        self._summary_type = None
        self._key_label = None
        self._protocol = None
        self._value = None
        self._secret_key = None
        self.discriminator = None

        if trust_anchor_child is not None:
            self.trust_anchor_child = trust_anchor_child
        if domain is not None:
            self.domain = domain
        if ttl is not None:
            self.ttl = ttl
        if _class is not None:
            self._class = _class
        if record_type is not None:
            self.record_type = record_type
        if uuid is not None:
            self.uuid = uuid
        if algorithm_type is not None:
            self.algorithm_type = algorithm_type
        if summary_type is not None:
            self.summary_type = summary_type
        if key_label is not None:
            self.key_label = key_label
        if protocol is not None:
            self.protocol = protocol
        if value is not None:
            self.value = value
        if secret_key is not None:
            self.secret_key = secret_key

    @property
    def trust_anchor_child(self):
        """Gets the trust_anchor_child of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚记录，开启dnssec时必填  # noqa: E501

        :return: The trust_anchor_child of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._trust_anchor_child

    @trust_anchor_child.setter
    def trust_anchor_child(self, trust_anchor_child):
        """Sets the trust_anchor_child of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚记录，开启dnssec时必填  # noqa: E501

        :param trust_anchor_child: The trust_anchor_child of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """

        self._trust_anchor_child = trust_anchor_child

    @property
    def domain(self):
        """Gets the domain of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的域名  # noqa: E501

        :return: The domain of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的域名  # noqa: E501

        :param domain: The domain of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ttl(self):
        """Gets the ttl of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的域名  # noqa: E501

        :return: The ttl of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的域名  # noqa: E501

        :param ttl: The ttl of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    @property
    def _class(self):
        """Gets the _class of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的CLASS  # noqa: E501

        :return: The _class of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的CLASS  # noqa: E501

        :param _class: The _class of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def record_type(self):
        """Gets the record_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的DNS记录类型  # noqa: E501

        :return: The record_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的DNS记录类型  # noqa: E501

        :param record_type: The record_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def uuid(self):
        """Gets the uuid of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的标识符范围为0~65536  # noqa: E501

        :return: The uuid of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的标识符范围为0~65536  # noqa: E501

        :param uuid: The uuid of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if uuid is not None and uuid > 65536:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must be a value less than or equal to `65536`")  # noqa: E501
        if uuid is not None and uuid < 0:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._uuid = uuid

    @property
    def algorithm_type(self):
        """Gets the algorithm_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的算法类型范围为0~512  # noqa: E501

        :return: The algorithm_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._algorithm_type

    @algorithm_type.setter
    def algorithm_type(self, algorithm_type):
        """Sets the algorithm_type of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的算法类型范围为0~512  # noqa: E501

        :param algorithm_type: The algorithm_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if algorithm_type is not None and algorithm_type > 512:  # noqa: E501
            raise ValueError("Invalid value for `algorithm_type`, must be a value less than or equal to `512`")  # noqa: E501
        if algorithm_type is not None and algorithm_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `algorithm_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._algorithm_type = algorithm_type

    @property
    def summary_type(self):
        """Gets the summary_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的摘要类型范围为0~512  # noqa: E501

        :return: The summary_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._summary_type

    @summary_type.setter
    def summary_type(self, summary_type):
        """Sets the summary_type of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的摘要类型范围为0~512  # noqa: E501

        :param summary_type: The summary_type of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if summary_type is not None and summary_type > 512:  # noqa: E501
            raise ValueError("Invalid value for `summary_type`, must be a value less than or equal to `512`")  # noqa: E501
        if summary_type is not None and summary_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `summary_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._summary_type = summary_type

    @property
    def key_label(self):
        """Gets the key_label of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的KEY标签  # noqa: E501

        :return: The key_label of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._key_label

    @key_label.setter
    def key_label(self, key_label):
        """Sets the key_label of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的KEY标签  # noqa: E501

        :param key_label: The key_label of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if key_label is not None and key_label > 65536:  # noqa: E501
            raise ValueError("Invalid value for `key_label`, must be a value less than or equal to `65536`")  # noqa: E501
        if key_label is not None and key_label < 0:  # noqa: E501
            raise ValueError("Invalid value for `key_label`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_label = key_label

    @property
    def protocol(self):
        """Gets the protocol of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的协议范围为0~512  # noqa: E501

        :return: The protocol of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的协议范围为0~512  # noqa: E501

        :param protocol: The protocol of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: int
        """
        if protocol is not None and protocol > 512:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must be a value less than or equal to `512`")  # noqa: E501
        if protocol is not None and protocol < 0:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protocol = protocol

    @property
    def value(self):
        """Gets the value of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的摘要值  # noqa: E501

        :return: The value of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的摘要值  # noqa: E501

        :param value: The value of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """
        if value is not None and len(value) > 3800:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `3800`")  # noqa: E501

        self._value = value

    @property
    def secret_key(self):
        """Gets the secret_key of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501

        信任锚中的密钥  # noqa: E501

        :return: The secret_key of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ConfigLocalDnsSettingSecurityTrustAnchor.

        信任锚中的密钥  # noqa: E501

        :param secret_key: The secret_key of this ConfigLocalDnsSettingSecurityTrustAnchor.  # noqa: E501
        :type: str
        """
        if secret_key is not None and len(secret_key) > 3800:
            raise ValueError("Invalid value for `secret_key`, length must be less than or equal to `3800`")  # noqa: E501

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalDnsSettingSecurityTrustAnchor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalDnsSettingSecurityTrustAnchor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
