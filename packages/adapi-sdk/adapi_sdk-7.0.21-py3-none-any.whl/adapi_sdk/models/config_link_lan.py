# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_link_lan_arp_detect import ConfigLinkLanArpDetect  # noqa: F401,E501
from adapi_sdk.models.config_link_lan_cluster_addresses import ConfigLinkLanClusterAddresses  # noqa: F401,E501
from adapi_sdk.models.config_link_lan_failsafe import ConfigLinkLanFailsafe  # noqa: F401,E501
from adapi_sdk.models.config_link_lan_interface import ConfigLinkLanInterface  # noqa: F401,E501
from adapi_sdk.models.config_link_lan_monitors import ConfigLinkLanMonitors  # noqa: F401,E501


class ConfigLinkLan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'type': 'str',
        'interface': 'ConfigLinkLanInterface',
        'addresses': 'list[str]',
        'dns_servers': 'list[str]',
        'cluster_addresses': 'list[ConfigLinkLanClusterAddresses]',
        'arp_detect': 'ConfigLinkLanArpDetect',
        'monitors': 'list[ConfigLinkLanMonitors]',
        'cable_plugin_detect': 'str',
        'failsafe': 'ConfigLinkLanFailsafe'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'type': 'type',
        'interface': 'interface',
        'addresses': 'addresses',
        'dns_servers': 'dns_servers',
        'cluster_addresses': 'cluster_addresses',
        'arp_detect': 'arp_detect',
        'monitors': 'monitors',
        'cable_plugin_detect': 'cable_plugin_detect',
        'failsafe': 'failsafe'
    }

    def __init__(self, name=None, description=None, state='ENABLE', type='LAN', interface=None, addresses=None, dns_servers=None, cluster_addresses=None, arp_detect=None, monitors=None, cable_plugin_detect='ENABLE', failsafe=None):  # noqa: E501
        """ConfigLinkLan - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._type = None
        self._interface = None
        self._addresses = None
        self._dns_servers = None
        self._cluster_addresses = None
        self._arp_detect = None
        self._monitors = None
        self._cable_plugin_detect = None
        self._failsafe = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        self.interface = interface
        if addresses is not None:
            self.addresses = addresses
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if cluster_addresses is not None:
            self.cluster_addresses = cluster_addresses
        if arp_detect is not None:
            self.arp_detect = arp_detect
        if monitors is not None:
            self.monitors = monitors
        if cable_plugin_detect is not None:
            self.cable_plugin_detect = cable_plugin_detect
        if failsafe is not None:
            self.failsafe = failsafe

    @property
    def name(self):
        """Gets the name of this ConfigLinkLan.  # noqa: E501

        必选参数；配置名称  # noqa: E501

        :return: The name of this ConfigLinkLan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigLinkLan.

        必选参数；配置名称  # noqa: E501

        :param name: The name of this ConfigLinkLan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigLinkLan.  # noqa: E501

        可选参数；所配置lan口描述标签  # noqa: E501

        :return: The description of this ConfigLinkLan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigLinkLan.

        可选参数；所配置lan口描述标签  # noqa: E501

        :param description: The description of this ConfigLinkLan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigLinkLan.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用），默认值enable  # noqa: E501

        :return: The state of this ConfigLinkLan.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigLinkLan.

        可选参数；启/禁用（enable-启用/disable-禁用），默认值enable  # noqa: E501

        :param state: The state of this ConfigLinkLan.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ConfigLinkLan.  # noqa: E501

        可选参数；类别（lan），默认值lan  # noqa: E501

        :return: The type of this ConfigLinkLan.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigLinkLan.

        可选参数；类别（lan），默认值lan  # noqa: E501

        :param type: The type of this ConfigLinkLan.  # noqa: E501
        :type: str
        """
        allowed_values = ["LAN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def interface(self):
        """Gets the interface of this ConfigLinkLan.  # noqa: E501


        :return: The interface of this ConfigLinkLan.  # noqa: E501
        :rtype: ConfigLinkLanInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ConfigLinkLan.


        :param interface: The interface of this ConfigLinkLan.  # noqa: E501
        :type: ConfigLinkLanInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def addresses(self):
        """Gets the addresses of this ConfigLinkLan.  # noqa: E501

        必选参数；地址列表（集群模式浮动IP地址）  # noqa: E501

        :return: The addresses of this ConfigLinkLan.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ConfigLinkLan.

        必选参数；地址列表（集群模式浮动IP地址）  # noqa: E501

        :param addresses: The addresses of this ConfigLinkLan.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def dns_servers(self):
        """Gets the dns_servers of this ConfigLinkLan.  # noqa: E501

        可选参数；DNS列表  # noqa: E501

        :return: The dns_servers of this ConfigLinkLan.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this ConfigLinkLan.

        可选参数；DNS列表  # noqa: E501

        :param dns_servers: The dns_servers of this ConfigLinkLan.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def cluster_addresses(self):
        """Gets the cluster_addresses of this ConfigLinkLan.  # noqa: E501

        可选参数；集群成员静态IP地址（仅在集群模式下生效）  # noqa: E501

        :return: The cluster_addresses of this ConfigLinkLan.  # noqa: E501
        :rtype: list[ConfigLinkLanClusterAddresses]
        """
        return self._cluster_addresses

    @cluster_addresses.setter
    def cluster_addresses(self, cluster_addresses):
        """Sets the cluster_addresses of this ConfigLinkLan.

        可选参数；集群成员静态IP地址（仅在集群模式下生效）  # noqa: E501

        :param cluster_addresses: The cluster_addresses of this ConfigLinkLan.  # noqa: E501
        :type: list[ConfigLinkLanClusterAddresses]
        """

        self._cluster_addresses = cluster_addresses

    @property
    def arp_detect(self):
        """Gets the arp_detect of this ConfigLinkLan.  # noqa: E501


        :return: The arp_detect of this ConfigLinkLan.  # noqa: E501
        :rtype: ConfigLinkLanArpDetect
        """
        return self._arp_detect

    @arp_detect.setter
    def arp_detect(self, arp_detect):
        """Sets the arp_detect of this ConfigLinkLan.


        :param arp_detect: The arp_detect of this ConfigLinkLan.  # noqa: E501
        :type: ConfigLinkLanArpDetect
        """

        self._arp_detect = arp_detect

    @property
    def monitors(self):
        """Gets the monitors of this ConfigLinkLan.  # noqa: E501

        可选参数；链路健康检查列表  # noqa: E501

        :return: The monitors of this ConfigLinkLan.  # noqa: E501
        :rtype: list[ConfigLinkLanMonitors]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this ConfigLinkLan.

        可选参数；链路健康检查列表  # noqa: E501

        :param monitors: The monitors of this ConfigLinkLan.  # noqa: E501
        :type: list[ConfigLinkLanMonitors]
        """

        self._monitors = monitors

    @property
    def cable_plugin_detect(self):
        """Gets the cable_plugin_detect of this ConfigLinkLan.  # noqa: E501

        可选参数；插拔网线检测（enable-启用/disable-禁用），默认值disable  # noqa: E501

        :return: The cable_plugin_detect of this ConfigLinkLan.  # noqa: E501
        :rtype: str
        """
        return self._cable_plugin_detect

    @cable_plugin_detect.setter
    def cable_plugin_detect(self, cable_plugin_detect):
        """Sets the cable_plugin_detect of this ConfigLinkLan.

        可选参数；插拔网线检测（enable-启用/disable-禁用），默认值disable  # noqa: E501

        :param cable_plugin_detect: The cable_plugin_detect of this ConfigLinkLan.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if cable_plugin_detect not in allowed_values:
            raise ValueError(
                "Invalid value for `cable_plugin_detect` ({0}), must be one of {1}"  # noqa: E501
                .format(cable_plugin_detect, allowed_values)
            )

        self._cable_plugin_detect = cable_plugin_detect

    @property
    def failsafe(self):
        """Gets the failsafe of this ConfigLinkLan.  # noqa: E501


        :return: The failsafe of this ConfigLinkLan.  # noqa: E501
        :rtype: ConfigLinkLanFailsafe
        """
        return self._failsafe

    @failsafe.setter
    def failsafe(self, failsafe):
        """Sets the failsafe of this ConfigLinkLan.


        :param failsafe: The failsafe of this ConfigLinkLan.  # noqa: E501
        :type: ConfigLinkLanFailsafe
        """

        self._failsafe = failsafe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLinkLan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLinkLan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
