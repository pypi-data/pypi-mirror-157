# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigScenarioSlbHomepageOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'prior_virtual_service_detail': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'prior_virtual_service_detail': 'prior_virtual_service_detail'
    }

    def __init__(self, title=None, prior_virtual_service_detail=None):  # noqa: E501
        """ConfigScenarioSlbHomepageOption - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._prior_virtual_service_detail = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if prior_virtual_service_detail is not None:
            self.prior_virtual_service_detail = prior_virtual_service_detail

    @property
    def title(self):
        """Gets the title of this ConfigScenarioSlbHomepageOption.  # noqa: E501

        应用负载投屏名称  # noqa: E501

        :return: The title of this ConfigScenarioSlbHomepageOption.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConfigScenarioSlbHomepageOption.

        应用负载投屏名称  # noqa: E501

        :param title: The title of this ConfigScenarioSlbHomepageOption.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def prior_virtual_service_detail(self):
        """Gets the prior_virtual_service_detail of this ConfigScenarioSlbHomepageOption.  # noqa: E501

        应用负载业务显示选项  # noqa: E501

        :return: The prior_virtual_service_detail of this ConfigScenarioSlbHomepageOption.  # noqa: E501
        :rtype: list[str]
        """
        return self._prior_virtual_service_detail

    @prior_virtual_service_detail.setter
    def prior_virtual_service_detail(self, prior_virtual_service_detail):
        """Sets the prior_virtual_service_detail of this ConfigScenarioSlbHomepageOption.

        应用负载业务显示选项  # noqa: E501

        :param prior_virtual_service_detail: The prior_virtual_service_detail of this ConfigScenarioSlbHomepageOption.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["connection_rate", "connection", "upstream_throughput", "downstream_throughput", "total_connection", "total_http_request", "http_request_rate", "pool_connection_rate"]  # noqa: E501
        if not set(prior_virtual_service_detail).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `prior_virtual_service_detail` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(prior_virtual_service_detail) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._prior_virtual_service_detail = prior_virtual_service_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigScenarioSlbHomepageOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigScenarioSlbHomepageOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
