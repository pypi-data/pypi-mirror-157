# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_certificate_detail import ConfigCertificateDetail  # noqa: F401,E501
from adapi_sdk.models.config_ssl_certificate_imported_certificate_subject import ConfigSslCertificateImportedCertificateSubject  # noqa: F401,E501


class ConfigSslCertificateImportedCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'subject': 'ConfigSslCertificateImportedCertificateSubject',
        'public_key_algorithm': 'str',
        'public_key_length': 'int',
        'signature_algorithm': 'str',
        'validity_not_before': 'str',
        'validity_not_after': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'certificate_chains': 'list[ConfigCertificateDetail]',
        'project': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'subject': 'subject',
        'public_key_algorithm': 'public_key_algorithm',
        'public_key_length': 'public_key_length',
        'signature_algorithm': 'signature_algorithm',
        'validity_not_before': 'validity_not_before',
        'validity_not_after': 'validity_not_after',
        'password': 'password',
        'encrypted_password': 'encrypted_password',
        'certificate_chains': 'certificate_chains',
        'project': 'project'
    }

    def __init__(self, name=None, description=None, type='IMPORTED-CERTIFICATE', subject=None, public_key_algorithm=None, public_key_length=None, signature_algorithm='SHA256', validity_not_before=None, validity_not_after=None, password=None, encrypted_password=None, certificate_chains=None, project='common'):  # noqa: E501
        """ConfigSslCertificateImportedCertificate - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._subject = None
        self._public_key_algorithm = None
        self._public_key_length = None
        self._signature_algorithm = None
        self._validity_not_before = None
        self._validity_not_after = None
        self._password = None
        self._encrypted_password = None
        self._certificate_chains = None
        self._project = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if subject is not None:
            self.subject = subject
        if public_key_algorithm is not None:
            self.public_key_algorithm = public_key_algorithm
        if public_key_length is not None:
            self.public_key_length = public_key_length
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if validity_not_before is not None:
            self.validity_not_before = validity_not_before
        if validity_not_after is not None:
            self.validity_not_after = validity_not_after
        if password is not None:
            self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if certificate_chains is not None:
            self.certificate_chains = certificate_chains
        if project is not None:
            self.project = project

    @property
    def name(self):
        """Gets the name of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        必选参数；指定ssl证书的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSslCertificateImportedCertificate.

        必选参数；指定ssl证书的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        可选参数；配置描述信息。  # noqa: E501

        :return: The description of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSslCertificateImportedCertificate.

        可选参数；配置描述信息。  # noqa: E501

        :param description: The description of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        可选参数；指定ssl证书类型。  # noqa: E501

        :return: The type of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigSslCertificateImportedCertificate.

        可选参数；指定ssl证书类型。  # noqa: E501

        :param type: The type of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["IMPORTED-CERTIFICATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def subject(self):
        """Gets the subject of this ConfigSslCertificateImportedCertificate.  # noqa: E501


        :return: The subject of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: ConfigSslCertificateImportedCertificateSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ConfigSslCertificateImportedCertificate.


        :param subject: The subject of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: ConfigSslCertificateImportedCertificateSubject
        """

        self._subject = subject

    @property
    def public_key_algorithm(self):
        """Gets the public_key_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定公钥类型。  # noqa: E501

        :return: The public_key_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algorithm

    @public_key_algorithm.setter
    def public_key_algorithm(self, public_key_algorithm):
        """Sets the public_key_algorithm of this ConfigSslCertificateImportedCertificate.

        指定公钥类型。  # noqa: E501

        :param public_key_algorithm: The public_key_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA", "ECDSA"]  # noqa: E501
        if public_key_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `public_key_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(public_key_algorithm, allowed_values)
            )

        self._public_key_algorithm = public_key_algorithm

    @property
    def public_key_length(self):
        """Gets the public_key_length of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定秘钥长度。  # noqa: E501

        :return: The public_key_length of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: int
        """
        return self._public_key_length

    @public_key_length.setter
    def public_key_length(self, public_key_length):
        """Sets the public_key_length of this ConfigSslCertificateImportedCertificate.

        指定秘钥长度。  # noqa: E501

        :param public_key_length: The public_key_length of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: int
        """

        self._public_key_length = public_key_length

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定签名算法。  # noqa: E501

        :return: The signature_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this ConfigSslCertificateImportedCertificate.

        指定签名算法。  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHA256", "SHA1"]  # noqa: E501
        if signature_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `signature_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(signature_algorithm, allowed_values)
            )

        self._signature_algorithm = signature_algorithm

    @property
    def validity_not_before(self):
        """Gets the validity_not_before of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定证书有效起开始时间。  # noqa: E501

        :return: The validity_not_before of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._validity_not_before

    @validity_not_before.setter
    def validity_not_before(self, validity_not_before):
        """Sets the validity_not_before of this ConfigSslCertificateImportedCertificate.

        指定证书有效起开始时间。  # noqa: E501

        :param validity_not_before: The validity_not_before of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._validity_not_before = validity_not_before

    @property
    def validity_not_after(self):
        """Gets the validity_not_after of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定证书有效起结束时间。  # noqa: E501

        :return: The validity_not_after of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._validity_not_after

    @validity_not_after.setter
    def validity_not_after(self, validity_not_after):
        """Sets the validity_not_after of this ConfigSslCertificateImportedCertificate.

        指定证书有效起结束时间。  # noqa: E501

        :param validity_not_after: The validity_not_after of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._validity_not_after = validity_not_after

    @property
    def password(self):
        """Gets the password of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定私钥加密密码。  # noqa: E501

        :return: The password of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigSslCertificateImportedCertificate.

        指定私钥加密密码。  # noqa: E501

        :param password: The password of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        可选参数；指定加密密码。  # noqa: E501

        :return: The encrypted_password of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigSslCertificateImportedCertificate.

        可选参数；指定加密密码。  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def certificate_chains(self):
        """Gets the certificate_chains of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        指定证书链。  # noqa: E501

        :return: The certificate_chains of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: list[ConfigCertificateDetail]
        """
        return self._certificate_chains

    @certificate_chains.setter
    def certificate_chains(self, certificate_chains):
        """Sets the certificate_chains of this ConfigSslCertificateImportedCertificate.

        指定证书链。  # noqa: E501

        :param certificate_chains: The certificate_chains of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: list[ConfigCertificateDetail]
        """

        self._certificate_chains = certificate_chains

    @property
    def project(self):
        """Gets the project of this ConfigSslCertificateImportedCertificate.  # noqa: E501

        项目名称  # noqa: E501

        :return: The project of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConfigSslCertificateImportedCertificate.

        项目名称  # noqa: E501

        :param project: The project of this ConfigSslCertificateImportedCertificate.  # noqa: E501
        :type: str
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSslCertificateImportedCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSslCertificateImportedCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
