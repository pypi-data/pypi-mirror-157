# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_snmpv3_authentication import ConfigSnmpv3Authentication  # noqa: F401,E501
from adapi_sdk.models.config_snmpv3_encrypt import ConfigSnmpv3Encrypt  # noqa: F401,E501


class ConfigSnmpv3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'username': 'str',
        'privileges': 'str',
        'authentication': 'ConfigSnmpv3Authentication',
        'encrypt': 'ConfigSnmpv3Encrypt'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'username': 'username',
        'privileges': 'privileges',
        'authentication': 'authentication',
        'encrypt': 'encrypt'
    }

    def __init__(self, name=None, description=None, state='ENABLE', username=None, privileges='GET', authentication=None, encrypt=None):  # noqa: E501
        """ConfigSnmpv3 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._state = None
        self._username = None
        self._privileges = None
        self._authentication = None
        self._encrypt = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        self.username = username
        if privileges is not None:
            self.privileges = privileges
        if authentication is not None:
            self.authentication = authentication
        if encrypt is not None:
            self.encrypt = encrypt

    @property
    def name(self):
        """Gets the name of this ConfigSnmpv3.  # noqa: E501

        必选参数；指定SNMP（V3）配置的名称，在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigSnmpv3.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSnmpv3.

        必选参数；指定SNMP（V3）配置的名称，在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigSnmpv3.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSnmpv3.  # noqa: E501

        可选参数；用于对此配置增加备注  # noqa: E501

        :return: The description of this ConfigSnmpv3.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSnmpv3.

        可选参数；用于对此配置增加备注  # noqa: E501

        :param description: The description of this ConfigSnmpv3.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ConfigSnmpv3.  # noqa: E501

        可选参数；启禁用配置，enable表示启用，disable表示禁用，默认为enable  # noqa: E501

        :return: The state of this ConfigSnmpv3.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigSnmpv3.

        可选参数；启禁用配置，enable表示启用，disable表示禁用，默认为enable  # noqa: E501

        :param state: The state of this ConfigSnmpv3.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def username(self):
        """Gets the username of this ConfigSnmpv3.  # noqa: E501

        必选参数；配置用户名  # noqa: E501

        :return: The username of this ConfigSnmpv3.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigSnmpv3.

        必选参数；配置用户名  # noqa: E501

        :param username: The username of this ConfigSnmpv3.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 31:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `31`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def privileges(self):
        """Gets the privileges of this ConfigSnmpv3.  # noqa: E501

        可选参数；SNMP（V3）访问权限，get表示只读，get-and-set表示读写，默认为get  # noqa: E501

        :return: The privileges of this ConfigSnmpv3.  # noqa: E501
        :rtype: str
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this ConfigSnmpv3.

        可选参数；SNMP（V3）访问权限，get表示只读，get-and-set表示读写，默认为get  # noqa: E501

        :param privileges: The privileges of this ConfigSnmpv3.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "GET-AND-SET"]  # noqa: E501
        if privileges not in allowed_values:
            raise ValueError(
                "Invalid value for `privileges` ({0}), must be one of {1}"  # noqa: E501
                .format(privileges, allowed_values)
            )

        self._privileges = privileges

    @property
    def authentication(self):
        """Gets the authentication of this ConfigSnmpv3.  # noqa: E501


        :return: The authentication of this ConfigSnmpv3.  # noqa: E501
        :rtype: ConfigSnmpv3Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ConfigSnmpv3.


        :param authentication: The authentication of this ConfigSnmpv3.  # noqa: E501
        :type: ConfigSnmpv3Authentication
        """

        self._authentication = authentication

    @property
    def encrypt(self):
        """Gets the encrypt of this ConfigSnmpv3.  # noqa: E501


        :return: The encrypt of this ConfigSnmpv3.  # noqa: E501
        :rtype: ConfigSnmpv3Encrypt
        """
        return self._encrypt

    @encrypt.setter
    def encrypt(self, encrypt):
        """Sets the encrypt of this ConfigSnmpv3.


        :param encrypt: The encrypt of this ConfigSnmpv3.  # noqa: E501
        :type: ConfigSnmpv3Encrypt
        """

        self._encrypt = encrypt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSnmpv3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSnmpv3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
