# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_policy_route_destination_address import ConfigPolicyRouteDestinationAddress  # noqa: F401,E501
from adapi_sdk.models.config_policy_route_source_address import ConfigPolicyRouteSourceAddress  # noqa: F401,E501


class ConfigPolicyRoute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'default': 'str',
        'position': 'int',
        'type': 'str',
        'state': 'str',
        'inbound_link': 'list[str]',
        'source_address': 'ConfigPolicyRouteSourceAddress',
        'destination_address': 'ConfigPolicyRouteDestinationAddress',
        'protocol': 'str',
        'protocol_number': 'int',
        'source_ports': 'str',
        'destination_ports': 'str',
        'tos': 'str',
        'schedule_links': 'list[str]',
        'schedule_policy': 'str',
        'busy_protect': 'str',
        'schedule_failure_policy': 'str',
        'time_plan': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'default': 'default',
        'position': 'position',
        'type': 'type',
        'state': 'state',
        'inbound_link': 'inbound_link',
        'source_address': 'source_address',
        'destination_address': 'destination_address',
        'protocol': 'protocol',
        'protocol_number': 'protocol_number',
        'source_ports': 'source_ports',
        'destination_ports': 'destination_ports',
        'tos': 'tos',
        'schedule_links': 'schedule_links',
        'schedule_policy': 'schedule_policy',
        'busy_protect': 'busy_protect',
        'schedule_failure_policy': 'schedule_failure_policy',
        'time_plan': 'time_plan'
    }

    def __init__(self, name=None, description=None, default='NON-DEFAULT', position=None, type='IPV4', state='ENABLE', inbound_link=None, source_address=None, destination_address=None, protocol='ALL', protocol_number=None, source_ports='0', destination_ports='0', tos='0', schedule_links=None, schedule_policy='WEIGHTED-LEAST-FLOW', busy_protect='DISABLE', schedule_failure_policy='NEXT-ROUTE', time_plan='NONE'):  # noqa: E501
        """ConfigPolicyRoute - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._default = None
        self._position = None
        self._type = None
        self._state = None
        self._inbound_link = None
        self._source_address = None
        self._destination_address = None
        self._protocol = None
        self._protocol_number = None
        self._source_ports = None
        self._destination_ports = None
        self._tos = None
        self._schedule_links = None
        self._schedule_policy = None
        self._busy_protect = None
        self._schedule_failure_policy = None
        self._time_plan = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if default is not None:
            self.default = default
        if position is not None:
            self.position = position
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if inbound_link is not None:
            self.inbound_link = inbound_link
        if source_address is not None:
            self.source_address = source_address
        if destination_address is not None:
            self.destination_address = destination_address
        if protocol is not None:
            self.protocol = protocol
        if protocol_number is not None:
            self.protocol_number = protocol_number
        if source_ports is not None:
            self.source_ports = source_ports
        if destination_ports is not None:
            self.destination_ports = destination_ports
        if tos is not None:
            self.tos = tos
        if schedule_links is not None:
            self.schedule_links = schedule_links
        if schedule_policy is not None:
            self.schedule_policy = schedule_policy
        if busy_protect is not None:
            self.busy_protect = busy_protect
        if schedule_failure_policy is not None:
            self.schedule_failure_policy = schedule_failure_policy
        if time_plan is not None:
            self.time_plan = time_plan

    @property
    def name(self):
        """Gets the name of this ConfigPolicyRoute.  # noqa: E501

        配置名称  # noqa: E501

        :return: The name of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPolicyRoute.

        配置名称  # noqa: E501

        :param name: The name of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPolicyRoute.  # noqa: E501

        智能路由描述  # noqa: E501

        :return: The description of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPolicyRoute.

        智能路由描述  # noqa: E501

        :param description: The description of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default(self):
        """Gets the default of this ConfigPolicyRoute.  # noqa: E501

        默认智能路由  # noqa: E501

        :return: The default of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ConfigPolicyRoute.

        默认智能路由  # noqa: E501

        :param default: The default of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["NON-DEFAULT", "READONLY", "MODIFIABLE"]  # noqa: E501
        if default not in allowed_values:
            raise ValueError(
                "Invalid value for `default` ({0}), must be one of {1}"  # noqa: E501
                .format(default, allowed_values)
            )

        self._default = default

    @property
    def position(self):
        """Gets the position of this ConfigPolicyRoute.  # noqa: E501

        指定配置在配置列表中位置  # noqa: E501

        :return: The position of this ConfigPolicyRoute.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ConfigPolicyRoute.

        指定配置在配置列表中位置  # noqa: E501

        :param position: The position of this ConfigPolicyRoute.  # noqa: E501
        :type: int
        """
        if position is not None and position > 65535:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `65535`")  # noqa: E501
        if position is not None and position < 1:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")  # noqa: E501

        self._position = position

    @property
    def type(self):
        """Gets the type of this ConfigPolicyRoute.  # noqa: E501

        类型(type)字段不合法，须为[ IPV4, IPV6 ]中的一种!  # noqa: E501

        :return: The type of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPolicyRoute.

        类型(type)字段不合法，须为[ IPV4, IPV6 ]中的一种!  # noqa: E501

        :param type: The type of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this ConfigPolicyRoute.  # noqa: E501

        状态  # noqa: E501

        :return: The state of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigPolicyRoute.

        状态  # noqa: E501

        :param state: The state of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def inbound_link(self):
        """Gets the inbound_link of this ConfigPolicyRoute.  # noqa: E501

        入口链路集合  # noqa: E501

        :return: The inbound_link of this ConfigPolicyRoute.  # noqa: E501
        :rtype: list[str]
        """
        return self._inbound_link

    @inbound_link.setter
    def inbound_link(self, inbound_link):
        """Sets the inbound_link of this ConfigPolicyRoute.

        入口链路集合  # noqa: E501

        :param inbound_link: The inbound_link of this ConfigPolicyRoute.  # noqa: E501
        :type: list[str]
        """

        self._inbound_link = inbound_link

    @property
    def source_address(self):
        """Gets the source_address of this ConfigPolicyRoute.  # noqa: E501


        :return: The source_address of this ConfigPolicyRoute.  # noqa: E501
        :rtype: ConfigPolicyRouteSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigPolicyRoute.


        :param source_address: The source_address of this ConfigPolicyRoute.  # noqa: E501
        :type: ConfigPolicyRouteSourceAddress
        """

        self._source_address = source_address

    @property
    def destination_address(self):
        """Gets the destination_address of this ConfigPolicyRoute.  # noqa: E501


        :return: The destination_address of this ConfigPolicyRoute.  # noqa: E501
        :rtype: ConfigPolicyRouteDestinationAddress
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this ConfigPolicyRoute.


        :param destination_address: The destination_address of this ConfigPolicyRoute.  # noqa: E501
        :type: ConfigPolicyRouteDestinationAddress
        """

        self._destination_address = destination_address

    @property
    def protocol(self):
        """Gets the protocol of this ConfigPolicyRoute.  # noqa: E501

        协议条件  # noqa: E501

        :return: The protocol of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConfigPolicyRoute.

        协议条件  # noqa: E501

        :param protocol: The protocol of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "TCP", "UDP", "ICMP", "ICMPV6", "OTHER"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def protocol_number(self):
        """Gets the protocol_number of this ConfigPolicyRoute.  # noqa: E501

          # noqa: E501

        :return: The protocol_number of this ConfigPolicyRoute.  # noqa: E501
        :rtype: int
        """
        return self._protocol_number

    @protocol_number.setter
    def protocol_number(self, protocol_number):
        """Sets the protocol_number of this ConfigPolicyRoute.

          # noqa: E501

        :param protocol_number: The protocol_number of this ConfigPolicyRoute.  # noqa: E501
        :type: int
        """
        if protocol_number is not None and protocol_number > 255:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value less than or equal to `255`")  # noqa: E501
        if protocol_number is not None and protocol_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `protocol_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._protocol_number = protocol_number

    @property
    def source_ports(self):
        """Gets the source_ports of this ConfigPolicyRoute.  # noqa: E501

        Format: ALL | {PORT} | {PORT-Range}  # noqa: E501

        :return: The source_ports of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this ConfigPolicyRoute.

        Format: ALL | {PORT} | {PORT-Range}  # noqa: E501

        :param source_ports: The source_ports of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """

        self._source_ports = source_ports

    @property
    def destination_ports(self):
        """Gets the destination_ports of this ConfigPolicyRoute.  # noqa: E501

        Format: ALL | {PORT} | {PORT-Range}  # noqa: E501

        :return: The destination_ports of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this ConfigPolicyRoute.

        Format: ALL | {PORT} | {PORT-Range}  # noqa: E501

        :param destination_ports: The destination_ports of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """

        self._destination_ports = destination_ports

    @property
    def tos(self):
        """Gets the tos of this ConfigPolicyRoute.  # noqa: E501

        TOS,0-255  # noqa: E501

        :return: The tos of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this ConfigPolicyRoute.

        TOS,0-255  # noqa: E501

        :param tos: The tos of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """

        self._tos = tos

    @property
    def schedule_links(self):
        """Gets the schedule_links of this ConfigPolicyRoute.  # noqa: E501

        出口链路集合  # noqa: E501

        :return: The schedule_links of this ConfigPolicyRoute.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedule_links

    @schedule_links.setter
    def schedule_links(self, schedule_links):
        """Sets the schedule_links of this ConfigPolicyRoute.

        出口链路集合  # noqa: E501

        :param schedule_links: The schedule_links of this ConfigPolicyRoute.  # noqa: E501
        :type: list[str]
        """

        self._schedule_links = schedule_links

    @property
    def schedule_policy(self):
        """Gets the schedule_policy of this ConfigPolicyRoute.  # noqa: E501

        链路选择策略  # noqa: E501

        :return: The schedule_policy of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._schedule_policy

    @schedule_policy.setter
    def schedule_policy(self, schedule_policy):
        """Sets the schedule_policy of this ConfigPolicyRoute.

        链路选择策略  # noqa: E501

        :param schedule_policy: The schedule_policy of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "BANDWIDTH-RATIO", "WEIGHTED-LEAST-FLOW", "LEAST-RTT", "HASH-SRC-IP"]  # noqa: E501
        if schedule_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_policy, allowed_values)
            )

        self._schedule_policy = schedule_policy

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigPolicyRoute.  # noqa: E501

        链路繁忙保护  # noqa: E501

        :return: The busy_protect of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigPolicyRoute.

        链路繁忙保护  # noqa: E501

        :param busy_protect: The busy_protect of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_protect, allowed_values)
            )

        self._busy_protect = busy_protect

    @property
    def schedule_failure_policy(self):
        """Gets the schedule_failure_policy of this ConfigPolicyRoute.  # noqa: E501

        链路调度失败动作  # noqa: E501

        :return: The schedule_failure_policy of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._schedule_failure_policy

    @schedule_failure_policy.setter
    def schedule_failure_policy(self, schedule_failure_policy):
        """Sets the schedule_failure_policy of this ConfigPolicyRoute.

        链路调度失败动作  # noqa: E501

        :param schedule_failure_policy: The schedule_failure_policy of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEXT-ROUTE", "DROP"]  # noqa: E501
        if schedule_failure_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_failure_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_failure_policy, allowed_values)
            )

        self._schedule_failure_policy = schedule_failure_policy

    @property
    def time_plan(self):
        """Gets the time_plan of this ConfigPolicyRoute.  # noqa: E501

        生效时间,必须为已存在的时间计划配置,或者为NONE  # noqa: E501

        :return: The time_plan of this ConfigPolicyRoute.  # noqa: E501
        :rtype: str
        """
        return self._time_plan

    @time_plan.setter
    def time_plan(self, time_plan):
        """Sets the time_plan of this ConfigPolicyRoute.

        生效时间,必须为已存在的时间计划配置,或者为NONE  # noqa: E501

        :param time_plan: The time_plan of this ConfigPolicyRoute.  # noqa: E501
        :type: str
        """

        self._time_plan = time_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPolicyRoute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPolicyRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
