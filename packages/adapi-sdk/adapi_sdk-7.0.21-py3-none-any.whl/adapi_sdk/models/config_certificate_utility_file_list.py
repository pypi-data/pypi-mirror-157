# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_certificate_utility_file_list_certificate_files import ConfigCertificateUtilityFileListCertificateFiles  # noqa: F401,E501


class ConfigCertificateUtilityFileList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_files': 'list[ConfigCertificateUtilityFileListCertificateFiles]',
        'sort_certificate': 'str'
    }

    attribute_map = {
        'certificate_files': 'certificate_files',
        'sort_certificate': 'sort_certificate'
    }

    def __init__(self, certificate_files=None, sort_certificate='DISABLE'):  # noqa: E501
        """ConfigCertificateUtilityFileList - a model defined in Swagger"""  # noqa: E501

        self._certificate_files = None
        self._sort_certificate = None
        self.discriminator = None

        self.certificate_files = certificate_files
        if sort_certificate is not None:
            self.sort_certificate = sort_certificate

    @property
    def certificate_files(self):
        """Gets the certificate_files of this ConfigCertificateUtilityFileList.  # noqa: E501

        证书文件token列表  # noqa: E501

        :return: The certificate_files of this ConfigCertificateUtilityFileList.  # noqa: E501
        :rtype: list[ConfigCertificateUtilityFileListCertificateFiles]
        """
        return self._certificate_files

    @certificate_files.setter
    def certificate_files(self, certificate_files):
        """Sets the certificate_files of this ConfigCertificateUtilityFileList.

        证书文件token列表  # noqa: E501

        :param certificate_files: The certificate_files of this ConfigCertificateUtilityFileList.  # noqa: E501
        :type: list[ConfigCertificateUtilityFileListCertificateFiles]
        """
        if certificate_files is None:
            raise ValueError("Invalid value for `certificate_files`, must not be `None`")  # noqa: E501

        self._certificate_files = certificate_files

    @property
    def sort_certificate(self):
        """Gets the sort_certificate of this ConfigCertificateUtilityFileList.  # noqa: E501

        是否排序  # noqa: E501

        :return: The sort_certificate of this ConfigCertificateUtilityFileList.  # noqa: E501
        :rtype: str
        """
        return self._sort_certificate

    @sort_certificate.setter
    def sort_certificate(self, sort_certificate):
        """Sets the sort_certificate of this ConfigCertificateUtilityFileList.

        是否排序  # noqa: E501

        :param sort_certificate: The sort_certificate of this ConfigCertificateUtilityFileList.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if sort_certificate not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_certificate` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_certificate, allowed_values)
            )

        self._sort_certificate = sort_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCertificateUtilityFileList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCertificateUtilityFileList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
