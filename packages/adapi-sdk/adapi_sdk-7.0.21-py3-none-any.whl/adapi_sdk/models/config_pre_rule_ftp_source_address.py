# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPreRuleFtpSourceAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'address': 'str',
        'ref_custom_address_group': 'str',
        'ref_isp_address_group': 'str'
    }

    attribute_map = {
        'type': 'type',
        'address': 'address',
        'ref_custom_address_group': 'ref_custom_address_group',
        'ref_isp_address_group': 'ref_isp_address_group'
    }

    def __init__(self, type='ALL', address=None, ref_custom_address_group=None, ref_isp_address_group=None):  # noqa: E501
        """ConfigPreRuleFtpSourceAddress - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._address = None
        self._ref_custom_address_group = None
        self._ref_isp_address_group = None
        self.discriminator = None

        self.type = type
        if address is not None:
            self.address = address
        if ref_custom_address_group is not None:
            self.ref_custom_address_group = ref_custom_address_group
        if ref_isp_address_group is not None:
            self.ref_isp_address_group = ref_isp_address_group

    @property
    def type(self):
        """Gets the type of this ConfigPreRuleFtpSourceAddress.  # noqa: E501

        必选参数; 指定前置策略匹配的源地址类型，源IP范围的类型：all（所有IP）、ip-address（IP地址）、custom-address-group（用户地址集）、isp-address-group（ISP地址集），默认为all。  # noqa: E501

        :return: The type of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPreRuleFtpSourceAddress.

        必选参数; 指定前置策略匹配的源地址类型，源IP范围的类型：all（所有IP）、ip-address（IP地址）、custom-address-group（用户地址集）、isp-address-group（ISP地址集），默认为all。  # noqa: E501

        :param type: The type of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL", "IP-ADDRESS", "CUSTOM-ADDRESS-GROUP", "ISP-ADDRESS-GROUP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def address(self):
        """Gets the address of this ConfigPreRuleFtpSourceAddress.  # noqa: E501

        可选参数; 源地址类型为ip-address时，指定具体的IP地址或地址范围或子网。  # noqa: E501

        :return: The address of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigPreRuleFtpSourceAddress.

        可选参数; 源地址类型为ip-address时，指定具体的IP地址或地址范围或子网。  # noqa: E501

        :param address: The address of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def ref_custom_address_group(self):
        """Gets the ref_custom_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501

        可选参数; 源地址类型为custom_address_group时，指定具体的用户地址集。  # noqa: E501

        :return: The ref_custom_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._ref_custom_address_group

    @ref_custom_address_group.setter
    def ref_custom_address_group(self, ref_custom_address_group):
        """Sets the ref_custom_address_group of this ConfigPreRuleFtpSourceAddress.

        可选参数; 源地址类型为custom_address_group时，指定具体的用户地址集。  # noqa: E501

        :param ref_custom_address_group: The ref_custom_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :type: str
        """

        self._ref_custom_address_group = ref_custom_address_group

    @property
    def ref_isp_address_group(self):
        """Gets the ref_isp_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501

        可选参数; 源地址类型为isp_address_group时，指定具体的isp地址段。  # noqa: E501

        :return: The ref_isp_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._ref_isp_address_group

    @ref_isp_address_group.setter
    def ref_isp_address_group(self, ref_isp_address_group):
        """Sets the ref_isp_address_group of this ConfigPreRuleFtpSourceAddress.

        可选参数; 源地址类型为isp_address_group时，指定具体的isp地址段。  # noqa: E501

        :param ref_isp_address_group: The ref_isp_address_group of this ConfigPreRuleFtpSourceAddress.  # noqa: E501
        :type: str
        """

        self._ref_isp_address_group = ref_isp_address_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPreRuleFtpSourceAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPreRuleFtpSourceAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
