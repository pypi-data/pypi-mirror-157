# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigBridgeStp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'priority': 'int',
        'hello_time': 'int',
        'maximum_age': 'int',
        'forward_delay': 'int'
    }

    attribute_map = {
        'state': 'state',
        'priority': 'priority',
        'hello_time': 'hello_time',
        'maximum_age': 'maximum_age',
        'forward_delay': 'forward_delay'
    }

    def __init__(self, state='DISABLE', priority=None, hello_time=None, maximum_age=None, forward_delay=None):  # noqa: E501
        """ConfigBridgeStp - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._priority = None
        self._hello_time = None
        self._maximum_age = None
        self._forward_delay = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if priority is not None:
            self.priority = priority
        if hello_time is not None:
            self.hello_time = hello_time
        if maximum_age is not None:
            self.maximum_age = maximum_age
        if forward_delay is not None:
            self.forward_delay = forward_delay

    @property
    def state(self):
        """Gets the state of this ConfigBridgeStp.  # noqa: E501

        可选参数；状态（enable-启用/disable-禁用），默认值为disable  # noqa: E501

        :return: The state of this ConfigBridgeStp.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigBridgeStp.

        可选参数；状态（enable-启用/disable-禁用），默认值为disable  # noqa: E501

        :param state: The state of this ConfigBridgeStp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def priority(self):
        """Gets the priority of this ConfigBridgeStp.  # noqa: E501

        可选参数；STP协议优先级，默认值为32768  # noqa: E501

        :return: The priority of this ConfigBridgeStp.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigBridgeStp.

        可选参数；STP协议优先级，默认值为32768  # noqa: E501

        :param priority: The priority of this ConfigBridgeStp.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 65535:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def hello_time(self):
        """Gets the hello_time of this ConfigBridgeStp.  # noqa: E501

        可选参数；Hello间隔时间（单位：秒），默认值为2  # noqa: E501

        :return: The hello_time of this ConfigBridgeStp.  # noqa: E501
        :rtype: int
        """
        return self._hello_time

    @hello_time.setter
    def hello_time(self, hello_time):
        """Sets the hello_time of this ConfigBridgeStp.

        可选参数；Hello间隔时间（单位：秒），默认值为2  # noqa: E501

        :param hello_time: The hello_time of this ConfigBridgeStp.  # noqa: E501
        :type: int
        """
        if hello_time is not None and hello_time > 10:  # noqa: E501
            raise ValueError("Invalid value for `hello_time`, must be a value less than or equal to `10`")  # noqa: E501
        if hello_time is not None and hello_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `hello_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._hello_time = hello_time

    @property
    def maximum_age(self):
        """Gets the maximum_age of this ConfigBridgeStp.  # noqa: E501

        可选参数；老化时间 (单位：秒），默认值为20  # noqa: E501

        :return: The maximum_age of this ConfigBridgeStp.  # noqa: E501
        :rtype: int
        """
        return self._maximum_age

    @maximum_age.setter
    def maximum_age(self, maximum_age):
        """Sets the maximum_age of this ConfigBridgeStp.

        可选参数；老化时间 (单位：秒），默认值为20  # noqa: E501

        :param maximum_age: The maximum_age of this ConfigBridgeStp.  # noqa: E501
        :type: int
        """
        if maximum_age is not None and maximum_age > 40:  # noqa: E501
            raise ValueError("Invalid value for `maximum_age`, must be a value less than or equal to `40`")  # noqa: E501
        if maximum_age is not None and maximum_age < 6:  # noqa: E501
            raise ValueError("Invalid value for `maximum_age`, must be a value greater than or equal to `6`")  # noqa: E501

        self._maximum_age = maximum_age

    @property
    def forward_delay(self):
        """Gets the forward_delay of this ConfigBridgeStp.  # noqa: E501

        可选参数；转发延迟时间（单位：秒），默认值为15  # noqa: E501

        :return: The forward_delay of this ConfigBridgeStp.  # noqa: E501
        :rtype: int
        """
        return self._forward_delay

    @forward_delay.setter
    def forward_delay(self, forward_delay):
        """Sets the forward_delay of this ConfigBridgeStp.

        可选参数；转发延迟时间（单位：秒），默认值为15  # noqa: E501

        :param forward_delay: The forward_delay of this ConfigBridgeStp.  # noqa: E501
        :type: int
        """
        if forward_delay is not None and forward_delay > 30:  # noqa: E501
            raise ValueError("Invalid value for `forward_delay`, must be a value less than or equal to `30`")  # noqa: E501
        if forward_delay is not None and forward_delay < 4:  # noqa: E501
            raise ValueError("Invalid value for `forward_delay`, must be a value greater than or equal to `4`")  # noqa: E501

        self._forward_delay = forward_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigBridgeStp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigBridgeStp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
