# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_qos_profile_dos_attack_control import ConfigQosProfileDosAttackControl  # noqa: F401,E501
from adapi_sdk.models.config_qos_profile_link_bandwidth_control import ConfigQosProfileLinkBandwidthControl  # noqa: F401,E501
from adapi_sdk.models.config_qos_profile_user_flow_control import ConfigQosProfileUserFlowControl  # noqa: F401,E501


class ConfigQosProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'link_bandwidth_control': 'ConfigQosProfileLinkBandwidthControl',
        'user_flow_control': 'ConfigQosProfileUserFlowControl',
        'dos_attack_control': 'ConfigQosProfileDosAttackControl'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'link_bandwidth_control': 'link_bandwidth_control',
        'user_flow_control': 'user_flow_control',
        'dos_attack_control': 'dos_attack_control'
    }

    def __init__(self, name=None, description=None, link_bandwidth_control=None, user_flow_control=None, dos_attack_control=None):  # noqa: E501
        """ConfigQosProfile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._link_bandwidth_control = None
        self._user_flow_control = None
        self._dos_attack_control = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if link_bandwidth_control is not None:
            self.link_bandwidth_control = link_bandwidth_control
        if user_flow_control is not None:
            self.user_flow_control = user_flow_control
        if dos_attack_control is not None:
            self.dos_attack_control = dos_attack_control

    @property
    def name(self):
        """Gets the name of this ConfigQosProfile.  # noqa: E501

        必选参数；指定QoS策略的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigQosProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigQosProfile.

        必选参数；指定QoS策略的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigQosProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigQosProfile.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigQosProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigQosProfile.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigQosProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link_bandwidth_control(self):
        """Gets the link_bandwidth_control of this ConfigQosProfile.  # noqa: E501


        :return: The link_bandwidth_control of this ConfigQosProfile.  # noqa: E501
        :rtype: ConfigQosProfileLinkBandwidthControl
        """
        return self._link_bandwidth_control

    @link_bandwidth_control.setter
    def link_bandwidth_control(self, link_bandwidth_control):
        """Sets the link_bandwidth_control of this ConfigQosProfile.


        :param link_bandwidth_control: The link_bandwidth_control of this ConfigQosProfile.  # noqa: E501
        :type: ConfigQosProfileLinkBandwidthControl
        """

        self._link_bandwidth_control = link_bandwidth_control

    @property
    def user_flow_control(self):
        """Gets the user_flow_control of this ConfigQosProfile.  # noqa: E501


        :return: The user_flow_control of this ConfigQosProfile.  # noqa: E501
        :rtype: ConfigQosProfileUserFlowControl
        """
        return self._user_flow_control

    @user_flow_control.setter
    def user_flow_control(self, user_flow_control):
        """Sets the user_flow_control of this ConfigQosProfile.


        :param user_flow_control: The user_flow_control of this ConfigQosProfile.  # noqa: E501
        :type: ConfigQosProfileUserFlowControl
        """

        self._user_flow_control = user_flow_control

    @property
    def dos_attack_control(self):
        """Gets the dos_attack_control of this ConfigQosProfile.  # noqa: E501


        :return: The dos_attack_control of this ConfigQosProfile.  # noqa: E501
        :rtype: ConfigQosProfileDosAttackControl
        """
        return self._dos_attack_control

    @dos_attack_control.setter
    def dos_attack_control(self, dos_attack_control):
        """Sets the dos_attack_control of this ConfigQosProfile.


        :param dos_attack_control: The dos_attack_control of this ConfigQosProfile.  # noqa: E501
        :type: ConfigQosProfileDosAttackControl
        """

        self._dos_attack_control = dos_attack_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
