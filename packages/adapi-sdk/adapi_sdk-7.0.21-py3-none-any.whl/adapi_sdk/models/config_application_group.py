# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_application_group_associated import ConfigApplicationGroupAssociated  # noqa: F401,E501
from adapi_sdk.models.config_application_group_fault_detect import ConfigApplicationGroupFaultDetect  # noqa: F401,E501
from adapi_sdk.models.config_application_group_member import ConfigApplicationGroupMember  # noqa: F401,E501
from adapi_sdk.models.config_application_group_virtual_macs import ConfigApplicationGroupVirtualMacs  # noqa: F401,E501


class ConfigApplicationGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'project': 'str',
        'description': 'str',
        'session_synchronize': 'str',
        'associated': 'ConfigApplicationGroupAssociated',
        'member': 'ConfigApplicationGroupMember',
        'select_method': 'str',
        'preempt_mode': 'str',
        'fault_detect': 'ConfigApplicationGroupFaultDetect',
        'virtual_macs': 'list[ConfigApplicationGroupVirtualMacs]',
        'default': 'str'
    }

    attribute_map = {
        'name': 'name',
        'project': 'project',
        'description': 'description',
        'session_synchronize': 'session_synchronize',
        'associated': 'associated',
        'member': 'member',
        'select_method': 'select_method',
        'preempt_mode': 'preempt_mode',
        'fault_detect': 'fault_detect',
        'virtual_macs': 'virtual_macs',
        'default': 'default'
    }

    def __init__(self, name=None, project=None, description=None, session_synchronize='ENABLE', associated=None, member=None, select_method='BY-PRIORITY', preempt_mode='DISABLE', fault_detect=None, virtual_macs=None, default='NON-DEFAULT'):  # noqa: E501
        """ConfigApplicationGroup - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._project = None
        self._description = None
        self._session_synchronize = None
        self._associated = None
        self._member = None
        self._select_method = None
        self._preempt_mode = None
        self._fault_detect = None
        self._virtual_macs = None
        self._default = None
        self.discriminator = None

        self.name = name
        if project is not None:
            self.project = project
        if description is not None:
            self.description = description
        if session_synchronize is not None:
            self.session_synchronize = session_synchronize
        if associated is not None:
            self.associated = associated
        if member is not None:
            self.member = member
        if select_method is not None:
            self.select_method = select_method
        if preempt_mode is not None:
            self.preempt_mode = preempt_mode
        if fault_detect is not None:
            self.fault_detect = fault_detect
        if virtual_macs is not None:
            self.virtual_macs = virtual_macs
        if default is not None:
            self.default = default

    @property
    def name(self):
        """Gets the name of this ConfigApplicationGroup.  # noqa: E501

        指定应用组的名称，在应用组配置中必须唯一  # noqa: E501

        :return: The name of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigApplicationGroup.

        指定应用组的名称，在应用组配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project(self):
        """Gets the project of this ConfigApplicationGroup.  # noqa: E501

        choose a project to belonging, create a new project if choose null  # noqa: E501

        :return: The project of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConfigApplicationGroup.

        choose a project to belonging, create a new project if choose null  # noqa: E501

        :param project: The project of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        if project is not None and len(project) > 511:
            raise ValueError("Invalid value for `project`, length must be less than or equal to `511`")  # noqa: E501
        if project is not None and len(project) < 1:
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")  # noqa: E501

        self._project = project

    @property
    def description(self):
        """Gets the description of this ConfigApplicationGroup.  # noqa: E501

        可以对该应用组进行额外的信息补充  # noqa: E501

        :return: The description of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigApplicationGroup.

        可以对该应用组进行额外的信息补充  # noqa: E501

        :param description: The description of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def session_synchronize(self):
        """Gets the session_synchronize of this ConfigApplicationGroup.  # noqa: E501

        会话同步开关，enable表示启用，disable表示禁用  # noqa: E501

        :return: The session_synchronize of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._session_synchronize

    @session_synchronize.setter
    def session_synchronize(self, session_synchronize):
        """Sets the session_synchronize of this ConfigApplicationGroup.

        会话同步开关，enable表示启用，disable表示禁用  # noqa: E501

        :param session_synchronize: The session_synchronize of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if session_synchronize not in allowed_values:
            raise ValueError(
                "Invalid value for `session_synchronize` ({0}), must be one of {1}"  # noqa: E501
                .format(session_synchronize, allowed_values)
            )

        self._session_synchronize = session_synchronize

    @property
    def associated(self):
        """Gets the associated of this ConfigApplicationGroup.  # noqa: E501


        :return: The associated of this ConfigApplicationGroup.  # noqa: E501
        :rtype: ConfigApplicationGroupAssociated
        """
        return self._associated

    @associated.setter
    def associated(self, associated):
        """Sets the associated of this ConfigApplicationGroup.


        :param associated: The associated of this ConfigApplicationGroup.  # noqa: E501
        :type: ConfigApplicationGroupAssociated
        """

        self._associated = associated

    @property
    def member(self):
        """Gets the member of this ConfigApplicationGroup.  # noqa: E501


        :return: The member of this ConfigApplicationGroup.  # noqa: E501
        :rtype: ConfigApplicationGroupMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ConfigApplicationGroup.


        :param member: The member of this ConfigApplicationGroup.  # noqa: E501
        :type: ConfigApplicationGroupMember
        """

        self._member = member

    @property
    def select_method(self):
        """Gets the select_method of this ConfigApplicationGroup.  # noqa: E501

        列表切换方式，by-priority：按设备优先级切换，in-sequence：按顺序切换  # noqa: E501

        :return: The select_method of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._select_method

    @select_method.setter
    def select_method(self, select_method):
        """Sets the select_method of this ConfigApplicationGroup.

        列表切换方式，by-priority：按设备优先级切换，in-sequence：按顺序切换  # noqa: E501

        :param select_method: The select_method of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN-SEQUENCE", "BY-PRIORITY"]  # noqa: E501
        if select_method not in allowed_values:
            raise ValueError(
                "Invalid value for `select_method` ({0}), must be one of {1}"  # noqa: E501
                .format(select_method, allowed_values)
            )

        self._select_method = select_method

    @property
    def preempt_mode(self):
        """Gets the preempt_mode of this ConfigApplicationGroup.  # noqa: E501

        抢占模式，enable表示启用，disable表示禁用  # noqa: E501

        :return: The preempt_mode of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._preempt_mode

    @preempt_mode.setter
    def preempt_mode(self, preempt_mode):
        """Sets the preempt_mode of this ConfigApplicationGroup.

        抢占模式，enable表示启用，disable表示禁用  # noqa: E501

        :param preempt_mode: The preempt_mode of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if preempt_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `preempt_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(preempt_mode, allowed_values)
            )

        self._preempt_mode = preempt_mode

    @property
    def fault_detect(self):
        """Gets the fault_detect of this ConfigApplicationGroup.  # noqa: E501


        :return: The fault_detect of this ConfigApplicationGroup.  # noqa: E501
        :rtype: ConfigApplicationGroupFaultDetect
        """
        return self._fault_detect

    @fault_detect.setter
    def fault_detect(self, fault_detect):
        """Sets the fault_detect of this ConfigApplicationGroup.


        :param fault_detect: The fault_detect of this ConfigApplicationGroup.  # noqa: E501
        :type: ConfigApplicationGroupFaultDetect
        """

        self._fault_detect = fault_detect

    @property
    def virtual_macs(self):
        """Gets the virtual_macs of this ConfigApplicationGroup.  # noqa: E501

        虚拟MAC  # noqa: E501

        :return: The virtual_macs of this ConfigApplicationGroup.  # noqa: E501
        :rtype: list[ConfigApplicationGroupVirtualMacs]
        """
        return self._virtual_macs

    @virtual_macs.setter
    def virtual_macs(self, virtual_macs):
        """Sets the virtual_macs of this ConfigApplicationGroup.

        虚拟MAC  # noqa: E501

        :param virtual_macs: The virtual_macs of this ConfigApplicationGroup.  # noqa: E501
        :type: list[ConfigApplicationGroupVirtualMacs]
        """

        self._virtual_macs = virtual_macs

    @property
    def default(self):
        """Gets the default of this ConfigApplicationGroup.  # noqa: E501

        表示此应用组是否是默认应用组，若为Default应用组值为MODIFIABLE  # noqa: E501

        :return: The default of this ConfigApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ConfigApplicationGroup.

        表示此应用组是否是默认应用组，若为Default应用组值为MODIFIABLE  # noqa: E501

        :param default: The default of this ConfigApplicationGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["NON-DEFAULT", "READONLY", "MODIFIABLE"]  # noqa: E501
        if default not in allowed_values:
            raise ValueError(
                "Invalid value for `default` ({0}), must be one of {1}"  # noqa: E501
                .format(default, allowed_values)
            )

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigApplicationGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigApplicationGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
