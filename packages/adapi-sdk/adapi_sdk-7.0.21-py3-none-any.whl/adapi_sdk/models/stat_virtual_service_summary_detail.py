# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_accumulate import StatStatisticAccumulate  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501
from adapi_sdk.models.stat_virtual_service_summary_detail_pool_count import StatVirtualServiceSummaryDetailPoolCount  # noqa: F401,E501
from adapi_sdk.models.stat_virtual_service_summary_detail_virtual_service_count import StatVirtualServiceSummaryDetailVirtualServiceCount  # noqa: F401,E501


class StatVirtualServiceSummaryDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'virtual_service_count': 'StatVirtualServiceSummaryDetailVirtualServiceCount',
        'pool_count': 'StatVirtualServiceSummaryDetailPoolCount',
        'connection': 'StatStatisticInstant',
        'connection_established': 'StatStatisticInstant',
        'connection_rate': 'StatStatisticInstant',
        'ssl_connection_rate': 'StatStatisticInstant',
        'client_connection': 'StatStatisticInstant',
        'server_connection': 'StatStatisticInstant',
        'pool_connection_usage': 'StatStatisticInstant',
        'pool_connection_rate': 'StatStatisticInstant',
        'maximum_connection': 'StatStatisticInstant',
        'total_connection': 'StatStatisticAccumulate',
        'http_request_rate': 'StatStatisticInstant',
        'total_http_request': 'StatStatisticAccumulate',
        'http_cache_hit': 'StatStatisticAccumulate',
        'http_cache_used': 'StatStatisticInstant',
        'http_cache_response_data': 'StatStatisticAccumulate',
        'http_compression_saving_ratio': 'StatStatisticAccumulate',
        'http_compression_data_reduction': 'StatStatisticAccumulate',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'general_throughput': 'StatStatisticInstant'
    }

    attribute_map = {
        'virtual_service_count': 'virtual_service_count',
        'pool_count': 'pool_count',
        'connection': 'connection',
        'connection_established': 'connection_established',
        'connection_rate': 'connection_rate',
        'ssl_connection_rate': 'ssl_connection_rate',
        'client_connection': 'client_connection',
        'server_connection': 'server_connection',
        'pool_connection_usage': 'pool_connection_usage',
        'pool_connection_rate': 'pool_connection_rate',
        'maximum_connection': 'maximum_connection',
        'total_connection': 'total_connection',
        'http_request_rate': 'http_request_rate',
        'total_http_request': 'total_http_request',
        'http_cache_hit': 'http_cache_hit',
        'http_cache_used': 'http_cache_used',
        'http_cache_response_data': 'http_cache_response_data',
        'http_compression_saving_ratio': 'http_compression_saving_ratio',
        'http_compression_data_reduction': 'http_compression_data_reduction',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'general_throughput': 'general_throughput'
    }

    def __init__(self, virtual_service_count=None, pool_count=None, connection=None, connection_established=None, connection_rate=None, ssl_connection_rate=None, client_connection=None, server_connection=None, pool_connection_usage=None, pool_connection_rate=None, maximum_connection=None, total_connection=None, http_request_rate=None, total_http_request=None, http_cache_hit=None, http_cache_used=None, http_cache_response_data=None, http_compression_saving_ratio=None, http_compression_data_reduction=None, upstream_throughput=None, downstream_throughput=None, general_throughput=None):  # noqa: E501
        """StatVirtualServiceSummaryDetail - a model defined in Swagger"""  # noqa: E501

        self._virtual_service_count = None
        self._pool_count = None
        self._connection = None
        self._connection_established = None
        self._connection_rate = None
        self._ssl_connection_rate = None
        self._client_connection = None
        self._server_connection = None
        self._pool_connection_usage = None
        self._pool_connection_rate = None
        self._maximum_connection = None
        self._total_connection = None
        self._http_request_rate = None
        self._total_http_request = None
        self._http_cache_hit = None
        self._http_cache_used = None
        self._http_cache_response_data = None
        self._http_compression_saving_ratio = None
        self._http_compression_data_reduction = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._general_throughput = None
        self.discriminator = None

        if virtual_service_count is not None:
            self.virtual_service_count = virtual_service_count
        if pool_count is not None:
            self.pool_count = pool_count
        if connection is not None:
            self.connection = connection
        if connection_established is not None:
            self.connection_established = connection_established
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if ssl_connection_rate is not None:
            self.ssl_connection_rate = ssl_connection_rate
        if client_connection is not None:
            self.client_connection = client_connection
        if server_connection is not None:
            self.server_connection = server_connection
        if pool_connection_usage is not None:
            self.pool_connection_usage = pool_connection_usage
        if pool_connection_rate is not None:
            self.pool_connection_rate = pool_connection_rate
        if maximum_connection is not None:
            self.maximum_connection = maximum_connection
        if total_connection is not None:
            self.total_connection = total_connection
        if http_request_rate is not None:
            self.http_request_rate = http_request_rate
        if total_http_request is not None:
            self.total_http_request = total_http_request
        if http_cache_hit is not None:
            self.http_cache_hit = http_cache_hit
        if http_cache_used is not None:
            self.http_cache_used = http_cache_used
        if http_cache_response_data is not None:
            self.http_cache_response_data = http_cache_response_data
        if http_compression_saving_ratio is not None:
            self.http_compression_saving_ratio = http_compression_saving_ratio
        if http_compression_data_reduction is not None:
            self.http_compression_data_reduction = http_compression_data_reduction
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if general_throughput is not None:
            self.general_throughput = general_throughput

    @property
    def virtual_service_count(self):
        """Gets the virtual_service_count of this StatVirtualServiceSummaryDetail.  # noqa: E501


        :return: The virtual_service_count of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatVirtualServiceSummaryDetailVirtualServiceCount
        """
        return self._virtual_service_count

    @virtual_service_count.setter
    def virtual_service_count(self, virtual_service_count):
        """Sets the virtual_service_count of this StatVirtualServiceSummaryDetail.


        :param virtual_service_count: The virtual_service_count of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatVirtualServiceSummaryDetailVirtualServiceCount
        """

        self._virtual_service_count = virtual_service_count

    @property
    def pool_count(self):
        """Gets the pool_count of this StatVirtualServiceSummaryDetail.  # noqa: E501


        :return: The pool_count of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatVirtualServiceSummaryDetailPoolCount
        """
        return self._pool_count

    @pool_count.setter
    def pool_count(self, pool_count):
        """Sets the pool_count of this StatVirtualServiceSummaryDetail.


        :param pool_count: The pool_count of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatVirtualServiceSummaryDetailPoolCount
        """

        self._pool_count = pool_count

    @property
    def connection(self):
        """Gets the connection of this StatVirtualServiceSummaryDetail.  # noqa: E501

        并发连接数  # noqa: E501

        :return: The connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatVirtualServiceSummaryDetail.

        并发连接数  # noqa: E501

        :param connection: The connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def connection_established(self):
        """Gets the connection_established of this StatVirtualServiceSummaryDetail.  # noqa: E501

        Established并发连接数  # noqa: E501

        :return: The connection_established of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_established

    @connection_established.setter
    def connection_established(self, connection_established):
        """Sets the connection_established of this StatVirtualServiceSummaryDetail.

        Established并发连接数  # noqa: E501

        :param connection_established: The connection_established of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_established = connection_established

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501

        新建连接数  # noqa: E501

        :return: The connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatVirtualServiceSummaryDetail.

        新建连接数  # noqa: E501

        :param connection_rate: The connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def ssl_connection_rate(self):
        """Gets the ssl_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501

        SSL新建连接数  # noqa: E501

        :return: The ssl_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._ssl_connection_rate

    @ssl_connection_rate.setter
    def ssl_connection_rate(self, ssl_connection_rate):
        """Sets the ssl_connection_rate of this StatVirtualServiceSummaryDetail.

        SSL新建连接数  # noqa: E501

        :param ssl_connection_rate: The ssl_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._ssl_connection_rate = ssl_connection_rate

    @property
    def client_connection(self):
        """Gets the client_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501

        客户端连接数  # noqa: E501

        :return: The client_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._client_connection

    @client_connection.setter
    def client_connection(self, client_connection):
        """Sets the client_connection of this StatVirtualServiceSummaryDetail.

        客户端连接数  # noqa: E501

        :param client_connection: The client_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._client_connection = client_connection

    @property
    def server_connection(self):
        """Gets the server_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501

        服务端连接数  # noqa: E501

        :return: The server_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._server_connection

    @server_connection.setter
    def server_connection(self, server_connection):
        """Sets the server_connection of this StatVirtualServiceSummaryDetail.

        服务端连接数  # noqa: E501

        :param server_connection: The server_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._server_connection = server_connection

    @property
    def pool_connection_usage(self):
        """Gets the pool_connection_usage of this StatVirtualServiceSummaryDetail.  # noqa: E501

        TCP连接池使用率  # noqa: E501

        :return: The pool_connection_usage of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._pool_connection_usage

    @pool_connection_usage.setter
    def pool_connection_usage(self, pool_connection_usage):
        """Sets the pool_connection_usage of this StatVirtualServiceSummaryDetail.

        TCP连接池使用率  # noqa: E501

        :param pool_connection_usage: The pool_connection_usage of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._pool_connection_usage = pool_connection_usage

    @property
    def pool_connection_rate(self):
        """Gets the pool_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501

        TCP连接池新建速率  # noqa: E501

        :return: The pool_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._pool_connection_rate

    @pool_connection_rate.setter
    def pool_connection_rate(self, pool_connection_rate):
        """Sets the pool_connection_rate of this StatVirtualServiceSummaryDetail.

        TCP连接池新建速率  # noqa: E501

        :param pool_connection_rate: The pool_connection_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._pool_connection_rate = pool_connection_rate

    @property
    def maximum_connection(self):
        """Gets the maximum_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501

        最大连接数  # noqa: E501

        :return: The maximum_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._maximum_connection

    @maximum_connection.setter
    def maximum_connection(self, maximum_connection):
        """Sets the maximum_connection of this StatVirtualServiceSummaryDetail.

        最大连接数  # noqa: E501

        :param maximum_connection: The maximum_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._maximum_connection = maximum_connection

    @property
    def total_connection(self):
        """Gets the total_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501

        总连接数  # noqa: E501

        :return: The total_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._total_connection

    @total_connection.setter
    def total_connection(self, total_connection):
        """Sets the total_connection of this StatVirtualServiceSummaryDetail.

        总连接数  # noqa: E501

        :param total_connection: The total_connection of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._total_connection = total_connection

    @property
    def http_request_rate(self):
        """Gets the http_request_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP请求速率  # noqa: E501

        :return: The http_request_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_request_rate

    @http_request_rate.setter
    def http_request_rate(self, http_request_rate):
        """Sets the http_request_rate of this StatVirtualServiceSummaryDetail.

        HTTP请求速率  # noqa: E501

        :param http_request_rate: The http_request_rate of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_request_rate = http_request_rate

    @property
    def total_http_request(self):
        """Gets the total_http_request of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP请求总数  # noqa: E501

        :return: The total_http_request of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._total_http_request

    @total_http_request.setter
    def total_http_request(self, total_http_request):
        """Sets the total_http_request of this StatVirtualServiceSummaryDetail.

        HTTP请求总数  # noqa: E501

        :param total_http_request: The total_http_request of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._total_http_request = total_http_request

    @property
    def http_cache_hit(self):
        """Gets the http_cache_hit of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP缓存命中数  # noqa: E501

        :return: The http_cache_hit of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_cache_hit

    @http_cache_hit.setter
    def http_cache_hit(self, http_cache_hit):
        """Sets the http_cache_hit of this StatVirtualServiceSummaryDetail.

        HTTP缓存命中数  # noqa: E501

        :param http_cache_hit: The http_cache_hit of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_cache_hit = http_cache_hit

    @property
    def http_cache_used(self):
        """Gets the http_cache_used of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP缓存命中比例  # noqa: E501

        :return: The http_cache_used of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_cache_used

    @http_cache_used.setter
    def http_cache_used(self, http_cache_used):
        """Sets the http_cache_used of this StatVirtualServiceSummaryDetail.

        HTTP缓存命中比例  # noqa: E501

        :param http_cache_used: The http_cache_used of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_cache_used = http_cache_used

    @property
    def http_cache_response_data(self):
        """Gets the http_cache_response_data of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP缓存应答数据  # noqa: E501

        :return: The http_cache_response_data of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_cache_response_data

    @http_cache_response_data.setter
    def http_cache_response_data(self, http_cache_response_data):
        """Sets the http_cache_response_data of this StatVirtualServiceSummaryDetail.

        HTTP缓存应答数据  # noqa: E501

        :param http_cache_response_data: The http_cache_response_data of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_cache_response_data = http_cache_response_data

    @property
    def http_compression_saving_ratio(self):
        """Gets the http_compression_saving_ratio of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP压缩数据节省比例  # noqa: E501

        :return: The http_compression_saving_ratio of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_compression_saving_ratio

    @http_compression_saving_ratio.setter
    def http_compression_saving_ratio(self, http_compression_saving_ratio):
        """Sets the http_compression_saving_ratio of this StatVirtualServiceSummaryDetail.

        HTTP压缩数据节省比例  # noqa: E501

        :param http_compression_saving_ratio: The http_compression_saving_ratio of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_compression_saving_ratio = http_compression_saving_ratio

    @property
    def http_compression_data_reduction(self):
        """Gets the http_compression_data_reduction of this StatVirtualServiceSummaryDetail.  # noqa: E501

        HTTP压缩数据节省量  # noqa: E501

        :return: The http_compression_data_reduction of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_compression_data_reduction

    @http_compression_data_reduction.setter
    def http_compression_data_reduction(self, http_compression_data_reduction):
        """Sets the http_compression_data_reduction of this StatVirtualServiceSummaryDetail.

        HTTP压缩数据节省量  # noqa: E501

        :param http_compression_data_reduction: The http_compression_data_reduction of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_compression_data_reduction = http_compression_data_reduction

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501

        上行吞吐量速率  # noqa: E501

        :return: The upstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatVirtualServiceSummaryDetail.

        上行吞吐量速率  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501

        下行吞吐量速率  # noqa: E501

        :return: The downstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatVirtualServiceSummaryDetail.

        下行吞吐量速率  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501

        上/下行总吞吐量速率  # noqa: E501

        :return: The general_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatVirtualServiceSummaryDetail.

        上/下行总吞吐量速率  # noqa: E501

        :param general_throughput: The general_throughput of this StatVirtualServiceSummaryDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatVirtualServiceSummaryDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatVirtualServiceSummaryDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
