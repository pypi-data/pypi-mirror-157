# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatLinkWanSummaryDetailLinkWanCountHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'normal': 'int',
        'failure': 'int',
        'busy': 'int'
    }

    attribute_map = {
        'normal': 'normal',
        'failure': 'failure',
        'busy': 'busy'
    }

    def __init__(self, normal=None, failure=None, busy=None):  # noqa: E501
        """StatLinkWanSummaryDetailLinkWanCountHealth - a model defined in Swagger"""  # noqa: E501

        self._normal = None
        self._failure = None
        self._busy = None
        self.discriminator = None

        if normal is not None:
            self.normal = normal
        if failure is not None:
            self.failure = failure
        if busy is not None:
            self.busy = busy

    @property
    def normal(self):
        """Gets the normal of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501

        链路正常  # noqa: E501

        :return: The normal of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this StatLinkWanSummaryDetailLinkWanCountHealth.

        链路正常  # noqa: E501

        :param normal: The normal of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :type: int
        """

        self._normal = normal

    @property
    def failure(self):
        """Gets the failure of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501

        链路故障  # noqa: E501

        :return: The failure of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :rtype: int
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this StatLinkWanSummaryDetailLinkWanCountHealth.

        链路故障  # noqa: E501

        :param failure: The failure of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :type: int
        """

        self._failure = failure

    @property
    def busy(self):
        """Gets the busy of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501

        链路繁忙  # noqa: E501

        :return: The busy of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :rtype: int
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this StatLinkWanSummaryDetailLinkWanCountHealth.

        链路繁忙  # noqa: E501

        :param busy: The busy of this StatLinkWanSummaryDetailLinkWanCountHealth.  # noqa: E501
        :type: int
        """

        self._busy = busy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatLinkWanSummaryDetailLinkWanCountHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatLinkWanSummaryDetailLinkWanCountHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
