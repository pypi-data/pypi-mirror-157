# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigQosProfileUserFlowControlIpRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_address': 'str',
        'upstream_rate_reserve_kbps': 'int',
        'upstream_rate_limit_kbps': 'int',
        'downstream_rate_reserve_kbps': 'int',
        'downstream_rate_limit_kbps': 'int'
    }

    attribute_map = {
        'source_address': 'source_address',
        'upstream_rate_reserve_kbps': 'upstream_rate_reserve_kbps',
        'upstream_rate_limit_kbps': 'upstream_rate_limit_kbps',
        'downstream_rate_reserve_kbps': 'downstream_rate_reserve_kbps',
        'downstream_rate_limit_kbps': 'downstream_rate_limit_kbps'
    }

    def __init__(self, source_address=None, upstream_rate_reserve_kbps=None, upstream_rate_limit_kbps=None, downstream_rate_reserve_kbps=None, downstream_rate_limit_kbps=None):  # noqa: E501
        """ConfigQosProfileUserFlowControlIpRules - a model defined in Swagger"""  # noqa: E501

        self._source_address = None
        self._upstream_rate_reserve_kbps = None
        self._upstream_rate_limit_kbps = None
        self._downstream_rate_reserve_kbps = None
        self._downstream_rate_limit_kbps = None
        self.discriminator = None

        self.source_address = source_address
        if upstream_rate_reserve_kbps is not None:
            self.upstream_rate_reserve_kbps = upstream_rate_reserve_kbps
        if upstream_rate_limit_kbps is not None:
            self.upstream_rate_limit_kbps = upstream_rate_limit_kbps
        if downstream_rate_reserve_kbps is not None:
            self.downstream_rate_reserve_kbps = downstream_rate_reserve_kbps
        if downstream_rate_limit_kbps is not None:
            self.downstream_rate_limit_kbps = downstream_rate_limit_kbps

    @property
    def source_address(self):
        """Gets the source_address of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501

        可选参数;指定待限制带宽的源地址,支持单个IP地址、IP范围和IP子网  # noqa: E501

        :return: The source_address of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigQosProfileUserFlowControlIpRules.

        可选参数;指定待限制带宽的源地址,支持单个IP地址、IP范围和IP子网  # noqa: E501

        :param source_address: The source_address of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :type: str
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def upstream_rate_reserve_kbps(self):
        """Gets the upstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501

        可选参数;指定上行最小保障带宽,单位为kbps  # noqa: E501

        :return: The upstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :rtype: int
        """
        return self._upstream_rate_reserve_kbps

    @upstream_rate_reserve_kbps.setter
    def upstream_rate_reserve_kbps(self, upstream_rate_reserve_kbps):
        """Sets the upstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.

        可选参数;指定上行最小保障带宽,单位为kbps  # noqa: E501

        :param upstream_rate_reserve_kbps: The upstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :type: int
        """
        if upstream_rate_reserve_kbps is not None and upstream_rate_reserve_kbps > 40000000:  # noqa: E501
            raise ValueError("Invalid value for `upstream_rate_reserve_kbps`, must be a value less than or equal to `40000000`")  # noqa: E501
        if upstream_rate_reserve_kbps is not None and upstream_rate_reserve_kbps < 1:  # noqa: E501
            raise ValueError("Invalid value for `upstream_rate_reserve_kbps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._upstream_rate_reserve_kbps = upstream_rate_reserve_kbps

    @property
    def upstream_rate_limit_kbps(self):
        """Gets the upstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501

        可选参数;指定上行最大限制带宽,单位为kbps  # noqa: E501

        :return: The upstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :rtype: int
        """
        return self._upstream_rate_limit_kbps

    @upstream_rate_limit_kbps.setter
    def upstream_rate_limit_kbps(self, upstream_rate_limit_kbps):
        """Sets the upstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.

        可选参数;指定上行最大限制带宽,单位为kbps  # noqa: E501

        :param upstream_rate_limit_kbps: The upstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :type: int
        """
        if upstream_rate_limit_kbps is not None and upstream_rate_limit_kbps > 40000000:  # noqa: E501
            raise ValueError("Invalid value for `upstream_rate_limit_kbps`, must be a value less than or equal to `40000000`")  # noqa: E501
        if upstream_rate_limit_kbps is not None and upstream_rate_limit_kbps < 1:  # noqa: E501
            raise ValueError("Invalid value for `upstream_rate_limit_kbps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._upstream_rate_limit_kbps = upstream_rate_limit_kbps

    @property
    def downstream_rate_reserve_kbps(self):
        """Gets the downstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501

        可选参数;指定下行最小保障带宽,单位为kbps  # noqa: E501

        :return: The downstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :rtype: int
        """
        return self._downstream_rate_reserve_kbps

    @downstream_rate_reserve_kbps.setter
    def downstream_rate_reserve_kbps(self, downstream_rate_reserve_kbps):
        """Sets the downstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.

        可选参数;指定下行最小保障带宽,单位为kbps  # noqa: E501

        :param downstream_rate_reserve_kbps: The downstream_rate_reserve_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :type: int
        """
        if downstream_rate_reserve_kbps is not None and downstream_rate_reserve_kbps > 40000000:  # noqa: E501
            raise ValueError("Invalid value for `downstream_rate_reserve_kbps`, must be a value less than or equal to `40000000`")  # noqa: E501
        if downstream_rate_reserve_kbps is not None and downstream_rate_reserve_kbps < 1:  # noqa: E501
            raise ValueError("Invalid value for `downstream_rate_reserve_kbps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._downstream_rate_reserve_kbps = downstream_rate_reserve_kbps

    @property
    def downstream_rate_limit_kbps(self):
        """Gets the downstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501

        可选参数;指定下行最大限制带宽,单位为kbps  # noqa: E501

        :return: The downstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :rtype: int
        """
        return self._downstream_rate_limit_kbps

    @downstream_rate_limit_kbps.setter
    def downstream_rate_limit_kbps(self, downstream_rate_limit_kbps):
        """Sets the downstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.

        可选参数;指定下行最大限制带宽,单位为kbps  # noqa: E501

        :param downstream_rate_limit_kbps: The downstream_rate_limit_kbps of this ConfigQosProfileUserFlowControlIpRules.  # noqa: E501
        :type: int
        """
        if downstream_rate_limit_kbps is not None and downstream_rate_limit_kbps > 40000000:  # noqa: E501
            raise ValueError("Invalid value for `downstream_rate_limit_kbps`, must be a value less than or equal to `40000000`")  # noqa: E501
        if downstream_rate_limit_kbps is not None and downstream_rate_limit_kbps < 1:  # noqa: E501
            raise ValueError("Invalid value for `downstream_rate_limit_kbps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._downstream_rate_limit_kbps = downstream_rate_limit_kbps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfileUserFlowControlIpRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfileUserFlowControlIpRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
