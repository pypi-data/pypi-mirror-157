# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_zone_dnssec import ConfigZoneDnssec  # noqa: F401,E501
from adapi_sdk.models.config_zone_peer_address import ConfigZonePeerAddress  # noqa: F401,E501
from adapi_sdk.models.config_zone_soa_record import ConfigZoneSoaRecord  # noqa: F401,E501


class ConfigZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'state': 'str',
        'role': 'str',
        'peer_address': 'list[ConfigZonePeerAddress]',
        'dnssec': 'ConfigZoneDnssec',
        'soa_record': 'ConfigZoneSoaRecord'
    }

    attribute_map = {
        'name': 'name',
        'state': 'state',
        'role': 'role',
        'peer_address': 'peer_address',
        'dnssec': 'dnssec',
        'soa_record': 'soa_record'
    }

    def __init__(self, name=None, state='ENABLE', role='MASTER', peer_address=None, dnssec=None, soa_record=None):  # noqa: E501
        """ConfigZone - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._state = None
        self._role = None
        self._peer_address = None
        self._dnssec = None
        self._soa_record = None
        self.discriminator = None

        self.name = name
        if state is not None:
            self.state = state
        if role is not None:
            self.role = role
        if peer_address is not None:
            self.peer_address = peer_address
        if dnssec is not None:
            self.dnssec = dnssec
        if soa_record is not None:
            self.soa_record = soa_record

    @property
    def name(self):
        """Gets the name of this ConfigZone.  # noqa: E501

        域。校验为域名格式,最大长度200。可以输入形如www.jd.com或com或a.com等  # noqa: E501

        :return: The name of this ConfigZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigZone.

        域。校验为域名格式,最大长度200。可以输入形如www.jd.com或com或a.com等  # noqa: E501

        :param name: The name of this ConfigZone.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def state(self):
        """Gets the state of this ConfigZone.  # noqa: E501

        域整体启/禁用，默认启用  # noqa: E501

        :return: The state of this ConfigZone.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigZone.

        域整体启/禁用，默认启用  # noqa: E501

        :param state: The state of this ConfigZone.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def role(self):
        """Gets the role of this ConfigZone.  # noqa: E501

        角色。包括主服务器MASTER和辅服务器SLAVE  # noqa: E501

        :return: The role of this ConfigZone.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ConfigZone.

        角色。包括主服务器MASTER和辅服务器SLAVE  # noqa: E501

        :param role: The role of this ConfigZone.  # noqa: E501
        :type: str
        """
        allowed_values = ["MASTER", "SLAVE"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def peer_address(self):
        """Gets the peer_address of this ConfigZone.  # noqa: E501

        通知/接收。可以不定义，最多定义5条。  # noqa: E501

        :return: The peer_address of this ConfigZone.  # noqa: E501
        :rtype: list[ConfigZonePeerAddress]
        """
        return self._peer_address

    @peer_address.setter
    def peer_address(self, peer_address):
        """Sets the peer_address of this ConfigZone.

        通知/接收。可以不定义，最多定义5条。  # noqa: E501

        :param peer_address: The peer_address of this ConfigZone.  # noqa: E501
        :type: list[ConfigZonePeerAddress]
        """

        self._peer_address = peer_address

    @property
    def dnssec(self):
        """Gets the dnssec of this ConfigZone.  # noqa: E501


        :return: The dnssec of this ConfigZone.  # noqa: E501
        :rtype: ConfigZoneDnssec
        """
        return self._dnssec

    @dnssec.setter
    def dnssec(self, dnssec):
        """Sets the dnssec of this ConfigZone.


        :param dnssec: The dnssec of this ConfigZone.  # noqa: E501
        :type: ConfigZoneDnssec
        """

        self._dnssec = dnssec

    @property
    def soa_record(self):
        """Gets the soa_record of this ConfigZone.  # noqa: E501


        :return: The soa_record of this ConfigZone.  # noqa: E501
        :rtype: ConfigZoneSoaRecord
        """
        return self._soa_record

    @soa_record.setter
    def soa_record(self, soa_record):
        """Sets the soa_record of this ConfigZone.


        :param soa_record: The soa_record of this ConfigZone.  # noqa: E501
        :type: ConfigZoneSoaRecord
        """

        self._soa_record = soa_record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
