# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnssecKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'key_type': 'str',
        'algorithm': 'str',
        'bit_width': 'int',
        'ttl': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'key_type': 'key_type',
        'algorithm': 'algorithm',
        'bit_width': 'bit_width',
        'ttl': 'ttl'
    }

    def __init__(self, name=None, description=None, key_type='ZONE-SIGNING-KEY', algorithm='RSA/SHA1', bit_width=None, ttl=None):  # noqa: E501
        """ConfigDnssecKey - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._key_type = None
        self._algorithm = None
        self._bit_width = None
        self._ttl = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if key_type is not None:
            self.key_type = key_type
        if algorithm is not None:
            self.algorithm = algorithm
        if bit_width is not None:
            self.bit_width = bit_width
        if ttl is not None:
            self.ttl = ttl

    @property
    def name(self):
        """Gets the name of this ConfigDnssecKey.  # noqa: E501

        必选参数；指定DNSSEC密钥的名称, 在配置中必须唯一。[1,63]最大63个英文字符,禁忌空白/逗号/引号/单引号  # noqa: E501

        :return: The name of this ConfigDnssecKey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnssecKey.

        必选参数；指定DNSSEC密钥的名称, 在配置中必须唯一。[1,63]最大63个英文字符,禁忌空白/逗号/引号/单引号  # noqa: E501

        :param name: The name of this ConfigDnssecKey.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnssecKey.  # noqa: E501

        配置描述信息。[1,63]最大63个英文字符，禁忌空白/逗号/引号/单引号  # noqa: E501

        :return: The description of this ConfigDnssecKey.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnssecKey.

        配置描述信息。[1,63]最大63个英文字符，禁忌空白/逗号/引号/单引号  # noqa: E501

        :param description: The description of this ConfigDnssecKey.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def key_type(self):
        """Gets the key_type of this ConfigDnssecKey.  # noqa: E501

        密钥类型，默认类型为ZSK密钥。  # noqa: E501

        :return: The key_type of this ConfigDnssecKey.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this ConfigDnssecKey.

        密钥类型，默认类型为ZSK密钥。  # noqa: E501

        :param key_type: The key_type of this ConfigDnssecKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["ZONE-SIGNING-KEY", "KEY-SIGNING-KEY"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"  # noqa: E501
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def algorithm(self):
        """Gets the algorithm of this ConfigDnssecKey.  # noqa: E501

        加密算法，默认RSA/SHA1。  # noqa: E501

        :return: The algorithm of this ConfigDnssecKey.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ConfigDnssecKey.

        加密算法，默认RSA/SHA1。  # noqa: E501

        :param algorithm: The algorithm of this ConfigDnssecKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA/SHA1", "RSA/SHA256", "RSA/SHA512"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def bit_width(self):
        """Gets the bit_width of this ConfigDnssecKey.  # noqa: E501

        密钥位宽设置，默认1024。可选值为1024,2048,4096  # noqa: E501

        :return: The bit_width of this ConfigDnssecKey.  # noqa: E501
        :rtype: int
        """
        return self._bit_width

    @bit_width.setter
    def bit_width(self, bit_width):
        """Sets the bit_width of this ConfigDnssecKey.

        密钥位宽设置，默认1024。可选值为1024,2048,4096  # noqa: E501

        :param bit_width: The bit_width of this ConfigDnssecKey.  # noqa: E501
        :type: int
        """

        self._bit_width = bit_width

    @property
    def ttl(self):
        """Gets the ttl of this ConfigDnssecKey.  # noqa: E501

        ttl取值范围为[0,86400]，单位秒  # noqa: E501

        :return: The ttl of this ConfigDnssecKey.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigDnssecKey.

        ttl取值范围为[0,86400]，单位秒  # noqa: E501

        :param ttl: The ttl of this ConfigDnssecKey.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnssecKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnssecKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
