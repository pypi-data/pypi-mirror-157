# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsProxyDns6to4Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'ipv6_address_prefix': 'str',
        'method': 'str',
        'response_rewrite': 'str'
    }

    attribute_map = {
        'state': 'state',
        'ipv6_address_prefix': 'ipv6_address_prefix',
        'method': 'method',
        'response_rewrite': 'response_rewrite'
    }

    def __init__(self, state='DISABLE', ipv6_address_prefix='64:ff9b::', method='RESPONSE-FIRST', response_rewrite='ANY'):  # noqa: E501
        """ConfigDnsProxyDns6to4Query - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._ipv6_address_prefix = None
        self._method = None
        self._response_rewrite = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if ipv6_address_prefix is not None:
            self.ipv6_address_prefix = ipv6_address_prefix
        if method is not None:
            self.method = method
        if response_rewrite is not None:
            self.response_rewrite = response_rewrite

    @property
    def state(self):
        """Gets the state of this ConfigDnsProxyDns6to4Query.  # noqa: E501

        可选参数；DNS64配置的状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :return: The state of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDnsProxyDns6to4Query.

        可选参数；DNS64配置的状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :param state: The state of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ipv6_address_prefix(self):
        """Gets the ipv6_address_prefix of this ConfigDnsProxyDns6to4Query.  # noqa: E501

        可选参数；DNS64配置的IPv6前缀，默认为64:ff9b::。  # noqa: E501

        :return: The ipv6_address_prefix of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address_prefix

    @ipv6_address_prefix.setter
    def ipv6_address_prefix(self, ipv6_address_prefix):
        """Sets the ipv6_address_prefix of this ConfigDnsProxyDns6to4Query.

        可选参数；DNS64配置的IPv6前缀，默认为64:ff9b::。  # noqa: E501

        :param ipv6_address_prefix: The ipv6_address_prefix of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :type: str
        """

        self._ipv6_address_prefix = ipv6_address_prefix

    @property
    def method(self):
        """Gets the method of this ConfigDnsProxyDns6to4Query.  # noqa: E501

        可选参数；DNS64配置的代理方式，可选值有：response-first(响应优先)、aaaa-record-first（AAAA记录优先）、a-record-first(仅A记录)；默认为响应优先。  # noqa: E501

        :return: The method of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigDnsProxyDns6to4Query.

        可选参数；DNS64配置的代理方式，可选值有：response-first(响应优先)、aaaa-record-first（AAAA记录优先）、a-record-first(仅A记录)；默认为响应优先。  # noqa: E501

        :param method: The method of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :type: str
        """
        allowed_values = ["RESPONSE-FIRST", "AAAA-RECORD-FIRST", "A-RECORD-ONLY"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def response_rewrite(self):
        """Gets the response_rewrite of this ConfigDnsProxyDns6to4Query.  # noqa: E501

        可选参数；DNS64配置的附加域改写，可选值有：ipv4-only(仅IPv4)、ipv6-only(仅IPv6)、any(所有)、disable（禁用）；默认为所有。  # noqa: E501

        :return: The response_rewrite of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :rtype: str
        """
        return self._response_rewrite

    @response_rewrite.setter
    def response_rewrite(self, response_rewrite):
        """Sets the response_rewrite of this ConfigDnsProxyDns6to4Query.

        可选参数；DNS64配置的附加域改写，可选值有：ipv4-only(仅IPv4)、ipv6-only(仅IPv6)、any(所有)、disable（禁用）；默认为所有。  # noqa: E501

        :param response_rewrite: The response_rewrite of this ConfigDnsProxyDns6to4Query.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4-ONLY", "IPV6-ONLY", "ANY", "DISABLE"]  # noqa: E501
        if response_rewrite not in allowed_values:
            raise ValueError(
                "Invalid value for `response_rewrite` ({0}), must be one of {1}"  # noqa: E501
                .format(response_rewrite, allowed_values)
            )

        self._response_rewrite = response_rewrite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsProxyDns6to4Query, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsProxyDns6to4Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
