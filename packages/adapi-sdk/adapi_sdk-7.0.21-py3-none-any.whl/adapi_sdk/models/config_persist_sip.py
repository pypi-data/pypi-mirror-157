# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPersistSip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'method': 'str',
        'timeout': 'int',
        'busy_protect': 'str',
        'record_scope': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'method': 'method',
        'timeout': 'timeout',
        'busy_protect': 'busy_protect',
        'record_scope': 'record_scope'
    }

    def __init__(self, name=None, description=None, type='SIP', method='CALL-ID', timeout=None, busy_protect='DISABLE', record_scope='POOL'):  # noqa: E501
        """ConfigPersistSip - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._method = None
        self._timeout = None
        self._busy_protect = None
        self._record_scope = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        self.method = method
        if timeout is not None:
            self.timeout = timeout
        if busy_protect is not None:
            self.busy_protect = busy_protect
        if record_scope is not None:
            self.record_scope = record_scope

    @property
    def name(self):
        """Gets the name of this ConfigPersistSip.  # noqa: E501

        会话保持名称  # noqa: E501

        :return: The name of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPersistSip.

        会话保持名称  # noqa: E501

        :param name: The name of this ConfigPersistSip.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPersistSip.  # noqa: E501

        可选参数；用于对此配置增加备注  # noqa: E501

        :return: The description of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPersistSip.

        可选参数；用于对此配置增加备注  # noqa: E501

        :param description: The description of this ConfigPersistSip.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigPersistSip.  # noqa: E501

        类型  # noqa: E501

        :return: The type of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPersistSip.

        类型  # noqa: E501

        :param type: The type of this ConfigPersistSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def method(self):
        """Gets the method of this ConfigPersistSip.  # noqa: E501

        类型  # noqa: E501

        :return: The method of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigPersistSip.

        类型  # noqa: E501

        :param method: The method of this ConfigPersistSip.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["CALL-ID"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def timeout(self):
        """Gets the timeout of this ConfigPersistSip.  # noqa: E501

        超时时间，单位为秒  # noqa: E501

        :return: The timeout of this ConfigPersistSip.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigPersistSip.

        超时时间，单位为秒  # noqa: E501

        :param timeout: The timeout of this ConfigPersistSip.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 31536000:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `31536000`")  # noqa: E501
        if timeout is not None and timeout < 0:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timeout = timeout

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigPersistSip.  # noqa: E501

        繁忙保护  # noqa: E501

        :return: The busy_protect of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigPersistSip.

        繁忙保护  # noqa: E501

        :param busy_protect: The busy_protect of this ConfigPersistSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_protect, allowed_values)
            )

        self._busy_protect = busy_protect

    @property
    def record_scope(self):
        """Gets the record_scope of this ConfigPersistSip.  # noqa: E501

        记录范围  # noqa: E501

        :return: The record_scope of this ConfigPersistSip.  # noqa: E501
        :rtype: str
        """
        return self._record_scope

    @record_scope.setter
    def record_scope(self, record_scope):
        """Sets the record_scope of this ConfigPersistSip.

        记录范围  # noqa: E501

        :param record_scope: The record_scope of this ConfigPersistSip.  # noqa: E501
        :type: str
        """
        allowed_values = ["POOL", "VIP", "GLOBAL"]  # noqa: E501
        if record_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `record_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(record_scope, allowed_values)
            )

        self._record_scope = record_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPersistSip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPersistSip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
