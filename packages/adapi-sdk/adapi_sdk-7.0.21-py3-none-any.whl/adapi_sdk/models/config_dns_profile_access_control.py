# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_profile_source_address import ConfigDnsProfileSourceAddress  # noqa: F401,E501


class ConfigDnsProfileAccessControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_address': 'ConfigDnsProfileSourceAddress',
        'domain': 'str',
        'record_type': 'str',
        'query_limit': 'int'
    }

    attribute_map = {
        'source_address': 'source_address',
        'domain': 'domain',
        'record_type': 'record_type',
        'query_limit': 'query_limit'
    }

    def __init__(self, source_address=None, domain=None, record_type='ALL', query_limit=None):  # noqa: E501
        """ConfigDnsProfileAccessControl - a model defined in Swagger"""  # noqa: E501

        self._source_address = None
        self._domain = None
        self._record_type = None
        self._query_limit = None
        self.discriminator = None

        self.source_address = source_address
        self.domain = domain
        if record_type is not None:
            self.record_type = record_type
        self.query_limit = query_limit

    @property
    def source_address(self):
        """Gets the source_address of this ConfigDnsProfileAccessControl.  # noqa: E501


        :return: The source_address of this ConfigDnsProfileAccessControl.  # noqa: E501
        :rtype: ConfigDnsProfileSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigDnsProfileAccessControl.


        :param source_address: The source_address of this ConfigDnsProfileAccessControl.  # noqa: E501
        :type: ConfigDnsProfileSourceAddress
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def domain(self):
        """Gets the domain of this ConfigDnsProfileAccessControl.  # noqa: E501

        指定所要限制的域名，按域名格式  # noqa: E501

        :return: The domain of this ConfigDnsProfileAccessControl.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigDnsProfileAccessControl.

        指定所要限制的域名，按域名格式  # noqa: E501

        :param domain: The domain of this ConfigDnsProfileAccessControl.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def record_type(self):
        """Gets the record_type of this ConfigDnsProfileAccessControl.  # noqa: E501

        指定所要限制的DNS记录类型。注意此处有一个类型为ANY代表返回若干记录; ALL代表所有类型  # noqa: E501

        :return: The record_type of this ConfigDnsProfileAccessControl.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ConfigDnsProfileAccessControl.

        指定所要限制的DNS记录类型。注意此处有一个类型为ANY代表返回若干记录; ALL代表所有类型  # noqa: E501

        :param record_type: The record_type of this ConfigDnsProfileAccessControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "CNAME", "MX", "NS", "PTR", "SRV", "TXT", "AAAA", "DS", "NAPTR", "CAA", "HINFO", "DNAME", "SOA", "ANY", "ALL"]  # noqa: E501
        if record_type not in allowed_values:
            raise ValueError(
                "Invalid value for `record_type` ({0}), must be one of {1}"  # noqa: E501
                .format(record_type, allowed_values)
            )

        self._record_type = record_type

    @property
    def query_limit(self):
        """Gets the query_limit of this ConfigDnsProfileAccessControl.  # noqa: E501

        指定DNS请求限制速率（单位：次/秒）。取值范围为[0,1000000]  # noqa: E501

        :return: The query_limit of this ConfigDnsProfileAccessControl.  # noqa: E501
        :rtype: int
        """
        return self._query_limit

    @query_limit.setter
    def query_limit(self, query_limit):
        """Sets the query_limit of this ConfigDnsProfileAccessControl.

        指定DNS请求限制速率（单位：次/秒）。取值范围为[0,1000000]  # noqa: E501

        :param query_limit: The query_limit of this ConfigDnsProfileAccessControl.  # noqa: E501
        :type: int
        """
        if query_limit is None:
            raise ValueError("Invalid value for `query_limit`, must not be `None`")  # noqa: E501
        if query_limit is not None and query_limit > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `query_limit`, must be a value less than or equal to `1000000`")  # noqa: E501
        if query_limit is not None and query_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `query_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._query_limit = query_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsProfileAccessControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsProfileAccessControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
