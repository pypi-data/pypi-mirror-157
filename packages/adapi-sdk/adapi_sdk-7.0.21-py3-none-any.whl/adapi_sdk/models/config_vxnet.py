# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigVxnet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'vteps_ip': 'list[str]',
        'vteps_port': 'int',
        'vxlan_domain': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'vteps_ip': 'vteps_ip',
        'vteps_port': 'vteps_port',
        'vxlan_domain': 'vxlan_domain'
    }

    def __init__(self, name=None, description=None, vteps_ip=None, vteps_port=None, vxlan_domain=None):  # noqa: E501
        """ConfigVxnet - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._vteps_ip = None
        self._vteps_port = None
        self._vxlan_domain = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if vteps_ip is not None:
            self.vteps_ip = vteps_ip
        self.vteps_port = vteps_port
        if vxlan_domain is not None:
            self.vxlan_domain = vxlan_domain

    @property
    def name(self):
        """Gets the name of this ConfigVxnet.  # noqa: E501

        必选参数；名称  # noqa: E501

        :return: The name of this ConfigVxnet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigVxnet.

        必选参数；名称  # noqa: E501

        :param name: The name of this ConfigVxnet.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigVxnet.  # noqa: E501

        可选参数；描述  # noqa: E501

        :return: The description of this ConfigVxnet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVxnet.

        可选参数；描述  # noqa: E501

        :param description: The description of this ConfigVxnet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vteps_ip(self):
        """Gets the vteps_ip of this ConfigVxnet.  # noqa: E501

        绑定的远端IP  # noqa: E501

        :return: The vteps_ip of this ConfigVxnet.  # noqa: E501
        :rtype: list[str]
        """
        return self._vteps_ip

    @vteps_ip.setter
    def vteps_ip(self, vteps_ip):
        """Sets the vteps_ip of this ConfigVxnet.

        绑定的远端IP  # noqa: E501

        :param vteps_ip: The vteps_ip of this ConfigVxnet.  # noqa: E501
        :type: list[str]
        """

        self._vteps_ip = vteps_ip

    @property
    def vteps_port(self):
        """Gets the vteps_port of this ConfigVxnet.  # noqa: E501

        监听端口  # noqa: E501

        :return: The vteps_port of this ConfigVxnet.  # noqa: E501
        :rtype: int
        """
        return self._vteps_port

    @vteps_port.setter
    def vteps_port(self, vteps_port):
        """Sets the vteps_port of this ConfigVxnet.

        监听端口  # noqa: E501

        :param vteps_port: The vteps_port of this ConfigVxnet.  # noqa: E501
        :type: int
        """
        if vteps_port is None:
            raise ValueError("Invalid value for `vteps_port`, must not be `None`")  # noqa: E501
        if vteps_port is not None and vteps_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `vteps_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if vteps_port is not None and vteps_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `vteps_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._vteps_port = vteps_port

    @property
    def vxlan_domain(self):
        """Gets the vxlan_domain of this ConfigVxnet.  # noqa: E501

        vxlan域  # noqa: E501

        :return: The vxlan_domain of this ConfigVxnet.  # noqa: E501
        :rtype: int
        """
        return self._vxlan_domain

    @vxlan_domain.setter
    def vxlan_domain(self, vxlan_domain):
        """Sets the vxlan_domain of this ConfigVxnet.

        vxlan域  # noqa: E501

        :param vxlan_domain: The vxlan_domain of this ConfigVxnet.  # noqa: E501
        :type: int
        """
        if vxlan_domain is not None and vxlan_domain > 9:  # noqa: E501
            raise ValueError("Invalid value for `vxlan_domain`, must be a value less than or equal to `9`")  # noqa: E501
        if vxlan_domain is not None and vxlan_domain < 0:  # noqa: E501
            raise ValueError("Invalid value for `vxlan_domain`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vxlan_domain = vxlan_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVxnet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVxnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
