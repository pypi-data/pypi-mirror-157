# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_member_detail_application_group import StatMemberDetailApplicationGroup  # noqa: F401,E501


class StatMemberDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'location': 'str',
        'state': 'str',
        'health': 'str',
        'failure_reason': 'str',
        'master_controller': 'str',
        'configure_synchronize': 'str',
        'application_group': 'StatMemberDetailApplicationGroup'
    }

    attribute_map = {
        'name': 'name',
        'location': 'location',
        'state': 'state',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'master_controller': 'master_controller',
        'configure_synchronize': 'configure_synchronize',
        'application_group': 'application_group'
    }

    def __init__(self, name=None, location=None, state='ENABLE', health=None, failure_reason=None, master_controller=None, configure_synchronize=None, application_group=None):  # noqa: E501
        """StatMemberDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._location = None
        self._state = None
        self._health = None
        self._failure_reason = None
        self._master_controller = None
        self._configure_synchronize = None
        self._application_group = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if location is not None:
            self.location = location
        if state is not None:
            self.state = state
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if master_controller is not None:
            self.master_controller = master_controller
        if configure_synchronize is not None:
            self.configure_synchronize = configure_synchronize
        if application_group is not None:
            self.application_group = application_group

    @property
    def name(self):
        """Gets the name of this StatMemberDetail.  # noqa: E501

        成员主机名  # noqa: E501

        :return: The name of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatMemberDetail.

        成员主机名  # noqa: E501

        :param name: The name of this StatMemberDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location(self):
        """Gets the location of this StatMemberDetail.  # noqa: E501

        本机设备还是远端设备  # noqa: E501

        :return: The location of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StatMemberDetail.

        本机设备还是远端设备  # noqa: E501

        :param location: The location of this StatMemberDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "REMOTE"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"  # noqa: E501
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def state(self):
        """Gets the state of this StatMemberDetail.  # noqa: E501

        该设备处于启用还是禁用状态  # noqa: E501

        :return: The state of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatMemberDetail.

        该设备处于启用还是禁用状态  # noqa: E501

        :param state: The state of this StatMemberDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def health(self):
        """Gets the health of this StatMemberDetail.  # noqa: E501

        成员健康状态健康状态（INITIAL-初始化/NORMAL-正常/ALERT-告警/SILENT-静默/FAILURE-故障/OFFLINE-离线）  # noqa: E501

        :return: The health of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatMemberDetail.

        成员健康状态健康状态（INITIAL-初始化/NORMAL-正常/ALERT-告警/SILENT-静默/FAILURE-故障/OFFLINE-离线）  # noqa: E501

        :param health: The health of this StatMemberDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITAL", "NORMAL", "ALERT", "SILENT", "FAILURE", "OFFLINE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatMemberDetail.  # noqa: E501

        故障原因详情  # noqa: E501

        :return: The failure_reason of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatMemberDetail.

        故障原因详情  # noqa: E501

        :param failure_reason: The failure_reason of this StatMemberDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def master_controller(self):
        """Gets the master_controller of this StatMemberDetail.  # noqa: E501

        当前设备控制转态（ACTIVE为主控，其他为非主控）  # noqa: E501

        :return: The master_controller of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._master_controller

    @master_controller.setter
    def master_controller(self, master_controller):
        """Sets the master_controller of this StatMemberDetail.

        当前设备控制转态（ACTIVE为主控，其他为非主控）  # noqa: E501

        :param master_controller: The master_controller of this StatMemberDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "ACTIVE", "STANDBY"]  # noqa: E501
        if master_controller not in allowed_values:
            raise ValueError(
                "Invalid value for `master_controller` ({0}), must be one of {1}"  # noqa: E501
                .format(master_controller, allowed_values)
            )

        self._master_controller = master_controller

    @property
    def configure_synchronize(self):
        """Gets the configure_synchronize of this StatMemberDetail.  # noqa: E501

        配置同步状态（COMPLETED-完成/INCOMPLETED-未完成）  # noqa: E501

        :return: The configure_synchronize of this StatMemberDetail.  # noqa: E501
        :rtype: str
        """
        return self._configure_synchronize

    @configure_synchronize.setter
    def configure_synchronize(self, configure_synchronize):
        """Sets the configure_synchronize of this StatMemberDetail.

        配置同步状态（COMPLETED-完成/INCOMPLETED-未完成）  # noqa: E501

        :param configure_synchronize: The configure_synchronize of this StatMemberDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETED", "INCOMPLETE"]  # noqa: E501
        if configure_synchronize not in allowed_values:
            raise ValueError(
                "Invalid value for `configure_synchronize` ({0}), must be one of {1}"  # noqa: E501
                .format(configure_synchronize, allowed_values)
            )

        self._configure_synchronize = configure_synchronize

    @property
    def application_group(self):
        """Gets the application_group of this StatMemberDetail.  # noqa: E501


        :return: The application_group of this StatMemberDetail.  # noqa: E501
        :rtype: StatMemberDetailApplicationGroup
        """
        return self._application_group

    @application_group.setter
    def application_group(self, application_group):
        """Sets the application_group of this StatMemberDetail.


        :param application_group: The application_group of this StatMemberDetail.  # noqa: E501
        :type: StatMemberDetailApplicationGroup
        """

        self._application_group = application_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatMemberDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatMemberDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
