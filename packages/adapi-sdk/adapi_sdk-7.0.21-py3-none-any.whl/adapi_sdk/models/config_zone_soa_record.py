# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigZoneSoaRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_server': 'str',
        'email': 'str',
        'serial_number': 'int',
        'refresh_interval': 'int',
        'retry_interval': 'int',
        'expire_time': 'int',
        'ttl': 'int',
        'negative_ttl': 'int'
    }

    attribute_map = {
        'master_server': 'master_server',
        'email': 'email',
        'serial_number': 'serial_number',
        'refresh_interval': 'refresh_interval',
        'retry_interval': 'retry_interval',
        'expire_time': 'expire_time',
        'ttl': 'ttl',
        'negative_ttl': 'negative_ttl'
    }

    def __init__(self, master_server=None, email=None, serial_number=None, refresh_interval=None, retry_interval=None, expire_time=None, ttl=None, negative_ttl=None):  # noqa: E501
        """ConfigZoneSoaRecord - a model defined in Swagger"""  # noqa: E501

        self._master_server = None
        self._email = None
        self._serial_number = None
        self._refresh_interval = None
        self._retry_interval = None
        self._expire_time = None
        self._ttl = None
        self._negative_ttl = None
        self.discriminator = None

        self.master_server = master_server
        self.email = email
        self.serial_number = serial_number
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if retry_interval is not None:
            self.retry_interval = retry_interval
        if expire_time is not None:
            self.expire_time = expire_time
        if ttl is not None:
            self.ttl = ttl
        if negative_ttl is not None:
            self.negative_ttl = negative_ttl

    @property
    def master_server(self):
        """Gets the master_server of this ConfigZoneSoaRecord.  # noqa: E501

        源主机，格式校验时为域名（最大长度250）或IPv4地址  # noqa: E501

        :return: The master_server of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: str
        """
        return self._master_server

    @master_server.setter
    def master_server(self, master_server):
        """Sets the master_server of this ConfigZoneSoaRecord.

        源主机，格式校验时为域名（最大长度250）或IPv4地址  # noqa: E501

        :param master_server: The master_server of this ConfigZoneSoaRecord.  # noqa: E501
        :type: str
        """
        if master_server is None:
            raise ValueError("Invalid value for `master_server`, must not be `None`")  # noqa: E501

        self._master_server = master_server

    @property
    def email(self):
        """Gets the email of this ConfigZoneSoaRecord.  # noqa: E501

        电子邮件,为电子邮件标准格式,并且将邮件中的“@”替换为“.”  # noqa: E501

        :return: The email of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConfigZoneSoaRecord.

        电子邮件,为电子邮件标准格式,并且将邮件中的“@”替换为“.”  # noqa: E501

        :param email: The email of this ConfigZoneSoaRecord.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def serial_number(self):
        """Gets the serial_number of this ConfigZoneSoaRecord.  # noqa: E501

        序列号，取值范围为[0,4294967295]  # noqa: E501

        :return: The serial_number of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ConfigZoneSoaRecord.

        序列号，取值范围为[0,4294967295]  # noqa: E501

        :param serial_number: The serial_number of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501
        if serial_number is not None and serial_number > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if serial_number is not None and serial_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this ConfigZoneSoaRecord.  # noqa: E501

        刷新时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :return: The refresh_interval of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this ConfigZoneSoaRecord.

        刷新时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :param refresh_interval: The refresh_interval of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if refresh_interval is not None and refresh_interval > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `refresh_interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if refresh_interval is not None and refresh_interval < 0:  # noqa: E501
            raise ValueError("Invalid value for `refresh_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refresh_interval = refresh_interval

    @property
    def retry_interval(self):
        """Gets the retry_interval of this ConfigZoneSoaRecord.  # noqa: E501

        重试时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :return: The retry_interval of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval):
        """Sets the retry_interval of this ConfigZoneSoaRecord.

        重试时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :param retry_interval: The retry_interval of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if retry_interval is not None and retry_interval > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `retry_interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if retry_interval is not None and retry_interval < 0:  # noqa: E501
            raise ValueError("Invalid value for `retry_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retry_interval = retry_interval

    @property
    def expire_time(self):
        """Gets the expire_time of this ConfigZoneSoaRecord.  # noqa: E501

        到期时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :return: The expire_time of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ConfigZoneSoaRecord.

        到期时间，取值范围为[0,2147483647]，单位秒  # noqa: E501

        :param expire_time: The expire_time of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if expire_time is not None and expire_time > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `expire_time`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if expire_time is not None and expire_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `expire_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expire_time = expire_time

    @property
    def ttl(self):
        """Gets the ttl of this ConfigZoneSoaRecord.  # noqa: E501

        TTL值，取值范围为[0, 2147483647]，单位秒  # noqa: E501

        :return: The ttl of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigZoneSoaRecord.

        TTL值，取值范围为[0, 2147483647]，单位秒  # noqa: E501

        :param ttl: The ttl of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    @property
    def negative_ttl(self):
        """Gets the negative_ttl of this ConfigZoneSoaRecord.  # noqa: E501

        否定记录缓存时间，取值范围为[0, 2147483647]，单位秒  # noqa: E501

        :return: The negative_ttl of this ConfigZoneSoaRecord.  # noqa: E501
        :rtype: int
        """
        return self._negative_ttl

    @negative_ttl.setter
    def negative_ttl(self, negative_ttl):
        """Sets the negative_ttl of this ConfigZoneSoaRecord.

        否定记录缓存时间，取值范围为[0, 2147483647]，单位秒  # noqa: E501

        :param negative_ttl: The negative_ttl of this ConfigZoneSoaRecord.  # noqa: E501
        :type: int
        """
        if negative_ttl is not None and negative_ttl > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `negative_ttl`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if negative_ttl is not None and negative_ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `negative_ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._negative_ttl = negative_ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigZoneSoaRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigZoneSoaRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
