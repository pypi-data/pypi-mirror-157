# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHttpProfileSourceAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'str',
        'request_header': 'str'
    }

    attribute_map = {
        'operation': 'operation',
        'request_header': 'request_header'
    }

    def __init__(self, operation='NONE', request_header='X-Forwarded-For'):  # noqa: E501
        """ConfigHttpProfileSourceAddress - a model defined in Swagger"""  # noqa: E501

        self._operation = None
        self._request_header = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if request_header is not None:
            self.request_header = request_header

    @property
    def operation(self):
        """Gets the operation of this ConfigHttpProfileSourceAddress.  # noqa: E501

        可选参数;指定源地址透传方式,none表示不启用,request-header-insert-srcip表示将源IP插入到HTTP头部,snat-by-request-header表示使用HTTP头部中的IP和服务器建立连接;默认为none  # noqa: E501

        :return: The operation of this ConfigHttpProfileSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ConfigHttpProfileSourceAddress.

        可选参数;指定源地址透传方式,none表示不启用,request-header-insert-srcip表示将源IP插入到HTTP头部,snat-by-request-header表示使用HTTP头部中的IP和服务器建立连接;默认为none  # noqa: E501

        :param operation: The operation of this ConfigHttpProfileSourceAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "REQUEST-HEADER-INSERT-SRCIP", "SNAT-BY-REQUEST-HEADER"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def request_header(self):
        """Gets the request_header of this ConfigHttpProfileSourceAddress.  # noqa: E501

        可选参数;指定透传源IP所使用的HTTP头部名称  # noqa: E501

        :return: The request_header of this ConfigHttpProfileSourceAddress.  # noqa: E501
        :rtype: str
        """
        return self._request_header

    @request_header.setter
    def request_header(self, request_header):
        """Sets the request_header of this ConfigHttpProfileSourceAddress.

        可选参数;指定透传源IP所使用的HTTP头部名称  # noqa: E501

        :param request_header: The request_header of this ConfigHttpProfileSourceAddress.  # noqa: E501
        :type: str
        """
        if request_header is not None and len(request_header) > 63:
            raise ValueError("Invalid value for `request_header`, length must be less than or equal to `63`")  # noqa: E501

        self._request_header = request_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpProfileSourceAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpProfileSourceAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
