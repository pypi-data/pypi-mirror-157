# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_bond_detail_aggregate_interfaces import StatBondDetailAggregateInterfaces  # noqa: F401,E501
from adapi_sdk.models.stat_bond_detail_dynamic_interfaces import StatBondDetailDynamicInterfaces  # noqa: F401,E501


class StatBondDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'aggregate_policy': 'str',
        'aggregate_interfaces': 'list[StatBondDetailAggregateInterfaces]',
        'dynamic_interfaces': 'list[StatBondDetailDynamicInterfaces]'
    }

    attribute_map = {
        'name': 'name',
        'aggregate_policy': 'aggregate_policy',
        'aggregate_interfaces': 'aggregate_interfaces',
        'dynamic_interfaces': 'dynamic_interfaces'
    }

    def __init__(self, name=None, aggregate_policy=None, aggregate_interfaces=None, dynamic_interfaces=None):  # noqa: E501
        """StatBondDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._aggregate_policy = None
        self._aggregate_interfaces = None
        self._dynamic_interfaces = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if aggregate_policy is not None:
            self.aggregate_policy = aggregate_policy
        if aggregate_interfaces is not None:
            self.aggregate_interfaces = aggregate_interfaces
        if dynamic_interfaces is not None:
            self.dynamic_interfaces = dynamic_interfaces

    @property
    def name(self):
        """Gets the name of this StatBondDetail.  # noqa: E501

        聚合接口的名称  # noqa: E501

        :return: The name of this StatBondDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatBondDetail.

        聚合接口的名称  # noqa: E501

        :param name: The name of this StatBondDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def aggregate_policy(self):
        """Gets the aggregate_policy of this StatBondDetail.  # noqa: E501

        绑定策略  # noqa: E501

        :return: The aggregate_policy of this StatBondDetail.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_policy

    @aggregate_policy.setter
    def aggregate_policy(self, aggregate_policy):
        """Sets the aggregate_policy of this StatBondDetail.

        绑定策略  # noqa: E501

        :param aggregate_policy: The aggregate_policy of this StatBondDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["HASH", "ROUND-ROBIN", "8023AD", "ACTIVE-BACKUP"]  # noqa: E501
        if aggregate_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregate_policy, allowed_values)
            )

        self._aggregate_policy = aggregate_policy

    @property
    def aggregate_interfaces(self):
        """Gets the aggregate_interfaces of this StatBondDetail.  # noqa: E501

        聚合接口绑定的网口列表  # noqa: E501

        :return: The aggregate_interfaces of this StatBondDetail.  # noqa: E501
        :rtype: list[StatBondDetailAggregateInterfaces]
        """
        return self._aggregate_interfaces

    @aggregate_interfaces.setter
    def aggregate_interfaces(self, aggregate_interfaces):
        """Sets the aggregate_interfaces of this StatBondDetail.

        聚合接口绑定的网口列表  # noqa: E501

        :param aggregate_interfaces: The aggregate_interfaces of this StatBondDetail.  # noqa: E501
        :type: list[StatBondDetailAggregateInterfaces]
        """

        self._aggregate_interfaces = aggregate_interfaces

    @property
    def dynamic_interfaces(self):
        """Gets the dynamic_interfaces of this StatBondDetail.  # noqa: E501

        待选的网络接口列表  # noqa: E501

        :return: The dynamic_interfaces of this StatBondDetail.  # noqa: E501
        :rtype: list[StatBondDetailDynamicInterfaces]
        """
        return self._dynamic_interfaces

    @dynamic_interfaces.setter
    def dynamic_interfaces(self, dynamic_interfaces):
        """Sets the dynamic_interfaces of this StatBondDetail.

        待选的网络接口列表  # noqa: E501

        :param dynamic_interfaces: The dynamic_interfaces of this StatBondDetail.  # noqa: E501
        :type: list[StatBondDetailDynamicInterfaces]
        """

        self._dynamic_interfaces = dynamic_interfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatBondDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatBondDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
