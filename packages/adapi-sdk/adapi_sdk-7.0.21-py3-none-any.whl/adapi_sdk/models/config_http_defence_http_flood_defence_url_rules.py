# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHttpDefenceHttpFloodDefenceUrlRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_pattern_wildcard': 'str',
        'url_pattern_case_sensitive': 'str',
        'request_rate_threshold': 'int',
        'request_increase_percent_threshold': 'int'
    }

    attribute_map = {
        'url_pattern_wildcard': 'url_pattern_wildcard',
        'url_pattern_case_sensitive': 'url_pattern_case_sensitive',
        'request_rate_threshold': 'request_rate_threshold',
        'request_increase_percent_threshold': 'request_increase_percent_threshold'
    }

    def __init__(self, url_pattern_wildcard=None, url_pattern_case_sensitive='DISABLE', request_rate_threshold=None, request_increase_percent_threshold=None):  # noqa: E501
        """ConfigHttpDefenceHttpFloodDefenceUrlRules - a model defined in Swagger"""  # noqa: E501

        self._url_pattern_wildcard = None
        self._url_pattern_case_sensitive = None
        self._request_rate_threshold = None
        self._request_increase_percent_threshold = None
        self.discriminator = None

        self.url_pattern_wildcard = url_pattern_wildcard
        if url_pattern_case_sensitive is not None:
            self.url_pattern_case_sensitive = url_pattern_case_sensitive
        self.request_rate_threshold = request_rate_threshold
        self.request_increase_percent_threshold = request_increase_percent_threshold

    @property
    def url_pattern_wildcard(self):
        """Gets the url_pattern_wildcard of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501

        必选参数；指定待防护的URL。  # noqa: E501

        :return: The url_pattern_wildcard of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._url_pattern_wildcard

    @url_pattern_wildcard.setter
    def url_pattern_wildcard(self, url_pattern_wildcard):
        """Sets the url_pattern_wildcard of this ConfigHttpDefenceHttpFloodDefenceUrlRules.

        必选参数；指定待防护的URL。  # noqa: E501

        :param url_pattern_wildcard: The url_pattern_wildcard of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :type: str
        """
        if url_pattern_wildcard is None:
            raise ValueError("Invalid value for `url_pattern_wildcard`, must not be `None`")  # noqa: E501
        if url_pattern_wildcard is not None and len(url_pattern_wildcard) > 255:
            raise ValueError("Invalid value for `url_pattern_wildcard`, length must be less than or equal to `255`")  # noqa: E501
        if url_pattern_wildcard is not None and len(url_pattern_wildcard) < 1:
            raise ValueError("Invalid value for `url_pattern_wildcard`, length must be greater than or equal to `1`")  # noqa: E501

        self._url_pattern_wildcard = url_pattern_wildcard

    @property
    def url_pattern_case_sensitive(self):
        """Gets the url_pattern_case_sensitive of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501

        必选参数；区分大小写的开关，eanble表示区分大小写，disable表示不区分大小写，默认为disable。  # noqa: E501

        :return: The url_pattern_case_sensitive of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._url_pattern_case_sensitive

    @url_pattern_case_sensitive.setter
    def url_pattern_case_sensitive(self, url_pattern_case_sensitive):
        """Sets the url_pattern_case_sensitive of this ConfigHttpDefenceHttpFloodDefenceUrlRules.

        必选参数；区分大小写的开关，eanble表示区分大小写，disable表示不区分大小写，默认为disable。  # noqa: E501

        :param url_pattern_case_sensitive: The url_pattern_case_sensitive of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if url_pattern_case_sensitive not in allowed_values:
            raise ValueError(
                "Invalid value for `url_pattern_case_sensitive` ({0}), must be one of {1}"  # noqa: E501
                .format(url_pattern_case_sensitive, allowed_values)
            )

        self._url_pattern_case_sensitive = url_pattern_case_sensitive

    @property
    def request_rate_threshold(self):
        """Gets the request_rate_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501

        必选参数；指定每秒请求个数阈值，默认为500。  # noqa: E501

        :return: The request_rate_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :rtype: int
        """
        return self._request_rate_threshold

    @request_rate_threshold.setter
    def request_rate_threshold(self, request_rate_threshold):
        """Sets the request_rate_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.

        必选参数；指定每秒请求个数阈值，默认为500。  # noqa: E501

        :param request_rate_threshold: The request_rate_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :type: int
        """
        if request_rate_threshold is None:
            raise ValueError("Invalid value for `request_rate_threshold`, must not be `None`")  # noqa: E501
        if request_rate_threshold is not None and request_rate_threshold > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_threshold`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if request_rate_threshold is not None and request_rate_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._request_rate_threshold = request_rate_threshold

    @property
    def request_increase_percent_threshold(self):
        """Gets the request_increase_percent_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501

        必选参数；指定每秒请求速率增长率，默认为1000，单位%。  # noqa: E501

        :return: The request_increase_percent_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :rtype: int
        """
        return self._request_increase_percent_threshold

    @request_increase_percent_threshold.setter
    def request_increase_percent_threshold(self, request_increase_percent_threshold):
        """Sets the request_increase_percent_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.

        必选参数；指定每秒请求速率增长率，默认为1000，单位%。  # noqa: E501

        :param request_increase_percent_threshold: The request_increase_percent_threshold of this ConfigHttpDefenceHttpFloodDefenceUrlRules.  # noqa: E501
        :type: int
        """
        if request_increase_percent_threshold is None:
            raise ValueError("Invalid value for `request_increase_percent_threshold`, must not be `None`")  # noqa: E501
        if request_increase_percent_threshold is not None and request_increase_percent_threshold > 65535:  # noqa: E501
            raise ValueError("Invalid value for `request_increase_percent_threshold`, must be a value less than or equal to `65535`")  # noqa: E501
        if request_increase_percent_threshold is not None and request_increase_percent_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `request_increase_percent_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._request_increase_percent_threshold = request_increase_percent_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpDefenceHttpFloodDefenceUrlRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpDefenceHttpFloodDefenceUrlRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
