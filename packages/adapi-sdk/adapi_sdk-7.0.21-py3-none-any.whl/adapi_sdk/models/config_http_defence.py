# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_http_defence_http_flood_defence import ConfigHttpDefenceHttpFloodDefence  # noqa: F401,E501
from adapi_sdk.models.config_http_defence_slow_attack_defence import ConfigHttpDefenceSlowAttackDefence  # noqa: F401,E501


class ConfigHttpDefence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'slow_attack_defence': 'ConfigHttpDefenceSlowAttackDefence',
        'http_flood_defence': 'ConfigHttpDefenceHttpFloodDefence',
        'action_alert': 'str',
        'action_block': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'slow_attack_defence': 'slow_attack_defence',
        'http_flood_defence': 'http_flood_defence',
        'action_alert': 'action_alert',
        'action_block': 'action_block'
    }

    def __init__(self, name=None, description=None, slow_attack_defence=None, http_flood_defence=None, action_alert='ENABLE', action_block='DISABLE'):  # noqa: E501
        """ConfigHttpDefence - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._slow_attack_defence = None
        self._http_flood_defence = None
        self._action_alert = None
        self._action_block = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if slow_attack_defence is not None:
            self.slow_attack_defence = slow_attack_defence
        if http_flood_defence is not None:
            self.http_flood_defence = http_flood_defence
        if action_alert is not None:
            self.action_alert = action_alert
        if action_block is not None:
            self.action_block = action_block

    @property
    def name(self):
        """Gets the name of this ConfigHttpDefence.  # noqa: E501

        必选参数；指定HTTP防护策略的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigHttpDefence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigHttpDefence.

        必选参数；指定HTTP防护策略的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigHttpDefence.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigHttpDefence.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigHttpDefence.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigHttpDefence.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigHttpDefence.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def slow_attack_defence(self):
        """Gets the slow_attack_defence of this ConfigHttpDefence.  # noqa: E501


        :return: The slow_attack_defence of this ConfigHttpDefence.  # noqa: E501
        :rtype: ConfigHttpDefenceSlowAttackDefence
        """
        return self._slow_attack_defence

    @slow_attack_defence.setter
    def slow_attack_defence(self, slow_attack_defence):
        """Sets the slow_attack_defence of this ConfigHttpDefence.


        :param slow_attack_defence: The slow_attack_defence of this ConfigHttpDefence.  # noqa: E501
        :type: ConfigHttpDefenceSlowAttackDefence
        """

        self._slow_attack_defence = slow_attack_defence

    @property
    def http_flood_defence(self):
        """Gets the http_flood_defence of this ConfigHttpDefence.  # noqa: E501


        :return: The http_flood_defence of this ConfigHttpDefence.  # noqa: E501
        :rtype: ConfigHttpDefenceHttpFloodDefence
        """
        return self._http_flood_defence

    @http_flood_defence.setter
    def http_flood_defence(self, http_flood_defence):
        """Sets the http_flood_defence of this ConfigHttpDefence.


        :param http_flood_defence: The http_flood_defence of this ConfigHttpDefence.  # noqa: E501
        :type: ConfigHttpDefenceHttpFloodDefence
        """

        self._http_flood_defence = http_flood_defence

    @property
    def action_alert(self):
        """Gets the action_alert of this ConfigHttpDefence.  # noqa: E501

        可选参数，攻击告警的开关，enable表示启用告警，disable表示禁用告警，默认为enable。  # noqa: E501

        :return: The action_alert of this ConfigHttpDefence.  # noqa: E501
        :rtype: str
        """
        return self._action_alert

    @action_alert.setter
    def action_alert(self, action_alert):
        """Sets the action_alert of this ConfigHttpDefence.

        可选参数，攻击告警的开关，enable表示启用告警，disable表示禁用告警，默认为enable。  # noqa: E501

        :param action_alert: The action_alert of this ConfigHttpDefence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if action_alert not in allowed_values:
            raise ValueError(
                "Invalid value for `action_alert` ({0}), must be one of {1}"  # noqa: E501
                .format(action_alert, allowed_values)
            )

        self._action_alert = action_alert

    @property
    def action_block(self):
        """Gets the action_block of this ConfigHttpDefence.  # noqa: E501

        可选参数，攻击拦截的开关，enable表示启用拦截，disable表示禁用拦截，默认为disable。  # noqa: E501

        :return: The action_block of this ConfigHttpDefence.  # noqa: E501
        :rtype: str
        """
        return self._action_block

    @action_block.setter
    def action_block(self, action_block):
        """Sets the action_block of this ConfigHttpDefence.

        可选参数，攻击拦截的开关，enable表示启用拦截，disable表示禁用拦截，默认为disable。  # noqa: E501

        :param action_block: The action_block of this ConfigHttpDefence.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if action_block not in allowed_values:
            raise ValueError(
                "Invalid value for `action_block` ({0}), must be one of {1}"  # noqa: E501
                .format(action_block, allowed_values)
            )

        self._action_block = action_block

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpDefence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpDefence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
