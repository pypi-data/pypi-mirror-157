# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_service_type import ConfigServiceType  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_accumulate import StatStatisticAccumulate  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501
from adapi_sdk.models.stat_virtual_service_detail_pool_essential import StatVirtualServiceDetailPoolEssential  # noqa: F401,E501
from adapi_sdk.models.stat_virtual_service_detail_pre_rule_essential import StatVirtualServiceDetailPreRuleEssential  # noqa: F401,E501
from adapi_sdk.models.stat_virtual_service_pool import StatVirtualServicePool  # noqa: F401,E501


class StatVirtualServiceDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'icon': 'str',
        'state': 'str',
        'service': 'ConfigServiceType',
        'vips': 'list[str]',
        'vports': 'list[str]',
        'health': 'str',
        'failure_reason': 'str',
        'pool': 'StatVirtualServicePool',
        'pre_rule_essential': 'list[StatVirtualServiceDetailPreRuleEssential]',
        'pool_essential': 'StatVirtualServiceDetailPoolEssential',
        'connection': 'StatStatisticInstant',
        'connection_established': 'StatStatisticInstant',
        'connection_rate': 'StatStatisticInstant',
        'ssl_connection_rate': 'StatStatisticInstant',
        'client_connection': 'StatStatisticInstant',
        'server_connection': 'StatStatisticInstant',
        'pool_connection_usage': 'StatStatisticInstant',
        'pool_connection_rate': 'StatStatisticInstant',
        'maximum_connection': 'StatStatisticInstant',
        'total_connection': 'StatStatisticAccumulate',
        'http_request_rate': 'StatStatisticInstant',
        'total_http_request': 'StatStatisticAccumulate',
        'http_cache_hit': 'StatStatisticAccumulate',
        'http_cache_used': 'StatStatisticInstant',
        'http_cache_response_data': 'StatStatisticAccumulate',
        'http_compression_saving_ratio': 'StatStatisticAccumulate',
        'http_compression_data_reduction': 'StatStatisticAccumulate',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'general_throughput': 'StatStatisticInstant',
        'upstream_data': 'StatStatisticAccumulate',
        'downstream_data': 'StatStatisticAccumulate',
        'upstream_packet': 'StatStatisticAccumulate',
        'downstream_packet': 'StatStatisticAccumulate',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'icon': 'icon',
        'state': 'state',
        'service': 'service',
        'vips': 'vips',
        'vports': 'vports',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'pool': 'pool',
        'pre_rule_essential': 'pre_rule_essential',
        'pool_essential': 'pool_essential',
        'connection': 'connection',
        'connection_established': 'connection_established',
        'connection_rate': 'connection_rate',
        'ssl_connection_rate': 'ssl_connection_rate',
        'client_connection': 'client_connection',
        'server_connection': 'server_connection',
        'pool_connection_usage': 'pool_connection_usage',
        'pool_connection_rate': 'pool_connection_rate',
        'maximum_connection': 'maximum_connection',
        'total_connection': 'total_connection',
        'http_request_rate': 'http_request_rate',
        'total_http_request': 'total_http_request',
        'http_cache_hit': 'http_cache_hit',
        'http_cache_used': 'http_cache_used',
        'http_cache_response_data': 'http_cache_response_data',
        'http_compression_saving_ratio': 'http_compression_saving_ratio',
        'http_compression_data_reduction': 'http_compression_data_reduction',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'general_throughput': 'general_throughput',
        'upstream_data': 'upstream_data',
        'downstream_data': 'downstream_data',
        'upstream_packet': 'upstream_packet',
        'downstream_packet': 'downstream_packet',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, icon=None, state=None, service=None, vips=None, vports=None, health=None, failure_reason=None, pool=None, pre_rule_essential=None, pool_essential=None, connection=None, connection_established=None, connection_rate=None, ssl_connection_rate=None, client_connection=None, server_connection=None, pool_connection_usage=None, pool_connection_rate=None, maximum_connection=None, total_connection=None, http_request_rate=None, total_http_request=None, http_cache_hit=None, http_cache_used=None, http_cache_response_data=None, http_compression_saving_ratio=None, http_compression_data_reduction=None, upstream_throughput=None, downstream_throughput=None, general_throughput=None, upstream_data=None, downstream_data=None, upstream_packet=None, downstream_packet=None, netns='netns名称'):  # noqa: E501
        """StatVirtualServiceDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._icon = None
        self._state = None
        self._service = None
        self._vips = None
        self._vports = None
        self._health = None
        self._failure_reason = None
        self._pool = None
        self._pre_rule_essential = None
        self._pool_essential = None
        self._connection = None
        self._connection_established = None
        self._connection_rate = None
        self._ssl_connection_rate = None
        self._client_connection = None
        self._server_connection = None
        self._pool_connection_usage = None
        self._pool_connection_rate = None
        self._maximum_connection = None
        self._total_connection = None
        self._http_request_rate = None
        self._total_http_request = None
        self._http_cache_hit = None
        self._http_cache_used = None
        self._http_cache_response_data = None
        self._http_compression_saving_ratio = None
        self._http_compression_data_reduction = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._general_throughput = None
        self._upstream_data = None
        self._downstream_data = None
        self._upstream_packet = None
        self._downstream_packet = None
        self._netns = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if icon is not None:
            self.icon = icon
        if state is not None:
            self.state = state
        if service is not None:
            self.service = service
        if vips is not None:
            self.vips = vips
        if vports is not None:
            self.vports = vports
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if pool is not None:
            self.pool = pool
        if pre_rule_essential is not None:
            self.pre_rule_essential = pre_rule_essential
        if pool_essential is not None:
            self.pool_essential = pool_essential
        if connection is not None:
            self.connection = connection
        if connection_established is not None:
            self.connection_established = connection_established
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if ssl_connection_rate is not None:
            self.ssl_connection_rate = ssl_connection_rate
        if client_connection is not None:
            self.client_connection = client_connection
        if server_connection is not None:
            self.server_connection = server_connection
        if pool_connection_usage is not None:
            self.pool_connection_usage = pool_connection_usage
        if pool_connection_rate is not None:
            self.pool_connection_rate = pool_connection_rate
        if maximum_connection is not None:
            self.maximum_connection = maximum_connection
        if total_connection is not None:
            self.total_connection = total_connection
        if http_request_rate is not None:
            self.http_request_rate = http_request_rate
        if total_http_request is not None:
            self.total_http_request = total_http_request
        if http_cache_hit is not None:
            self.http_cache_hit = http_cache_hit
        if http_cache_used is not None:
            self.http_cache_used = http_cache_used
        if http_cache_response_data is not None:
            self.http_cache_response_data = http_cache_response_data
        if http_compression_saving_ratio is not None:
            self.http_compression_saving_ratio = http_compression_saving_ratio
        if http_compression_data_reduction is not None:
            self.http_compression_data_reduction = http_compression_data_reduction
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if general_throughput is not None:
            self.general_throughput = general_throughput
        if upstream_data is not None:
            self.upstream_data = upstream_data
        if downstream_data is not None:
            self.downstream_data = downstream_data
        if upstream_packet is not None:
            self.upstream_packet = upstream_packet
        if downstream_packet is not None:
            self.downstream_packet = downstream_packet
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this StatVirtualServiceDetail.  # noqa: E501

        虚拟服务名称  # noqa: E501

        :return: The name of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatVirtualServiceDetail.

        虚拟服务名称  # noqa: E501

        :param name: The name of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this StatVirtualServiceDetail.  # noqa: E501

        虚拟服务描述信息  # noqa: E501

        :return: The description of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatVirtualServiceDetail.

        虚拟服务描述信息  # noqa: E501

        :param description: The description of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this StatVirtualServiceDetail.  # noqa: E501

        Web控制台图标定义  # noqa: E501

        :return: The icon of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this StatVirtualServiceDetail.

        Web控制台图标定义  # noqa: E501

        :param icon: The icon of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def state(self):
        """Gets the state of this StatVirtualServiceDetail.  # noqa: E501

        配置启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :return: The state of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatVirtualServiceDetail.

        配置启/禁用开关（ENABLE-启用/DISABLE-禁用）  # noqa: E501

        :param state: The state of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def service(self):
        """Gets the service of this StatVirtualServiceDetail.  # noqa: E501

        虚拟服务类型  # noqa: E501

        :return: The service of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: ConfigServiceType
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this StatVirtualServiceDetail.

        虚拟服务类型  # noqa: E501

        :param service: The service of this StatVirtualServiceDetail.  # noqa: E501
        :type: ConfigServiceType
        """

        self._service = service

    @property
    def vips(self):
        """Gets the vips of this StatVirtualServiceDetail.  # noqa: E501

        虚拟ip  # noqa: E501

        :return: The vips of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._vips

    @vips.setter
    def vips(self, vips):
        """Sets the vips of this StatVirtualServiceDetail.

        虚拟ip  # noqa: E501

        :param vips: The vips of this StatVirtualServiceDetail.  # noqa: E501
        :type: list[str]
        """

        self._vips = vips

    @property
    def vports(self):
        """Gets the vports of this StatVirtualServiceDetail.  # noqa: E501

        虚拟端口  # noqa: E501

        :return: The vports of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._vports

    @vports.setter
    def vports(self, vports):
        """Sets the vports of this StatVirtualServiceDetail.

        虚拟端口  # noqa: E501

        :param vports: The vports of this StatVirtualServiceDetail.  # noqa: E501
        :type: list[str]
        """

        self._vports = vports

    @property
    def health(self):
        """Gets the health of this StatVirtualServiceDetail.  # noqa: E501

        健康状态（NORMAL-正常/FAILURE-故障/ALERT-告警）  # noqa: E501

        :return: The health of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatVirtualServiceDetail.

        健康状态（NORMAL-正常/FAILURE-故障/ALERT-告警）  # noqa: E501

        :param health: The health of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE", "ALERT"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatVirtualServiceDetail.  # noqa: E501

        故障原因  # noqa: E501

        :return: The failure_reason of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatVirtualServiceDetail.

        故障原因  # noqa: E501

        :param failure_reason: The failure_reason of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def pool(self):
        """Gets the pool of this StatVirtualServiceDetail.  # noqa: E501


        :return: The pool of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatVirtualServicePool
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this StatVirtualServiceDetail.


        :param pool: The pool of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatVirtualServicePool
        """

        self._pool = pool

    @property
    def pre_rule_essential(self):
        """Gets the pre_rule_essential of this StatVirtualServiceDetail.  # noqa: E501

        前置策略信息  # noqa: E501

        :return: The pre_rule_essential of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: list[StatVirtualServiceDetailPreRuleEssential]
        """
        return self._pre_rule_essential

    @pre_rule_essential.setter
    def pre_rule_essential(self, pre_rule_essential):
        """Sets the pre_rule_essential of this StatVirtualServiceDetail.

        前置策略信息  # noqa: E501

        :param pre_rule_essential: The pre_rule_essential of this StatVirtualServiceDetail.  # noqa: E501
        :type: list[StatVirtualServiceDetailPreRuleEssential]
        """

        self._pre_rule_essential = pre_rule_essential

    @property
    def pool_essential(self):
        """Gets the pool_essential of this StatVirtualServiceDetail.  # noqa: E501


        :return: The pool_essential of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatVirtualServiceDetailPoolEssential
        """
        return self._pool_essential

    @pool_essential.setter
    def pool_essential(self, pool_essential):
        """Sets the pool_essential of this StatVirtualServiceDetail.


        :param pool_essential: The pool_essential of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatVirtualServiceDetailPoolEssential
        """

        self._pool_essential = pool_essential

    @property
    def connection(self):
        """Gets the connection of this StatVirtualServiceDetail.  # noqa: E501

        并发连接数  # noqa: E501

        :return: The connection of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatVirtualServiceDetail.

        并发连接数  # noqa: E501

        :param connection: The connection of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def connection_established(self):
        """Gets the connection_established of this StatVirtualServiceDetail.  # noqa: E501

        Established并发连接数  # noqa: E501

        :return: The connection_established of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_established

    @connection_established.setter
    def connection_established(self, connection_established):
        """Sets the connection_established of this StatVirtualServiceDetail.

        Established并发连接数  # noqa: E501

        :param connection_established: The connection_established of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_established = connection_established

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatVirtualServiceDetail.  # noqa: E501

        新建连接数  # noqa: E501

        :return: The connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatVirtualServiceDetail.

        新建连接数  # noqa: E501

        :param connection_rate: The connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def ssl_connection_rate(self):
        """Gets the ssl_connection_rate of this StatVirtualServiceDetail.  # noqa: E501

        SSL新建连接数  # noqa: E501

        :return: The ssl_connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._ssl_connection_rate

    @ssl_connection_rate.setter
    def ssl_connection_rate(self, ssl_connection_rate):
        """Sets the ssl_connection_rate of this StatVirtualServiceDetail.

        SSL新建连接数  # noqa: E501

        :param ssl_connection_rate: The ssl_connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._ssl_connection_rate = ssl_connection_rate

    @property
    def client_connection(self):
        """Gets the client_connection of this StatVirtualServiceDetail.  # noqa: E501

        客户端连接数  # noqa: E501

        :return: The client_connection of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._client_connection

    @client_connection.setter
    def client_connection(self, client_connection):
        """Sets the client_connection of this StatVirtualServiceDetail.

        客户端连接数  # noqa: E501

        :param client_connection: The client_connection of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._client_connection = client_connection

    @property
    def server_connection(self):
        """Gets the server_connection of this StatVirtualServiceDetail.  # noqa: E501

        服务端连接数  # noqa: E501

        :return: The server_connection of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._server_connection

    @server_connection.setter
    def server_connection(self, server_connection):
        """Sets the server_connection of this StatVirtualServiceDetail.

        服务端连接数  # noqa: E501

        :param server_connection: The server_connection of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._server_connection = server_connection

    @property
    def pool_connection_usage(self):
        """Gets the pool_connection_usage of this StatVirtualServiceDetail.  # noqa: E501

        TCP连接池使用率  # noqa: E501

        :return: The pool_connection_usage of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._pool_connection_usage

    @pool_connection_usage.setter
    def pool_connection_usage(self, pool_connection_usage):
        """Sets the pool_connection_usage of this StatVirtualServiceDetail.

        TCP连接池使用率  # noqa: E501

        :param pool_connection_usage: The pool_connection_usage of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._pool_connection_usage = pool_connection_usage

    @property
    def pool_connection_rate(self):
        """Gets the pool_connection_rate of this StatVirtualServiceDetail.  # noqa: E501

        TCP连接池新建速率  # noqa: E501

        :return: The pool_connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._pool_connection_rate

    @pool_connection_rate.setter
    def pool_connection_rate(self, pool_connection_rate):
        """Sets the pool_connection_rate of this StatVirtualServiceDetail.

        TCP连接池新建速率  # noqa: E501

        :param pool_connection_rate: The pool_connection_rate of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._pool_connection_rate = pool_connection_rate

    @property
    def maximum_connection(self):
        """Gets the maximum_connection of this StatVirtualServiceDetail.  # noqa: E501

        最大连接数  # noqa: E501

        :return: The maximum_connection of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._maximum_connection

    @maximum_connection.setter
    def maximum_connection(self, maximum_connection):
        """Sets the maximum_connection of this StatVirtualServiceDetail.

        最大连接数  # noqa: E501

        :param maximum_connection: The maximum_connection of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._maximum_connection = maximum_connection

    @property
    def total_connection(self):
        """Gets the total_connection of this StatVirtualServiceDetail.  # noqa: E501

        总连接数  # noqa: E501

        :return: The total_connection of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._total_connection

    @total_connection.setter
    def total_connection(self, total_connection):
        """Sets the total_connection of this StatVirtualServiceDetail.

        总连接数  # noqa: E501

        :param total_connection: The total_connection of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._total_connection = total_connection

    @property
    def http_request_rate(self):
        """Gets the http_request_rate of this StatVirtualServiceDetail.  # noqa: E501

        HTTP请求速率  # noqa: E501

        :return: The http_request_rate of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_request_rate

    @http_request_rate.setter
    def http_request_rate(self, http_request_rate):
        """Sets the http_request_rate of this StatVirtualServiceDetail.

        HTTP请求速率  # noqa: E501

        :param http_request_rate: The http_request_rate of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_request_rate = http_request_rate

    @property
    def total_http_request(self):
        """Gets the total_http_request of this StatVirtualServiceDetail.  # noqa: E501

        HTTP请求总数  # noqa: E501

        :return: The total_http_request of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._total_http_request

    @total_http_request.setter
    def total_http_request(self, total_http_request):
        """Sets the total_http_request of this StatVirtualServiceDetail.

        HTTP请求总数  # noqa: E501

        :param total_http_request: The total_http_request of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._total_http_request = total_http_request

    @property
    def http_cache_hit(self):
        """Gets the http_cache_hit of this StatVirtualServiceDetail.  # noqa: E501

        HTTP缓存命中数  # noqa: E501

        :return: The http_cache_hit of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_cache_hit

    @http_cache_hit.setter
    def http_cache_hit(self, http_cache_hit):
        """Sets the http_cache_hit of this StatVirtualServiceDetail.

        HTTP缓存命中数  # noqa: E501

        :param http_cache_hit: The http_cache_hit of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_cache_hit = http_cache_hit

    @property
    def http_cache_used(self):
        """Gets the http_cache_used of this StatVirtualServiceDetail.  # noqa: E501

        HTTP缓存命中比例  # noqa: E501

        :return: The http_cache_used of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_cache_used

    @http_cache_used.setter
    def http_cache_used(self, http_cache_used):
        """Sets the http_cache_used of this StatVirtualServiceDetail.

        HTTP缓存命中比例  # noqa: E501

        :param http_cache_used: The http_cache_used of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_cache_used = http_cache_used

    @property
    def http_cache_response_data(self):
        """Gets the http_cache_response_data of this StatVirtualServiceDetail.  # noqa: E501

        HTTP缓存应答数据  # noqa: E501

        :return: The http_cache_response_data of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_cache_response_data

    @http_cache_response_data.setter
    def http_cache_response_data(self, http_cache_response_data):
        """Sets the http_cache_response_data of this StatVirtualServiceDetail.

        HTTP缓存应答数据  # noqa: E501

        :param http_cache_response_data: The http_cache_response_data of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_cache_response_data = http_cache_response_data

    @property
    def http_compression_saving_ratio(self):
        """Gets the http_compression_saving_ratio of this StatVirtualServiceDetail.  # noqa: E501

        HTTP压缩数据节省比例  # noqa: E501

        :return: The http_compression_saving_ratio of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_compression_saving_ratio

    @http_compression_saving_ratio.setter
    def http_compression_saving_ratio(self, http_compression_saving_ratio):
        """Sets the http_compression_saving_ratio of this StatVirtualServiceDetail.

        HTTP压缩数据节省比例  # noqa: E501

        :param http_compression_saving_ratio: The http_compression_saving_ratio of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_compression_saving_ratio = http_compression_saving_ratio

    @property
    def http_compression_data_reduction(self):
        """Gets the http_compression_data_reduction of this StatVirtualServiceDetail.  # noqa: E501

        HTTP压缩数据节省量  # noqa: E501

        :return: The http_compression_data_reduction of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._http_compression_data_reduction

    @http_compression_data_reduction.setter
    def http_compression_data_reduction(self, http_compression_data_reduction):
        """Sets the http_compression_data_reduction of this StatVirtualServiceDetail.

        HTTP压缩数据节省量  # noqa: E501

        :param http_compression_data_reduction: The http_compression_data_reduction of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._http_compression_data_reduction = http_compression_data_reduction

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatVirtualServiceDetail.  # noqa: E501

        上行吞吐量速率  # noqa: E501

        :return: The upstream_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatVirtualServiceDetail.

        上行吞吐量速率  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatVirtualServiceDetail.  # noqa: E501

        下行吞吐量速率  # noqa: E501

        :return: The downstream_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatVirtualServiceDetail.

        下行吞吐量速率  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatVirtualServiceDetail.  # noqa: E501

        上/下行总吞吐量速率  # noqa: E501

        :return: The general_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatVirtualServiceDetail.

        上/下行总吞吐量速率  # noqa: E501

        :param general_throughput: The general_throughput of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    @property
    def upstream_data(self):
        """Gets the upstream_data of this StatVirtualServiceDetail.  # noqa: E501

        上行数据统计  # noqa: E501

        :return: The upstream_data of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._upstream_data

    @upstream_data.setter
    def upstream_data(self, upstream_data):
        """Sets the upstream_data of this StatVirtualServiceDetail.

        上行数据统计  # noqa: E501

        :param upstream_data: The upstream_data of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._upstream_data = upstream_data

    @property
    def downstream_data(self):
        """Gets the downstream_data of this StatVirtualServiceDetail.  # noqa: E501

        下行数据统计  # noqa: E501

        :return: The downstream_data of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._downstream_data

    @downstream_data.setter
    def downstream_data(self, downstream_data):
        """Sets the downstream_data of this StatVirtualServiceDetail.

        下行数据统计  # noqa: E501

        :param downstream_data: The downstream_data of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._downstream_data = downstream_data

    @property
    def upstream_packet(self):
        """Gets the upstream_packet of this StatVirtualServiceDetail.  # noqa: E501

        上行数据包统计  # noqa: E501

        :return: The upstream_packet of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._upstream_packet

    @upstream_packet.setter
    def upstream_packet(self, upstream_packet):
        """Sets the upstream_packet of this StatVirtualServiceDetail.

        上行数据包统计  # noqa: E501

        :param upstream_packet: The upstream_packet of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._upstream_packet = upstream_packet

    @property
    def downstream_packet(self):
        """Gets the downstream_packet of this StatVirtualServiceDetail.  # noqa: E501

        下行数据包统计  # noqa: E501

        :return: The downstream_packet of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._downstream_packet

    @downstream_packet.setter
    def downstream_packet(self, downstream_packet):
        """Sets the downstream_packet of this StatVirtualServiceDetail.

        下行数据包统计  # noqa: E501

        :param downstream_packet: The downstream_packet of this StatVirtualServiceDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._downstream_packet = downstream_packet

    @property
    def netns(self):
        """Gets the netns of this StatVirtualServiceDetail.  # noqa: E501

        netns名称  # noqa: E501

        :return: The netns of this StatVirtualServiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this StatVirtualServiceDetail.

        netns名称  # noqa: E501

        :param netns: The netns of this StatVirtualServiceDetail.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatVirtualServiceDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatVirtualServiceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
