# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_local_dns_setting_security_access_control import ConfigLocalDnsSettingSecurityAccessControl  # noqa: F401,E501
from adapi_sdk.models.config_local_dns_setting_security_trust_anchor import ConfigLocalDnsSettingSecurityTrustAnchor  # noqa: F401,E501


class ConfigLocalDnsSettingSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'randomize_domain_name_case': 'str',
        'access_control': 'list[ConfigLocalDnsSettingSecurityAccessControl]',
        'dnssec': 'str',
        'trust_anchor': 'list[ConfigLocalDnsSettingSecurityTrustAnchor]'
    }

    attribute_map = {
        'randomize_domain_name_case': 'randomize_domain_name_case',
        'access_control': 'access_control',
        'dnssec': 'dnssec',
        'trust_anchor': 'trust_anchor'
    }

    def __init__(self, randomize_domain_name_case='DISABLE', access_control=None, dnssec='DISABLE', trust_anchor=None):  # noqa: E501
        """ConfigLocalDnsSettingSecurity - a model defined in Swagger"""  # noqa: E501

        self._randomize_domain_name_case = None
        self._access_control = None
        self._dnssec = None
        self._trust_anchor = None
        self.discriminator = None

        if randomize_domain_name_case is not None:
            self.randomize_domain_name_case = randomize_domain_name_case
        if access_control is not None:
            self.access_control = access_control
        if dnssec is not None:
            self.dnssec = dnssec
        if trust_anchor is not None:
            self.trust_anchor = trust_anchor

    @property
    def randomize_domain_name_case(self):
        """Gets the randomize_domain_name_case of this ConfigLocalDnsSettingSecurity.  # noqa: E501

        域名随机大小写（DNS-0x20）  # noqa: E501

        :return: The randomize_domain_name_case of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :rtype: str
        """
        return self._randomize_domain_name_case

    @randomize_domain_name_case.setter
    def randomize_domain_name_case(self, randomize_domain_name_case):
        """Sets the randomize_domain_name_case of this ConfigLocalDnsSettingSecurity.

        域名随机大小写（DNS-0x20）  # noqa: E501

        :param randomize_domain_name_case: The randomize_domain_name_case of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if randomize_domain_name_case not in allowed_values:
            raise ValueError(
                "Invalid value for `randomize_domain_name_case` ({0}), must be one of {1}"  # noqa: E501
                .format(randomize_domain_name_case, allowed_values)
            )

        self._randomize_domain_name_case = randomize_domain_name_case

    @property
    def access_control(self):
        """Gets the access_control of this ConfigLocalDnsSettingSecurity.  # noqa: E501

        访问控制列表，可以不定义，最多定义50条  # noqa: E501

        :return: The access_control of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :rtype: list[ConfigLocalDnsSettingSecurityAccessControl]
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """Sets the access_control of this ConfigLocalDnsSettingSecurity.

        访问控制列表，可以不定义，最多定义50条  # noqa: E501

        :param access_control: The access_control of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :type: list[ConfigLocalDnsSettingSecurityAccessControl]
        """

        self._access_control = access_control

    @property
    def dnssec(self):
        """Gets the dnssec of this ConfigLocalDnsSettingSecurity.  # noqa: E501

        DNSSEC启/禁用，默认禁用。禁用时key_cache_capacity_mb和trust_anchor配置项均不显示  # noqa: E501

        :return: The dnssec of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :rtype: str
        """
        return self._dnssec

    @dnssec.setter
    def dnssec(self, dnssec):
        """Sets the dnssec of this ConfigLocalDnsSettingSecurity.

        DNSSEC启/禁用，默认禁用。禁用时key_cache_capacity_mb和trust_anchor配置项均不显示  # noqa: E501

        :param dnssec: The dnssec of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if dnssec not in allowed_values:
            raise ValueError(
                "Invalid value for `dnssec` ({0}), must be one of {1}"  # noqa: E501
                .format(dnssec, allowed_values)
            )

        self._dnssec = dnssec

    @property
    def trust_anchor(self):
        """Gets the trust_anchor of this ConfigLocalDnsSettingSecurity.  # noqa: E501

        信任锚列表  # noqa: E501

        :return: The trust_anchor of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :rtype: list[ConfigLocalDnsSettingSecurityTrustAnchor]
        """
        return self._trust_anchor

    @trust_anchor.setter
    def trust_anchor(self, trust_anchor):
        """Sets the trust_anchor of this ConfigLocalDnsSettingSecurity.

        信任锚列表  # noqa: E501

        :param trust_anchor: The trust_anchor of this ConfigLocalDnsSettingSecurity.  # noqa: E501
        :type: list[ConfigLocalDnsSettingSecurityTrustAnchor]
        """

        self._trust_anchor = trust_anchor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalDnsSettingSecurity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalDnsSettingSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
