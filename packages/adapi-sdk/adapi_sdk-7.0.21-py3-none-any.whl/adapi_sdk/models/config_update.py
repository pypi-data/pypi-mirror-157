# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_patch_update': 'str',
        'isp_address_group_update': 'str',
        'isp_address_group_frequency': 'str',
        'foreign_domain_group_update': 'str',
        'foreign_domain_group_frequency': 'str',
        'application_identification_update': 'str',
        'application_identification_frequency': 'str'
    }

    attribute_map = {
        'system_patch_update': 'system_patch_update',
        'isp_address_group_update': 'isp_address_group_update',
        'isp_address_group_frequency': 'isp_address_group_frequency',
        'foreign_domain_group_update': 'foreign_domain_group_update',
        'foreign_domain_group_frequency': 'foreign_domain_group_frequency',
        'application_identification_update': 'application_identification_update',
        'application_identification_frequency': 'application_identification_frequency'
    }

    def __init__(self, system_patch_update='ENABLE', isp_address_group_update='ENABLE', isp_address_group_frequency='WEEKLY', foreign_domain_group_update='ENABLE', foreign_domain_group_frequency='WEEKLY', application_identification_update='ENABLE', application_identification_frequency='WEEKLY'):  # noqa: E501
        """ConfigUpdate - a model defined in Swagger"""  # noqa: E501

        self._system_patch_update = None
        self._isp_address_group_update = None
        self._isp_address_group_frequency = None
        self._foreign_domain_group_update = None
        self._foreign_domain_group_frequency = None
        self._application_identification_update = None
        self._application_identification_frequency = None
        self.discriminator = None

        if system_patch_update is not None:
            self.system_patch_update = system_patch_update
        if isp_address_group_update is not None:
            self.isp_address_group_update = isp_address_group_update
        if isp_address_group_frequency is not None:
            self.isp_address_group_frequency = isp_address_group_frequency
        if foreign_domain_group_update is not None:
            self.foreign_domain_group_update = foreign_domain_group_update
        if foreign_domain_group_frequency is not None:
            self.foreign_domain_group_frequency = foreign_domain_group_frequency
        if application_identification_update is not None:
            self.application_identification_update = application_identification_update
        if application_identification_frequency is not None:
            self.application_identification_frequency = application_identification_frequency

    @property
    def system_patch_update(self):
        """Gets the system_patch_update of this ConfigUpdate.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用系统自动更新，默认为启用  # noqa: E501

        :return: The system_patch_update of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._system_patch_update

    @system_patch_update.setter
    def system_patch_update(self, system_patch_update):
        """Sets the system_patch_update of this ConfigUpdate.

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用系统自动更新，默认为启用  # noqa: E501

        :param system_patch_update: The system_patch_update of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if system_patch_update not in allowed_values:
            raise ValueError(
                "Invalid value for `system_patch_update` ({0}), must be one of {1}"  # noqa: E501
                .format(system_patch_update, allowed_values)
            )

        self._system_patch_update = system_patch_update

    @property
    def isp_address_group_update(self):
        """Gets the isp_address_group_update of this ConfigUpdate.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用ISP地址集自动更新，默认为启用  # noqa: E501

        :return: The isp_address_group_update of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._isp_address_group_update

    @isp_address_group_update.setter
    def isp_address_group_update(self, isp_address_group_update):
        """Sets the isp_address_group_update of this ConfigUpdate.

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用ISP地址集自动更新，默认为启用  # noqa: E501

        :param isp_address_group_update: The isp_address_group_update of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if isp_address_group_update not in allowed_values:
            raise ValueError(
                "Invalid value for `isp_address_group_update` ({0}), must be one of {1}"  # noqa: E501
                .format(isp_address_group_update, allowed_values)
            )

        self._isp_address_group_update = isp_address_group_update

    @property
    def isp_address_group_frequency(self):
        """Gets the isp_address_group_frequency of this ConfigUpdate.  # noqa: E501

        可选参数；ISP地址集自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :return: The isp_address_group_frequency of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._isp_address_group_frequency

    @isp_address_group_frequency.setter
    def isp_address_group_frequency(self, isp_address_group_frequency):
        """Sets the isp_address_group_frequency of this ConfigUpdate.

        可选参数；ISP地址集自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :param isp_address_group_frequency: The isp_address_group_frequency of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if isp_address_group_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `isp_address_group_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(isp_address_group_frequency, allowed_values)
            )

        self._isp_address_group_frequency = isp_address_group_frequency

    @property
    def foreign_domain_group_update(self):
        """Gets the foreign_domain_group_update of this ConfigUpdate.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用域名地址集自动更新，默认为启用  # noqa: E501

        :return: The foreign_domain_group_update of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._foreign_domain_group_update

    @foreign_domain_group_update.setter
    def foreign_domain_group_update(self, foreign_domain_group_update):
        """Sets the foreign_domain_group_update of this ConfigUpdate.

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用域名地址集自动更新，默认为启用  # noqa: E501

        :param foreign_domain_group_update: The foreign_domain_group_update of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if foreign_domain_group_update not in allowed_values:
            raise ValueError(
                "Invalid value for `foreign_domain_group_update` ({0}), must be one of {1}"  # noqa: E501
                .format(foreign_domain_group_update, allowed_values)
            )

        self._foreign_domain_group_update = foreign_domain_group_update

    @property
    def foreign_domain_group_frequency(self):
        """Gets the foreign_domain_group_frequency of this ConfigUpdate.  # noqa: E501

        可选参数；域名地址集自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :return: The foreign_domain_group_frequency of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._foreign_domain_group_frequency

    @foreign_domain_group_frequency.setter
    def foreign_domain_group_frequency(self, foreign_domain_group_frequency):
        """Sets the foreign_domain_group_frequency of this ConfigUpdate.

        可选参数；域名地址集自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :param foreign_domain_group_frequency: The foreign_domain_group_frequency of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if foreign_domain_group_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `foreign_domain_group_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(foreign_domain_group_frequency, allowed_values)
            )

        self._foreign_domain_group_frequency = foreign_domain_group_frequency

    @property
    def application_identification_update(self):
        """Gets the application_identification_update of this ConfigUpdate.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用应用规则库自动更新，默认为启用  # noqa: E501

        :return: The application_identification_update of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._application_identification_update

    @application_identification_update.setter
    def application_identification_update(self, application_identification_update):
        """Sets the application_identification_update of this ConfigUpdate.

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用应用规则库自动更新，默认为启用  # noqa: E501

        :param application_identification_update: The application_identification_update of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if application_identification_update not in allowed_values:
            raise ValueError(
                "Invalid value for `application_identification_update` ({0}), must be one of {1}"  # noqa: E501
                .format(application_identification_update, allowed_values)
            )

        self._application_identification_update = application_identification_update

    @property
    def application_identification_frequency(self):
        """Gets the application_identification_frequency of this ConfigUpdate.  # noqa: E501

        可选参数；应用规则库自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :return: The application_identification_frequency of this ConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._application_identification_frequency

    @application_identification_frequency.setter
    def application_identification_frequency(self, application_identification_frequency):
        """Sets the application_identification_frequency of this ConfigUpdate.

        可选参数；应用规则库自动更新时间间隔（daily-天/weekly-周/monthly-月），默认为周  # noqa: E501

        :param application_identification_frequency: The application_identification_frequency of this ConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "WEEKLY", "MONTHLY"]  # noqa: E501
        if application_identification_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `application_identification_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(application_identification_frequency, allowed_values)
            )

        self._application_identification_frequency = application_identification_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
