# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.debug_smtp_verify_authentication import DebugSmtpVerifyAuthentication  # noqa: F401,E501


class DebugSmtpVerify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ip_address': 'str',
        'port': 'int',
        'authentication': 'DebugSmtpVerifyAuthentication'
    }

    attribute_map = {
        'name': 'name',
        'ip_address': 'ip_address',
        'port': 'port',
        'authentication': 'authentication'
    }

    def __init__(self, name=None, ip_address=None, port=None, authentication=None):  # noqa: E501
        """DebugSmtpVerify - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._ip_address = None
        self._port = None
        self._authentication = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.ip_address = ip_address
        if port is not None:
            self.port = port
        if authentication is not None:
            self.authentication = authentication

    @property
    def name(self):
        """Gets the name of this DebugSmtpVerify.  # noqa: E501

        名称, 长度限制为1~511个字节,不能包含& |  , % < > / \\等特殊字符以及首尾或连续空格,且不能为none、all、auto等关键字  # noqa: E501

        :return: The name of this DebugSmtpVerify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DebugSmtpVerify.

        名称, 长度限制为1~511个字节,不能包含& |  , % < > / \\等特殊字符以及首尾或连续空格,且不能为none、all、auto等关键字  # noqa: E501

        :param name: The name of this DebugSmtpVerify.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ip_address(self):
        """Gets the ip_address of this DebugSmtpVerify.  # noqa: E501

        服务器ip地址  # noqa: E501

        :return: The ip_address of this DebugSmtpVerify.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DebugSmtpVerify.

        服务器ip地址  # noqa: E501

        :param ip_address: The ip_address of this DebugSmtpVerify.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this DebugSmtpVerify.  # noqa: E501

        服务器端口  # noqa: E501

        :return: The port of this DebugSmtpVerify.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DebugSmtpVerify.

        服务器端口  # noqa: E501

        :param port: The port of this DebugSmtpVerify.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def authentication(self):
        """Gets the authentication of this DebugSmtpVerify.  # noqa: E501


        :return: The authentication of this DebugSmtpVerify.  # noqa: E501
        :rtype: DebugSmtpVerifyAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this DebugSmtpVerify.


        :param authentication: The authentication of this DebugSmtpVerify.  # noqa: E501
        :type: DebugSmtpVerifyAuthentication
        """

        self._authentication = authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugSmtpVerify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugSmtpVerify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
