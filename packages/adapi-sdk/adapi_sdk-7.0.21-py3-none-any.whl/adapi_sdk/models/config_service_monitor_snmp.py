# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorSnmp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'snmp_community': 'str',
        'pk_snmp_community': 'str',
        'encrypted_snmp_community': 'str',
        'cpu_usage_threshold': 'int',
        'cpu_usage_weight': 'int',
        'memory_usage_threshold': 'int',
        'memory_usage_weight': 'int',
        'disk_usage_threshold': 'int',
        'disk_usage_weight': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'snmp_community': 'snmp_community',
        'pk_snmp_community': 'pk_snmp_community',
        'encrypted_snmp_community': 'encrypted_snmp_community',
        'cpu_usage_threshold': 'cpu_usage_threshold',
        'cpu_usage_weight': 'cpu_usage_weight',
        'memory_usage_threshold': 'memory_usage_threshold',
        'memory_usage_weight': 'memory_usage_weight',
        'disk_usage_threshold': 'disk_usage_threshold',
        'disk_usage_weight': 'disk_usage_weight'
    }

    def __init__(self, name=None, description=None, type='SNMP', timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', snmp_community=None, pk_snmp_community=None, encrypted_snmp_community=None, cpu_usage_threshold=None, cpu_usage_weight=None, memory_usage_threshold=None, memory_usage_weight=None, disk_usage_threshold=None, disk_usage_weight=None):  # noqa: E501
        """ConfigServiceMonitorSnmp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._snmp_community = None
        self._pk_snmp_community = None
        self._encrypted_snmp_community = None
        self._cpu_usage_threshold = None
        self._cpu_usage_weight = None
        self._memory_usage_threshold = None
        self._memory_usage_weight = None
        self._disk_usage_threshold = None
        self._disk_usage_weight = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if snmp_community is not None:
            self.snmp_community = snmp_community
        if pk_snmp_community is not None:
            self.pk_snmp_community = pk_snmp_community
        if encrypted_snmp_community is not None:
            self.encrypted_snmp_community = encrypted_snmp_community
        if cpu_usage_threshold is not None:
            self.cpu_usage_threshold = cpu_usage_threshold
        if cpu_usage_weight is not None:
            self.cpu_usage_weight = cpu_usage_weight
        if memory_usage_threshold is not None:
            self.memory_usage_threshold = memory_usage_threshold
        if memory_usage_weight is not None:
            self.memory_usage_weight = memory_usage_weight
        if disk_usage_threshold is not None:
            self.disk_usage_threshold = disk_usage_threshold
        if disk_usage_weight is not None:
            self.disk_usage_weight = disk_usage_weight

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorSnmp.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorSnmp.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorSnmp.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorSnmp.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorSnmp.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """
        allowed_values = ["SNMP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；设置监视超时时间。  # noqa: E501

        :return: The timeout of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitorSnmp.

        可选参数；设置监视超时时间。  # noqa: E501

        :param timeout: The timeout of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；设置监视间隔时间。  # noqa: E501

        :return: The interval of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitorSnmp.

        可选参数；设置监视间隔时间。  # noqa: E501

        :param interval: The interval of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址；当启用gateway_detect时必须指定ip地址  # noqa: E501

        :return: The host of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitorSnmp.

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址；当启用gateway_detect时必须指定ip地址  # noqa: E501

        :param host: The host of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；指定监视端口；取值范围[0,65535]，默认为161  # noqa: E501

        :return: The port of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitorSnmp.

        可选参数；指定监视端口；取值范围[0,65535]，默认为161  # noqa: E501

        :param port: The port of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorSnmp.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def snmp_community(self):
        """Gets the snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数；指定snmp的共同体,默认为public  # noqa: E501

        :return: The snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._snmp_community

    @snmp_community.setter
    def snmp_community(self, snmp_community):
        """Sets the snmp_community of this ConfigServiceMonitorSnmp.

        可选参数；指定snmp的共同体,默认为public  # noqa: E501

        :param snmp_community: The snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """
        if snmp_community is not None and len(snmp_community) > 255:
            raise ValueError("Invalid value for `snmp_community`, length must be less than or equal to `255`")  # noqa: E501
        if snmp_community is not None and len(snmp_community) < 1:
            raise ValueError("Invalid value for `snmp_community`, length must be greater than or equal to `1`")  # noqa: E501

        self._snmp_community = snmp_community

    @property
    def pk_snmp_community(self):
        """Gets the pk_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501

        加密查询密码  # noqa: E501

        :return: The pk_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._pk_snmp_community

    @pk_snmp_community.setter
    def pk_snmp_community(self, pk_snmp_community):
        """Sets the pk_snmp_community of this ConfigServiceMonitorSnmp.

        加密查询密码  # noqa: E501

        :param pk_snmp_community: The pk_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """

        self._pk_snmp_community = pk_snmp_community

    @property
    def encrypted_snmp_community(self):
        """Gets the encrypted_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501

        加密查询密码  # noqa: E501

        :return: The encrypted_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_snmp_community

    @encrypted_snmp_community.setter
    def encrypted_snmp_community(self, encrypted_snmp_community):
        """Sets the encrypted_snmp_community of this ConfigServiceMonitorSnmp.

        加密查询密码  # noqa: E501

        :param encrypted_snmp_community: The encrypted_snmp_community of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: str
        """

        self._encrypted_snmp_community = encrypted_snmp_community

    @property
    def cpu_usage_threshold(self):
        """Gets the cpu_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定CPU占用阈值,取值范围为[1,100],默认80;单位为%  # noqa: E501

        :return: The cpu_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_threshold

    @cpu_usage_threshold.setter
    def cpu_usage_threshold(self, cpu_usage_threshold):
        """Sets the cpu_usage_threshold of this ConfigServiceMonitorSnmp.

        可选参数;指定CPU占用阈值,取值范围为[1,100],默认80;单位为%  # noqa: E501

        :param cpu_usage_threshold: The cpu_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if cpu_usage_threshold is not None and cpu_usage_threshold > 100:  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_threshold`, must be a value less than or equal to `100`")  # noqa: E501
        if cpu_usage_threshold is not None and cpu_usage_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cpu_usage_threshold = cpu_usage_threshold

    @property
    def cpu_usage_weight(self):
        """Gets the cpu_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定CPU占用的权值，取值范围为[1,100],默认为3  # noqa: E501

        :return: The cpu_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_weight

    @cpu_usage_weight.setter
    def cpu_usage_weight(self, cpu_usage_weight):
        """Sets the cpu_usage_weight of this ConfigServiceMonitorSnmp.

        可选参数;指定CPU占用的权值，取值范围为[1,100],默认为3  # noqa: E501

        :param cpu_usage_weight: The cpu_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if cpu_usage_weight is not None and cpu_usage_weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_weight`, must be a value less than or equal to `100`")  # noqa: E501
        if cpu_usage_weight is not None and cpu_usage_weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cpu_usage_weight = cpu_usage_weight

    @property
    def memory_usage_threshold(self):
        """Gets the memory_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定内存占用阈值,取值范围为[1,100],默认70;单位为%  # noqa: E501

        :return: The memory_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage_threshold

    @memory_usage_threshold.setter
    def memory_usage_threshold(self, memory_usage_threshold):
        """Sets the memory_usage_threshold of this ConfigServiceMonitorSnmp.

        可选参数;指定内存占用阈值,取值范围为[1,100],默认70;单位为%  # noqa: E501

        :param memory_usage_threshold: The memory_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if memory_usage_threshold is not None and memory_usage_threshold > 100:  # noqa: E501
            raise ValueError("Invalid value for `memory_usage_threshold`, must be a value less than or equal to `100`")  # noqa: E501
        if memory_usage_threshold is not None and memory_usage_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_usage_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._memory_usage_threshold = memory_usage_threshold

    @property
    def memory_usage_weight(self):
        """Gets the memory_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定内存占用的权值，取值范围为[1,100],默认为2  # noqa: E501

        :return: The memory_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage_weight

    @memory_usage_weight.setter
    def memory_usage_weight(self, memory_usage_weight):
        """Sets the memory_usage_weight of this ConfigServiceMonitorSnmp.

        可选参数;指定内存占用的权值，取值范围为[1,100],默认为2  # noqa: E501

        :param memory_usage_weight: The memory_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if memory_usage_weight is not None and memory_usage_weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `memory_usage_weight`, must be a value less than or equal to `100`")  # noqa: E501
        if memory_usage_weight is not None and memory_usage_weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_usage_weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._memory_usage_weight = memory_usage_weight

    @property
    def disk_usage_threshold(self):
        """Gets the disk_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定磁盘占用阈值,取值范围为[1,100],默认90;单位为%  # noqa: E501

        :return: The disk_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._disk_usage_threshold

    @disk_usage_threshold.setter
    def disk_usage_threshold(self, disk_usage_threshold):
        """Sets the disk_usage_threshold of this ConfigServiceMonitorSnmp.

        可选参数;指定磁盘占用阈值,取值范围为[1,100],默认90;单位为%  # noqa: E501

        :param disk_usage_threshold: The disk_usage_threshold of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if disk_usage_threshold is not None and disk_usage_threshold > 100:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_threshold`, must be a value less than or equal to `100`")  # noqa: E501
        if disk_usage_threshold is not None and disk_usage_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._disk_usage_threshold = disk_usage_threshold

    @property
    def disk_usage_weight(self):
        """Gets the disk_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501

        可选参数;指定磁盘占用的权值，取值范围为[1,100],默认为4  # noqa: E501

        :return: The disk_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :rtype: int
        """
        return self._disk_usage_weight

    @disk_usage_weight.setter
    def disk_usage_weight(self, disk_usage_weight):
        """Sets the disk_usage_weight of this ConfigServiceMonitorSnmp.

        可选参数;指定磁盘占用的权值，取值范围为[1,100],默认为4  # noqa: E501

        :param disk_usage_weight: The disk_usage_weight of this ConfigServiceMonitorSnmp.  # noqa: E501
        :type: int
        """
        if disk_usage_weight is not None and disk_usage_weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_weight`, must be a value less than or equal to `100`")  # noqa: E501
        if disk_usage_weight is not None and disk_usage_weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._disk_usage_weight = disk_usage_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorSnmp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorSnmp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
