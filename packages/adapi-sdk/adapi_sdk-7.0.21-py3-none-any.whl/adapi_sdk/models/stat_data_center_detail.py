# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_data_center_detail_alert_events import StatDataCenterDetailAlertEvents  # noqa: F401,E501
from adapi_sdk.models.stat_data_center_detail_local_device import StatDataCenterDetailLocalDevice  # noqa: F401,E501
from adapi_sdk.models.stat_data_center_detail_vip_pool import StatDataCenterDetailVipPool  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_accumulate import StatStatisticAccumulate  # noqa: F401,E501


class StatDataCenterDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'site': 'str',
        'health': 'str',
        'vip_pool': 'StatDataCenterDetailVipPool',
        'failure_reason': 'str',
        'alert_events': 'list[StatDataCenterDetailAlertEvents]',
        'local_device': 'list[StatDataCenterDetailLocalDevice]',
        'query': 'StatStatisticAccumulate'
    }

    attribute_map = {
        'name': 'name',
        'site': 'site',
        'health': 'health',
        'vip_pool': 'vip_pool',
        'failure_reason': 'failure_reason',
        'alert_events': 'alert_events',
        'local_device': 'local_device',
        'query': 'query'
    }

    def __init__(self, name=None, site=None, health=None, vip_pool=None, failure_reason=None, alert_events=None, local_device=None, query=None):  # noqa: E501
        """StatDataCenterDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._site = None
        self._health = None
        self._vip_pool = None
        self._failure_reason = None
        self._alert_events = None
        self._local_device = None
        self._query = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if site is not None:
            self.site = site
        if health is not None:
            self.health = health
        if vip_pool is not None:
            self.vip_pool = vip_pool
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if alert_events is not None:
            self.alert_events = alert_events
        if local_device is not None:
            self.local_device = local_device
        if query is not None:
            self.query = query

    @property
    def name(self):
        """Gets the name of this StatDataCenterDetail.  # noqa: E501

        数据中心的名称  # noqa: E501

        :return: The name of this StatDataCenterDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatDataCenterDetail.

        数据中心的名称  # noqa: E501

        :param name: The name of this StatDataCenterDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site(self):
        """Gets the site of this StatDataCenterDetail.  # noqa: E501

        指定数据中心是本地还是远端  # noqa: E501

        :return: The site of this StatDataCenterDetail.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this StatDataCenterDetail.

        指定数据中心是本地还是远端  # noqa: E501

        :param site: The site of this StatDataCenterDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "REMOTE"]  # noqa: E501
        if site not in allowed_values:
            raise ValueError(
                "Invalid value for `site` ({0}), must be one of {1}"  # noqa: E501
                .format(site, allowed_values)
            )

        self._site = site

    @property
    def health(self):
        """Gets the health of this StatDataCenterDetail.  # noqa: E501

        指定数据中心当前健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :return: The health of this StatDataCenterDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatDataCenterDetail.

        指定数据中心当前健康状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :param health: The health of this StatDataCenterDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def vip_pool(self):
        """Gets the vip_pool of this StatDataCenterDetail.  # noqa: E501


        :return: The vip_pool of this StatDataCenterDetail.  # noqa: E501
        :rtype: StatDataCenterDetailVipPool
        """
        return self._vip_pool

    @vip_pool.setter
    def vip_pool(self, vip_pool):
        """Sets the vip_pool of this StatDataCenterDetail.


        :param vip_pool: The vip_pool of this StatDataCenterDetail.  # noqa: E501
        :type: StatDataCenterDetailVipPool
        """

        self._vip_pool = vip_pool

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatDataCenterDetail.  # noqa: E501

        显示虚拟服务和虚拟IP池相关的告警信息  # noqa: E501

        :return: The failure_reason of this StatDataCenterDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatDataCenterDetail.

        显示虚拟服务和虚拟IP池相关的告警信息  # noqa: E501

        :param failure_reason: The failure_reason of this StatDataCenterDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def alert_events(self):
        """Gets the alert_events of this StatDataCenterDetail.  # noqa: E501

        告警事件  # noqa: E501

        :return: The alert_events of this StatDataCenterDetail.  # noqa: E501
        :rtype: list[StatDataCenterDetailAlertEvents]
        """
        return self._alert_events

    @alert_events.setter
    def alert_events(self, alert_events):
        """Sets the alert_events of this StatDataCenterDetail.

        告警事件  # noqa: E501

        :param alert_events: The alert_events of this StatDataCenterDetail.  # noqa: E501
        :type: list[StatDataCenterDetailAlertEvents]
        """

        self._alert_events = alert_events

    @property
    def local_device(self):
        """Gets the local_device of this StatDataCenterDetail.  # noqa: E501

        本地设备信息  # noqa: E501

        :return: The local_device of this StatDataCenterDetail.  # noqa: E501
        :rtype: list[StatDataCenterDetailLocalDevice]
        """
        return self._local_device

    @local_device.setter
    def local_device(self, local_device):
        """Sets the local_device of this StatDataCenterDetail.

        本地设备信息  # noqa: E501

        :param local_device: The local_device of this StatDataCenterDetail.  # noqa: E501
        :type: list[StatDataCenterDetailLocalDevice]
        """

        self._local_device = local_device

    @property
    def query(self):
        """Gets the query of this StatDataCenterDetail.  # noqa: E501

        数据统计结果  # noqa: E501

        :return: The query of this StatDataCenterDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this StatDataCenterDetail.

        数据统计结果  # noqa: E501

        :param query: The query of this StatDataCenterDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDataCenterDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDataCenterDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
