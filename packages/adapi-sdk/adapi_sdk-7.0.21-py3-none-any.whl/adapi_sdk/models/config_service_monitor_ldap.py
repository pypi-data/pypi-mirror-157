# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorLdap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'host': 'str',
        'port': 'int',
        'debug_mode': 'str',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str',
        'encrypted_password': 'str',
        'base_dn': 'str',
        'search_filter': 'str',
        'secure': 'str',
        'mandatory_attributes': 'str',
        'chase_referrals': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'host': 'host',
        'port': 'port',
        'debug_mode': 'debug_mode',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password',
        'encrypted_password': 'encrypted_password',
        'base_dn': 'base_dn',
        'search_filter': 'search_filter',
        'secure': 'secure',
        'mandatory_attributes': 'mandatory_attributes',
        'chase_referrals': 'chase_referrals'
    }

    def __init__(self, name=None, description=None, type='LDAP', timeout=None, interval=None, host='*', port=None, debug_mode='DISABLE', username=None, password=None, pk_password=None, encrypted_password=None, base_dn=None, search_filter=None, secure='NONE', mandatory_attributes='DISABLE', chase_referrals='ENABLE'):  # noqa: E501
        """ConfigServiceMonitorLdap - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._host = None
        self._port = None
        self._debug_mode = None
        self._username = None
        self._password = None
        self._pk_password = None
        self._encrypted_password = None
        self._base_dn = None
        self._search_filter = None
        self._secure = None
        self._mandatory_attributes = None
        self._chase_referrals = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if base_dn is not None:
            self.base_dn = base_dn
        if search_filter is not None:
            self.search_filter = search_filter
        if secure is not None:
            self.secure = secure
        if mandatory_attributes is not None:
            self.mandatory_attributes = mandatory_attributes
        if chase_referrals is not None:
            self.chase_referrals = chase_referrals

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorLdap.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorLdap.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorLdap.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorLdap.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorLdap.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["LDAP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；设置监视超时时间。  # noqa: E501

        :return: The timeout of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigServiceMonitorLdap.

        可选参数；设置监视超时时间。  # noqa: E501

        :param timeout: The timeout of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；设置监视间隔时间。  # noqa: E501

        :return: The interval of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigServiceMonitorLdap.

        可选参数；设置监视间隔时间。  # noqa: E501

        :param interval: The interval of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 86400:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `86400`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def host(self):
        """Gets the host of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址  # noqa: E501

        :return: The host of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigServiceMonitorLdap.

        可选参数；支持ip地址和*;默认为*，表示监视节点池中的地址  # noqa: E501

        :param host: The host of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；指定监视端口；取值范围[0,65535]，默认为389  # noqa: E501

        :return: The port of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigServiceMonitorLdap.

        可选参数；指定监视端口；取值范围[0,65535]，默认为389  # noqa: E501

        :param port: The port of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorLdap.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def username(self):
        """Gets the username of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定ldap服务器的用户名  # noqa: E501

        :return: The username of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigServiceMonitorLdap.

        可选参数;指定ldap服务器的用户名  # noqa: E501

        :param username: The username of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 63:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `63`")  # noqa: E501
        if username is not None and len(username) < 0:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `0`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定ldap服务器用户的密码  # noqa: E501

        :return: The password of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigServiceMonitorLdap.

        可选参数;指定ldap服务器用户的密码  # noqa: E501

        :param password: The password of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 63:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `63`")  # noqa: E501
        if password is not None and len(password) < 0:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigServiceMonitorLdap.  # noqa: E501

        旧密码  # noqa: E501

        :return: The pk_password of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigServiceMonitorLdap.

        旧密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定加密后的密码  # noqa: E501

        :return: The encrypted_password of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigServiceMonitorLdap.

        可选参数;指定加密后的密码  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def base_dn(self):
        """Gets the base_dn of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定从监视器启动健康检查的LDAP树中的位置  # noqa: E501

        :return: The base_dn of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this ConfigServiceMonitorLdap.

        可选参数;指定从监视器启动健康检查的LDAP树中的位置  # noqa: E501

        :param base_dn: The base_dn of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        if base_dn is not None and len(base_dn) > 1023:
            raise ValueError("Invalid value for `base_dn`, length must be less than or equal to `1023`")  # noqa: E501
        if base_dn is not None and len(base_dn) < 0:
            raise ValueError("Invalid value for `base_dn`, length must be greater than or equal to `0`")  # noqa: E501

        self._base_dn = base_dn

    @property
    def search_filter(self):
        """Gets the search_filter of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;监视器搜索指定的LDAP密钥，比如：objectclass=*。  # noqa: E501

        :return: The search_filter of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this ConfigServiceMonitorLdap.

        可选参数;监视器搜索指定的LDAP密钥，比如：objectclass=*。  # noqa: E501

        :param search_filter: The search_filter of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        if search_filter is not None and len(search_filter) > 1023:
            raise ValueError("Invalid value for `search_filter`, length must be less than or equal to `1023`")  # noqa: E501
        if search_filter is not None and len(search_filter) < 0:
            raise ValueError("Invalid value for `search_filter`, length must be greater than or equal to `0`")  # noqa: E501

        self._search_filter = search_filter

    @property
    def secure(self):
        """Gets the secure of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定用于与目标通信的安全协议类型;none表示不加密,tls表示需要进行加密  # noqa: E501

        :return: The secure of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this ConfigServiceMonitorLdap.

        可选参数;指定用于与目标通信的安全协议类型;none表示不加密,tls表示需要进行加密  # noqa: E501

        :param secure: The secure of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "TLS"]  # noqa: E501
        if secure not in allowed_values:
            raise ValueError(
                "Invalid value for `secure` ({0}), must be one of {1}"  # noqa: E501
                .format(secure, allowed_values)
            )

        self._secure = secure

    @property
    def mandatory_attributes(self):
        """Gets the mandatory_attributes of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定目标是否必须包括其响应中的属性,默认disable  # noqa: E501

        :return: The mandatory_attributes of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_attributes

    @mandatory_attributes.setter
    def mandatory_attributes(self, mandatory_attributes):
        """Sets the mandatory_attributes of this ConfigServiceMonitorLdap.

        可选参数;指定目标是否必须包括其响应中的属性,默认disable  # noqa: E501

        :param mandatory_attributes: The mandatory_attributes of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if mandatory_attributes not in allowed_values:
            raise ValueError(
                "Invalid value for `mandatory_attributes` ({0}), must be one of {1}"  # noqa: E501
                .format(mandatory_attributes, allowed_values)
            )

        self._mandatory_attributes = mandatory_attributes

    @property
    def chase_referrals(self):
        """Gets the chase_referrals of this ConfigServiceMonitorLdap.  # noqa: E501

        可选参数;指定在收到LDAP引用条目后是否需要转换,默认enable  # noqa: E501

        :return: The chase_referrals of this ConfigServiceMonitorLdap.  # noqa: E501
        :rtype: str
        """
        return self._chase_referrals

    @chase_referrals.setter
    def chase_referrals(self, chase_referrals):
        """Sets the chase_referrals of this ConfigServiceMonitorLdap.

        可选参数;指定在收到LDAP引用条目后是否需要转换,默认enable  # noqa: E501

        :param chase_referrals: The chase_referrals of this ConfigServiceMonitorLdap.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if chase_referrals not in allowed_values:
            raise ValueError(
                "Invalid value for `chase_referrals` ({0}), must be one of {1}"  # noqa: E501
                .format(chase_referrals, allowed_values)
            )

        self._chase_referrals = chase_referrals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorLdap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorLdap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
