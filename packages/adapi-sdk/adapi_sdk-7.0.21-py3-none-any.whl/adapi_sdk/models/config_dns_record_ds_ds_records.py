# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsRecordDsDsRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_tag': 'int',
        'algorithm': 'int',
        'digest_type': 'int',
        'digest': 'str'
    }

    attribute_map = {
        'key_tag': 'key_tag',
        'algorithm': 'algorithm',
        'digest_type': 'digest_type',
        'digest': 'digest'
    }

    def __init__(self, key_tag=None, algorithm=None, digest_type=None, digest=None):  # noqa: E501
        """ConfigDnsRecordDsDsRecords - a model defined in Swagger"""  # noqa: E501

        self._key_tag = None
        self._algorithm = None
        self._digest_type = None
        self._digest = None
        self.discriminator = None

        self.key_tag = key_tag
        self.algorithm = algorithm
        self.digest_type = digest_type
        self.digest = digest

    @property
    def key_tag(self):
        """Gets the key_tag of this ConfigDnsRecordDsDsRecords.  # noqa: E501

        密钥标签，校验格式为16位无符号整数，输入范围[0,65535]  # noqa: E501

        :return: The key_tag of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag):
        """Sets the key_tag of this ConfigDnsRecordDsDsRecords.

        密钥标签，校验格式为16位无符号整数，输入范围[0,65535]  # noqa: E501

        :param key_tag: The key_tag of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :type: int
        """
        if key_tag is None:
            raise ValueError("Invalid value for `key_tag`, must not be `None`")  # noqa: E501
        if key_tag is not None and key_tag > 65535:  # noqa: E501
            raise ValueError("Invalid value for `key_tag`, must be a value less than or equal to `65535`")  # noqa: E501
        if key_tag is not None and key_tag < 0:  # noqa: E501
            raise ValueError("Invalid value for `key_tag`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_tag = key_tag

    @property
    def algorithm(self):
        """Gets the algorithm of this ConfigDnsRecordDsDsRecords.  # noqa: E501

        算法，校验格式为int，输入范围[0,255]  # noqa: E501

        :return: The algorithm of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :rtype: int
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ConfigDnsRecordDsDsRecords.

        算法，校验格式为int，输入范围[0,255]  # noqa: E501

        :param algorithm: The algorithm of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :type: int
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501
        if algorithm is not None and algorithm > 255:  # noqa: E501
            raise ValueError("Invalid value for `algorithm`, must be a value less than or equal to `255`")  # noqa: E501
        if algorithm is not None and algorithm < 0:  # noqa: E501
            raise ValueError("Invalid value for `algorithm`, must be a value greater than or equal to `0`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def digest_type(self):
        """Gets the digest_type of this ConfigDnsRecordDsDsRecords.  # noqa: E501

        摘要类型，校验格式为int，输入范围[0,255]  # noqa: E501

        :return: The digest_type of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :rtype: int
        """
        return self._digest_type

    @digest_type.setter
    def digest_type(self, digest_type):
        """Sets the digest_type of this ConfigDnsRecordDsDsRecords.

        摘要类型，校验格式为int，输入范围[0,255]  # noqa: E501

        :param digest_type: The digest_type of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :type: int
        """
        if digest_type is None:
            raise ValueError("Invalid value for `digest_type`, must not be `None`")  # noqa: E501
        if digest_type is not None and digest_type > 255:  # noqa: E501
            raise ValueError("Invalid value for `digest_type`, must be a value less than or equal to `255`")  # noqa: E501
        if digest_type is not None and digest_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `digest_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._digest_type = digest_type

    @property
    def digest(self):
        """Gets the digest of this ConfigDnsRecordDsDsRecords.  # noqa: E501

        摘要，校验格式为string，最大长度4096，可为空  # noqa: E501

        :return: The digest of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ConfigDnsRecordDsDsRecords.

        摘要，校验格式为string，最大长度4096，可为空  # noqa: E501

        :param digest: The digest of this ConfigDnsRecordDsDsRecords.  # noqa: E501
        :type: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501
        if digest is not None and len(digest) > 4096:
            raise ValueError("Invalid value for `digest`, length must be less than or equal to `4096`")  # noqa: E501
        if digest is not None and len(digest) < 1:
            raise ValueError("Invalid value for `digest`, length must be greater than or equal to `1`")  # noqa: E501

        self._digest = digest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsRecordDsDsRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsRecordDsDsRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
