# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_persist_cookie_study_cookie_encryption import ConfigPersistCookieStudyCookieEncryption  # noqa: F401,E501


class ConfigPersistCookieRewrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'cookie': 'str',
        'http_only': 'str',
        'secure': 'str',
        'cookie_encryption': 'ConfigPersistCookieStudyCookieEncryption',
        'busy_protect': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'cookie': 'cookie',
        'http_only': 'http_only',
        'secure': 'secure',
        'cookie_encryption': 'cookie_encryption',
        'busy_protect': 'busy_protect'
    }

    def __init__(self, name=None, description=None, type='COOKIE-REWRITE', cookie=None, http_only='DISABLE', secure='DISABLE', cookie_encryption=None, busy_protect='DISABLE'):  # noqa: E501
        """ConfigPersistCookieRewrite - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._cookie = None
        self._http_only = None
        self._secure = None
        self._cookie_encryption = None
        self._busy_protect = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        self.cookie = cookie
        if http_only is not None:
            self.http_only = http_only
        if secure is not None:
            self.secure = secure
        if cookie_encryption is not None:
            self.cookie_encryption = cookie_encryption
        if busy_protect is not None:
            self.busy_protect = busy_protect

    @property
    def name(self):
        """Gets the name of this ConfigPersistCookieRewrite.  # noqa: E501

        必选参数；指定会话保持的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPersistCookieRewrite.

        必选参数；指定会话保持的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPersistCookieRewrite.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPersistCookieRewrite.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigPersistCookieRewrite.  # noqa: E501

        只读字段;指定会话保持的类型  # noqa: E501

        :return: The type of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigPersistCookieRewrite.

        只读字段;指定会话保持的类型  # noqa: E501

        :param type: The type of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        allowed_values = ["COOKIE-REWRITE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cookie(self):
        """Gets the cookie of this ConfigPersistCookieRewrite.  # noqa: E501

        可选参数;指定改写cookie的名称  # noqa: E501

        :return: The cookie of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this ConfigPersistCookieRewrite.

        可选参数;指定改写cookie的名称  # noqa: E501

        :param cookie: The cookie of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        if cookie is None:
            raise ValueError("Invalid value for `cookie`, must not be `None`")  # noqa: E501
        if cookie is not None and len(cookie) > 31:
            raise ValueError("Invalid value for `cookie`, length must be less than or equal to `31`")  # noqa: E501
        if cookie is not None and len(cookie) < 1:
            raise ValueError("Invalid value for `cookie`, length must be greater than or equal to `1`")  # noqa: E501

        self._cookie = cookie

    @property
    def http_only(self):
        """Gets the http_only of this ConfigPersistCookieRewrite.  # noqa: E501

        可选参数；指定httponly的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The http_only of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this ConfigPersistCookieRewrite.

        可选参数；指定httponly的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param http_only: The http_only of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if http_only not in allowed_values:
            raise ValueError(
                "Invalid value for `http_only` ({0}), must be one of {1}"  # noqa: E501
                .format(http_only, allowed_values)
            )

        self._http_only = http_only

    @property
    def secure(self):
        """Gets the secure of this ConfigPersistCookieRewrite.  # noqa: E501

        可选参数；指定secure的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The secure of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this ConfigPersistCookieRewrite.

        可选参数；指定secure的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param secure: The secure of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if secure not in allowed_values:
            raise ValueError(
                "Invalid value for `secure` ({0}), must be one of {1}"  # noqa: E501
                .format(secure, allowed_values)
            )

        self._secure = secure

    @property
    def cookie_encryption(self):
        """Gets the cookie_encryption of this ConfigPersistCookieRewrite.  # noqa: E501


        :return: The cookie_encryption of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: ConfigPersistCookieStudyCookieEncryption
        """
        return self._cookie_encryption

    @cookie_encryption.setter
    def cookie_encryption(self, cookie_encryption):
        """Sets the cookie_encryption of this ConfigPersistCookieRewrite.


        :param cookie_encryption: The cookie_encryption of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: ConfigPersistCookieStudyCookieEncryption
        """

        self._cookie_encryption = cookie_encryption

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigPersistCookieRewrite.  # noqa: E501

        可选参数；指定繁忙保护的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The busy_protect of this ConfigPersistCookieRewrite.  # noqa: E501
        :rtype: str
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigPersistCookieRewrite.

        可选参数；指定繁忙保护的开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param busy_protect: The busy_protect of this ConfigPersistCookieRewrite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_protect, allowed_values)
            )

        self._busy_protect = busy_protect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPersistCookieRewrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPersistCookieRewrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
