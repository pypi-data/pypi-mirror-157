# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_notice_ca_certificate_inspection import ConfigNoticeCaCertificateInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_licence_basic_sn_inspection import ConfigNoticeLicenceBasicSnInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_licence_software_update_sn_inspection import ConfigNoticeLicenceSoftwareUpdateSnInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_passwd import ConfigNoticePasswd  # noqa: F401,E501
from adapi_sdk.models.config_notice_platform_file_inspection import ConfigNoticePlatformFileInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_privacy_inspection import ConfigNoticePrivacyInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_ssd_health_inspection import ConfigNoticeSsdHealthInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_ssl_certificate_inspection import ConfigNoticeSslCertificateInspection  # noqa: F401,E501
from adapi_sdk.models.config_notice_user_weak_password_inspection import ConfigNoticeUserWeakPasswordInspection  # noqa: F401,E501


class ConfigNotice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'licence_basic_sn_inspection': 'ConfigNoticeLicenceBasicSnInspection',
        'licence_software_update_sn_inspection': 'ConfigNoticeLicenceSoftwareUpdateSnInspection',
        'ssl_certificate_inspection': 'ConfigNoticeSslCertificateInspection',
        'certificate_expired': 'str',
        'passwd': 'ConfigNoticePasswd',
        'platform_file_inspection': 'ConfigNoticePlatformFileInspection',
        'ca_certificate_inspection': 'ConfigNoticeCaCertificateInspection',
        'user_weak_password_inspection': 'ConfigNoticeUserWeakPasswordInspection',
        'privacy_inspection': 'ConfigNoticePrivacyInspection',
        'ssd_health_inspection': 'ConfigNoticeSsdHealthInspection'
    }

    attribute_map = {
        'licence_basic_sn_inspection': 'licence_basic_sn_inspection',
        'licence_software_update_sn_inspection': 'licence_software_update_sn_inspection',
        'ssl_certificate_inspection': 'ssl_certificate_inspection',
        'certificate_expired': 'certificate_expired',
        'passwd': 'passwd',
        'platform_file_inspection': 'platform_file_inspection',
        'ca_certificate_inspection': 'ca_certificate_inspection',
        'user_weak_password_inspection': 'user_weak_password_inspection',
        'privacy_inspection': 'privacy_inspection',
        'ssd_health_inspection': 'ssd_health_inspection'
    }

    def __init__(self, licence_basic_sn_inspection=None, licence_software_update_sn_inspection=None, ssl_certificate_inspection=None, certificate_expired=None, passwd=None, platform_file_inspection=None, ca_certificate_inspection=None, user_weak_password_inspection=None, privacy_inspection=None, ssd_health_inspection=None):  # noqa: E501
        """ConfigNotice - a model defined in Swagger"""  # noqa: E501

        self._licence_basic_sn_inspection = None
        self._licence_software_update_sn_inspection = None
        self._ssl_certificate_inspection = None
        self._certificate_expired = None
        self._passwd = None
        self._platform_file_inspection = None
        self._ca_certificate_inspection = None
        self._user_weak_password_inspection = None
        self._privacy_inspection = None
        self._ssd_health_inspection = None
        self.discriminator = None

        if licence_basic_sn_inspection is not None:
            self.licence_basic_sn_inspection = licence_basic_sn_inspection
        if licence_software_update_sn_inspection is not None:
            self.licence_software_update_sn_inspection = licence_software_update_sn_inspection
        if ssl_certificate_inspection is not None:
            self.ssl_certificate_inspection = ssl_certificate_inspection
        if certificate_expired is not None:
            self.certificate_expired = certificate_expired
        if passwd is not None:
            self.passwd = passwd
        if platform_file_inspection is not None:
            self.platform_file_inspection = platform_file_inspection
        if ca_certificate_inspection is not None:
            self.ca_certificate_inspection = ca_certificate_inspection
        if user_weak_password_inspection is not None:
            self.user_weak_password_inspection = user_weak_password_inspection
        if privacy_inspection is not None:
            self.privacy_inspection = privacy_inspection
        if ssd_health_inspection is not None:
            self.ssd_health_inspection = ssd_health_inspection

    @property
    def licence_basic_sn_inspection(self):
        """Gets the licence_basic_sn_inspection of this ConfigNotice.  # noqa: E501


        :return: The licence_basic_sn_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeLicenceBasicSnInspection
        """
        return self._licence_basic_sn_inspection

    @licence_basic_sn_inspection.setter
    def licence_basic_sn_inspection(self, licence_basic_sn_inspection):
        """Sets the licence_basic_sn_inspection of this ConfigNotice.


        :param licence_basic_sn_inspection: The licence_basic_sn_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeLicenceBasicSnInspection
        """

        self._licence_basic_sn_inspection = licence_basic_sn_inspection

    @property
    def licence_software_update_sn_inspection(self):
        """Gets the licence_software_update_sn_inspection of this ConfigNotice.  # noqa: E501


        :return: The licence_software_update_sn_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeLicenceSoftwareUpdateSnInspection
        """
        return self._licence_software_update_sn_inspection

    @licence_software_update_sn_inspection.setter
    def licence_software_update_sn_inspection(self, licence_software_update_sn_inspection):
        """Sets the licence_software_update_sn_inspection of this ConfigNotice.


        :param licence_software_update_sn_inspection: The licence_software_update_sn_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeLicenceSoftwareUpdateSnInspection
        """

        self._licence_software_update_sn_inspection = licence_software_update_sn_inspection

    @property
    def ssl_certificate_inspection(self):
        """Gets the ssl_certificate_inspection of this ConfigNotice.  # noqa: E501


        :return: The ssl_certificate_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeSslCertificateInspection
        """
        return self._ssl_certificate_inspection

    @ssl_certificate_inspection.setter
    def ssl_certificate_inspection(self, ssl_certificate_inspection):
        """Sets the ssl_certificate_inspection of this ConfigNotice.


        :param ssl_certificate_inspection: The ssl_certificate_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeSslCertificateInspection
        """

        self._ssl_certificate_inspection = ssl_certificate_inspection

    @property
    def certificate_expired(self):
        """Gets the certificate_expired of this ConfigNotice.  # noqa: E501

        对应用户名的ukey过期状态  # noqa: E501

        :return: The certificate_expired of this ConfigNotice.  # noqa: E501
        :rtype: str
        """
        return self._certificate_expired

    @certificate_expired.setter
    def certificate_expired(self, certificate_expired):
        """Sets the certificate_expired of this ConfigNotice.

        对应用户名的ukey过期状态  # noqa: E501

        :param certificate_expired: The certificate_expired of this ConfigNotice.  # noqa: E501
        :type: str
        """

        self._certificate_expired = certificate_expired

    @property
    def passwd(self):
        """Gets the passwd of this ConfigNotice.  # noqa: E501


        :return: The passwd of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticePasswd
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this ConfigNotice.


        :param passwd: The passwd of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticePasswd
        """

        self._passwd = passwd

    @property
    def platform_file_inspection(self):
        """Gets the platform_file_inspection of this ConfigNotice.  # noqa: E501


        :return: The platform_file_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticePlatformFileInspection
        """
        return self._platform_file_inspection

    @platform_file_inspection.setter
    def platform_file_inspection(self, platform_file_inspection):
        """Sets the platform_file_inspection of this ConfigNotice.


        :param platform_file_inspection: The platform_file_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticePlatformFileInspection
        """

        self._platform_file_inspection = platform_file_inspection

    @property
    def ca_certificate_inspection(self):
        """Gets the ca_certificate_inspection of this ConfigNotice.  # noqa: E501


        :return: The ca_certificate_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeCaCertificateInspection
        """
        return self._ca_certificate_inspection

    @ca_certificate_inspection.setter
    def ca_certificate_inspection(self, ca_certificate_inspection):
        """Sets the ca_certificate_inspection of this ConfigNotice.


        :param ca_certificate_inspection: The ca_certificate_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeCaCertificateInspection
        """

        self._ca_certificate_inspection = ca_certificate_inspection

    @property
    def user_weak_password_inspection(self):
        """Gets the user_weak_password_inspection of this ConfigNotice.  # noqa: E501


        :return: The user_weak_password_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeUserWeakPasswordInspection
        """
        return self._user_weak_password_inspection

    @user_weak_password_inspection.setter
    def user_weak_password_inspection(self, user_weak_password_inspection):
        """Sets the user_weak_password_inspection of this ConfigNotice.


        :param user_weak_password_inspection: The user_weak_password_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeUserWeakPasswordInspection
        """

        self._user_weak_password_inspection = user_weak_password_inspection

    @property
    def privacy_inspection(self):
        """Gets the privacy_inspection of this ConfigNotice.  # noqa: E501


        :return: The privacy_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticePrivacyInspection
        """
        return self._privacy_inspection

    @privacy_inspection.setter
    def privacy_inspection(self, privacy_inspection):
        """Sets the privacy_inspection of this ConfigNotice.


        :param privacy_inspection: The privacy_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticePrivacyInspection
        """

        self._privacy_inspection = privacy_inspection

    @property
    def ssd_health_inspection(self):
        """Gets the ssd_health_inspection of this ConfigNotice.  # noqa: E501


        :return: The ssd_health_inspection of this ConfigNotice.  # noqa: E501
        :rtype: ConfigNoticeSsdHealthInspection
        """
        return self._ssd_health_inspection

    @ssd_health_inspection.setter
    def ssd_health_inspection(self, ssd_health_inspection):
        """Sets the ssd_health_inspection of this ConfigNotice.


        :param ssd_health_inspection: The ssd_health_inspection of this ConfigNotice.  # noqa: E501
        :type: ConfigNoticeSsdHealthInspection
        """

        self._ssd_health_inspection = ssd_health_inspection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNotice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNotice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
