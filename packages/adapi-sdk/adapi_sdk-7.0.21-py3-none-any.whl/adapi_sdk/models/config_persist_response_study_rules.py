# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPersistResponseStudyRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'str',
        'header': 'str',
        'keyword': 'str',
        'offset': 'int',
        'terminator': 'str'
    }

    attribute_map = {
        'component': 'component',
        'header': 'header',
        'keyword': 'keyword',
        'offset': 'offset',
        'terminator': 'terminator'
    }

    def __init__(self, component=None, header=None, keyword=None, offset=None, terminator=None):  # noqa: E501
        """ConfigPersistResponseStudyRules - a model defined in Swagger"""  # noqa: E501

        self._component = None
        self._header = None
        self._keyword = None
        self._offset = None
        self._terminator = None
        self.discriminator = None

        if component is not None:
            self.component = component
        if header is not None:
            self.header = header
        if keyword is not None:
            self.keyword = keyword
        if offset is not None:
            self.offset = offset
        if terminator is not None:
            self.terminator = terminator

    @property
    def component(self):
        """Gets the component of this ConfigPersistResponseStudyRules.  # noqa: E501


        :return: The component of this ConfigPersistResponseStudyRules.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ConfigPersistResponseStudyRules.


        :param component: The component of this ConfigPersistResponseStudyRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEADER", "BODY"]  # noqa: E501
        if component not in allowed_values:
            raise ValueError(
                "Invalid value for `component` ({0}), must be one of {1}"  # noqa: E501
                .format(component, allowed_values)
            )

        self._component = component

    @property
    def header(self):
        """Gets the header of this ConfigPersistResponseStudyRules.  # noqa: E501


        :return: The header of this ConfigPersistResponseStudyRules.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ConfigPersistResponseStudyRules.


        :param header: The header of this ConfigPersistResponseStudyRules.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def keyword(self):
        """Gets the keyword of this ConfigPersistResponseStudyRules.  # noqa: E501


        :return: The keyword of this ConfigPersistResponseStudyRules.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this ConfigPersistResponseStudyRules.


        :param keyword: The keyword of this ConfigPersistResponseStudyRules.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def offset(self):
        """Gets the offset of this ConfigPersistResponseStudyRules.  # noqa: E501

        Start from the first char of keyword.  # noqa: E501

        :return: The offset of this ConfigPersistResponseStudyRules.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ConfigPersistResponseStudyRules.

        Start from the first char of keyword.  # noqa: E501

        :param offset: The offset of this ConfigPersistResponseStudyRules.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def terminator(self):
        """Gets the terminator of this ConfigPersistResponseStudyRules.  # noqa: E501


        :return: The terminator of this ConfigPersistResponseStudyRules.  # noqa: E501
        :rtype: str
        """
        return self._terminator

    @terminator.setter
    def terminator(self, terminator):
        """Sets the terminator of this ConfigPersistResponseStudyRules.


        :param terminator: The terminator of this ConfigPersistResponseStudyRules.  # noqa: E501
        :type: str
        """

        self._terminator = terminator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPersistResponseStudyRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPersistResponseStudyRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
