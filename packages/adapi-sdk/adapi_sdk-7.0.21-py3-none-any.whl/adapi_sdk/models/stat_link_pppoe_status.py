# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatLinkPppoeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'state': 'str',
        'connected_time': 'int',
        'ip_address': 'str',
        'netmask': 'str',
        'gateway': 'str',
        'dns_server_1': 'str',
        'dns_server_2': 'str'
    }

    attribute_map = {
        'name': 'name',
        'state': 'state',
        'connected_time': 'connected_time',
        'ip_address': 'ip_address',
        'netmask': 'netmask',
        'gateway': 'gateway',
        'dns_server_1': 'dns_server_1',
        'dns_server_2': 'dns_server_2'
    }

    def __init__(self, name=None, state=None, connected_time=None, ip_address=None, netmask=None, gateway=None, dns_server_1=None, dns_server_2=None):  # noqa: E501
        """StatLinkPppoeStatus - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._state = None
        self._connected_time = None
        self._ip_address = None
        self._netmask = None
        self._gateway = None
        self._dns_server_1 = None
        self._dns_server_2 = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if connected_time is not None:
            self.connected_time = connected_time
        if ip_address is not None:
            self.ip_address = ip_address
        if netmask is not None:
            self.netmask = netmask
        if gateway is not None:
            self.gateway = gateway
        if dns_server_1 is not None:
            self.dns_server_1 = dns_server_1
        if dns_server_2 is not None:
            self.dns_server_2 = dns_server_2

    @property
    def name(self):
        """Gets the name of this StatLinkPppoeStatus.  # noqa: E501

        链路名称  # noqa: E501

        :return: The name of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatLinkPppoeStatus.

        链路名称  # noqa: E501

        :param name: The name of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this StatLinkPppoeStatus.  # noqa: E501

        当前链路状态（CONNECTED-已连接，DISCONNECT-未连接，CONNECTING-连接中）  # noqa: E501

        :return: The state of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatLinkPppoeStatus.

        当前链路状态（CONNECTED-已连接，DISCONNECT-未连接，CONNECTING-连接中）  # noqa: E501

        :param state: The state of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONNECTED", "DISCONNECT", "CONNECTING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def connected_time(self):
        """Gets the connected_time of this StatLinkPppoeStatus.  # noqa: E501

        连接时间  # noqa: E501

        :return: The connected_time of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: int
        """
        return self._connected_time

    @connected_time.setter
    def connected_time(self, connected_time):
        """Sets the connected_time of this StatLinkPppoeStatus.

        连接时间  # noqa: E501

        :param connected_time: The connected_time of this StatLinkPppoeStatus.  # noqa: E501
        :type: int
        """

        self._connected_time = connected_time

    @property
    def ip_address(self):
        """Gets the ip_address of this StatLinkPppoeStatus.  # noqa: E501

        IP地址  # noqa: E501

        :return: The ip_address of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this StatLinkPppoeStatus.

        IP地址  # noqa: E501

        :param ip_address: The ip_address of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def netmask(self):
        """Gets the netmask of this StatLinkPppoeStatus.  # noqa: E501

        掩码  # noqa: E501

        :return: The netmask of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this StatLinkPppoeStatus.

        掩码  # noqa: E501

        :param netmask: The netmask of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def gateway(self):
        """Gets the gateway of this StatLinkPppoeStatus.  # noqa: E501

        网关IP  # noqa: E501

        :return: The gateway of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this StatLinkPppoeStatus.

        网关IP  # noqa: E501

        :param gateway: The gateway of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def dns_server_1(self):
        """Gets the dns_server_1 of this StatLinkPppoeStatus.  # noqa: E501

        DNS服务器地址  # noqa: E501

        :return: The dns_server_1 of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._dns_server_1

    @dns_server_1.setter
    def dns_server_1(self, dns_server_1):
        """Sets the dns_server_1 of this StatLinkPppoeStatus.

        DNS服务器地址  # noqa: E501

        :param dns_server_1: The dns_server_1 of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._dns_server_1 = dns_server_1

    @property
    def dns_server_2(self):
        """Gets the dns_server_2 of this StatLinkPppoeStatus.  # noqa: E501

        DNS服务器地址  # noqa: E501

        :return: The dns_server_2 of this StatLinkPppoeStatus.  # noqa: E501
        :rtype: str
        """
        return self._dns_server_2

    @dns_server_2.setter
    def dns_server_2(self, dns_server_2):
        """Sets the dns_server_2 of this StatLinkPppoeStatus.

        DNS服务器地址  # noqa: E501

        :param dns_server_2: The dns_server_2 of this StatLinkPppoeStatus.  # noqa: E501
        :type: str
        """

        self._dns_server_2 = dns_server_2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatLinkPppoeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatLinkPppoeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
