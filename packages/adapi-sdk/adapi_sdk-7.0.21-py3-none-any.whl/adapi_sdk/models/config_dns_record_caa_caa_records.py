# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsRecordCaaCaaRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flags': 'int',
        'tag': 'str',
        'value': 'str'
    }

    attribute_map = {
        'flags': 'flags',
        'tag': 'tag',
        'value': 'value'
    }

    def __init__(self, flags=None, tag='issue', value=''):  # noqa: E501
        """ConfigDnsRecordCaaCaaRecords - a model defined in Swagger"""  # noqa: E501

        self._flags = None
        self._tag = None
        self._value = None
        self.discriminator = None

        self.flags = flags
        self.tag = tag
        if value is not None:
            self.value = value

    @property
    def flags(self):
        """Gets the flags of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501

        标志，校验格式为8位无符号整数，输入范围为[0,255]  # noqa: E501

        :return: The flags of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ConfigDnsRecordCaaCaaRecords.

        标志，校验格式为8位无符号整数，输入范围为[0,255]  # noqa: E501

        :param flags: The flags of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :type: int
        """
        if flags is None:
            raise ValueError("Invalid value for `flags`, must not be `None`")  # noqa: E501
        if flags is not None and flags > 255:  # noqa: E501
            raise ValueError("Invalid value for `flags`, must be a value less than or equal to `255`")  # noqa: E501
        if flags is not None and flags < 0:  # noqa: E501
            raise ValueError("Invalid value for `flags`, must be a value greater than or equal to `0`")  # noqa: E501

        self._flags = flags

    @property
    def tag(self):
        """Gets the tag of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501

        属性，校验格式为string  # noqa: E501

        :return: The tag of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ConfigDnsRecordCaaCaaRecords.

        属性，校验格式为string  # noqa: E501

        :param tag: The tag of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def value(self):
        """Gets the value of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501

        关联值，校验格式为string，最大长度4096，可为空  # noqa: E501

        :return: The value of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigDnsRecordCaaCaaRecords.

        关联值，校验格式为string，最大长度4096，可为空  # noqa: E501

        :param value: The value of this ConfigDnsRecordCaaCaaRecords.  # noqa: E501
        :type: str
        """
        if value is not None and len(value) > 4096:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `4096`")  # noqa: E501
        if value is not None and len(value) < 0:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsRecordCaaCaaRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsRecordCaaCaaRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
