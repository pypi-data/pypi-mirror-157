# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigStrMatchComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'case_sensitive': 'str',
        'pattern': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'case_sensitive': 'case_sensitive',
        'pattern': 'pattern'
    }

    def __init__(self, mode=None, case_sensitive='DISABLE', pattern=None):  # noqa: E501
        """ConfigStrMatchComponent - a model defined in Swagger"""  # noqa: E501

        self._mode = None
        self._case_sensitive = None
        self._pattern = None
        self.discriminator = None

        self.mode = mode
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if pattern is not None:
            self.pattern = pattern

    @property
    def mode(self):
        """Gets the mode of this ConfigStrMatchComponent.  # noqa: E501

        规则匹配方式（NONE不匹配/EQUAL等于/NON-EQUAL不等于/CONTAIN包含/NON-CONTAIN不包含/CONTAIN-HEXADECIMAL十六进制方式包含/NON-CONTAIN-HEXADECIMAL十六进制方式不包含/WILDCARD通配符匹配/NON-WILDCARD通配符不匹配/REGULAR正则匹配/NON-REGULAR正则不匹配）  # noqa: E501

        :return: The mode of this ConfigStrMatchComponent.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConfigStrMatchComponent.

        规则匹配方式（NONE不匹配/EQUAL等于/NON-EQUAL不等于/CONTAIN包含/NON-CONTAIN不包含/CONTAIN-HEXADECIMAL十六进制方式包含/NON-CONTAIN-HEXADECIMAL十六进制方式不包含/WILDCARD通配符匹配/NON-WILDCARD通配符不匹配/REGULAR正则匹配/NON-REGULAR正则不匹配）  # noqa: E501

        :param mode: The mode of this ConfigStrMatchComponent.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "EQUAL", "NON-EQUAL", "CONTAIN", "NON-CONTAIN", "WILDCARD", "NON-WILDCARD", "REGULAR", "NON-REGULAR"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this ConfigStrMatchComponent.  # noqa: E501

        大小写敏感（ENABLE启用/DISABLE禁用）  # noqa: E501

        :return: The case_sensitive of this ConfigStrMatchComponent.  # noqa: E501
        :rtype: str
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this ConfigStrMatchComponent.

        大小写敏感（ENABLE启用/DISABLE禁用）  # noqa: E501

        :param case_sensitive: The case_sensitive of this ConfigStrMatchComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if case_sensitive not in allowed_values:
            raise ValueError(
                "Invalid value for `case_sensitive` ({0}), must be one of {1}"  # noqa: E501
                .format(case_sensitive, allowed_values)
            )

        self._case_sensitive = case_sensitive

    @property
    def pattern(self):
        """Gets the pattern of this ConfigStrMatchComponent.  # noqa: E501

        匹配样本  # noqa: E501

        :return: The pattern of this ConfigStrMatchComponent.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ConfigStrMatchComponent.

        匹配样本  # noqa: E501

        :param pattern: The pattern of this ConfigStrMatchComponent.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigStrMatchComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigStrMatchComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
