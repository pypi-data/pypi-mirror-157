# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_crl_crl import StatCrlCrl  # noqa: F401,E501
from adapi_sdk.models.stat_crl_update import StatCrlUpdate  # noqa: F401,E501


class StatCrl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'update': 'StatCrlUpdate',
        'crl': 'StatCrlCrl'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'update': 'update',
        'crl': 'crl'
    }

    def __init__(self, name=None, description=None, update=None, crl=None):  # noqa: E501
        """StatCrl - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._update = None
        self._crl = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if update is not None:
            self.update = update
        if crl is not None:
            self.crl = crl

    @property
    def name(self):
        """Gets the name of this StatCrl.  # noqa: E501

        CRL名称  # noqa: E501

        :return: The name of this StatCrl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatCrl.

        CRL名称  # noqa: E501

        :param name: The name of this StatCrl.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this StatCrl.  # noqa: E501

        CRL描述信息  # noqa: E501

        :return: The description of this StatCrl.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatCrl.

        CRL描述信息  # noqa: E501

        :param description: The description of this StatCrl.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def update(self):
        """Gets the update of this StatCrl.  # noqa: E501


        :return: The update of this StatCrl.  # noqa: E501
        :rtype: StatCrlUpdate
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this StatCrl.


        :param update: The update of this StatCrl.  # noqa: E501
        :type: StatCrlUpdate
        """

        self._update = update

    @property
    def crl(self):
        """Gets the crl of this StatCrl.  # noqa: E501


        :return: The crl of this StatCrl.  # noqa: E501
        :rtype: StatCrlCrl
        """
        return self._crl

    @crl.setter
    def crl(self, crl):
        """Sets the crl of this StatCrl.


        :param crl: The crl of this StatCrl.  # noqa: E501
        :type: StatCrlCrl
        """

        self._crl = crl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatCrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatCrl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
