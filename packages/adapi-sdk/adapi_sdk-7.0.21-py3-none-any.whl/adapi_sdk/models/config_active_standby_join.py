# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_active_standby_join_alternate_ha import ConfigActiveStandbyJoinAlternateHa  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_join_ha import ConfigActiveStandbyJoinHa  # noqa: F401,E501


class ConfigActiveStandbyJoin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'ha': 'ConfigActiveStandbyJoinHa',
        'alternate_ha': 'ConfigActiveStandbyJoinAlternateHa'
    }

    attribute_map = {
        'host_name': 'host_name',
        'ha': 'ha',
        'alternate_ha': 'alternate_ha'
    }

    def __init__(self, host_name=None, ha=None, alternate_ha=None):  # noqa: E501
        """ConfigActiveStandbyJoin - a model defined in Swagger"""  # noqa: E501

        self._host_name = None
        self._ha = None
        self._alternate_ha = None
        self.discriminator = None

        if host_name is not None:
            self.host_name = host_name
        if ha is not None:
            self.ha = ha
        if alternate_ha is not None:
            self.alternate_ha = alternate_ha

    @property
    def host_name(self):
        """Gets the host_name of this ConfigActiveStandbyJoin.  # noqa: E501

        设备名称  # noqa: E501

        :return: The host_name of this ConfigActiveStandbyJoin.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ConfigActiveStandbyJoin.

        设备名称  # noqa: E501

        :param host_name: The host_name of this ConfigActiveStandbyJoin.  # noqa: E501
        :type: str
        """
        if host_name is not None and len(host_name) > 63:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `63`")  # noqa: E501
        if host_name is not None and len(host_name) < 1:
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._host_name = host_name

    @property
    def ha(self):
        """Gets the ha of this ConfigActiveStandbyJoin.  # noqa: E501


        :return: The ha of this ConfigActiveStandbyJoin.  # noqa: E501
        :rtype: ConfigActiveStandbyJoinHa
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this ConfigActiveStandbyJoin.


        :param ha: The ha of this ConfigActiveStandbyJoin.  # noqa: E501
        :type: ConfigActiveStandbyJoinHa
        """

        self._ha = ha

    @property
    def alternate_ha(self):
        """Gets the alternate_ha of this ConfigActiveStandbyJoin.  # noqa: E501


        :return: The alternate_ha of this ConfigActiveStandbyJoin.  # noqa: E501
        :rtype: ConfigActiveStandbyJoinAlternateHa
        """
        return self._alternate_ha

    @alternate_ha.setter
    def alternate_ha(self, alternate_ha):
        """Sets the alternate_ha of this ConfigActiveStandbyJoin.


        :param alternate_ha: The alternate_ha of this ConfigActiveStandbyJoin.  # noqa: E501
        :type: ConfigActiveStandbyJoinAlternateHa
        """

        self._alternate_ha = alternate_ha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigActiveStandbyJoin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigActiveStandbyJoin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
