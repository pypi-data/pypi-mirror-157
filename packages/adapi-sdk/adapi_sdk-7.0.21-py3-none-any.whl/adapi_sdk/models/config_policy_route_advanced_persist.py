# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPolicyRouteAdvancedPersist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet_mask': 'str',
        'v6_prefix_length': 'int',
        'timeout': 'int'
    }

    attribute_map = {
        'subnet_mask': 'subnet_mask',
        'v6_prefix_length': 'v6_prefix_length',
        'timeout': 'timeout'
    }

    def __init__(self, subnet_mask='255.255.255.0', v6_prefix_length=None, timeout=None):  # noqa: E501
        """ConfigPolicyRouteAdvancedPersist - a model defined in Swagger"""  # noqa: E501

        self._subnet_mask = None
        self._v6_prefix_length = None
        self._timeout = None
        self.discriminator = None

        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if v6_prefix_length is not None:
            self.v6_prefix_length = v6_prefix_length
        if timeout is not None:
            self.timeout = timeout

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501

        子网掩码  # noqa: E501

        :return: The subnet_mask of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this ConfigPolicyRouteAdvancedPersist.

        子网掩码  # noqa: E501

        :param subnet_mask: The subnet_mask of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def v6_prefix_length(self):
        """Gets the v6_prefix_length of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501

        ipv6掩码长度  # noqa: E501

        :return: The v6_prefix_length of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :rtype: int
        """
        return self._v6_prefix_length

    @v6_prefix_length.setter
    def v6_prefix_length(self, v6_prefix_length):
        """Sets the v6_prefix_length of this ConfigPolicyRouteAdvancedPersist.

        ipv6掩码长度  # noqa: E501

        :param v6_prefix_length: The v6_prefix_length of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :type: int
        """
        if v6_prefix_length is not None and v6_prefix_length > 128:  # noqa: E501
            raise ValueError("Invalid value for `v6_prefix_length`, must be a value less than or equal to `128`")  # noqa: E501
        if v6_prefix_length is not None and v6_prefix_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `v6_prefix_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._v6_prefix_length = v6_prefix_length

    @property
    def timeout(self):
        """Gets the timeout of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501

        超时时间  # noqa: E501

        :return: The timeout of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigPolicyRouteAdvancedPersist.

        超时时间  # noqa: E501

        :param timeout: The timeout of this ConfigPolicyRouteAdvancedPersist.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPolicyRouteAdvancedPersist, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPolicyRouteAdvancedPersist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
