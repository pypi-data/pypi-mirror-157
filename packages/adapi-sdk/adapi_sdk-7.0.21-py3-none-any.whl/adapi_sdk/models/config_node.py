# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'address': 'str',
        'port': 'int',
        'state': 'str',
        'weight': 'int',
        'priority_level': 'int',
        'connection_limit': 'int',
        'connection_rate_limit': 'int',
        'request_rate_limit': 'int',
        'cookie': 'int',
        'node_variable': 'str',
        'inherit_pool_monitor': 'str',
        'service_monitors': 'list[str]',
        'available_requirement': 'int',
        'associated_domain': 'str',
        'recover_by_manual': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'address': 'address',
        'port': 'port',
        'state': 'state',
        'weight': 'weight',
        'priority_level': 'priority_level',
        'connection_limit': 'connection_limit',
        'connection_rate_limit': 'connection_rate_limit',
        'request_rate_limit': 'request_rate_limit',
        'cookie': 'cookie',
        'node_variable': 'node_variable',
        'inherit_pool_monitor': 'inherit_pool_monitor',
        'service_monitors': 'service_monitors',
        'available_requirement': 'available_requirement',
        'associated_domain': 'associated_domain',
        'recover_by_manual': 'recover_by_manual'
    }

    def __init__(self, name=None, description=None, type='ADDRESS', address=None, port=None, state='ENABLE', weight=None, priority_level=None, connection_limit=None, connection_rate_limit=None, request_rate_limit=None, cookie=None, node_variable=None, inherit_pool_monitor='ENABLE', service_monitors=None, available_requirement=None, associated_domain=None, recover_by_manual='DISABLE'):  # noqa: E501
        """ConfigNode - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._address = None
        self._port = None
        self._state = None
        self._weight = None
        self._priority_level = None
        self._connection_limit = None
        self._connection_rate_limit = None
        self._request_rate_limit = None
        self._cookie = None
        self._node_variable = None
        self._inherit_pool_monitor = None
        self._service_monitors = None
        self._available_requirement = None
        self._associated_domain = None
        self._recover_by_manual = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        self.address = address
        if port is not None:
            self.port = port
        if state is not None:
            self.state = state
        if weight is not None:
            self.weight = weight
        if priority_level is not None:
            self.priority_level = priority_level
        if connection_limit is not None:
            self.connection_limit = connection_limit
        if connection_rate_limit is not None:
            self.connection_rate_limit = connection_rate_limit
        if request_rate_limit is not None:
            self.request_rate_limit = request_rate_limit
        if cookie is not None:
            self.cookie = cookie
        if node_variable is not None:
            self.node_variable = node_variable
        if inherit_pool_monitor is not None:
            self.inherit_pool_monitor = inherit_pool_monitor
        if service_monitors is not None:
            self.service_monitors = service_monitors
        if available_requirement is not None:
            self.available_requirement = available_requirement
        if associated_domain is not None:
            self.associated_domain = associated_domain
        if recover_by_manual is not None:
            self.recover_by_manual = recover_by_manual

    @property
    def name(self):
        """Gets the name of this ConfigNode.  # noqa: E501

        指定节点的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigNode.

        指定节点的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigNode.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigNode.  # noqa: E501

        用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigNode.

        用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigNode.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigNode.  # noqa: E501

        指定节点的类型，address表示ip地址，domain表示域名，默认为address  # noqa: E501

        :return: The type of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigNode.

        指定节点的类型，address表示ip地址，domain表示域名，默认为address  # noqa: E501

        :param type: The type of this ConfigNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADDRESS", "DOMAIN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def address(self):
        """Gets the address of this ConfigNode.  # noqa: E501

        指定节点的地址，根据type字段确定是ip地址还是域名，当为ip地址时支持ip范围  # noqa: E501

        :return: The address of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigNode.

        指定节点的地址，根据type字段确定是ip地址还是域名，当为ip地址时支持ip范围  # noqa: E501

        :param address: The address of this ConfigNode.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if address is not None and len(address) > 255:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")  # noqa: E501
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this ConfigNode.  # noqa: E501

        指定节点的端口，取值范围为[0, 65535],默认为0  # noqa: E501

        :return: The port of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigNode.

        指定节点的端口，取值范围为[0, 65535],默认为0  # noqa: E501

        :param port: The port of this ConfigNode.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def state(self):
        """Gets the state of this ConfigNode.  # noqa: E501

        指定节点的状态，enable表示启用状态，disable表示平滑退出，offline表示禁用/软关机状态，默认为enable  # noqa: E501

        :return: The state of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigNode.

        指定节点的状态，enable表示启用状态，disable表示平滑退出，offline表示禁用/软关机状态，默认为enable  # noqa: E501

        :param state: The state of this ConfigNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE", "OFFLINE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def weight(self):
        """Gets the weight of this ConfigNode.  # noqa: E501

        指定节点的权重，取值范围为[1,100],默认为10  # noqa: E501

        :return: The weight of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigNode.

        指定节点的权重，取值范围为[1,100],默认为10  # noqa: E501

        :param weight: The weight of this ConfigNode.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._weight = weight

    @property
    def priority_level(self):
        """Gets the priority_level of this ConfigNode.  # noqa: E501

        指定节点的优先级，取值范围为[1,100]，默认为10  # noqa: E501

        :return: The priority_level of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._priority_level

    @priority_level.setter
    def priority_level(self, priority_level):
        """Sets the priority_level of this ConfigNode.

        指定节点的优先级，取值范围为[1,100]，默认为10  # noqa: E501

        :param priority_level: The priority_level of this ConfigNode.  # noqa: E501
        :type: int
        """
        if priority_level is not None and priority_level > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority_level`, must be a value less than or equal to `100`")  # noqa: E501
        if priority_level is not None and priority_level < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority_level`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority_level = priority_level

    @property
    def connection_limit(self):
        """Gets the connection_limit of this ConfigNode.  # noqa: E501

        限制并发连接数大小，取值范围为[0, 100000000],默认为0，表示不限制  # noqa: E501

        :return: The connection_limit of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._connection_limit

    @connection_limit.setter
    def connection_limit(self, connection_limit):
        """Sets the connection_limit of this ConfigNode.

        限制并发连接数大小，取值范围为[0, 100000000],默认为0，表示不限制  # noqa: E501

        :param connection_limit: The connection_limit of this ConfigNode.  # noqa: E501
        :type: int
        """
        if connection_limit is not None and connection_limit > 100000000:  # noqa: E501
            raise ValueError("Invalid value for `connection_limit`, must be a value less than or equal to `100000000`")  # noqa: E501
        if connection_limit is not None and connection_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `connection_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_limit = connection_limit

    @property
    def connection_rate_limit(self):
        """Gets the connection_rate_limit of this ConfigNode.  # noqa: E501

        限制新建连接数大小，取值范围为[0, 100000000],默认为0，表示不限制  # noqa: E501

        :return: The connection_rate_limit of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._connection_rate_limit

    @connection_rate_limit.setter
    def connection_rate_limit(self, connection_rate_limit):
        """Sets the connection_rate_limit of this ConfigNode.

        限制新建连接数大小，取值范围为[0, 100000000],默认为0，表示不限制  # noqa: E501

        :param connection_rate_limit: The connection_rate_limit of this ConfigNode.  # noqa: E501
        :type: int
        """
        if connection_rate_limit is not None and connection_rate_limit > 100000000:  # noqa: E501
            raise ValueError("Invalid value for `connection_rate_limit`, must be a value less than or equal to `100000000`")  # noqa: E501
        if connection_rate_limit is not None and connection_rate_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `connection_rate_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_rate_limit = connection_rate_limit

    @property
    def request_rate_limit(self):
        """Gets the request_rate_limit of this ConfigNode.  # noqa: E501

        限制请求速率大小，取值范围为[0, 10000000],默认为0，表示不限制  # noqa: E501

        :return: The request_rate_limit of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._request_rate_limit

    @request_rate_limit.setter
    def request_rate_limit(self, request_rate_limit):
        """Sets the request_rate_limit of this ConfigNode.

        限制请求速率大小，取值范围为[0, 10000000],默认为0，表示不限制  # noqa: E501

        :param request_rate_limit: The request_rate_limit of this ConfigNode.  # noqa: E501
        :type: int
        """
        if request_rate_limit is not None and request_rate_limit > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_limit`, must be a value less than or equal to `1000000`")  # noqa: E501
        if request_rate_limit is not None and request_rate_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `request_rate_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._request_rate_limit = request_rate_limit

    @property
    def cookie(self):
        """Gets the cookie of this ConfigNode.  # noqa: E501

        指定节点的cookie值，取值范围为[10000000,99999999],默认系统随机生成  # noqa: E501

        :return: The cookie of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this ConfigNode.

        指定节点的cookie值，取值范围为[10000000,99999999],默认系统随机生成  # noqa: E501

        :param cookie: The cookie of this ConfigNode.  # noqa: E501
        :type: int
        """
        if cookie is not None and cookie > 99999999:  # noqa: E501
            raise ValueError("Invalid value for `cookie`, must be a value less than or equal to `99999999`")  # noqa: E501
        if cookie is not None and cookie < 10000000:  # noqa: E501
            raise ValueError("Invalid value for `cookie`, must be a value greater than or equal to `10000000`")  # noqa: E501

        self._cookie = cookie

    @property
    def node_variable(self):
        """Gets the node_variable of this ConfigNode.  # noqa: E501

        指定节点的关联变量  # noqa: E501

        :return: The node_variable of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._node_variable

    @node_variable.setter
    def node_variable(self, node_variable):
        """Sets the node_variable of this ConfigNode.

        指定节点的关联变量  # noqa: E501

        :param node_variable: The node_variable of this ConfigNode.  # noqa: E501
        :type: str
        """
        if node_variable is not None and len(node_variable) > 63:
            raise ValueError("Invalid value for `node_variable`, length must be less than or equal to `63`")  # noqa: E501

        self._node_variable = node_variable

    @property
    def inherit_pool_monitor(self):
        """Gets the inherit_pool_monitor of this ConfigNode.  # noqa: E501

        指定节点健康检查是否继承节点池的配置，enable表示继承，disable表示使用独立监视器  # noqa: E501

        :return: The inherit_pool_monitor of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._inherit_pool_monitor

    @inherit_pool_monitor.setter
    def inherit_pool_monitor(self, inherit_pool_monitor):
        """Sets the inherit_pool_monitor of this ConfigNode.

        指定节点健康检查是否继承节点池的配置，enable表示继承，disable表示使用独立监视器  # noqa: E501

        :param inherit_pool_monitor: The inherit_pool_monitor of this ConfigNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if inherit_pool_monitor not in allowed_values:
            raise ValueError(
                "Invalid value for `inherit_pool_monitor` ({0}), must be one of {1}"  # noqa: E501
                .format(inherit_pool_monitor, allowed_values)
            )

        self._inherit_pool_monitor = inherit_pool_monitor

    @property
    def service_monitors(self):
        """Gets the service_monitors of this ConfigNode.  # noqa: E501

        引用节点健康检查方法列表，为对象参数列表，支持add/delete指令添加/删除健康检查方法，默认为空,表示节点永远在线  # noqa: E501

        :return: The service_monitors of this ConfigNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_monitors

    @service_monitors.setter
    def service_monitors(self, service_monitors):
        """Sets the service_monitors of this ConfigNode.

        引用节点健康检查方法列表，为对象参数列表，支持add/delete指令添加/删除健康检查方法，默认为空,表示节点永远在线  # noqa: E501

        :param service_monitors: The service_monitors of this ConfigNode.  # noqa: E501
        :type: list[str]
        """

        self._service_monitors = service_monitors

    @property
    def available_requirement(self):
        """Gets the available_requirement of this ConfigNode.  # noqa: E501

        节点有效条件，健康检查方法有效数不足该数量时判定节点故障，0表示全部，默认为0  # noqa: E501

        :return: The available_requirement of this ConfigNode.  # noqa: E501
        :rtype: int
        """
        return self._available_requirement

    @available_requirement.setter
    def available_requirement(self, available_requirement):
        """Sets the available_requirement of this ConfigNode.

        节点有效条件，健康检查方法有效数不足该数量时判定节点故障，0表示全部，默认为0  # noqa: E501

        :param available_requirement: The available_requirement of this ConfigNode.  # noqa: E501
        :type: int
        """
        if available_requirement is not None and available_requirement < 0:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value greater than or equal to `0`")  # noqa: E501

        self._available_requirement = available_requirement

    @property
    def associated_domain(self):
        """Gets the associated_domain of this ConfigNode.  # noqa: E501

        关联域名节点信息  # noqa: E501

        :return: The associated_domain of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._associated_domain

    @associated_domain.setter
    def associated_domain(self, associated_domain):
        """Sets the associated_domain of this ConfigNode.

        关联域名节点信息  # noqa: E501

        :param associated_domain: The associated_domain of this ConfigNode.  # noqa: E501
        :type: str
        """

        self._associated_domain = associated_domain

    @property
    def recover_by_manual(self):
        """Gets the recover_by_manual of this ConfigNode.  # noqa: E501

        手动恢复  # noqa: E501

        :return: The recover_by_manual of this ConfigNode.  # noqa: E501
        :rtype: str
        """
        return self._recover_by_manual

    @recover_by_manual.setter
    def recover_by_manual(self, recover_by_manual):
        """Sets the recover_by_manual of this ConfigNode.

        手动恢复  # noqa: E501

        :param recover_by_manual: The recover_by_manual of this ConfigNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if recover_by_manual not in allowed_values:
            raise ValueError(
                "Invalid value for `recover_by_manual` ({0}), must be one of {1}"  # noqa: E501
                .format(recover_by_manual, allowed_values)
            )

        self._recover_by_manual = recover_by_manual

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
