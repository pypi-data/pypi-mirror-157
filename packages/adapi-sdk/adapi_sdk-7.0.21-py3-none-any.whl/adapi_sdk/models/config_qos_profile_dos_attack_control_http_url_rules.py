# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigQosProfileDosAttackControlHttpUrlRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_pattern_wildcard': 'str',
        'url_pattern_case_sensitive': 'str',
        'action': 'str',
        'http_response': 'str'
    }

    attribute_map = {
        'url_pattern_wildcard': 'url_pattern_wildcard',
        'url_pattern_case_sensitive': 'url_pattern_case_sensitive',
        'action': 'action',
        'http_response': 'http_response'
    }

    def __init__(self, url_pattern_wildcard=None, url_pattern_case_sensitive='DISABLE', action='TCP-FIN', http_response=None):  # noqa: E501
        """ConfigQosProfileDosAttackControlHttpUrlRules - a model defined in Swagger"""  # noqa: E501

        self._url_pattern_wildcard = None
        self._url_pattern_case_sensitive = None
        self._action = None
        self._http_response = None
        self.discriminator = None

        self.url_pattern_wildcard = url_pattern_wildcard
        if url_pattern_case_sensitive is not None:
            self.url_pattern_case_sensitive = url_pattern_case_sensitive
        self.action = action
        if http_response is not None:
            self.http_response = http_response

    @property
    def url_pattern_wildcard(self):
        """Gets the url_pattern_wildcard of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501

        可选参数;指定防护url  # noqa: E501

        :return: The url_pattern_wildcard of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._url_pattern_wildcard

    @url_pattern_wildcard.setter
    def url_pattern_wildcard(self, url_pattern_wildcard):
        """Sets the url_pattern_wildcard of this ConfigQosProfileDosAttackControlHttpUrlRules.

        可选参数;指定防护url  # noqa: E501

        :param url_pattern_wildcard: The url_pattern_wildcard of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :type: str
        """
        if url_pattern_wildcard is None:
            raise ValueError("Invalid value for `url_pattern_wildcard`, must not be `None`")  # noqa: E501
        if url_pattern_wildcard is not None and len(url_pattern_wildcard) > 255:
            raise ValueError("Invalid value for `url_pattern_wildcard`, length must be less than or equal to `255`")  # noqa: E501
        if url_pattern_wildcard is not None and len(url_pattern_wildcard) < 1:
            raise ValueError("Invalid value for `url_pattern_wildcard`, length must be greater than or equal to `1`")  # noqa: E501

        self._url_pattern_wildcard = url_pattern_wildcard

    @property
    def url_pattern_case_sensitive(self):
        """Gets the url_pattern_case_sensitive of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501

        可选参数;指定是否区分大小写,enable表示启用,disable表示禁用；默认disable  # noqa: E501

        :return: The url_pattern_case_sensitive of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._url_pattern_case_sensitive

    @url_pattern_case_sensitive.setter
    def url_pattern_case_sensitive(self, url_pattern_case_sensitive):
        """Sets the url_pattern_case_sensitive of this ConfigQosProfileDosAttackControlHttpUrlRules.

        可选参数;指定是否区分大小写,enable表示启用,disable表示禁用；默认disable  # noqa: E501

        :param url_pattern_case_sensitive: The url_pattern_case_sensitive of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if url_pattern_case_sensitive not in allowed_values:
            raise ValueError(
                "Invalid value for `url_pattern_case_sensitive` ({0}), must be one of {1}"  # noqa: E501
                .format(url_pattern_case_sensitive, allowed_values)
            )

        self._url_pattern_case_sensitive = url_pattern_case_sensitive

    @property
    def action(self):
        """Gets the action of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501

        可选参数;指定防护动作:tcp-fin表示FIN关闭连接;tcp-rst表示RST方式关闭连接;http-response表示返回自定义页面  # noqa: E501

        :return: The action of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigQosProfileDosAttackControlHttpUrlRules.

        可选参数;指定防护动作:tcp-fin表示FIN关闭连接;tcp-rst表示RST方式关闭连接;http-response表示返回自定义页面  # noqa: E501

        :param action: The action of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["TCP-FIN", "TCP-RST", "HTTP-RESPONSE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def http_response(self):
        """Gets the http_response of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501

        可选参数;指定自定义内容的名称,当action为http-response时必选  # noqa: E501

        :return: The http_response of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :rtype: str
        """
        return self._http_response

    @http_response.setter
    def http_response(self, http_response):
        """Sets the http_response of this ConfigQosProfileDosAttackControlHttpUrlRules.

        可选参数;指定自定义内容的名称,当action为http-response时必选  # noqa: E501

        :param http_response: The http_response of this ConfigQosProfileDosAttackControlHttpUrlRules.  # noqa: E501
        :type: str
        """

        self._http_response = http_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfileDosAttackControlHttpUrlRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfileDosAttackControlHttpUrlRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
