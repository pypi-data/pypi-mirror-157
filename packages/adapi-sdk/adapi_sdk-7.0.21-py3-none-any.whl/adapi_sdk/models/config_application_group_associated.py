# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigApplicationGroupAssociated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'virtual_service_combinations': 'list[str]',
        'arp_combinations': 'list[str]',
        'snat_combinations': 'list[str]',
        'dnats': 'list[str]',
        'float_ips': 'list[str]'
    }

    attribute_map = {
        'virtual_service_combinations': 'virtual_service_combinations',
        'arp_combinations': 'arp_combinations',
        'snat_combinations': 'snat_combinations',
        'dnats': 'dnats',
        'float_ips': 'float_ips'
    }

    def __init__(self, virtual_service_combinations=None, arp_combinations=None, snat_combinations=None, dnats=None, float_ips=None):  # noqa: E501
        """ConfigApplicationGroupAssociated - a model defined in Swagger"""  # noqa: E501

        self._virtual_service_combinations = None
        self._arp_combinations = None
        self._snat_combinations = None
        self._dnats = None
        self._float_ips = None
        self.discriminator = None

        if virtual_service_combinations is not None:
            self.virtual_service_combinations = virtual_service_combinations
        if arp_combinations is not None:
            self.arp_combinations = arp_combinations
        if snat_combinations is not None:
            self.snat_combinations = snat_combinations
        if dnats is not None:
            self.dnats = dnats
        if float_ips is not None:
            self.float_ips = float_ips

    @property
    def virtual_service_combinations(self):
        """Gets the virtual_service_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501

        本应用组关联的虚拟服务关联组列表  # noqa: E501

        :return: The virtual_service_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_service_combinations

    @virtual_service_combinations.setter
    def virtual_service_combinations(self, virtual_service_combinations):
        """Sets the virtual_service_combinations of this ConfigApplicationGroupAssociated.

        本应用组关联的虚拟服务关联组列表  # noqa: E501

        :param virtual_service_combinations: The virtual_service_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :type: list[str]
        """

        self._virtual_service_combinations = virtual_service_combinations

    @property
    def arp_combinations(self):
        """Gets the arp_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501

        本应用组关联的ARP代理关联组列表  # noqa: E501

        :return: The arp_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :rtype: list[str]
        """
        return self._arp_combinations

    @arp_combinations.setter
    def arp_combinations(self, arp_combinations):
        """Sets the arp_combinations of this ConfigApplicationGroupAssociated.

        本应用组关联的ARP代理关联组列表  # noqa: E501

        :param arp_combinations: The arp_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :type: list[str]
        """

        self._arp_combinations = arp_combinations

    @property
    def snat_combinations(self):
        """Gets the snat_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501

        本应用组关联的源地址转换关联组列表  # noqa: E501

        :return: The snat_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :rtype: list[str]
        """
        return self._snat_combinations

    @snat_combinations.setter
    def snat_combinations(self, snat_combinations):
        """Sets the snat_combinations of this ConfigApplicationGroupAssociated.

        本应用组关联的源地址转换关联组列表  # noqa: E501

        :param snat_combinations: The snat_combinations of this ConfigApplicationGroupAssociated.  # noqa: E501
        :type: list[str]
        """

        self._snat_combinations = snat_combinations

    @property
    def dnats(self):
        """Gets the dnats of this ConfigApplicationGroupAssociated.  # noqa: E501

        本应用组关联的dnat列表  # noqa: E501

        :return: The dnats of this ConfigApplicationGroupAssociated.  # noqa: E501
        :rtype: list[str]
        """
        return self._dnats

    @dnats.setter
    def dnats(self, dnats):
        """Sets the dnats of this ConfigApplicationGroupAssociated.

        本应用组关联的dnat列表  # noqa: E501

        :param dnats: The dnats of this ConfigApplicationGroupAssociated.  # noqa: E501
        :type: list[str]
        """

        self._dnats = dnats

    @property
    def float_ips(self):
        """Gets the float_ips of this ConfigApplicationGroupAssociated.  # noqa: E501

        本应用组关联的浮动IP列表  # noqa: E501

        :return: The float_ips of this ConfigApplicationGroupAssociated.  # noqa: E501
        :rtype: list[str]
        """
        return self._float_ips

    @float_ips.setter
    def float_ips(self, float_ips):
        """Sets the float_ips of this ConfigApplicationGroupAssociated.

        本应用组关联的浮动IP列表  # noqa: E501

        :param float_ips: The float_ips of this ConfigApplicationGroupAssociated.  # noqa: E501
        :type: list[str]
        """

        self._float_ips = float_ips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigApplicationGroupAssociated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigApplicationGroupAssociated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
