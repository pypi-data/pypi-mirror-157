# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPolicyRouteAdvancedDetectRtt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'str',
        'result_cache_subnet_mask': 'str',
        'ipv6_result_cache_prefix_length': 'int',
        'result_cache_timeout': 'int'
    }

    attribute_map = {
        'method': 'method',
        'result_cache_subnet_mask': 'result_cache_subnet_mask',
        'ipv6_result_cache_prefix_length': 'ipv6_result_cache_prefix_length',
        'result_cache_timeout': 'result_cache_timeout'
    }

    def __init__(self, method='ICMP', result_cache_subnet_mask='255.255.255.0', ipv6_result_cache_prefix_length=None, result_cache_timeout=None):  # noqa: E501
        """ConfigPolicyRouteAdvancedDetectRtt - a model defined in Swagger"""  # noqa: E501

        self._method = None
        self._result_cache_subnet_mask = None
        self._ipv6_result_cache_prefix_length = None
        self._result_cache_timeout = None
        self.discriminator = None

        if method is not None:
            self.method = method
        if result_cache_subnet_mask is not None:
            self.result_cache_subnet_mask = result_cache_subnet_mask
        if ipv6_result_cache_prefix_length is not None:
            self.ipv6_result_cache_prefix_length = ipv6_result_cache_prefix_length
        if result_cache_timeout is not None:
            self.result_cache_timeout = result_cache_timeout

    @property
    def method(self):
        """Gets the method of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501

        其他协议探测方法  # noqa: E501

        :return: The method of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigPolicyRouteAdvancedDetectRtt.

        其他协议探测方法  # noqa: E501

        :param method: The method of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :type: str
        """
        allowed_values = ["ICMP", "UDP"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def result_cache_subnet_mask(self):
        """Gets the result_cache_subnet_mask of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501

        缓存子网掩码  # noqa: E501

        :return: The result_cache_subnet_mask of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :rtype: str
        """
        return self._result_cache_subnet_mask

    @result_cache_subnet_mask.setter
    def result_cache_subnet_mask(self, result_cache_subnet_mask):
        """Sets the result_cache_subnet_mask of this ConfigPolicyRouteAdvancedDetectRtt.

        缓存子网掩码  # noqa: E501

        :param result_cache_subnet_mask: The result_cache_subnet_mask of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :type: str
        """

        self._result_cache_subnet_mask = result_cache_subnet_mask

    @property
    def ipv6_result_cache_prefix_length(self):
        """Gets the ipv6_result_cache_prefix_length of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501

        IPv6缓存前缀长度  # noqa: E501

        :return: The ipv6_result_cache_prefix_length of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_result_cache_prefix_length

    @ipv6_result_cache_prefix_length.setter
    def ipv6_result_cache_prefix_length(self, ipv6_result_cache_prefix_length):
        """Sets the ipv6_result_cache_prefix_length of this ConfigPolicyRouteAdvancedDetectRtt.

        IPv6缓存前缀长度  # noqa: E501

        :param ipv6_result_cache_prefix_length: The ipv6_result_cache_prefix_length of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :type: int
        """
        if ipv6_result_cache_prefix_length is not None and ipv6_result_cache_prefix_length > 128:  # noqa: E501
            raise ValueError("Invalid value for `ipv6_result_cache_prefix_length`, must be a value less than or equal to `128`")  # noqa: E501
        if ipv6_result_cache_prefix_length is not None and ipv6_result_cache_prefix_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `ipv6_result_cache_prefix_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ipv6_result_cache_prefix_length = ipv6_result_cache_prefix_length

    @property
    def result_cache_timeout(self):
        """Gets the result_cache_timeout of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501

        缓存超时时间  # noqa: E501

        :return: The result_cache_timeout of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :rtype: int
        """
        return self._result_cache_timeout

    @result_cache_timeout.setter
    def result_cache_timeout(self, result_cache_timeout):
        """Sets the result_cache_timeout of this ConfigPolicyRouteAdvancedDetectRtt.

        缓存超时时间  # noqa: E501

        :param result_cache_timeout: The result_cache_timeout of this ConfigPolicyRouteAdvancedDetectRtt.  # noqa: E501
        :type: int
        """
        if result_cache_timeout is not None and result_cache_timeout > 86400:  # noqa: E501
            raise ValueError("Invalid value for `result_cache_timeout`, must be a value less than or equal to `86400`")  # noqa: E501
        if result_cache_timeout is not None and result_cache_timeout < 10:  # noqa: E501
            raise ValueError("Invalid value for `result_cache_timeout`, must be a value greater than or equal to `10`")  # noqa: E501

        self._result_cache_timeout = result_cache_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPolicyRouteAdvancedDetectRtt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPolicyRouteAdvancedDetectRtt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
