# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDnsRecordAllNaptrRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'int',
        'priority': 'int',
        'flags': 'str',
        'service': 'str',
        'regular_expression': 'str',
        'replacement': 'str'
    }

    attribute_map = {
        'order': 'order',
        'priority': 'priority',
        'flags': 'flags',
        'service': 'service',
        'regular_expression': 'regular_expression',
        'replacement': 'replacement'
    }

    def __init__(self, order=None, priority=None, flags=None, service=None, regular_expression=None, replacement=None):  # noqa: E501
        """ConfigDnsRecordAllNaptrRecords - a model defined in Swagger"""  # noqa: E501

        self._order = None
        self._priority = None
        self._flags = None
        self._service = None
        self._regular_expression = None
        self._replacement = None
        self.discriminator = None

        self.order = order
        self.priority = priority
        if flags is not None:
            self.flags = flags
        if service is not None:
            self.service = service
        if regular_expression is not None:
            self.regular_expression = regular_expression
        self.replacement = replacement

    @property
    def order(self):
        """Gets the order of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        次序，校验格式为int，取值范围[0,65535]  # noqa: E501

        :return: The order of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConfigDnsRecordAllNaptrRecords.

        次序，校验格式为int，取值范围[0,65535]  # noqa: E501

        :param order: The order of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def priority(self):
        """Gets the priority of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        优先级，校验格式为int，取值范围[0,65535]  # noqa: E501

        :return: The priority of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigDnsRecordAllNaptrRecords.

        优先级，校验格式为int，取值范围[0,65535]  # noqa: E501

        :param priority: The priority of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def flags(self):
        """Gets the flags of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        标志，可输入A-Z和0-9，校验格式为string，长度0-255，可为空  # noqa: E501

        :return: The flags of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ConfigDnsRecordAllNaptrRecords.

        标志，可输入A-Z和0-9，校验格式为string，长度0-255，可为空  # noqa: E501

        :param flags: The flags of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: str
        """

        self._flags = flags

    @property
    def service(self):
        """Gets the service of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        服务参数，校验格式为string，长度0-255，可为空。  # noqa: E501

        :return: The service of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConfigDnsRecordAllNaptrRecords.

        服务参数，校验格式为string，长度0-255，可为空。  # noqa: E501

        :param service: The service of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def regular_expression(self):
        """Gets the regular_expression of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        替换表达式，校验格式为string，长度0-255，可为空  # noqa: E501

        :return: The regular_expression of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this ConfigDnsRecordAllNaptrRecords.

        替换表达式，校验格式为string，长度0-255，可为空  # noqa: E501

        :param regular_expression: The regular_expression of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: str
        """

        self._regular_expression = regular_expression

    @property
    def replacement(self):
        """Gets the replacement of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501

        下一个查询域名，校验格式为string  # noqa: E501

        :return: The replacement of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this ConfigDnsRecordAllNaptrRecords.

        下一个查询域名，校验格式为string  # noqa: E501

        :param replacement: The replacement of this ConfigDnsRecordAllNaptrRecords.  # noqa: E501
        :type: str
        """
        if replacement is None:
            raise ValueError("Invalid value for `replacement`, must not be `None`")  # noqa: E501

        self._replacement = replacement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsRecordAllNaptrRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsRecordAllNaptrRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
