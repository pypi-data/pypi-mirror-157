# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenLogin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'client_name': 'str',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str',
        'source_address': 'str',
        'signature': 'str',
        'signature_time': 'int'
    }

    attribute_map = {
        'name': 'name',
        'client_name': 'client_name',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password',
        'source_address': 'source_address',
        'signature': 'signature',
        'signature_time': 'signature_time'
    }

    def __init__(self, name=None, client_name=None, username=None, password=None, pk_password=None, source_address=None, signature=None, signature_time=None):  # noqa: E501
        """TokenLogin - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._client_name = None
        self._username = None
        self._password = None
        self._pk_password = None
        self._source_address = None
        self._signature = None
        self._signature_time = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.client_name = client_name
        self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if source_address is not None:
            self.source_address = source_address
        if signature is not None:
            self.signature = signature
        if signature_time is not None:
            self.signature_time = signature_time

    @property
    def name(self):
        """Gets the name of this TokenLogin.  # noqa: E501

        令牌  # noqa: E501

        :return: The name of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenLogin.

        令牌  # noqa: E501

        :param name: The name of this TokenLogin.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_name(self):
        """Gets the client_name of this TokenLogin.  # noqa: E501

        主机名称  # noqa: E501

        :return: The client_name of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this TokenLogin.

        主机名称  # noqa: E501

        :param client_name: The client_name of this TokenLogin.  # noqa: E501
        :type: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501

        self._client_name = client_name

    @property
    def username(self):
        """Gets the username of this TokenLogin.  # noqa: E501

        用户名称，必须已存在  # noqa: E501

        :return: The username of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenLogin.

        用户名称，必须已存在  # noqa: E501

        :param username: The username of this TokenLogin.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this TokenLogin.  # noqa: E501

        用户密码  # noqa: E501

        :return: The password of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TokenLogin.

        用户密码  # noqa: E501

        :param password: The password of this TokenLogin.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this TokenLogin.  # noqa: E501

        用户密码的加密格式  # noqa: E501

        :return: The pk_password of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this TokenLogin.

        用户密码的加密格式  # noqa: E501

        :param pk_password: The pk_password of this TokenLogin.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def source_address(self):
        """Gets the source_address of this TokenLogin.  # noqa: E501

        源地址  # noqa: E501

        :return: The source_address of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this TokenLogin.

        源地址  # noqa: E501

        :param source_address: The source_address of this TokenLogin.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def signature(self):
        """Gets the signature of this TokenLogin.  # noqa: E501

        签名  # noqa: E501

        :return: The signature of this TokenLogin.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this TokenLogin.

        签名  # noqa: E501

        :param signature: The signature of this TokenLogin.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def signature_time(self):
        """Gets the signature_time of this TokenLogin.  # noqa: E501

        签名时间戳  # noqa: E501

        :return: The signature_time of this TokenLogin.  # noqa: E501
        :rtype: int
        """
        return self._signature_time

    @signature_time.setter
    def signature_time(self, signature_time):
        """Sets the signature_time of this TokenLogin.

        签名时间戳  # noqa: E501

        :param signature_time: The signature_time of this TokenLogin.  # noqa: E501
        :type: int
        """

        self._signature_time = signature_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenLogin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenLogin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
