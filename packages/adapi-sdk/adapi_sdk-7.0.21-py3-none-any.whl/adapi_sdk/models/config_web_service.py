# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_web_service_login_limit import ConfigWebServiceLoginLimit  # noqa: F401,E501
from adapi_sdk.models.config_web_service_login_protect import ConfigWebServiceLoginProtect  # noqa: F401,E501
from adapi_sdk.models.config_web_service_report_center import ConfigWebServiceReportCenter  # noqa: F401,E501
from adapi_sdk.models.config_web_service_restful_api import ConfigWebServiceRestfulApi  # noqa: F401,E501
from adapi_sdk.models.config_web_service_web_console import ConfigWebServiceWebConsole  # noqa: F401,E501


class ConfigWebService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_console': 'ConfigWebServiceWebConsole',
        'report_center': 'ConfigWebServiceReportCenter',
        'restful_api': 'ConfigWebServiceRestfulApi',
        'remote_maintenance': 'str',
        'intranet_maintenance': 'str',
        'multitenant': 'str',
        'multi_login': 'str',
        'login_protect': 'ConfigWebServiceLoginProtect',
        'login_limit': 'ConfigWebServiceLoginLimit'
    }

    attribute_map = {
        'web_console': 'web_console',
        'report_center': 'report_center',
        'restful_api': 'restful_api',
        'remote_maintenance': 'remote_maintenance',
        'intranet_maintenance': 'intranet_maintenance',
        'multitenant': 'multitenant',
        'multi_login': 'multi_login',
        'login_protect': 'login_protect',
        'login_limit': 'login_limit'
    }

    def __init__(self, web_console=None, report_center=None, restful_api=None, remote_maintenance='DISABLE', intranet_maintenance='ENABLE', multitenant='DISABLE', multi_login='DISABLE', login_protect=None, login_limit=None):  # noqa: E501
        """ConfigWebService - a model defined in Swagger"""  # noqa: E501

        self._web_console = None
        self._report_center = None
        self._restful_api = None
        self._remote_maintenance = None
        self._intranet_maintenance = None
        self._multitenant = None
        self._multi_login = None
        self._login_protect = None
        self._login_limit = None
        self.discriminator = None

        if web_console is not None:
            self.web_console = web_console
        if report_center is not None:
            self.report_center = report_center
        if restful_api is not None:
            self.restful_api = restful_api
        if remote_maintenance is not None:
            self.remote_maintenance = remote_maintenance
        if intranet_maintenance is not None:
            self.intranet_maintenance = intranet_maintenance
        if multitenant is not None:
            self.multitenant = multitenant
        if multi_login is not None:
            self.multi_login = multi_login
        if login_protect is not None:
            self.login_protect = login_protect
        if login_limit is not None:
            self.login_limit = login_limit

    @property
    def web_console(self):
        """Gets the web_console of this ConfigWebService.  # noqa: E501


        :return: The web_console of this ConfigWebService.  # noqa: E501
        :rtype: ConfigWebServiceWebConsole
        """
        return self._web_console

    @web_console.setter
    def web_console(self, web_console):
        """Sets the web_console of this ConfigWebService.


        :param web_console: The web_console of this ConfigWebService.  # noqa: E501
        :type: ConfigWebServiceWebConsole
        """

        self._web_console = web_console

    @property
    def report_center(self):
        """Gets the report_center of this ConfigWebService.  # noqa: E501


        :return: The report_center of this ConfigWebService.  # noqa: E501
        :rtype: ConfigWebServiceReportCenter
        """
        return self._report_center

    @report_center.setter
    def report_center(self, report_center):
        """Sets the report_center of this ConfigWebService.


        :param report_center: The report_center of this ConfigWebService.  # noqa: E501
        :type: ConfigWebServiceReportCenter
        """

        self._report_center = report_center

    @property
    def restful_api(self):
        """Gets the restful_api of this ConfigWebService.  # noqa: E501


        :return: The restful_api of this ConfigWebService.  # noqa: E501
        :rtype: ConfigWebServiceRestfulApi
        """
        return self._restful_api

    @restful_api.setter
    def restful_api(self, restful_api):
        """Sets the restful_api of this ConfigWebService.


        :param restful_api: The restful_api of this ConfigWebService.  # noqa: E501
        :type: ConfigWebServiceRestfulApi
        """

        self._restful_api = restful_api

    @property
    def remote_maintenance(self):
        """Gets the remote_maintenance of this ConfigWebService.  # noqa: E501

        远程维护  # noqa: E501

        :return: The remote_maintenance of this ConfigWebService.  # noqa: E501
        :rtype: str
        """
        return self._remote_maintenance

    @remote_maintenance.setter
    def remote_maintenance(self, remote_maintenance):
        """Sets the remote_maintenance of this ConfigWebService.

        远程维护  # noqa: E501

        :param remote_maintenance: The remote_maintenance of this ConfigWebService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if remote_maintenance not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_maintenance` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_maintenance, allowed_values)
            )

        self._remote_maintenance = remote_maintenance

    @property
    def intranet_maintenance(self):
        """Gets the intranet_maintenance of this ConfigWebService.  # noqa: E501

        内网维护  # noqa: E501

        :return: The intranet_maintenance of this ConfigWebService.  # noqa: E501
        :rtype: str
        """
        return self._intranet_maintenance

    @intranet_maintenance.setter
    def intranet_maintenance(self, intranet_maintenance):
        """Sets the intranet_maintenance of this ConfigWebService.

        内网维护  # noqa: E501

        :param intranet_maintenance: The intranet_maintenance of this ConfigWebService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if intranet_maintenance not in allowed_values:
            raise ValueError(
                "Invalid value for `intranet_maintenance` ({0}), must be one of {1}"  # noqa: E501
                .format(intranet_maintenance, allowed_values)
            )

        self._intranet_maintenance = intranet_maintenance

    @property
    def multitenant(self):
        """Gets the multitenant of this ConfigWebService.  # noqa: E501

        多租户  # noqa: E501

        :return: The multitenant of this ConfigWebService.  # noqa: E501
        :rtype: str
        """
        return self._multitenant

    @multitenant.setter
    def multitenant(self, multitenant):
        """Sets the multitenant of this ConfigWebService.

        多租户  # noqa: E501

        :param multitenant: The multitenant of this ConfigWebService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if multitenant not in allowed_values:
            raise ValueError(
                "Invalid value for `multitenant` ({0}), must be one of {1}"  # noqa: E501
                .format(multitenant, allowed_values)
            )

        self._multitenant = multitenant

    @property
    def multi_login(self):
        """Gets the multi_login of this ConfigWebService.  # noqa: E501

        单用户并发登录  # noqa: E501

        :return: The multi_login of this ConfigWebService.  # noqa: E501
        :rtype: str
        """
        return self._multi_login

    @multi_login.setter
    def multi_login(self, multi_login):
        """Sets the multi_login of this ConfigWebService.

        单用户并发登录  # noqa: E501

        :param multi_login: The multi_login of this ConfigWebService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if multi_login not in allowed_values:
            raise ValueError(
                "Invalid value for `multi_login` ({0}), must be one of {1}"  # noqa: E501
                .format(multi_login, allowed_values)
            )

        self._multi_login = multi_login

    @property
    def login_protect(self):
        """Gets the login_protect of this ConfigWebService.  # noqa: E501


        :return: The login_protect of this ConfigWebService.  # noqa: E501
        :rtype: ConfigWebServiceLoginProtect
        """
        return self._login_protect

    @login_protect.setter
    def login_protect(self, login_protect):
        """Sets the login_protect of this ConfigWebService.


        :param login_protect: The login_protect of this ConfigWebService.  # noqa: E501
        :type: ConfigWebServiceLoginProtect
        """

        self._login_protect = login_protect

    @property
    def login_limit(self):
        """Gets the login_limit of this ConfigWebService.  # noqa: E501


        :return: The login_limit of this ConfigWebService.  # noqa: E501
        :rtype: ConfigWebServiceLoginLimit
        """
        return self._login_limit

    @login_limit.setter
    def login_limit(self, login_limit):
        """Sets the login_limit of this ConfigWebService.


        :param login_limit: The login_limit of this ConfigWebService.  # noqa: E501
        :type: ConfigWebServiceLoginLimit
        """

        self._login_limit = login_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigWebService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigWebService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
