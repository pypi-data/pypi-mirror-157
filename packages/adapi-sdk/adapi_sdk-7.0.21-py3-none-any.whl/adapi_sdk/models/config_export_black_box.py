# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigExportBlackBox(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pk_password': 'str',
        'password': 'str',
        '_from': 'str',
        'to': 'str'
    }

    attribute_map = {
        'pk_password': 'pk_password',
        'password': 'password',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, pk_password=None, password=None, _from=None, to=None):  # noqa: E501
        """ConfigExportBlackBox - a model defined in Swagger"""  # noqa: E501

        self._pk_password = None
        self._password = None
        self.__from = None
        self._to = None
        self.discriminator = None

        if pk_password is not None:
            self.pk_password = pk_password
        if password is not None:
            self.password = password
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigExportBlackBox.  # noqa: E501

        可选参数，但与password必有其一; 加密密码，字符串类型  # noqa: E501

        :return: The pk_password of this ConfigExportBlackBox.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigExportBlackBox.

        可选参数，但与password必有其一; 加密密码，字符串类型  # noqa: E501

        :param pk_password: The pk_password of this ConfigExportBlackBox.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def password(self):
        """Gets the password of this ConfigExportBlackBox.  # noqa: E501

        可选参数，但与pk_password必有其一; 密码，长度限制为8-64个字符  # noqa: E501

        :return: The password of this ConfigExportBlackBox.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigExportBlackBox.

        可选参数，但与pk_password必有其一; 密码，长度限制为8-64个字符  # noqa: E501

        :param password: The password of this ConfigExportBlackBox.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 64:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    @property
    def _from(self):
        """Gets the _from of this ConfigExportBlackBox.  # noqa: E501

        可选参数；起始时间；格式: YYYY-MM-DD  # noqa: E501

        :return: The _from of this ConfigExportBlackBox.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ConfigExportBlackBox.

        可选参数；起始时间；格式: YYYY-MM-DD  # noqa: E501

        :param _from: The _from of this ConfigExportBlackBox.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ConfigExportBlackBox.  # noqa: E501

        可选参数；结束时间；不填写时，默认在起始时间后加7天；格式: YYYY-MM-DD  # noqa: E501

        :return: The to of this ConfigExportBlackBox.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ConfigExportBlackBox.

        可选参数；结束时间；不填写时，默认在起始时间后加7天；格式: YYYY-MM-DD  # noqa: E501

        :param to: The to of this ConfigExportBlackBox.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigExportBlackBox, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigExportBlackBox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
