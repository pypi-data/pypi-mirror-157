# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_policy_route_detail_link import StatPolicyRouteDetailLink  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_accumulate import StatStatisticAccumulate  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatPolicyRouteDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'link': 'StatPolicyRouteDetailLink',
        'hit': 'StatStatisticAccumulate',
        'upstream_data': 'StatStatisticAccumulate',
        'downstream_data': 'StatStatisticAccumulate',
        'upstream_data_rate': 'StatStatisticInstant',
        'downstream_data_rate': 'StatStatisticInstant',
        'upstream_packet': 'StatStatisticAccumulate',
        'downstream_packet': 'StatStatisticAccumulate',
        'upstream_packet_rate': 'StatStatisticInstant',
        'downstream_packet_rate': 'StatStatisticInstant'
    }

    attribute_map = {
        'name': 'name',
        'link': 'link',
        'hit': 'hit',
        'upstream_data': 'upstream_data',
        'downstream_data': 'downstream_data',
        'upstream_data_rate': 'upstream_data_rate',
        'downstream_data_rate': 'downstream_data_rate',
        'upstream_packet': 'upstream_packet',
        'downstream_packet': 'downstream_packet',
        'upstream_packet_rate': 'upstream_packet_rate',
        'downstream_packet_rate': 'downstream_packet_rate'
    }

    def __init__(self, name=None, link=None, hit=None, upstream_data=None, downstream_data=None, upstream_data_rate=None, downstream_data_rate=None, upstream_packet=None, downstream_packet=None, upstream_packet_rate=None, downstream_packet_rate=None):  # noqa: E501
        """StatPolicyRouteDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._link = None
        self._hit = None
        self._upstream_data = None
        self._downstream_data = None
        self._upstream_data_rate = None
        self._downstream_data_rate = None
        self._upstream_packet = None
        self._downstream_packet = None
        self._upstream_packet_rate = None
        self._downstream_packet_rate = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if link is not None:
            self.link = link
        if hit is not None:
            self.hit = hit
        if upstream_data is not None:
            self.upstream_data = upstream_data
        if downstream_data is not None:
            self.downstream_data = downstream_data
        if upstream_data_rate is not None:
            self.upstream_data_rate = upstream_data_rate
        if downstream_data_rate is not None:
            self.downstream_data_rate = downstream_data_rate
        if upstream_packet is not None:
            self.upstream_packet = upstream_packet
        if downstream_packet is not None:
            self.downstream_packet = downstream_packet
        if upstream_packet_rate is not None:
            self.upstream_packet_rate = upstream_packet_rate
        if downstream_packet_rate is not None:
            self.downstream_packet_rate = downstream_packet_rate

    @property
    def name(self):
        """Gets the name of this StatPolicyRouteDetail.  # noqa: E501

        智能路由名称  # noqa: E501

        :return: The name of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatPolicyRouteDetail.

        智能路由名称  # noqa: E501

        :param name: The name of this StatPolicyRouteDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def link(self):
        """Gets the link of this StatPolicyRouteDetail.  # noqa: E501


        :return: The link of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatPolicyRouteDetailLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this StatPolicyRouteDetail.


        :param link: The link of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatPolicyRouteDetailLink
        """

        self._link = link

    @property
    def hit(self):
        """Gets the hit of this StatPolicyRouteDetail.  # noqa: E501

        策略命中统计  # noqa: E501

        :return: The hit of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this StatPolicyRouteDetail.

        策略命中统计  # noqa: E501

        :param hit: The hit of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._hit = hit

    @property
    def upstream_data(self):
        """Gets the upstream_data of this StatPolicyRouteDetail.  # noqa: E501

        上行数据  # noqa: E501

        :return: The upstream_data of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._upstream_data

    @upstream_data.setter
    def upstream_data(self, upstream_data):
        """Sets the upstream_data of this StatPolicyRouteDetail.

        上行数据  # noqa: E501

        :param upstream_data: The upstream_data of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._upstream_data = upstream_data

    @property
    def downstream_data(self):
        """Gets the downstream_data of this StatPolicyRouteDetail.  # noqa: E501

        下行数据  # noqa: E501

        :return: The downstream_data of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._downstream_data

    @downstream_data.setter
    def downstream_data(self, downstream_data):
        """Sets the downstream_data of this StatPolicyRouteDetail.

        下行数据  # noqa: E501

        :param downstream_data: The downstream_data of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._downstream_data = downstream_data

    @property
    def upstream_data_rate(self):
        """Gets the upstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501

        上行速率  # noqa: E501

        :return: The upstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_data_rate

    @upstream_data_rate.setter
    def upstream_data_rate(self, upstream_data_rate):
        """Sets the upstream_data_rate of this StatPolicyRouteDetail.

        上行速率  # noqa: E501

        :param upstream_data_rate: The upstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_data_rate = upstream_data_rate

    @property
    def downstream_data_rate(self):
        """Gets the downstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501

        下行速率  # noqa: E501

        :return: The downstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_data_rate

    @downstream_data_rate.setter
    def downstream_data_rate(self, downstream_data_rate):
        """Sets the downstream_data_rate of this StatPolicyRouteDetail.

        下行速率  # noqa: E501

        :param downstream_data_rate: The downstream_data_rate of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_data_rate = downstream_data_rate

    @property
    def upstream_packet(self):
        """Gets the upstream_packet of this StatPolicyRouteDetail.  # noqa: E501

        上行数据包  # noqa: E501

        :return: The upstream_packet of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._upstream_packet

    @upstream_packet.setter
    def upstream_packet(self, upstream_packet):
        """Sets the upstream_packet of this StatPolicyRouteDetail.

        上行数据包  # noqa: E501

        :param upstream_packet: The upstream_packet of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._upstream_packet = upstream_packet

    @property
    def downstream_packet(self):
        """Gets the downstream_packet of this StatPolicyRouteDetail.  # noqa: E501

        下行数据包  # noqa: E501

        :return: The downstream_packet of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticAccumulate
        """
        return self._downstream_packet

    @downstream_packet.setter
    def downstream_packet(self, downstream_packet):
        """Sets the downstream_packet of this StatPolicyRouteDetail.

        下行数据包  # noqa: E501

        :param downstream_packet: The downstream_packet of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticAccumulate
        """

        self._downstream_packet = downstream_packet

    @property
    def upstream_packet_rate(self):
        """Gets the upstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501

        上行数据包速率  # noqa: E501

        :return: The upstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_packet_rate

    @upstream_packet_rate.setter
    def upstream_packet_rate(self, upstream_packet_rate):
        """Sets the upstream_packet_rate of this StatPolicyRouteDetail.

        上行数据包速率  # noqa: E501

        :param upstream_packet_rate: The upstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_packet_rate = upstream_packet_rate

    @property
    def downstream_packet_rate(self):
        """Gets the downstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501

        下行数据包速率  # noqa: E501

        :return: The downstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_packet_rate

    @downstream_packet_rate.setter
    def downstream_packet_rate(self, downstream_packet_rate):
        """Sets the downstream_packet_rate of this StatPolicyRouteDetail.

        下行数据包速率  # noqa: E501

        :param downstream_packet_rate: The downstream_packet_rate of this StatPolicyRouteDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_packet_rate = downstream_packet_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatPolicyRouteDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatPolicyRouteDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
