# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServiceMonitorPassiveHttp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'debug_mode': 'str',
        'http_url_samples': 'list[str]',
        'abnormal_status_codes': 'list[int]',
        'http_response_timeout': 'int',
        'http_statistical_time': 'int',
        'abnormal_http_response_threshold': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'debug_mode': 'debug_mode',
        'http_url_samples': 'http_url_samples',
        'abnormal_status_codes': 'abnormal_status_codes',
        'http_response_timeout': 'http_response_timeout',
        'http_statistical_time': 'http_statistical_time',
        'abnormal_http_response_threshold': 'abnormal_http_response_threshold'
    }

    def __init__(self, name=None, description=None, type='PASSIVE-HTTP', debug_mode='DISABLE', http_url_samples=None, abnormal_status_codes=None, http_response_timeout=None, http_statistical_time=None, abnormal_http_response_threshold=None):  # noqa: E501
        """ConfigServiceMonitorPassiveHttp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._debug_mode = None
        self._http_url_samples = None
        self._abnormal_status_codes = None
        self._http_response_timeout = None
        self._http_statistical_time = None
        self._abnormal_http_response_threshold = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if debug_mode is not None:
            self.debug_mode = debug_mode
        self.http_url_samples = http_url_samples
        if abnormal_status_codes is not None:
            self.abnormal_status_codes = abnormal_status_codes
        if http_response_timeout is not None:
            self.http_response_timeout = http_response_timeout
        if http_statistical_time is not None:
            self.http_statistical_time = http_statistical_time
        if abnormal_http_response_threshold is not None:
            self.abnormal_http_response_threshold = abnormal_http_response_threshold

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorPassiveHttp.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorPassiveHttp.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorPassiveHttp.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASSIVE-HTTP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorPassiveHttp.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def http_url_samples(self):
        """Gets the http_url_samples of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        必选参数；指定需要监控的url列表,最多支持10个  # noqa: E501

        :return: The http_url_samples of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_url_samples

    @http_url_samples.setter
    def http_url_samples(self, http_url_samples):
        """Sets the http_url_samples of this ConfigServiceMonitorPassiveHttp.

        必选参数；指定需要监控的url列表,最多支持10个  # noqa: E501

        :param http_url_samples: The http_url_samples of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: list[str]
        """
        if http_url_samples is None:
            raise ValueError("Invalid value for `http_url_samples`, must not be `None`")  # noqa: E501

        self._http_url_samples = http_url_samples

    @property
    def abnormal_status_codes(self):
        """Gets the abnormal_status_codes of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数；指定需要监控的异常状态码,最多支持10个  # noqa: E501

        :return: The abnormal_status_codes of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: list[int]
        """
        return self._abnormal_status_codes

    @abnormal_status_codes.setter
    def abnormal_status_codes(self, abnormal_status_codes):
        """Sets the abnormal_status_codes of this ConfigServiceMonitorPassiveHttp.

        可选参数；指定需要监控的异常状态码,最多支持10个  # noqa: E501

        :param abnormal_status_codes: The abnormal_status_codes of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: list[int]
        """

        self._abnormal_status_codes = abnormal_status_codes

    @property
    def http_response_timeout(self):
        """Gets the http_response_timeout of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数;指定响应超时时间,默认为5s  # noqa: E501

        :return: The http_response_timeout of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: int
        """
        return self._http_response_timeout

    @http_response_timeout.setter
    def http_response_timeout(self, http_response_timeout):
        """Sets the http_response_timeout of this ConfigServiceMonitorPassiveHttp.

        可选参数;指定响应超时时间,默认为5s  # noqa: E501

        :param http_response_timeout: The http_response_timeout of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: int
        """
        if http_response_timeout is not None and http_response_timeout > 255:  # noqa: E501
            raise ValueError("Invalid value for `http_response_timeout`, must be a value less than or equal to `255`")  # noqa: E501
        if http_response_timeout is not None and http_response_timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `http_response_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._http_response_timeout = http_response_timeout

    @property
    def http_statistical_time(self):
        """Gets the http_statistical_time of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数;指定异常统计时长,取值范围为[1, 5],默认为1,单位为s  # noqa: E501

        :return: The http_statistical_time of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: int
        """
        return self._http_statistical_time

    @http_statistical_time.setter
    def http_statistical_time(self, http_statistical_time):
        """Sets the http_statistical_time of this ConfigServiceMonitorPassiveHttp.

        可选参数;指定异常统计时长,取值范围为[1, 5],默认为1,单位为s  # noqa: E501

        :param http_statistical_time: The http_statistical_time of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: int
        """

        self._http_statistical_time = http_statistical_time

    @property
    def abnormal_http_response_threshold(self):
        """Gets the abnormal_http_response_threshold of this ConfigServiceMonitorPassiveHttp.  # noqa: E501

        可选参数;指定异常url上限,取值范围为[1, 4294967295],默认为10000  # noqa: E501

        :return: The abnormal_http_response_threshold of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :rtype: int
        """
        return self._abnormal_http_response_threshold

    @abnormal_http_response_threshold.setter
    def abnormal_http_response_threshold(self, abnormal_http_response_threshold):
        """Sets the abnormal_http_response_threshold of this ConfigServiceMonitorPassiveHttp.

        可选参数;指定异常url上限,取值范围为[1, 4294967295],默认为10000  # noqa: E501

        :param abnormal_http_response_threshold: The abnormal_http_response_threshold of this ConfigServiceMonitorPassiveHttp.  # noqa: E501
        :type: int
        """
        if abnormal_http_response_threshold is not None and abnormal_http_response_threshold > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `abnormal_http_response_threshold`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if abnormal_http_response_threshold is not None and abnormal_http_response_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `abnormal_http_response_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._abnormal_http_response_threshold = abnormal_http_response_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorPassiveHttp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorPassiveHttp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
