# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigReportSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'response_timeout': 'int',
        'disk_usage_threshold': 'int',
        'clear_earliest_data_day': 'int'
    }

    attribute_map = {
        'state': 'state',
        'response_timeout': 'response_timeout',
        'disk_usage_threshold': 'disk_usage_threshold',
        'clear_earliest_data_day': 'clear_earliest_data_day'
    }

    def __init__(self, state='ENABLE', response_timeout=None, disk_usage_threshold=None, clear_earliest_data_day=None):  # noqa: E501
        """ConfigReportSetting - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._response_timeout = None
        self._disk_usage_threshold = None
        self._clear_earliest_data_day = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if response_timeout is not None:
            self.response_timeout = response_timeout
        if disk_usage_threshold is not None:
            self.disk_usage_threshold = disk_usage_threshold
        if clear_earliest_data_day is not None:
            self.clear_earliest_data_day = clear_earliest_data_day

    @property
    def state(self):
        """Gets the state of this ConfigReportSetting.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用报表设置，默认为启用  # noqa: E501

        :return: The state of this ConfigReportSetting.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigReportSetting.

        可选参数；启/禁用（enable-启用/disable-禁用）；是否启用报表设置，默认为启用  # noqa: E501

        :param state: The state of this ConfigReportSetting.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def response_timeout(self):
        """Gets the response_timeout of this ConfigReportSetting.  # noqa: E501

        可选参数；设置报表响应时间，单位为s，默认为8s  # noqa: E501

        :return: The response_timeout of this ConfigReportSetting.  # noqa: E501
        :rtype: int
        """
        return self._response_timeout

    @response_timeout.setter
    def response_timeout(self, response_timeout):
        """Sets the response_timeout of this ConfigReportSetting.

        可选参数；设置报表响应时间，单位为s，默认为8s  # noqa: E501

        :param response_timeout: The response_timeout of this ConfigReportSetting.  # noqa: E501
        :type: int
        """
        if response_timeout is not None and response_timeout > 30:  # noqa: E501
            raise ValueError("Invalid value for `response_timeout`, must be a value less than or equal to `30`")  # noqa: E501
        if response_timeout is not None and response_timeout < 4:  # noqa: E501
            raise ValueError("Invalid value for `response_timeout`, must be a value greater than or equal to `4`")  # noqa: E501

        self._response_timeout = response_timeout

    @property
    def disk_usage_threshold(self):
        """Gets the disk_usage_threshold of this ConfigReportSetting.  # noqa: E501

        可选参数；设置磁盘空间极限，单位为%，默认为45%  # noqa: E501

        :return: The disk_usage_threshold of this ConfigReportSetting.  # noqa: E501
        :rtype: int
        """
        return self._disk_usage_threshold

    @disk_usage_threshold.setter
    def disk_usage_threshold(self, disk_usage_threshold):
        """Sets the disk_usage_threshold of this ConfigReportSetting.

        可选参数；设置磁盘空间极限，单位为%，默认为45%  # noqa: E501

        :param disk_usage_threshold: The disk_usage_threshold of this ConfigReportSetting.  # noqa: E501
        :type: int
        """
        if disk_usage_threshold is not None and disk_usage_threshold > 50:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_threshold`, must be a value less than or equal to `50`")  # noqa: E501
        if disk_usage_threshold is not None and disk_usage_threshold < 20:  # noqa: E501
            raise ValueError("Invalid value for `disk_usage_threshold`, must be a value greater than or equal to `20`")  # noqa: E501

        self._disk_usage_threshold = disk_usage_threshold

    @property
    def clear_earliest_data_day(self):
        """Gets the clear_earliest_data_day of this ConfigReportSetting.  # noqa: E501

        可选参数；自动删除最前面报表数据天数，单位为天，默认为3天；即自动删除最前面3天报表数据  # noqa: E501

        :return: The clear_earliest_data_day of this ConfigReportSetting.  # noqa: E501
        :rtype: int
        """
        return self._clear_earliest_data_day

    @clear_earliest_data_day.setter
    def clear_earliest_data_day(self, clear_earliest_data_day):
        """Sets the clear_earliest_data_day of this ConfigReportSetting.

        可选参数；自动删除最前面报表数据天数，单位为天，默认为3天；即自动删除最前面3天报表数据  # noqa: E501

        :param clear_earliest_data_day: The clear_earliest_data_day of this ConfigReportSetting.  # noqa: E501
        :type: int
        """
        if clear_earliest_data_day is not None and clear_earliest_data_day > 365:  # noqa: E501
            raise ValueError("Invalid value for `clear_earliest_data_day`, must be a value less than or equal to `365`")  # noqa: E501
        if clear_earliest_data_day is not None and clear_earliest_data_day < 1:  # noqa: E501
            raise ValueError("Invalid value for `clear_earliest_data_day`, must be a value greater than or equal to `1`")  # noqa: E501

        self._clear_earliest_data_day = clear_earliest_data_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigReportSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigReportSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
