# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigZoneDnssec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'ds_record_hash_algorithm': 'str',
        'nsec3_lterations': 'int',
        'zone_signing_key': 'list[str]',
        'key_signing_key': 'list[str]',
        'signature_refresh_perios_day': 'int',
        'signature_valid_period_day': 'int'
    }

    attribute_map = {
        'state': 'state',
        'ds_record_hash_algorithm': 'ds_record_hash_algorithm',
        'nsec3_lterations': 'nsec3_lterations',
        'zone_signing_key': 'zone_signing_key',
        'key_signing_key': 'key_signing_key',
        'signature_refresh_perios_day': 'signature_refresh_perios_day',
        'signature_valid_period_day': 'signature_valid_period_day'
    }

    def __init__(self, state='DISABLE', ds_record_hash_algorithm='SHA1', nsec3_lterations=None, zone_signing_key=None, key_signing_key=None, signature_refresh_perios_day=None, signature_valid_period_day=None):  # noqa: E501
        """ConfigZoneDnssec - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._ds_record_hash_algorithm = None
        self._nsec3_lterations = None
        self._zone_signing_key = None
        self._key_signing_key = None
        self._signature_refresh_perios_day = None
        self._signature_valid_period_day = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if ds_record_hash_algorithm is not None:
            self.ds_record_hash_algorithm = ds_record_hash_algorithm
        if nsec3_lterations is not None:
            self.nsec3_lterations = nsec3_lterations
        if zone_signing_key is not None:
            self.zone_signing_key = zone_signing_key
        if key_signing_key is not None:
            self.key_signing_key = key_signing_key
        if signature_refresh_perios_day is not None:
            self.signature_refresh_perios_day = signature_refresh_perios_day
        if signature_valid_period_day is not None:
            self.signature_valid_period_day = signature_valid_period_day

    @property
    def state(self):
        """Gets the state of this ConfigZoneDnssec.  # noqa: E501

        启/禁用状态。默认禁用，对应DNSSEC配置项都不显示。当启用时显示  # noqa: E501

        :return: The state of this ConfigZoneDnssec.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigZoneDnssec.

        启/禁用状态。默认禁用，对应DNSSEC配置项都不显示。当启用时显示  # noqa: E501

        :param state: The state of this ConfigZoneDnssec.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ds_record_hash_algorithm(self):
        """Gets the ds_record_hash_algorithm of this ConfigZoneDnssec.  # noqa: E501

        DS记录哈希算法  # noqa: E501

        :return: The ds_record_hash_algorithm of this ConfigZoneDnssec.  # noqa: E501
        :rtype: str
        """
        return self._ds_record_hash_algorithm

    @ds_record_hash_algorithm.setter
    def ds_record_hash_algorithm(self, ds_record_hash_algorithm):
        """Sets the ds_record_hash_algorithm of this ConfigZoneDnssec.

        DS记录哈希算法  # noqa: E501

        :param ds_record_hash_algorithm: The ds_record_hash_algorithm of this ConfigZoneDnssec.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHA1", "SHA256"]  # noqa: E501
        if ds_record_hash_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `ds_record_hash_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(ds_record_hash_algorithm, allowed_values)
            )

        self._ds_record_hash_algorithm = ds_record_hash_algorithm

    @property
    def nsec3_lterations(self):
        """Gets the nsec3_lterations of this ConfigZoneDnssec.  # noqa: E501

        NSEC3迭代，取值范围为[1,65535]  # noqa: E501

        :return: The nsec3_lterations of this ConfigZoneDnssec.  # noqa: E501
        :rtype: int
        """
        return self._nsec3_lterations

    @nsec3_lterations.setter
    def nsec3_lterations(self, nsec3_lterations):
        """Sets the nsec3_lterations of this ConfigZoneDnssec.

        NSEC3迭代，取值范围为[1,65535]  # noqa: E501

        :param nsec3_lterations: The nsec3_lterations of this ConfigZoneDnssec.  # noqa: E501
        :type: int
        """
        if nsec3_lterations is not None and nsec3_lterations > 65535:  # noqa: E501
            raise ValueError("Invalid value for `nsec3_lterations`, must be a value less than or equal to `65535`")  # noqa: E501
        if nsec3_lterations is not None and nsec3_lterations < 1:  # noqa: E501
            raise ValueError("Invalid value for `nsec3_lterations`, must be a value greater than or equal to `1`")  # noqa: E501

        self._nsec3_lterations = nsec3_lterations

    @property
    def zone_signing_key(self):
        """Gets the zone_signing_key of this ConfigZoneDnssec.  # noqa: E501

        ZSK密钥。下拉多选（至少选1个，最多选3个），选项内容为用户所创建的ZSK类型的DNSSEC密钥名称，默认为NONE  # noqa: E501

        :return: The zone_signing_key of this ConfigZoneDnssec.  # noqa: E501
        :rtype: list[str]
        """
        return self._zone_signing_key

    @zone_signing_key.setter
    def zone_signing_key(self, zone_signing_key):
        """Sets the zone_signing_key of this ConfigZoneDnssec.

        ZSK密钥。下拉多选（至少选1个，最多选3个），选项内容为用户所创建的ZSK类型的DNSSEC密钥名称，默认为NONE  # noqa: E501

        :param zone_signing_key: The zone_signing_key of this ConfigZoneDnssec.  # noqa: E501
        :type: list[str]
        """

        self._zone_signing_key = zone_signing_key

    @property
    def key_signing_key(self):
        """Gets the key_signing_key of this ConfigZoneDnssec.  # noqa: E501

        KSK密钥。下拉多选（至少选1个，最多选3个），选项内容为用户所创建的KSK类型的DNSSEC密钥名称，默认为NONE  # noqa: E501

        :return: The key_signing_key of this ConfigZoneDnssec.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_signing_key

    @key_signing_key.setter
    def key_signing_key(self, key_signing_key):
        """Sets the key_signing_key of this ConfigZoneDnssec.

        KSK密钥。下拉多选（至少选1个，最多选3个），选项内容为用户所创建的KSK类型的DNSSEC密钥名称，默认为NONE  # noqa: E501

        :param key_signing_key: The key_signing_key of this ConfigZoneDnssec.  # noqa: E501
        :type: list[str]
        """

        self._key_signing_key = key_signing_key

    @property
    def signature_refresh_perios_day(self):
        """Gets the signature_refresh_perios_day of this ConfigZoneDnssec.  # noqa: E501

        签名更新间隔，取值范围为[7,1000]，单位天  # noqa: E501

        :return: The signature_refresh_perios_day of this ConfigZoneDnssec.  # noqa: E501
        :rtype: int
        """
        return self._signature_refresh_perios_day

    @signature_refresh_perios_day.setter
    def signature_refresh_perios_day(self, signature_refresh_perios_day):
        """Sets the signature_refresh_perios_day of this ConfigZoneDnssec.

        签名更新间隔，取值范围为[7,1000]，单位天  # noqa: E501

        :param signature_refresh_perios_day: The signature_refresh_perios_day of this ConfigZoneDnssec.  # noqa: E501
        :type: int
        """
        if signature_refresh_perios_day is not None and signature_refresh_perios_day > 1000:  # noqa: E501
            raise ValueError("Invalid value for `signature_refresh_perios_day`, must be a value less than or equal to `1000`")  # noqa: E501
        if signature_refresh_perios_day is not None and signature_refresh_perios_day < 7:  # noqa: E501
            raise ValueError("Invalid value for `signature_refresh_perios_day`, must be a value greater than or equal to `7`")  # noqa: E501

        self._signature_refresh_perios_day = signature_refresh_perios_day

    @property
    def signature_valid_period_day(self):
        """Gets the signature_valid_period_day of this ConfigZoneDnssec.  # noqa: E501

        签名有效时间，取值范围为[10,1000]，单位天，并且数值必须大于签名更新间隔  # noqa: E501

        :return: The signature_valid_period_day of this ConfigZoneDnssec.  # noqa: E501
        :rtype: int
        """
        return self._signature_valid_period_day

    @signature_valid_period_day.setter
    def signature_valid_period_day(self, signature_valid_period_day):
        """Sets the signature_valid_period_day of this ConfigZoneDnssec.

        签名有效时间，取值范围为[10,1000]，单位天，并且数值必须大于签名更新间隔  # noqa: E501

        :param signature_valid_period_day: The signature_valid_period_day of this ConfigZoneDnssec.  # noqa: E501
        :type: int
        """
        if signature_valid_period_day is not None and signature_valid_period_day > 1000:  # noqa: E501
            raise ValueError("Invalid value for `signature_valid_period_day`, must be a value less than or equal to `1000`")  # noqa: E501
        if signature_valid_period_day is not None and signature_valid_period_day < 10:  # noqa: E501
            raise ValueError("Invalid value for `signature_valid_period_day`, must be a value greater than or equal to `10`")  # noqa: E501

        self._signature_valid_period_day = signature_valid_period_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigZoneDnssec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigZoneDnssec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
