# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_active_standby_device_status_last_configure_synchronize import StatActiveStandbyDeviceStatusLastConfigureSynchronize  # noqa: F401,E501
from adapi_sdk.models.stat_active_standby_device_status_last_failover import StatActiveStandbyDeviceStatusLastFailover  # noqa: F401,E501
from adapi_sdk.models.stat_active_standby_device_status_traffic import StatActiveStandbyDeviceStatusTraffic  # noqa: F401,E501


class StatActiveStandbyDeviceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'status': 'str',
        'health': 'str',
        'failure_reason': 'str',
        'ha': 'str',
        'ha_alternate': 'str',
        'traffic': 'StatActiveStandbyDeviceStatusTraffic',
        'last_failover': 'StatActiveStandbyDeviceStatusLastFailover',
        'session_synchronize': 'str',
        'configure_synchronize': 'str',
        'last_configure_synchronize': 'StatActiveStandbyDeviceStatusLastConfigureSynchronize'
    }

    attribute_map = {
        'host_name': 'host_name',
        'status': 'status',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'ha': 'ha',
        'ha_alternate': 'ha_alternate',
        'traffic': 'traffic',
        'last_failover': 'last_failover',
        'session_synchronize': 'session_synchronize',
        'configure_synchronize': 'configure_synchronize',
        'last_configure_synchronize': 'last_configure_synchronize'
    }

    def __init__(self, host_name=None, status=None, health=None, failure_reason=None, ha=None, ha_alternate=None, traffic=None, last_failover=None, session_synchronize=None, configure_synchronize=None, last_configure_synchronize=None):  # noqa: E501
        """StatActiveStandbyDeviceStatus - a model defined in Swagger"""  # noqa: E501

        self._host_name = None
        self._status = None
        self._health = None
        self._failure_reason = None
        self._ha = None
        self._ha_alternate = None
        self._traffic = None
        self._last_failover = None
        self._session_synchronize = None
        self._configure_synchronize = None
        self._last_configure_synchronize = None
        self.discriminator = None

        if host_name is not None:
            self.host_name = host_name
        if status is not None:
            self.status = status
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if ha is not None:
            self.ha = ha
        if ha_alternate is not None:
            self.ha_alternate = ha_alternate
        if traffic is not None:
            self.traffic = traffic
        if last_failover is not None:
            self.last_failover = last_failover
        if session_synchronize is not None:
            self.session_synchronize = session_synchronize
        if configure_synchronize is not None:
            self.configure_synchronize = configure_synchronize
        if last_configure_synchronize is not None:
            self.last_configure_synchronize = last_configure_synchronize

    @property
    def host_name(self):
        """Gets the host_name of this StatActiveStandbyDeviceStatus.  # noqa: E501

        当前主机名  # noqa: E501

        :return: The host_name of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this StatActiveStandbyDeviceStatus.

        当前主机名  # noqa: E501

        :param host_name: The host_name of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def status(self):
        """Gets the status of this StatActiveStandbyDeviceStatus.  # noqa: E501

        双机运行状态（ACTIVE-主机/STANDBY-备机）  # noqa: E501

        :return: The status of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatActiveStandbyDeviceStatus.

        双机运行状态（ACTIVE-主机/STANDBY-备机）  # noqa: E501

        :param status: The status of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "STANDBY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def health(self):
        """Gets the health of this StatActiveStandbyDeviceStatus.  # noqa: E501

        健康状态（INITIAL-初始化/NORMAL-正常/ALERT-告警/SILENT-静默/FAILURE-故障/OFFLINE-离线）  # noqa: E501

        :return: The health of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatActiveStandbyDeviceStatus.

        健康状态（INITIAL-初始化/NORMAL-正常/ALERT-告警/SILENT-静默/FAILURE-故障/OFFLINE-离线）  # noqa: E501

        :param health: The health of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIAL", "NORMAL", "ALERT", "SILENT", "FAILURE", "FAILSAFE", "OFFLINE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatActiveStandbyDeviceStatus.  # noqa: E501

        故障原因详情  # noqa: E501

        :return: The failure_reason of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatActiveStandbyDeviceStatus.

        故障原因详情  # noqa: E501

        :param failure_reason: The failure_reason of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def ha(self):
        """Gets the ha of this StatActiveStandbyDeviceStatus.  # noqa: E501

        主心跳口状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :return: The ha of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this StatActiveStandbyDeviceStatus.

        主心跳口状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :param ha: The ha of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE"]  # noqa: E501
        if ha not in allowed_values:
            raise ValueError(
                "Invalid value for `ha` ({0}), must be one of {1}"  # noqa: E501
                .format(ha, allowed_values)
            )

        self._ha = ha

    @property
    def ha_alternate(self):
        """Gets the ha_alternate of this StatActiveStandbyDeviceStatus.  # noqa: E501

        备心跳口状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :return: The ha_alternate of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._ha_alternate

    @ha_alternate.setter
    def ha_alternate(self, ha_alternate):
        """Sets the ha_alternate of this StatActiveStandbyDeviceStatus.

        备心跳口状态（NORMAL-正常/FAILURE-故障）  # noqa: E501

        :param ha_alternate: The ha_alternate of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE"]  # noqa: E501
        if ha_alternate not in allowed_values:
            raise ValueError(
                "Invalid value for `ha_alternate` ({0}), must be one of {1}"  # noqa: E501
                .format(ha_alternate, allowed_values)
            )

        self._ha_alternate = ha_alternate

    @property
    def traffic(self):
        """Gets the traffic of this StatActiveStandbyDeviceStatus.  # noqa: E501


        :return: The traffic of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: StatActiveStandbyDeviceStatusTraffic
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this StatActiveStandbyDeviceStatus.


        :param traffic: The traffic of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: StatActiveStandbyDeviceStatusTraffic
        """

        self._traffic = traffic

    @property
    def last_failover(self):
        """Gets the last_failover of this StatActiveStandbyDeviceStatus.  # noqa: E501


        :return: The last_failover of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: StatActiveStandbyDeviceStatusLastFailover
        """
        return self._last_failover

    @last_failover.setter
    def last_failover(self, last_failover):
        """Sets the last_failover of this StatActiveStandbyDeviceStatus.


        :param last_failover: The last_failover of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: StatActiveStandbyDeviceStatusLastFailover
        """

        self._last_failover = last_failover

    @property
    def session_synchronize(self):
        """Gets the session_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501

        会话同步状态（PROCESSION-同步中/COMPLETED-完成/INCOMPLETE-未完成/DISABLE-禁用）  # noqa: E501

        :return: The session_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._session_synchronize

    @session_synchronize.setter
    def session_synchronize(self, session_synchronize):
        """Sets the session_synchronize of this StatActiveStandbyDeviceStatus.

        会话同步状态（PROCESSION-同步中/COMPLETED-完成/INCOMPLETE-未完成/DISABLE-禁用）  # noqa: E501

        :param session_synchronize: The session_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROCESSING", "COMPLETED", "INCOMPLETE", "DISABLE"]  # noqa: E501
        if session_synchronize not in allowed_values:
            raise ValueError(
                "Invalid value for `session_synchronize` ({0}), must be one of {1}"  # noqa: E501
                .format(session_synchronize, allowed_values)
            )

        self._session_synchronize = session_synchronize

    @property
    def configure_synchronize(self):
        """Gets the configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501

        配置同步状态（COMPLETED-完成/INCOMPLETED-未完成）  # noqa: E501

        :return: The configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._configure_synchronize

    @configure_synchronize.setter
    def configure_synchronize(self, configure_synchronize):
        """Sets the configure_synchronize of this StatActiveStandbyDeviceStatus.

        配置同步状态（COMPLETED-完成/INCOMPLETED-未完成）  # noqa: E501

        :param configure_synchronize: The configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETED", "INCOMPLETE"]  # noqa: E501
        if configure_synchronize not in allowed_values:
            raise ValueError(
                "Invalid value for `configure_synchronize` ({0}), must be one of {1}"  # noqa: E501
                .format(configure_synchronize, allowed_values)
            )

        self._configure_synchronize = configure_synchronize

    @property
    def last_configure_synchronize(self):
        """Gets the last_configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501


        :return: The last_configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :rtype: StatActiveStandbyDeviceStatusLastConfigureSynchronize
        """
        return self._last_configure_synchronize

    @last_configure_synchronize.setter
    def last_configure_synchronize(self, last_configure_synchronize):
        """Sets the last_configure_synchronize of this StatActiveStandbyDeviceStatus.


        :param last_configure_synchronize: The last_configure_synchronize of this StatActiveStandbyDeviceStatus.  # noqa: E501
        :type: StatActiveStandbyDeviceStatusLastConfigureSynchronize
        """

        self._last_configure_synchronize = last_configure_synchronize

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatActiveStandbyDeviceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatActiveStandbyDeviceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
