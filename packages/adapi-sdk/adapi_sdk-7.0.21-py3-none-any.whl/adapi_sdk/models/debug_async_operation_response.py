# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugAsyncOperationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'operation': 'str',
        'state': 'str',
        'start_time': 'str',
        'finish_time': 'str',
        'triggered_by': 'str',
        'data': 'object'
    }

    attribute_map = {
        'event_id': 'event_id',
        'operation': 'operation',
        'state': 'state',
        'start_time': 'start_time',
        'finish_time': 'finish_time',
        'triggered_by': 'triggered_by',
        'data': 'data'
    }

    def __init__(self, event_id=None, operation=None, state=None, start_time=None, finish_time=None, triggered_by=None, data=None):  # noqa: E501
        """DebugAsyncOperationResponse - a model defined in Swagger"""  # noqa: E501

        self._event_id = None
        self._operation = None
        self._state = None
        self._start_time = None
        self._finish_time = None
        self._triggered_by = None
        self._data = None
        self.discriminator = None

        if event_id is not None:
            self.event_id = event_id
        if operation is not None:
            self.operation = operation
        if state is not None:
            self.state = state
        if start_time is not None:
            self.start_time = start_time
        if finish_time is not None:
            self.finish_time = finish_time
        if triggered_by is not None:
            self.triggered_by = triggered_by
        if data is not None:
            self.data = data

    @property
    def event_id(self):
        """Gets the event_id of this DebugAsyncOperationResponse.  # noqa: E501

        异步任务ID  # noqa: E501

        :return: The event_id of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DebugAsyncOperationResponse.

        异步任务ID  # noqa: E501

        :param event_id: The event_id of this DebugAsyncOperationResponse.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def operation(self):
        """Gets the operation of this DebugAsyncOperationResponse.  # noqa: E501

        任务操作来源  # noqa: E501

        :return: The operation of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this DebugAsyncOperationResponse.

        任务操作来源  # noqa: E501

        :param operation: The operation of this DebugAsyncOperationResponse.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def state(self):
        """Gets the state of this DebugAsyncOperationResponse.  # noqa: E501

        任务状态（WAITING等待/INCOMPLETE未完成/LOST丢失/RESTARTING重新执行/SUCCESS成功/FAILED失败）  # noqa: E501

        :return: The state of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DebugAsyncOperationResponse.

        任务状态（WAITING等待/INCOMPLETE未完成/LOST丢失/RESTARTING重新执行/SUCCESS成功/FAILED失败）  # noqa: E501

        :param state: The state of this DebugAsyncOperationResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["WAITING", "INCOMPLETE", "LOST", "RESTARTING", "SUCCESS", "FAILED", "<..>"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this DebugAsyncOperationResponse.  # noqa: E501

        任务启动时间  # noqa: E501

        :return: The start_time of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DebugAsyncOperationResponse.

        任务启动时间  # noqa: E501

        :param start_time: The start_time of this DebugAsyncOperationResponse.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def finish_time(self):
        """Gets the finish_time of this DebugAsyncOperationResponse.  # noqa: E501

        任务完成时间  # noqa: E501

        :return: The finish_time of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this DebugAsyncOperationResponse.

        任务完成时间  # noqa: E501

        :param finish_time: The finish_time of this DebugAsyncOperationResponse.  # noqa: E501
        :type: str
        """

        self._finish_time = finish_time

    @property
    def triggered_by(self):
        """Gets the triggered_by of this DebugAsyncOperationResponse.  # noqa: E501

        任务启动用户  # noqa: E501

        :return: The triggered_by of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this DebugAsyncOperationResponse.

        任务启动用户  # noqa: E501

        :param triggered_by: The triggered_by of this DebugAsyncOperationResponse.  # noqa: E501
        :type: str
        """

        self._triggered_by = triggered_by

    @property
    def data(self):
        """Gets the data of this DebugAsyncOperationResponse.  # noqa: E501

        任务数据  # noqa: E501

        :return: The data of this DebugAsyncOperationResponse.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DebugAsyncOperationResponse.

        任务数据  # noqa: E501

        :param data: The data of this DebugAsyncOperationResponse.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugAsyncOperationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugAsyncOperationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
