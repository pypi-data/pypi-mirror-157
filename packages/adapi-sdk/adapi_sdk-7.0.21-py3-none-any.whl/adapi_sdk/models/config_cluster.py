# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_active_standby_brain_split_detect import ConfigActiveStandbyBrainSplitDetect  # noqa: F401,E501
from adapi_sdk.models.config_cluster_alternate_ha import ConfigClusterAlternateHa  # noqa: F401,E501
from adapi_sdk.models.config_cluster_ha import ConfigClusterHa  # noqa: F401,E501


class ConfigCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'heartbeat_timeout_ms': 'int',
        'heartbeat_interval_ms': 'int',
        'ha': 'ConfigClusterHa',
        'alternate_ha': 'ConfigClusterAlternateHa',
        'brain_split_detect': 'ConfigActiveStandbyBrainSplitDetect',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str',
        'cluster_ip': 'str',
        'openad_net_check_flat': 'str',
        'openad_net_check_vlan': 'str',
        'openad_net_check_vxlan': 'str'
    }

    attribute_map = {
        'state': 'state',
        'heartbeat_timeout_ms': 'heartbeat_timeout_ms',
        'heartbeat_interval_ms': 'heartbeat_interval_ms',
        'ha': 'ha',
        'alternate_ha': 'alternate_ha',
        'brain_split_detect': 'brain_split_detect',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password',
        'cluster_ip': 'cluster_ip',
        'openad_net_check_flat': 'openad_net_check_flat',
        'openad_net_check_vlan': 'openad_net_check_vlan',
        'openad_net_check_vxlan': 'openad_net_check_vxlan'
    }

    def __init__(self, state='ENABLE', heartbeat_timeout_ms=None, heartbeat_interval_ms=None, ha=None, alternate_ha=None, brain_split_detect=None, username=None, password=None, pk_password=None, cluster_ip=None, openad_net_check_flat='DISABLE', openad_net_check_vlan='DISABLE', openad_net_check_vxlan='DISABLE'):  # noqa: E501
        """ConfigCluster - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._heartbeat_timeout_ms = None
        self._heartbeat_interval_ms = None
        self._ha = None
        self._alternate_ha = None
        self._brain_split_detect = None
        self._username = None
        self._password = None
        self._pk_password = None
        self._cluster_ip = None
        self._openad_net_check_flat = None
        self._openad_net_check_vlan = None
        self._openad_net_check_vxlan = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if heartbeat_timeout_ms is not None:
            self.heartbeat_timeout_ms = heartbeat_timeout_ms
        if heartbeat_interval_ms is not None:
            self.heartbeat_interval_ms = heartbeat_interval_ms
        if ha is not None:
            self.ha = ha
        if alternate_ha is not None:
            self.alternate_ha = alternate_ha
        if brain_split_detect is not None:
            self.brain_split_detect = brain_split_detect
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if cluster_ip is not None:
            self.cluster_ip = cluster_ip
        if openad_net_check_flat is not None:
            self.openad_net_check_flat = openad_net_check_flat
        if openad_net_check_vlan is not None:
            self.openad_net_check_vlan = openad_net_check_vlan
        if openad_net_check_vxlan is not None:
            self.openad_net_check_vxlan = openad_net_check_vxlan

    @property
    def state(self):
        """Gets the state of this ConfigCluster.  # noqa: E501

        集群的启禁用状态，enable表示启用，disable表示禁用  # noqa: E501

        :return: The state of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigCluster.

        集群的启禁用状态，enable表示启用，disable表示禁用  # noqa: E501

        :param state: The state of this ConfigCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def heartbeat_timeout_ms(self):
        """Gets the heartbeat_timeout_ms of this ConfigCluster.  # noqa: E501

        心跳超时时间，单位毫秒  # noqa: E501

        :return: The heartbeat_timeout_ms of this ConfigCluster.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_timeout_ms

    @heartbeat_timeout_ms.setter
    def heartbeat_timeout_ms(self, heartbeat_timeout_ms):
        """Sets the heartbeat_timeout_ms of this ConfigCluster.

        心跳超时时间，单位毫秒  # noqa: E501

        :param heartbeat_timeout_ms: The heartbeat_timeout_ms of this ConfigCluster.  # noqa: E501
        :type: int
        """
        if heartbeat_timeout_ms is not None and heartbeat_timeout_ms > 10000:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_timeout_ms`, must be a value less than or equal to `10000`")  # noqa: E501
        if heartbeat_timeout_ms is not None and heartbeat_timeout_ms < 100:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_timeout_ms`, must be a value greater than or equal to `100`")  # noqa: E501

        self._heartbeat_timeout_ms = heartbeat_timeout_ms

    @property
    def heartbeat_interval_ms(self):
        """Gets the heartbeat_interval_ms of this ConfigCluster.  # noqa: E501

        心跳间隔时间，单位毫秒  # noqa: E501

        :return: The heartbeat_interval_ms of this ConfigCluster.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_interval_ms

    @heartbeat_interval_ms.setter
    def heartbeat_interval_ms(self, heartbeat_interval_ms):
        """Sets the heartbeat_interval_ms of this ConfigCluster.

        心跳间隔时间，单位毫秒  # noqa: E501

        :param heartbeat_interval_ms: The heartbeat_interval_ms of this ConfigCluster.  # noqa: E501
        :type: int
        """
        if heartbeat_interval_ms is not None and heartbeat_interval_ms > 10000:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_interval_ms`, must be a value less than or equal to `10000`")  # noqa: E501
        if heartbeat_interval_ms is not None and heartbeat_interval_ms < 100:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_interval_ms`, must be a value greater than or equal to `100`")  # noqa: E501

        self._heartbeat_interval_ms = heartbeat_interval_ms

    @property
    def ha(self):
        """Gets the ha of this ConfigCluster.  # noqa: E501


        :return: The ha of this ConfigCluster.  # noqa: E501
        :rtype: ConfigClusterHa
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this ConfigCluster.


        :param ha: The ha of this ConfigCluster.  # noqa: E501
        :type: ConfigClusterHa
        """

        self._ha = ha

    @property
    def alternate_ha(self):
        """Gets the alternate_ha of this ConfigCluster.  # noqa: E501


        :return: The alternate_ha of this ConfigCluster.  # noqa: E501
        :rtype: ConfigClusterAlternateHa
        """
        return self._alternate_ha

    @alternate_ha.setter
    def alternate_ha(self, alternate_ha):
        """Sets the alternate_ha of this ConfigCluster.


        :param alternate_ha: The alternate_ha of this ConfigCluster.  # noqa: E501
        :type: ConfigClusterAlternateHa
        """

        self._alternate_ha = alternate_ha

    @property
    def brain_split_detect(self):
        """Gets the brain_split_detect of this ConfigCluster.  # noqa: E501


        :return: The brain_split_detect of this ConfigCluster.  # noqa: E501
        :rtype: ConfigActiveStandbyBrainSplitDetect
        """
        return self._brain_split_detect

    @brain_split_detect.setter
    def brain_split_detect(self, brain_split_detect):
        """Sets the brain_split_detect of this ConfigCluster.


        :param brain_split_detect: The brain_split_detect of this ConfigCluster.  # noqa: E501
        :type: ConfigActiveStandbyBrainSplitDetect
        """

        self._brain_split_detect = brain_split_detect

    @property
    def username(self):
        """Gets the username of this ConfigCluster.  # noqa: E501

        禁用集群时的权限校验，请填写具有高可用权限用户的用户名  # noqa: E501

        :return: The username of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigCluster.

        禁用集群时的权限校验，请填写具有高可用权限用户的用户名  # noqa: E501

        :param username: The username of this ConfigCluster.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigCluster.  # noqa: E501

        禁用集群时的权限校验，请填写对应用户的密码  # noqa: E501

        :return: The password of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigCluster.

        禁用集群时的权限校验，请填写对应用户的密码  # noqa: E501

        :param password: The password of this ConfigCluster.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigCluster.  # noqa: E501

        禁用集群时的权限校验，请填写对应用户的加密密码  # noqa: E501

        :return: The pk_password of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigCluster.

        禁用集群时的权限校验，请填写对应用户的加密密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigCluster.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this ConfigCluster.  # noqa: E501

        集群管理IP，IP/MASK格式  # noqa: E501

        :return: The cluster_ip of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this ConfigCluster.

        集群管理IP，IP/MASK格式  # noqa: E501

        :param cluster_ip: The cluster_ip of this ConfigCluster.  # noqa: E501
        :type: str
        """

        self._cluster_ip = cluster_ip

    @property
    def openad_net_check_flat(self):
        """Gets the openad_net_check_flat of this ConfigCluster.  # noqa: E501

        FLAT网口故障切换  # noqa: E501

        :return: The openad_net_check_flat of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._openad_net_check_flat

    @openad_net_check_flat.setter
    def openad_net_check_flat(self, openad_net_check_flat):
        """Sets the openad_net_check_flat of this ConfigCluster.

        FLAT网口故障切换  # noqa: E501

        :param openad_net_check_flat: The openad_net_check_flat of this ConfigCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if openad_net_check_flat not in allowed_values:
            raise ValueError(
                "Invalid value for `openad_net_check_flat` ({0}), must be one of {1}"  # noqa: E501
                .format(openad_net_check_flat, allowed_values)
            )

        self._openad_net_check_flat = openad_net_check_flat

    @property
    def openad_net_check_vlan(self):
        """Gets the openad_net_check_vlan of this ConfigCluster.  # noqa: E501

        VLAN网口故障切换  # noqa: E501

        :return: The openad_net_check_vlan of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._openad_net_check_vlan

    @openad_net_check_vlan.setter
    def openad_net_check_vlan(self, openad_net_check_vlan):
        """Sets the openad_net_check_vlan of this ConfigCluster.

        VLAN网口故障切换  # noqa: E501

        :param openad_net_check_vlan: The openad_net_check_vlan of this ConfigCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if openad_net_check_vlan not in allowed_values:
            raise ValueError(
                "Invalid value for `openad_net_check_vlan` ({0}), must be one of {1}"  # noqa: E501
                .format(openad_net_check_vlan, allowed_values)
            )

        self._openad_net_check_vlan = openad_net_check_vlan

    @property
    def openad_net_check_vxlan(self):
        """Gets the openad_net_check_vxlan of this ConfigCluster.  # noqa: E501

        VXLAN网口故障切换  # noqa: E501

        :return: The openad_net_check_vxlan of this ConfigCluster.  # noqa: E501
        :rtype: str
        """
        return self._openad_net_check_vxlan

    @openad_net_check_vxlan.setter
    def openad_net_check_vxlan(self, openad_net_check_vxlan):
        """Sets the openad_net_check_vxlan of this ConfigCluster.

        VXLAN网口故障切换  # noqa: E501

        :param openad_net_check_vxlan: The openad_net_check_vxlan of this ConfigCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if openad_net_check_vxlan not in allowed_values:
            raise ValueError(
                "Invalid value for `openad_net_check_vxlan` ({0}), must be one of {1}"  # noqa: E501
                .format(openad_net_check_vxlan, allowed_values)
            )

        self._openad_net_check_vxlan = openad_net_check_vxlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
