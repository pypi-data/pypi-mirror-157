# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_application_group_member_member_group import ConfigApplicationGroupMemberMemberGroup  # noqa: F401,E501


class ConfigApplicationGroupMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_structure': 'str',
        'member_sequence': 'list[str]',
        'member_group': 'list[ConfigApplicationGroupMemberMemberGroup]'
    }

    attribute_map = {
        'member_structure': 'member_structure',
        'member_sequence': 'member_sequence',
        'member_group': 'member_group'
    }

    def __init__(self, member_structure='MEMBER-SEQUENCE', member_sequence=None, member_group=None):  # noqa: E501
        """ConfigApplicationGroupMember - a model defined in Swagger"""  # noqa: E501

        self._member_structure = None
        self._member_sequence = None
        self._member_group = None
        self.discriminator = None

        if member_structure is not None:
            self.member_structure = member_structure
        if member_sequence is not None:
            self.member_sequence = member_sequence
        if member_group is not None:
            self.member_group = member_group

    @property
    def member_structure(self):
        """Gets the member_structure of this ConfigApplicationGroupMember.  # noqa: E501

        应用组的切换方式，member-sequence：按设备列表进行切换，member-group：按设备组进行切换  # noqa: E501

        :return: The member_structure of this ConfigApplicationGroupMember.  # noqa: E501
        :rtype: str
        """
        return self._member_structure

    @member_structure.setter
    def member_structure(self, member_structure):
        """Sets the member_structure of this ConfigApplicationGroupMember.

        应用组的切换方式，member-sequence：按设备列表进行切换，member-group：按设备组进行切换  # noqa: E501

        :param member_structure: The member_structure of this ConfigApplicationGroupMember.  # noqa: E501
        :type: str
        """
        allowed_values = ["MEMBER-SEQUENCE", "MEMBER-GROUP"]  # noqa: E501
        if member_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `member_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(member_structure, allowed_values)
            )

        self._member_structure = member_structure

    @property
    def member_sequence(self):
        """Gets the member_sequence of this ConfigApplicationGroupMember.  # noqa: E501

        按设备切换时的设备列表  # noqa: E501

        :return: The member_sequence of this ConfigApplicationGroupMember.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_sequence

    @member_sequence.setter
    def member_sequence(self, member_sequence):
        """Sets the member_sequence of this ConfigApplicationGroupMember.

        按设备切换时的设备列表  # noqa: E501

        :param member_sequence: The member_sequence of this ConfigApplicationGroupMember.  # noqa: E501
        :type: list[str]
        """

        self._member_sequence = member_sequence

    @property
    def member_group(self):
        """Gets the member_group of this ConfigApplicationGroupMember.  # noqa: E501

        按设备组切换时的设备组列表  # noqa: E501

        :return: The member_group of this ConfigApplicationGroupMember.  # noqa: E501
        :rtype: list[ConfigApplicationGroupMemberMemberGroup]
        """
        return self._member_group

    @member_group.setter
    def member_group(self, member_group):
        """Sets the member_group of this ConfigApplicationGroupMember.

        按设备组切换时的设备组列表  # noqa: E501

        :param member_group: The member_group of this ConfigApplicationGroupMember.  # noqa: E501
        :type: list[ConfigApplicationGroupMemberMemberGroup]
        """

        self._member_group = member_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigApplicationGroupMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigApplicationGroupMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
