# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_pre_rule_query_domain import ConfigDnsPreRuleQueryDomain  # noqa: F401,E501
from adapi_sdk.models.config_dns_pre_rule_sched_servers import ConfigDnsPreRuleSchedServers  # noqa: F401,E501
from adapi_sdk.models.config_dns_pre_rule_source_address import ConfigDnsPreRuleSourceAddress  # noqa: F401,E501


class ConfigDnsPreRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'position': 'int',
        'state': 'str',
        'source_address': 'ConfigDnsPreRuleSourceAddress',
        'query_domain': 'ConfigDnsPreRuleQueryDomain',
        'sched_servers': 'list[ConfigDnsPreRuleSchedServers]',
        'link_busy_protect': 'str',
        'sched_failure': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'position': 'position',
        'state': 'state',
        'source_address': 'source_address',
        'query_domain': 'query_domain',
        'sched_servers': 'sched_servers',
        'link_busy_protect': 'link_busy_protect',
        'sched_failure': 'sched_failure'
    }

    def __init__(self, name=None, description=None, position=None, state='ENABLE', source_address=None, query_domain=None, sched_servers=None, link_busy_protect='DISABLE', sched_failure='NEXT-RULE'):  # noqa: E501
        """ConfigDnsPreRule - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._position = None
        self._state = None
        self._source_address = None
        self._query_domain = None
        self._sched_servers = None
        self._link_busy_protect = None
        self._sched_failure = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if position is not None:
            self.position = position
        if state is not None:
            self.state = state
        self.source_address = source_address
        if query_domain is not None:
            self.query_domain = query_domain
        self.sched_servers = sched_servers
        if link_busy_protect is not None:
            self.link_busy_protect = link_busy_protect
        if sched_failure is not None:
            self.sched_failure = sched_failure

    @property
    def name(self):
        """Gets the name of this ConfigDnsPreRule.  # noqa: E501

        必选参数；优先代理策略的名称。  # noqa: E501

        :return: The name of this ConfigDnsPreRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigDnsPreRule.

        必选参数；优先代理策略的名称。  # noqa: E501

        :param name: The name of this ConfigDnsPreRule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigDnsPreRule.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigDnsPreRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigDnsPreRule.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigDnsPreRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def position(self):
        """Gets the position of this ConfigDnsPreRule.  # noqa: E501

        可选参数；优先代理策略的位置，用于标志执行的顺序。  # noqa: E501

        :return: The position of this ConfigDnsPreRule.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ConfigDnsPreRule.

        可选参数；优先代理策略的位置，用于标志执行的顺序。  # noqa: E501

        :param position: The position of this ConfigDnsPreRule.  # noqa: E501
        :type: int
        """
        if position is not None and position > 65535:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `65535`")  # noqa: E501
        if position is not None and position < 1:  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")  # noqa: E501

        self._position = position

    @property
    def state(self):
        """Gets the state of this ConfigDnsPreRule.  # noqa: E501

        可选参数；记录的状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :return: The state of this ConfigDnsPreRule.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDnsPreRule.

        可选参数；记录的状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :param state: The state of this ConfigDnsPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def source_address(self):
        """Gets the source_address of this ConfigDnsPreRule.  # noqa: E501


        :return: The source_address of this ConfigDnsPreRule.  # noqa: E501
        :rtype: ConfigDnsPreRuleSourceAddress
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigDnsPreRule.


        :param source_address: The source_address of this ConfigDnsPreRule.  # noqa: E501
        :type: ConfigDnsPreRuleSourceAddress
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")  # noqa: E501

        self._source_address = source_address

    @property
    def query_domain(self):
        """Gets the query_domain of this ConfigDnsPreRule.  # noqa: E501


        :return: The query_domain of this ConfigDnsPreRule.  # noqa: E501
        :rtype: ConfigDnsPreRuleQueryDomain
        """
        return self._query_domain

    @query_domain.setter
    def query_domain(self, query_domain):
        """Sets the query_domain of this ConfigDnsPreRule.


        :param query_domain: The query_domain of this ConfigDnsPreRule.  # noqa: E501
        :type: ConfigDnsPreRuleQueryDomain
        """

        self._query_domain = query_domain

    @property
    def sched_servers(self):
        """Gets the sched_servers of this ConfigDnsPreRule.  # noqa: E501

        可选参数，调度的DNS服务器列表，类型为数组。  # noqa: E501

        :return: The sched_servers of this ConfigDnsPreRule.  # noqa: E501
        :rtype: list[ConfigDnsPreRuleSchedServers]
        """
        return self._sched_servers

    @sched_servers.setter
    def sched_servers(self, sched_servers):
        """Sets the sched_servers of this ConfigDnsPreRule.

        可选参数，调度的DNS服务器列表，类型为数组。  # noqa: E501

        :param sched_servers: The sched_servers of this ConfigDnsPreRule.  # noqa: E501
        :type: list[ConfigDnsPreRuleSchedServers]
        """
        if sched_servers is None:
            raise ValueError("Invalid value for `sched_servers`, must not be `None`")  # noqa: E501

        self._sched_servers = sched_servers

    @property
    def link_busy_protect(self):
        """Gets the link_busy_protect of this ConfigDnsPreRule.  # noqa: E501

        可选参数，是否启用繁忙保护，可选有enable（启用）和disable（禁用），默认为启用。  # noqa: E501

        :return: The link_busy_protect of this ConfigDnsPreRule.  # noqa: E501
        :rtype: str
        """
        return self._link_busy_protect

    @link_busy_protect.setter
    def link_busy_protect(self, link_busy_protect):
        """Sets the link_busy_protect of this ConfigDnsPreRule.

        可选参数，是否启用繁忙保护，可选有enable（启用）和disable（禁用），默认为启用。  # noqa: E501

        :param link_busy_protect: The link_busy_protect of this ConfigDnsPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if link_busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `link_busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(link_busy_protect, allowed_values)
            )

        self._link_busy_protect = link_busy_protect

    @property
    def sched_failure(self):
        """Gets the sched_failure of this ConfigDnsPreRule.  # noqa: E501

        可选参数，失效动作，可选有next-rule（匹配下一条策略）和drop（丢弃），默认为匹配下一条策略。  # noqa: E501

        :return: The sched_failure of this ConfigDnsPreRule.  # noqa: E501
        :rtype: str
        """
        return self._sched_failure

    @sched_failure.setter
    def sched_failure(self, sched_failure):
        """Sets the sched_failure of this ConfigDnsPreRule.

        可选参数，失效动作，可选有next-rule（匹配下一条策略）和drop（丢弃），默认为匹配下一条策略。  # noqa: E501

        :param sched_failure: The sched_failure of this ConfigDnsPreRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEXT-RULE", "DROP"]  # noqa: E501
        if sched_failure not in allowed_values:
            raise ValueError(
                "Invalid value for `sched_failure` ({0}), must be one of {1}"  # noqa: E501
                .format(sched_failure, allowed_values)
            )

        self._sched_failure = sched_failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsPreRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsPreRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
