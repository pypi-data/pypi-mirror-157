# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatDnsDomainSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'StatStatisticInstant',
        'total': 'StatStatisticInstant',
        'query_rate': 'StatStatisticInstant'
    }

    attribute_map = {
        'active': 'active',
        'total': 'total',
        'query_rate': 'query_rate'
    }

    def __init__(self, active=None, total=None, query_rate=None):  # noqa: E501
        """StatDnsDomainSummary - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._total = None
        self._query_rate = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if total is not None:
            self.total = total
        if query_rate is not None:
            self.query_rate = query_rate

    @property
    def active(self):
        """Gets the active of this StatDnsDomainSummary.  # noqa: E501

        数据统计结果  # noqa: E501

        :return: The active of this StatDnsDomainSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StatDnsDomainSummary.

        数据统计结果  # noqa: E501

        :param active: The active of this StatDnsDomainSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._active = active

    @property
    def total(self):
        """Gets the total of this StatDnsDomainSummary.  # noqa: E501

        数据统计结果  # noqa: E501

        :return: The total of this StatDnsDomainSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this StatDnsDomainSummary.

        数据统计结果  # noqa: E501

        :param total: The total of this StatDnsDomainSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._total = total

    @property
    def query_rate(self):
        """Gets the query_rate of this StatDnsDomainSummary.  # noqa: E501

        数据统计结果  # noqa: E501

        :return: The query_rate of this StatDnsDomainSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._query_rate

    @query_rate.setter
    def query_rate(self, query_rate):
        """Sets the query_rate of this StatDnsDomainSummary.

        数据统计结果  # noqa: E501

        :param query_rate: The query_rate of this StatDnsDomainSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._query_rate = query_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDnsDomainSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDnsDomainSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
