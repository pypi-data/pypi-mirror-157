# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugSlbPersistClear(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_value': 'str',
        'destination_address': 'str',
        'destination_port': 'int',
        'pool': 'str',
        'node_ip': 'str',
        'node_port': 'int'
    }

    attribute_map = {
        'record_value': 'record_value',
        'destination_address': 'destination_address',
        'destination_port': 'destination_port',
        'pool': 'pool',
        'node_ip': 'node_ip',
        'node_port': 'node_port'
    }

    def __init__(self, record_value=None, destination_address=None, destination_port=None, pool=None, node_ip=None, node_port=None):  # noqa: E501
        """DebugSlbPersistClear - a model defined in Swagger"""  # noqa: E501

        self._record_value = None
        self._destination_address = None
        self._destination_port = None
        self._pool = None
        self._node_ip = None
        self._node_port = None
        self.discriminator = None

        if record_value is not None:
            self.record_value = record_value
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_port is not None:
            self.destination_port = destination_port
        if pool is not None:
            self.pool = pool
        if node_ip is not None:
            self.node_ip = node_ip
        if node_port is not None:
            self.node_port = node_port

    @property
    def record_value(self):
        """Gets the record_value of this DebugSlbPersistClear.  # noqa: E501

        会话保持记录匹配值  # noqa: E501

        :return: The record_value of this DebugSlbPersistClear.  # noqa: E501
        :rtype: str
        """
        return self._record_value

    @record_value.setter
    def record_value(self, record_value):
        """Sets the record_value of this DebugSlbPersistClear.

        会话保持记录匹配值  # noqa: E501

        :param record_value: The record_value of this DebugSlbPersistClear.  # noqa: E501
        :type: str
        """

        self._record_value = record_value

    @property
    def destination_address(self):
        """Gets the destination_address of this DebugSlbPersistClear.  # noqa: E501

        访问目的IP  # noqa: E501

        :return: The destination_address of this DebugSlbPersistClear.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this DebugSlbPersistClear.

        访问目的IP  # noqa: E501

        :param destination_address: The destination_address of this DebugSlbPersistClear.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_port(self):
        """Gets the destination_port of this DebugSlbPersistClear.  # noqa: E501

        访问目的端口  # noqa: E501

        :return: The destination_port of this DebugSlbPersistClear.  # noqa: E501
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this DebugSlbPersistClear.

        访问目的端口  # noqa: E501

        :param destination_port: The destination_port of this DebugSlbPersistClear.  # noqa: E501
        :type: int
        """

        self._destination_port = destination_port

    @property
    def pool(self):
        """Gets the pool of this DebugSlbPersistClear.  # noqa: E501

        记录所属节点池  # noqa: E501

        :return: The pool of this DebugSlbPersistClear.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this DebugSlbPersistClear.

        记录所属节点池  # noqa: E501

        :param pool: The pool of this DebugSlbPersistClear.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def node_ip(self):
        """Gets the node_ip of this DebugSlbPersistClear.  # noqa: E501

        保持节点IP地址  # noqa: E501

        :return: The node_ip of this DebugSlbPersistClear.  # noqa: E501
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this DebugSlbPersistClear.

        保持节点IP地址  # noqa: E501

        :param node_ip: The node_ip of this DebugSlbPersistClear.  # noqa: E501
        :type: str
        """

        self._node_ip = node_ip

    @property
    def node_port(self):
        """Gets the node_port of this DebugSlbPersistClear.  # noqa: E501

        保持节点端口  # noqa: E501

        :return: The node_port of this DebugSlbPersistClear.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this DebugSlbPersistClear.

        保持节点端口  # noqa: E501

        :param node_port: The node_port of this DebugSlbPersistClear.  # noqa: E501
        :type: int
        """

        self._node_port = node_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugSlbPersistClear, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugSlbPersistClear):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
