# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCrl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'method': 'str',
        'file_token': 'str',
        'url': 'str',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str',
        'encrypted_password': 'str',
        'timeout': 'int',
        'interval': 'int',
        'retry_times': 'int',
        'network': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'method': 'method',
        'file_token': 'file_token',
        'url': 'url',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password',
        'encrypted_password': 'encrypted_password',
        'timeout': 'timeout',
        'interval': 'interval',
        'retry_times': 'retry_times',
        'network': 'network'
    }

    def __init__(self, name=None, description=None, method=None, file_token=None, url='http://', username=None, password=None, pk_password=None, encrypted_password=None, timeout=None, interval=None, retry_times=None, network='AUTO'):  # noqa: E501
        """ConfigCrl - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._method = None
        self._file_token = None
        self._url = None
        self._username = None
        self._password = None
        self._pk_password = None
        self._encrypted_password = None
        self._timeout = None
        self._interval = None
        self._retry_times = None
        self._network = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.method = method
        if file_token is not None:
            self.file_token = file_token
        if url is not None:
            self.url = url
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if retry_times is not None:
            self.retry_times = retry_times
        if network is not None:
            self.network = network

    @property
    def name(self):
        """Gets the name of this ConfigCrl.  # noqa: E501

        必选参数；指定crl证书的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigCrl.

        必选参数；指定crl证书的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigCrl.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigCrl.  # noqa: E501

        可选参数；配置描述信息。  # noqa: E501

        :return: The description of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigCrl.

        可选参数；配置描述信息。  # noqa: E501

        :param description: The description of this ConfigCrl.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def method(self):
        """Gets the method of this ConfigCrl.  # noqa: E501

        必选参数；指定获取方式。  # noqa: E501

        :return: The method of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigCrl.

        必选参数；指定获取方式。  # noqa: E501

        :param method: The method of this ConfigCrl.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["HTTP", "FTP", "LDAP", "FILE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def file_token(self):
        """Gets the file_token of this ConfigCrl.  # noqa: E501

        Token of file-resource.  # noqa: E501

        :return: The file_token of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._file_token

    @file_token.setter
    def file_token(self, file_token):
        """Sets the file_token of this ConfigCrl.

        Token of file-resource.  # noqa: E501

        :param file_token: The file_token of this ConfigCrl.  # noqa: E501
        :type: str
        """

        self._file_token = file_token

    @property
    def url(self):
        """Gets the url of this ConfigCrl.  # noqa: E501

        必选参数；指定获取路径。  # noqa: E501

        :return: The url of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConfigCrl.

        必选参数；指定获取路径。  # noqa: E501

        :param url: The url of this ConfigCrl.  # noqa: E501
        :type: str
        """
        if url is not None and len(url) > 1024:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `1024`")  # noqa: E501
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def username(self):
        """Gets the username of this ConfigCrl.  # noqa: E501

        指定用户名。  # noqa: E501

        :return: The username of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigCrl.

        指定用户名。  # noqa: E501

        :param username: The username of this ConfigCrl.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 31:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `31`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigCrl.  # noqa: E501

        指定密码。  # noqa: E501

        :return: The password of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigCrl.

        指定密码。  # noqa: E501

        :param password: The password of this ConfigCrl.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 24:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `24`")  # noqa: E501

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigCrl.  # noqa: E501

        指定加密密码  # noqa: E501

        :return: The pk_password of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigCrl.

        指定加密密码  # noqa: E501

        :param pk_password: The pk_password of this ConfigCrl.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this ConfigCrl.  # noqa: E501

        指定加密密码。  # noqa: E501

        :return: The encrypted_password of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this ConfigCrl.

        指定加密密码。  # noqa: E501

        :param encrypted_password: The encrypted_password of this ConfigCrl.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def timeout(self):
        """Gets the timeout of this ConfigCrl.  # noqa: E501

        必选参数；指定超时时间。  # noqa: E501

        :return: The timeout of this ConfigCrl.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigCrl.

        必选参数；指定超时时间。  # noqa: E501

        :param timeout: The timeout of this ConfigCrl.  # noqa: E501
        :type: int
        """
        if timeout is not None and timeout > 3600:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `3600`")  # noqa: E501
        if timeout is not None and timeout < 10:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `10`")  # noqa: E501

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigCrl.  # noqa: E501

        必选参数；指定获取时间间隔。  # noqa: E501

        :return: The interval of this ConfigCrl.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigCrl.

        必选参数；指定获取时间间隔。  # noqa: E501

        :param interval: The interval of this ConfigCrl.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 2592000:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `2592000`")  # noqa: E501
        if interval is not None and interval < 60:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `60`")  # noqa: E501

        self._interval = interval

    @property
    def retry_times(self):
        """Gets the retry_times of this ConfigCrl.  # noqa: E501

        必选参数；指定重试次数。  # noqa: E501

        :return: The retry_times of this ConfigCrl.  # noqa: E501
        :rtype: int
        """
        return self._retry_times

    @retry_times.setter
    def retry_times(self, retry_times):
        """Sets the retry_times of this ConfigCrl.

        必选参数；指定重试次数。  # noqa: E501

        :param retry_times: The retry_times of this ConfigCrl.  # noqa: E501
        :type: int
        """
        if retry_times is not None and retry_times > 20:  # noqa: E501
            raise ValueError("Invalid value for `retry_times`, must be a value less than or equal to `20`")  # noqa: E501
        if retry_times is not None and retry_times < 0:  # noqa: E501
            raise ValueError("Invalid value for `retry_times`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retry_times = retry_times

    @property
    def network(self):
        """Gets the network of this ConfigCrl.  # noqa: E501

        可选参数；选择的网络。  # noqa: E501

        :return: The network of this ConfigCrl.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigCrl.

        可选参数；选择的网络。  # noqa: E501

        :param network: The network of this ConfigCrl.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCrl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
