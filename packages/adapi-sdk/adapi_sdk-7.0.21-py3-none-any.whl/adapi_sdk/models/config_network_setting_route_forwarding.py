# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNetworkSettingRouteForwarding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wan_inbound_traffic': 'str',
        'symmetric_routing': 'str',
        'icmp_echo_reply': 'str',
        'icmp_ttl_equals_zero': 'str',
        'loose_initiation': 'str'
    }

    attribute_map = {
        'wan_inbound_traffic': 'wan_inbound_traffic',
        'symmetric_routing': 'symmetric_routing',
        'icmp_echo_reply': 'icmp_echo_reply',
        'icmp_ttl_equals_zero': 'icmp_ttl_equals_zero',
        'loose_initiation': 'loose_initiation'
    }

    def __init__(self, wan_inbound_traffic='DISABLE', symmetric_routing='ENABLE', icmp_echo_reply='ENABLE', icmp_ttl_equals_zero='ENABLE', loose_initiation='ENABLE'):  # noqa: E501
        """ConfigNetworkSettingRouteForwarding - a model defined in Swagger"""  # noqa: E501

        self._wan_inbound_traffic = None
        self._symmetric_routing = None
        self._icmp_echo_reply = None
        self._icmp_ttl_equals_zero = None
        self._loose_initiation = None
        self.discriminator = None

        if wan_inbound_traffic is not None:
            self.wan_inbound_traffic = wan_inbound_traffic
        if symmetric_routing is not None:
            self.symmetric_routing = symmetric_routing
        if icmp_echo_reply is not None:
            self.icmp_echo_reply = icmp_echo_reply
        if icmp_ttl_equals_zero is not None:
            self.icmp_ttl_equals_zero = icmp_ttl_equals_zero
        if loose_initiation is not None:
            self.loose_initiation = loose_initiation

    @property
    def wan_inbound_traffic(self):
        """Gets the wan_inbound_traffic of this ConfigNetworkSettingRouteForwarding.  # noqa: E501

        WAN口入站路由转发  # noqa: E501

        :return: The wan_inbound_traffic of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :rtype: str
        """
        return self._wan_inbound_traffic

    @wan_inbound_traffic.setter
    def wan_inbound_traffic(self, wan_inbound_traffic):
        """Sets the wan_inbound_traffic of this ConfigNetworkSettingRouteForwarding.

        WAN口入站路由转发  # noqa: E501

        :param wan_inbound_traffic: The wan_inbound_traffic of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if wan_inbound_traffic not in allowed_values:
            raise ValueError(
                "Invalid value for `wan_inbound_traffic` ({0}), must be one of {1}"  # noqa: E501
                .format(wan_inbound_traffic, allowed_values)
            )

        self._wan_inbound_traffic = wan_inbound_traffic

    @property
    def symmetric_routing(self):
        """Gets the symmetric_routing of this ConfigNetworkSettingRouteForwarding.  # noqa: E501

        对称路由模式  # noqa: E501

        :return: The symmetric_routing of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :rtype: str
        """
        return self._symmetric_routing

    @symmetric_routing.setter
    def symmetric_routing(self, symmetric_routing):
        """Sets the symmetric_routing of this ConfigNetworkSettingRouteForwarding.

        对称路由模式  # noqa: E501

        :param symmetric_routing: The symmetric_routing of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if symmetric_routing not in allowed_values:
            raise ValueError(
                "Invalid value for `symmetric_routing` ({0}), must be one of {1}"  # noqa: E501
                .format(symmetric_routing, allowed_values)
            )

        self._symmetric_routing = symmetric_routing

    @property
    def icmp_echo_reply(self):
        """Gets the icmp_echo_reply of this ConfigNetworkSettingRouteForwarding.  # noqa: E501

        允许ping本端  # noqa: E501

        :return: The icmp_echo_reply of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :rtype: str
        """
        return self._icmp_echo_reply

    @icmp_echo_reply.setter
    def icmp_echo_reply(self, icmp_echo_reply):
        """Sets the icmp_echo_reply of this ConfigNetworkSettingRouteForwarding.

        允许ping本端  # noqa: E501

        :param icmp_echo_reply: The icmp_echo_reply of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if icmp_echo_reply not in allowed_values:
            raise ValueError(
                "Invalid value for `icmp_echo_reply` ({0}), must be one of {1}"  # noqa: E501
                .format(icmp_echo_reply, allowed_values)
            )

        self._icmp_echo_reply = icmp_echo_reply

    @property
    def icmp_ttl_equals_zero(self):
        """Gets the icmp_ttl_equals_zero of this ConfigNetworkSettingRouteForwarding.  # noqa: E501

        允许traceroute/tracert  # noqa: E501

        :return: The icmp_ttl_equals_zero of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :rtype: str
        """
        return self._icmp_ttl_equals_zero

    @icmp_ttl_equals_zero.setter
    def icmp_ttl_equals_zero(self, icmp_ttl_equals_zero):
        """Sets the icmp_ttl_equals_zero of this ConfigNetworkSettingRouteForwarding.

        允许traceroute/tracert  # noqa: E501

        :param icmp_ttl_equals_zero: The icmp_ttl_equals_zero of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if icmp_ttl_equals_zero not in allowed_values:
            raise ValueError(
                "Invalid value for `icmp_ttl_equals_zero` ({0}), must be one of {1}"  # noqa: E501
                .format(icmp_ttl_equals_zero, allowed_values)
            )

        self._icmp_ttl_equals_zero = icmp_ttl_equals_zero

    @property
    def loose_initiation(self):
        """Gets the loose_initiation of this ConfigNetworkSettingRouteForwarding.  # noqa: E501

        允许非SYN建立会话  # noqa: E501

        :return: The loose_initiation of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :rtype: str
        """
        return self._loose_initiation

    @loose_initiation.setter
    def loose_initiation(self, loose_initiation):
        """Sets the loose_initiation of this ConfigNetworkSettingRouteForwarding.

        允许非SYN建立会话  # noqa: E501

        :param loose_initiation: The loose_initiation of this ConfigNetworkSettingRouteForwarding.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if loose_initiation not in allowed_values:
            raise ValueError(
                "Invalid value for `loose_initiation` ({0}), must be one of {1}"  # noqa: E501
                .format(loose_initiation, allowed_values)
            )

        self._loose_initiation = loose_initiation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNetworkSettingRouteForwarding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNetworkSettingRouteForwarding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
