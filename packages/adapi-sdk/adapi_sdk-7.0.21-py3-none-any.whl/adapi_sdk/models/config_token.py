# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'client_name': 'str',
        'user_name': 'str',
        'role_name': 'str',
        'source_address': 'str',
        'timeout': 'int',
        'create_timestamp': 'int',
        'access_timestamp': 'int',
        'expired_timestamp': 'int'
    }

    attribute_map = {
        'name': 'name',
        'client_name': 'client_name',
        'user_name': 'user_name',
        'role_name': 'role_name',
        'source_address': 'source_address',
        'timeout': 'timeout',
        'create_timestamp': 'create_timestamp',
        'access_timestamp': 'access_timestamp',
        'expired_timestamp': 'expired_timestamp'
    }

    def __init__(self, name=None, client_name=None, user_name=None, role_name=None, source_address=None, timeout=None, create_timestamp=None, access_timestamp=None, expired_timestamp=None):  # noqa: E501
        """ConfigToken - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._client_name = None
        self._user_name = None
        self._role_name = None
        self._source_address = None
        self._timeout = None
        self._create_timestamp = None
        self._access_timestamp = None
        self._expired_timestamp = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if client_name is not None:
            self.client_name = client_name
        if user_name is not None:
            self.user_name = user_name
        if role_name is not None:
            self.role_name = role_name
        if source_address is not None:
            self.source_address = source_address
        if timeout is not None:
            self.timeout = timeout
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if access_timestamp is not None:
            self.access_timestamp = access_timestamp
        if expired_timestamp is not None:
            self.expired_timestamp = expired_timestamp

    @property
    def name(self):
        """Gets the name of this ConfigToken.  # noqa: E501

        令牌  # noqa: E501

        :return: The name of this ConfigToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigToken.

        令牌  # noqa: E501

        :param name: The name of this ConfigToken.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_name(self):
        """Gets the client_name of this ConfigToken.  # noqa: E501

        主机名称  # noqa: E501

        :return: The client_name of this ConfigToken.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this ConfigToken.

        主机名称  # noqa: E501

        :param client_name: The client_name of this ConfigToken.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def user_name(self):
        """Gets the user_name of this ConfigToken.  # noqa: E501

        用户名称，必须已存在  # noqa: E501

        :return: The user_name of this ConfigToken.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ConfigToken.

        用户名称，必须已存在  # noqa: E501

        :param user_name: The user_name of this ConfigToken.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def role_name(self):
        """Gets the role_name of this ConfigToken.  # noqa: E501

        角色名称  # noqa: E501

        :return: The role_name of this ConfigToken.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ConfigToken.

        角色名称  # noqa: E501

        :param role_name: The role_name of this ConfigToken.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def source_address(self):
        """Gets the source_address of this ConfigToken.  # noqa: E501

        源地址  # noqa: E501

        :return: The source_address of this ConfigToken.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this ConfigToken.

        源地址  # noqa: E501

        :param source_address: The source_address of this ConfigToken.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def timeout(self):
        """Gets the timeout of this ConfigToken.  # noqa: E501

        超时时间  # noqa: E501

        :return: The timeout of this ConfigToken.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigToken.

        超时时间  # noqa: E501

        :param timeout: The timeout of this ConfigToken.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ConfigToken.  # noqa: E501

        令牌创建时间戳  # noqa: E501

        :return: The create_timestamp of this ConfigToken.  # noqa: E501
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ConfigToken.

        令牌创建时间戳  # noqa: E501

        :param create_timestamp: The create_timestamp of this ConfigToken.  # noqa: E501
        :type: int
        """

        self._create_timestamp = create_timestamp

    @property
    def access_timestamp(self):
        """Gets the access_timestamp of this ConfigToken.  # noqa: E501

        令牌访问时间戳  # noqa: E501

        :return: The access_timestamp of this ConfigToken.  # noqa: E501
        :rtype: int
        """
        return self._access_timestamp

    @access_timestamp.setter
    def access_timestamp(self, access_timestamp):
        """Sets the access_timestamp of this ConfigToken.

        令牌访问时间戳  # noqa: E501

        :param access_timestamp: The access_timestamp of this ConfigToken.  # noqa: E501
        :type: int
        """

        self._access_timestamp = access_timestamp

    @property
    def expired_timestamp(self):
        """Gets the expired_timestamp of this ConfigToken.  # noqa: E501

        令牌到期时间戳  # noqa: E501

        :return: The expired_timestamp of this ConfigToken.  # noqa: E501
        :rtype: int
        """
        return self._expired_timestamp

    @expired_timestamp.setter
    def expired_timestamp(self, expired_timestamp):
        """Sets the expired_timestamp of this ConfigToken.

        令牌到期时间戳  # noqa: E501

        :param expired_timestamp: The expired_timestamp of this ConfigToken.  # noqa: E501
        :type: int
        """

        self._expired_timestamp = expired_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
