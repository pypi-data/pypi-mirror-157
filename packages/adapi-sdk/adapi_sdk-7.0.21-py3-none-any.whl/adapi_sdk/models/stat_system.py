# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501
from adapi_sdk.models.stat_system_fan import StatSystemFan  # noqa: F401,E501
from adapi_sdk.models.stat_system_interface import StatSystemInterface  # noqa: F401,E501
from adapi_sdk.models.stat_system_temperature import StatSystemTemperature  # noqa: F401,E501


class StatSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_time': 'int',
        'interface': 'StatSystemInterface',
        'temperature': 'list[StatSystemTemperature]',
        'fan': 'list[StatSystemFan]',
        'power_supply': 'str',
        'cpu_usage': 'StatStatisticInstant',
        'memory_usage': 'StatStatisticInstant',
        'connection': 'StatStatisticInstant',
        'connection_rate': 'StatStatisticInstant',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'hardware': 'list[str]'
    }

    attribute_map = {
        'boot_time': 'boot_time',
        'interface': 'interface',
        'temperature': 'temperature',
        'fan': 'fan',
        'power_supply': 'power_supply',
        'cpu_usage': 'cpu_usage',
        'memory_usage': 'memory_usage',
        'connection': 'connection',
        'connection_rate': 'connection_rate',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'hardware': 'hardware'
    }

    def __init__(self, boot_time=None, interface=None, temperature=None, fan=None, power_supply=None, cpu_usage=None, memory_usage=None, connection=None, connection_rate=None, upstream_throughput=None, downstream_throughput=None, hardware=None):  # noqa: E501
        """StatSystem - a model defined in Swagger"""  # noqa: E501

        self._boot_time = None
        self._interface = None
        self._temperature = None
        self._fan = None
        self._power_supply = None
        self._cpu_usage = None
        self._memory_usage = None
        self._connection = None
        self._connection_rate = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._hardware = None
        self.discriminator = None

        if boot_time is not None:
            self.boot_time = boot_time
        if interface is not None:
            self.interface = interface
        if temperature is not None:
            self.temperature = temperature
        if fan is not None:
            self.fan = fan
        if power_supply is not None:
            self.power_supply = power_supply
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if connection is not None:
            self.connection = connection
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if hardware is not None:
            self.hardware = hardware

    @property
    def boot_time(self):
        """Gets the boot_time of this StatSystem.  # noqa: E501

        系统启动时长  # noqa: E501

        :return: The boot_time of this StatSystem.  # noqa: E501
        :rtype: int
        """
        return self._boot_time

    @boot_time.setter
    def boot_time(self, boot_time):
        """Sets the boot_time of this StatSystem.

        系统启动时长  # noqa: E501

        :param boot_time: The boot_time of this StatSystem.  # noqa: E501
        :type: int
        """

        self._boot_time = boot_time

    @property
    def interface(self):
        """Gets the interface of this StatSystem.  # noqa: E501


        :return: The interface of this StatSystem.  # noqa: E501
        :rtype: StatSystemInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this StatSystem.


        :param interface: The interface of this StatSystem.  # noqa: E501
        :type: StatSystemInterface
        """

        self._interface = interface

    @property
    def temperature(self):
        """Gets the temperature of this StatSystem.  # noqa: E501

        硬件温度状态  # noqa: E501

        :return: The temperature of this StatSystem.  # noqa: E501
        :rtype: list[StatSystemTemperature]
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this StatSystem.

        硬件温度状态  # noqa: E501

        :param temperature: The temperature of this StatSystem.  # noqa: E501
        :type: list[StatSystemTemperature]
        """

        self._temperature = temperature

    @property
    def fan(self):
        """Gets the fan of this StatSystem.  # noqa: E501

        风扇运行状态  # noqa: E501

        :return: The fan of this StatSystem.  # noqa: E501
        :rtype: list[StatSystemFan]
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """Sets the fan of this StatSystem.

        风扇运行状态  # noqa: E501

        :param fan: The fan of this StatSystem.  # noqa: E501
        :type: list[StatSystemFan]
        """

        self._fan = fan

    @property
    def power_supply(self):
        """Gets the power_supply of this StatSystem.  # noqa: E501

        设备电源状态（UNSUPPORTED-不支持/NORMAL-正常/ALARM-1-电源1故障/ALARM-2-电源2故障/FAILURE-电源故障）  # noqa: E501

        :return: The power_supply of this StatSystem.  # noqa: E501
        :rtype: str
        """
        return self._power_supply

    @power_supply.setter
    def power_supply(self, power_supply):
        """Sets the power_supply of this StatSystem.

        设备电源状态（UNSUPPORTED-不支持/NORMAL-正常/ALARM-1-电源1故障/ALARM-2-电源2故障/FAILURE-电源故障）  # noqa: E501

        :param power_supply: The power_supply of this StatSystem.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNSUPPORTED", "NORMAL", "ALARM-1", "ALARM-2", "FAILURE"]  # noqa: E501
        if power_supply not in allowed_values:
            raise ValueError(
                "Invalid value for `power_supply` ({0}), must be one of {1}"  # noqa: E501
                .format(power_supply, allowed_values)
            )

        self._power_supply = power_supply

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this StatSystem.  # noqa: E501

        CPU使用率  # noqa: E501

        :return: The cpu_usage of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this StatSystem.

        CPU使用率  # noqa: E501

        :param cpu_usage: The cpu_usage of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self):
        """Gets the memory_usage of this StatSystem.  # noqa: E501

        内存使用率  # noqa: E501

        :return: The memory_usage of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this StatSystem.

        内存使用率  # noqa: E501

        :param memory_usage: The memory_usage of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._memory_usage = memory_usage

    @property
    def connection(self):
        """Gets the connection of this StatSystem.  # noqa: E501

        系统并发连接数  # noqa: E501

        :return: The connection of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatSystem.

        系统并发连接数  # noqa: E501

        :param connection: The connection of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatSystem.  # noqa: E501

        系统新建连接  # noqa: E501

        :return: The connection_rate of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatSystem.

        系统新建连接  # noqa: E501

        :param connection_rate: The connection_rate of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatSystem.  # noqa: E501

        系统上行吞吐量  # noqa: E501

        :return: The upstream_throughput of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatSystem.

        系统上行吞吐量  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatSystem.  # noqa: E501

        系统下行吞吐量  # noqa: E501

        :return: The downstream_throughput of this StatSystem.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatSystem.

        系统下行吞吐量  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatSystem.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def hardware(self):
        """Gets the hardware of this StatSystem.  # noqa: E501

        硬件/外设信息（SSL-ACCELERATOR-CARD-SSL卸载加速卡/ENCRYPTION-CARD-SSL加密卡）  # noqa: E501

        :return: The hardware of this StatSystem.  # noqa: E501
        :rtype: list[str]
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this StatSystem.

        硬件/外设信息（SSL-ACCELERATOR-CARD-SSL卸载加速卡/ENCRYPTION-CARD-SSL加密卡）  # noqa: E501

        :param hardware: The hardware of this StatSystem.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SSL-ACCELERATOR-CARD", "ENCRYPTION-CARD", "<...>"]  # noqa: E501
        if not set(hardware).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `hardware` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(hardware) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._hardware = hardware

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
