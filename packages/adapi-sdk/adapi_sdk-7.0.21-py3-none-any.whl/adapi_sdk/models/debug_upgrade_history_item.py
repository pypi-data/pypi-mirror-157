# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugUpgradeHistoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'version': 'str',
        'ssu_name': 'str',
        'upgrade_time': 'str',
        'result': 'str',
        'method': 'str',
        'rollback': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'ssu_name': 'ssu_name',
        'upgrade_time': 'upgrade_time',
        'result': 'result',
        'method': 'method',
        'rollback': 'rollback'
    }

    def __init__(self, id=None, version=None, ssu_name=None, upgrade_time=None, result=None, method=None, rollback=None):  # noqa: E501
        """DebugUpgradeHistoryItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._version = None
        self._ssu_name = None
        self._upgrade_time = None
        self._result = None
        self._method = None
        self._rollback = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if ssu_name is not None:
            self.ssu_name = ssu_name
        if upgrade_time is not None:
            self.upgrade_time = upgrade_time
        if result is not None:
            self.result = result
        if method is not None:
            self.method = method
        if rollback is not None:
            self.rollback = rollback

    @property
    def id(self):
        """Gets the id of this DebugUpgradeHistoryItem.  # noqa: E501

        升级历史id  # noqa: E501

        :return: The id of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DebugUpgradeHistoryItem.

        升级历史id  # noqa: E501

        :param id: The id of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this DebugUpgradeHistoryItem.  # noqa: E501

        升级版本  # noqa: E501

        :return: The version of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DebugUpgradeHistoryItem.

        升级版本  # noqa: E501

        :param version: The version of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def ssu_name(self):
        """Gets the ssu_name of this DebugUpgradeHistoryItem.  # noqa: E501

        ssu升级包名称  # noqa: E501

        :return: The ssu_name of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._ssu_name

    @ssu_name.setter
    def ssu_name(self, ssu_name):
        """Sets the ssu_name of this DebugUpgradeHistoryItem.

        ssu升级包名称  # noqa: E501

        :param ssu_name: The ssu_name of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """

        self._ssu_name = ssu_name

    @property
    def upgrade_time(self):
        """Gets the upgrade_time of this DebugUpgradeHistoryItem.  # noqa: E501

        升级时间  # noqa: E501

        :return: The upgrade_time of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_time

    @upgrade_time.setter
    def upgrade_time(self, upgrade_time):
        """Sets the upgrade_time of this DebugUpgradeHistoryItem.

        升级时间  # noqa: E501

        :param upgrade_time: The upgrade_time of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """

        self._upgrade_time = upgrade_time

    @property
    def result(self):
        """Gets the result of this DebugUpgradeHistoryItem.  # noqa: E501

        升级结果  # noqa: E501

        :return: The result of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DebugUpgradeHistoryItem.

        升级结果  # noqa: E501

        :param result: The result of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILURE"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def method(self):
        """Gets the method of this DebugUpgradeHistoryItem.  # noqa: E501

        升级方式  # noqa: E501

        :return: The method of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DebugUpgradeHistoryItem.

        升级方式  # noqa: E501

        :param method: The method of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["DLAN-CLIENT", "WEB-CONSOLE", "SSH-CONSOLE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def rollback(self):
        """Gets the rollback of this DebugUpgradeHistoryItem.  # noqa: E501

        是否为回滚  # noqa: E501

        :return: The rollback of this DebugUpgradeHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._rollback

    @rollback.setter
    def rollback(self, rollback):
        """Sets the rollback of this DebugUpgradeHistoryItem.

        是否为回滚  # noqa: E501

        :param rollback: The rollback of this DebugUpgradeHistoryItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if rollback not in allowed_values:
            raise ValueError(
                "Invalid value for `rollback` ({0}), must be one of {1}"  # noqa: E501
                .format(rollback, allowed_values)
            )

        self._rollback = rollback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugUpgradeHistoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugUpgradeHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
