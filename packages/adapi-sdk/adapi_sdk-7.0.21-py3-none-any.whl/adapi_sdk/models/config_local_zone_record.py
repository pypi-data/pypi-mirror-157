# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLocalZoneRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_child': 'str',
        'domain': 'str',
        'ttl': 'int',
        '_class': 'str',
        'record_type': 'str',
        'v4': 'str',
        'v6': 'str',
        'host': 'str',
        'soa_host': 'str',
        'serial': 'int',
        'refresh_interval': 'int',
        'retry_delay': 'int',
        'expire_time': 'int',
        'min_ttl': 'int',
        'port': 'int',
        'priority': 'int',
        'weight': 'int',
        'txt': 'str'
    }

    attribute_map = {
        'record_child': 'record_child',
        'domain': 'domain',
        'ttl': 'ttl',
        '_class': 'class',
        'record_type': 'record_type',
        'v4': 'v4',
        'v6': 'v6',
        'host': 'host',
        'soa_host': 'soa_host',
        'serial': 'serial',
        'refresh_interval': 'refresh_interval',
        'retry_delay': 'retry_delay',
        'expire_time': 'expire_time',
        'min_ttl': 'min_ttl',
        'port': 'port',
        'priority': 'priority',
        'weight': 'weight',
        'txt': 'txt'
    }

    def __init__(self, record_child=None, domain=None, ttl=None, _class='IN', record_type=None, v4=None, v6=None, host=None, soa_host=None, serial=None, refresh_interval=None, retry_delay=None, expire_time=None, min_ttl=None, port=None, priority=None, weight=None, txt=None):  # noqa: E501
        """ConfigLocalZoneRecord - a model defined in Swagger"""  # noqa: E501

        self._record_child = None
        self._domain = None
        self._ttl = None
        self.__class = None
        self._record_type = None
        self._v4 = None
        self._v6 = None
        self._host = None
        self._soa_host = None
        self._serial = None
        self._refresh_interval = None
        self._retry_delay = None
        self._expire_time = None
        self._min_ttl = None
        self._port = None
        self._priority = None
        self._weight = None
        self._txt = None
        self.discriminator = None

        if record_child is not None:
            self.record_child = record_child
        if domain is not None:
            self.domain = domain
        if ttl is not None:
            self.ttl = ttl
        if _class is not None:
            self._class = _class
        if record_type is not None:
            self.record_type = record_type
        if v4 is not None:
            self.v4 = v4
        if v6 is not None:
            self.v6 = v6
        if host is not None:
            self.host = host
        if soa_host is not None:
            self.soa_host = soa_host
        if serial is not None:
            self.serial = serial
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if retry_delay is not None:
            self.retry_delay = retry_delay
        if expire_time is not None:
            self.expire_time = expire_time
        if min_ttl is not None:
            self.min_ttl = min_ttl
        if port is not None:
            self.port = port
        if priority is not None:
            self.priority = priority
        if weight is not None:
            self.weight = weight
        if txt is not None:
            self.txt = txt

    @property
    def record_child(self):
        """Gets the record_child of this ConfigLocalZoneRecord.  # noqa: E501

        RFC标准的DNS记录：“域名 TTL class DNS记录类型 DNS记录值”，校验时域名按域名格式，TTL输入范围[0,86400]，class须为IN，DNS记录类型为A/AAAA/CNAME/MX/TXT/NS/SOA/SRV  # noqa: E501

        :return: The record_child of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_child

    @record_child.setter
    def record_child(self, record_child):
        """Sets the record_child of this ConfigLocalZoneRecord.

        RFC标准的DNS记录：“域名 TTL class DNS记录类型 DNS记录值”，校验时域名按域名格式，TTL输入范围[0,86400]，class须为IN，DNS记录类型为A/AAAA/CNAME/MX/TXT/NS/SOA/SRV  # noqa: E501

        :param record_child: The record_child of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._record_child = record_child

    @property
    def domain(self):
        """Gets the domain of this ConfigLocalZoneRecord.  # noqa: E501

        DNS记录中的域名  # noqa: E501

        :return: The domain of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigLocalZoneRecord.

        DNS记录中的域名  # noqa: E501

        :param domain: The domain of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ttl(self):
        """Gets the ttl of this ConfigLocalZoneRecord.  # noqa: E501

        TTL超时时间范围为0-86400  # noqa: E501

        :return: The ttl of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigLocalZoneRecord.

        TTL超时时间范围为0-86400  # noqa: E501

        :param ttl: The ttl of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    @property
    def _class(self):
        """Gets the _class of this ConfigLocalZoneRecord.  # noqa: E501

        DNS记录中的CLASS  # noqa: E501

        :return: The _class of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ConfigLocalZoneRecord.

        DNS记录中的CLASS  # noqa: E501

        :param _class: The _class of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def record_type(self):
        """Gets the record_type of this ConfigLocalZoneRecord.  # noqa: E501

        DNS记录中的DNS记录类型  # noqa: E501

        :return: The record_type of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ConfigLocalZoneRecord.

        DNS记录中的DNS记录类型  # noqa: E501

        :param record_type: The record_type of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def v4(self):
        """Gets the v4 of this ConfigLocalZoneRecord.  # noqa: E501

        A记录中的IPV4地址  # noqa: E501

        :return: The v4 of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._v4

    @v4.setter
    def v4(self, v4):
        """Sets the v4 of this ConfigLocalZoneRecord.

        A记录中的IPV4地址  # noqa: E501

        :param v4: The v4 of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._v4 = v4

    @property
    def v6(self):
        """Gets the v6 of this ConfigLocalZoneRecord.  # noqa: E501

        AAAA记录中的IPV6地址  # noqa: E501

        :return: The v6 of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._v6

    @v6.setter
    def v6(self, v6):
        """Sets the v6 of this ConfigLocalZoneRecord.

        AAAA记录中的IPV6地址  # noqa: E501

        :param v6: The v6 of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._v6 = v6

    @property
    def host(self):
        """Gets the host of this ConfigLocalZoneRecord.  # noqa: E501

        LDNS记录中的主机名  # noqa: E501

        :return: The host of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConfigLocalZoneRecord.

        LDNS记录中的主机名  # noqa: E501

        :param host: The host of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def soa_host(self):
        """Gets the soa_host of this ConfigLocalZoneRecord.  # noqa: E501

        SOA记录中的电子邮件  # noqa: E501

        :return: The soa_host of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._soa_host

    @soa_host.setter
    def soa_host(self, soa_host):
        """Sets the soa_host of this ConfigLocalZoneRecord.

        SOA记录中的电子邮件  # noqa: E501

        :param soa_host: The soa_host of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """

        self._soa_host = soa_host

    @property
    def serial(self):
        """Gets the serial of this ConfigLocalZoneRecord.  # noqa: E501

        soa记录的序列号  # noqa: E501

        :return: The serial of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this ConfigLocalZoneRecord.

        soa记录的序列号  # noqa: E501

        :param serial: The serial of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if serial is not None and serial > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `serial`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if serial is not None and serial < 0:  # noqa: E501
            raise ValueError("Invalid value for `serial`, must be a value greater than or equal to `0`")  # noqa: E501

        self._serial = serial

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this ConfigLocalZoneRecord.  # noqa: E501

        soa记录的刷新时间  # noqa: E501

        :return: The refresh_interval of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this ConfigLocalZoneRecord.

        soa记录的刷新时间  # noqa: E501

        :param refresh_interval: The refresh_interval of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if refresh_interval is not None and refresh_interval > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `refresh_interval`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if refresh_interval is not None and refresh_interval < 0:  # noqa: E501
            raise ValueError("Invalid value for `refresh_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refresh_interval = refresh_interval

    @property
    def retry_delay(self):
        """Gets the retry_delay of this ConfigLocalZoneRecord.  # noqa: E501

        soa记录的重试时间  # noqa: E501

        :return: The retry_delay of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._retry_delay

    @retry_delay.setter
    def retry_delay(self, retry_delay):
        """Sets the retry_delay of this ConfigLocalZoneRecord.

        soa记录的重试时间  # noqa: E501

        :param retry_delay: The retry_delay of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if retry_delay is not None and retry_delay > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `retry_delay`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if retry_delay is not None and retry_delay < 0:  # noqa: E501
            raise ValueError("Invalid value for `retry_delay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retry_delay = retry_delay

    @property
    def expire_time(self):
        """Gets the expire_time of this ConfigLocalZoneRecord.  # noqa: E501

        soa记录的到期时间  # noqa: E501

        :return: The expire_time of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ConfigLocalZoneRecord.

        soa记录的到期时间  # noqa: E501

        :param expire_time: The expire_time of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if expire_time is not None and expire_time > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `expire_time`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if expire_time is not None and expire_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `expire_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expire_time = expire_time

    @property
    def min_ttl(self):
        """Gets the min_ttl of this ConfigLocalZoneRecord.  # noqa: E501

        soa记录的最小记录生存时间  # noqa: E501

        :return: The min_ttl of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._min_ttl

    @min_ttl.setter
    def min_ttl(self, min_ttl):
        """Sets the min_ttl of this ConfigLocalZoneRecord.

        soa记录的最小记录生存时间  # noqa: E501

        :param min_ttl: The min_ttl of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if min_ttl is not None and min_ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `min_ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if min_ttl is not None and min_ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_ttl = min_ttl

    @property
    def port(self):
        """Gets the port of this ConfigLocalZoneRecord.  # noqa: E501

        srv记录的端口  # noqa: E501

        :return: The port of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigLocalZoneRecord.

        srv记录的端口  # noqa: E501

        :param port: The port of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def priority(self):
        """Gets the priority of this ConfigLocalZoneRecord.  # noqa: E501

        记录的优先级  # noqa: E501

        :return: The priority of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigLocalZoneRecord.

        记录的优先级  # noqa: E501

        :param priority: The priority of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def weight(self):
        """Gets the weight of this ConfigLocalZoneRecord.  # noqa: E501

        srv记录的权重  # noqa: E501

        :return: The weight of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigLocalZoneRecord.

        srv记录的权重  # noqa: E501

        :param weight: The weight of this ConfigLocalZoneRecord.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._weight = weight

    @property
    def txt(self):
        """Gets the txt of this ConfigLocalZoneRecord.  # noqa: E501

        txt记录的记录值  # noqa: E501

        :return: The txt of this ConfigLocalZoneRecord.  # noqa: E501
        :rtype: str
        """
        return self._txt

    @txt.setter
    def txt(self, txt):
        """Sets the txt of this ConfigLocalZoneRecord.

        txt记录的记录值  # noqa: E501

        :param txt: The txt of this ConfigLocalZoneRecord.  # noqa: E501
        :type: str
        """
        if txt is not None and len(txt) > 255:
            raise ValueError("Invalid value for `txt`, length must be less than or equal to `255`")  # noqa: E501
        if txt is not None and len(txt) < 1:
            raise ValueError("Invalid value for `txt`, length must be greater than or equal to `1`")  # noqa: E501

        self._txt = txt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalZoneRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalZoneRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
