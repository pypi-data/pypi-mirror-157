# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPermissionPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_path': 'str',
        'get': 'str',
        'post': 'str',
        'put': 'str',
        'patch': 'str',
        'delete': 'str'
    }

    attribute_map = {
        'api_path': 'api_path',
        'get': 'get',
        'post': 'post',
        'put': 'put',
        'patch': 'patch',
        'delete': 'delete'
    }

    def __init__(self, api_path=None, get='ENABLE', post='ENABLE', put='ENABLE', patch='ENABLE', delete='ENABLE'):  # noqa: E501
        """ConfigPermissionPermissions - a model defined in Swagger"""  # noqa: E501

        self._api_path = None
        self._get = None
        self._post = None
        self._put = None
        self._patch = None
        self._delete = None
        self.discriminator = None

        self.api_path = api_path
        if get is not None:
            self.get = get
        if post is not None:
            self.post = post
        if put is not None:
            self.put = put
        if patch is not None:
            self.patch = patch
        if delete is not None:
            self.delete = delete

    @property
    def api_path(self):
        """Gets the api_path of this ConfigPermissionPermissions.  # noqa: E501

        api路径  # noqa: E501

        :return: The api_path of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._api_path

    @api_path.setter
    def api_path(self, api_path):
        """Sets the api_path of this ConfigPermissionPermissions.

        api路径  # noqa: E501

        :param api_path: The api_path of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        if api_path is None:
            raise ValueError("Invalid value for `api_path`, must not be `None`")  # noqa: E501

        self._api_path = api_path

    @property
    def get(self):
        """Gets the get of this ConfigPermissionPermissions.  # noqa: E501

        get接口权限  # noqa: E501

        :return: The get of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._get

    @get.setter
    def get(self, get):
        """Sets the get of this ConfigPermissionPermissions.

        get接口权限  # noqa: E501

        :param get: The get of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if get not in allowed_values:
            raise ValueError(
                "Invalid value for `get` ({0}), must be one of {1}"  # noqa: E501
                .format(get, allowed_values)
            )

        self._get = get

    @property
    def post(self):
        """Gets the post of this ConfigPermissionPermissions.  # noqa: E501

        post接口权限  # noqa: E501

        :return: The post of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this ConfigPermissionPermissions.

        post接口权限  # noqa: E501

        :param post: The post of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if post not in allowed_values:
            raise ValueError(
                "Invalid value for `post` ({0}), must be one of {1}"  # noqa: E501
                .format(post, allowed_values)
            )

        self._post = post

    @property
    def put(self):
        """Gets the put of this ConfigPermissionPermissions.  # noqa: E501

        put接口权限  # noqa: E501

        :return: The put of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._put

    @put.setter
    def put(self, put):
        """Sets the put of this ConfigPermissionPermissions.

        put接口权限  # noqa: E501

        :param put: The put of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if put not in allowed_values:
            raise ValueError(
                "Invalid value for `put` ({0}), must be one of {1}"  # noqa: E501
                .format(put, allowed_values)
            )

        self._put = put

    @property
    def patch(self):
        """Gets the patch of this ConfigPermissionPermissions.  # noqa: E501

        patch接口权限  # noqa: E501

        :return: The patch of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ConfigPermissionPermissions.

        patch接口权限  # noqa: E501

        :param patch: The patch of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if patch not in allowed_values:
            raise ValueError(
                "Invalid value for `patch` ({0}), must be one of {1}"  # noqa: E501
                .format(patch, allowed_values)
            )

        self._patch = patch

    @property
    def delete(self):
        """Gets the delete of this ConfigPermissionPermissions.  # noqa: E501

        delete接口权限  # noqa: E501

        :return: The delete of this ConfigPermissionPermissions.  # noqa: E501
        :rtype: str
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ConfigPermissionPermissions.

        delete接口权限  # noqa: E501

        :param delete: The delete of this ConfigPermissionPermissions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if delete not in allowed_values:
            raise ValueError(
                "Invalid value for `delete` ({0}), must be one of {1}"  # noqa: E501
                .format(delete, allowed_values)
            )

        self._delete = delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPermissionPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPermissionPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
