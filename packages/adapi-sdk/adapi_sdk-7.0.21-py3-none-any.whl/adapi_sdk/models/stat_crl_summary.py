# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatCrlSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crl_cache_used': 'StatStatisticInstant',
        'crl_cache_capacity': 'StatStatisticInstant',
        'crl_entry_count': 'int'
    }

    attribute_map = {
        'crl_cache_used': 'crl_cache_used',
        'crl_cache_capacity': 'crl_cache_capacity',
        'crl_entry_count': 'crl_entry_count'
    }

    def __init__(self, crl_cache_used=None, crl_cache_capacity=None, crl_entry_count=None):  # noqa: E501
        """StatCrlSummary - a model defined in Swagger"""  # noqa: E501

        self._crl_cache_used = None
        self._crl_cache_capacity = None
        self._crl_entry_count = None
        self.discriminator = None

        if crl_cache_used is not None:
            self.crl_cache_used = crl_cache_used
        if crl_cache_capacity is not None:
            self.crl_cache_capacity = crl_cache_capacity
        if crl_entry_count is not None:
            self.crl_entry_count = crl_entry_count

    @property
    def crl_cache_used(self):
        """Gets the crl_cache_used of this StatCrlSummary.  # noqa: E501

        CRL已使用缓存  # noqa: E501

        :return: The crl_cache_used of this StatCrlSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._crl_cache_used

    @crl_cache_used.setter
    def crl_cache_used(self, crl_cache_used):
        """Sets the crl_cache_used of this StatCrlSummary.

        CRL已使用缓存  # noqa: E501

        :param crl_cache_used: The crl_cache_used of this StatCrlSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._crl_cache_used = crl_cache_used

    @property
    def crl_cache_capacity(self):
        """Gets the crl_cache_capacity of this StatCrlSummary.  # noqa: E501

        CRL缓存容量  # noqa: E501

        :return: The crl_cache_capacity of this StatCrlSummary.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._crl_cache_capacity

    @crl_cache_capacity.setter
    def crl_cache_capacity(self, crl_cache_capacity):
        """Sets the crl_cache_capacity of this StatCrlSummary.

        CRL缓存容量  # noqa: E501

        :param crl_cache_capacity: The crl_cache_capacity of this StatCrlSummary.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._crl_cache_capacity = crl_cache_capacity

    @property
    def crl_entry_count(self):
        """Gets the crl_entry_count of this StatCrlSummary.  # noqa: E501

        CRL个数统计  # noqa: E501

        :return: The crl_entry_count of this StatCrlSummary.  # noqa: E501
        :rtype: int
        """
        return self._crl_entry_count

    @crl_entry_count.setter
    def crl_entry_count(self, crl_entry_count):
        """Sets the crl_entry_count of this StatCrlSummary.

        CRL个数统计  # noqa: E501

        :param crl_entry_count: The crl_entry_count of this StatCrlSummary.  # noqa: E501
        :type: int
        """

        self._crl_entry_count = crl_entry_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatCrlSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatCrlSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
