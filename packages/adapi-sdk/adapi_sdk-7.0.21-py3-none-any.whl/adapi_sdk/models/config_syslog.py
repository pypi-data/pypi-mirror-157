# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_syslog_servers import ConfigSyslogServers  # noqa: F401,E501


class ConfigSyslog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'servers': 'list[ConfigSyslogServers]',
        'message_encode': 'str',
        'information_log_facility': 'str',
        'alarm_log_facility': 'str',
        'error_log_facility': 'str',
        'ssl_log_facility': 'str',
        'operation_log_facility': 'str',
        'http_log_facility': 'str',
        'nat_log_facility': 'str',
        'ipro_log_facility': 'str'
    }

    attribute_map = {
        'state': 'state',
        'servers': 'servers',
        'message_encode': 'message_encode',
        'information_log_facility': 'information_log_facility',
        'alarm_log_facility': 'alarm_log_facility',
        'error_log_facility': 'error_log_facility',
        'ssl_log_facility': 'ssl_log_facility',
        'operation_log_facility': 'operation_log_facility',
        'http_log_facility': 'http_log_facility',
        'nat_log_facility': 'nat_log_facility',
        'ipro_log_facility': 'ipro_log_facility'
    }

    def __init__(self, state='ENABLE', servers=None, message_encode='UTF8', information_log_facility='NONE', alarm_log_facility='NONE', error_log_facility='NONE', ssl_log_facility='NONE', operation_log_facility='NONE', http_log_facility='NONE', nat_log_facility='NONE', ipro_log_facility='NONE'):  # noqa: E501
        """ConfigSyslog - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._servers = None
        self._message_encode = None
        self._information_log_facility = None
        self._alarm_log_facility = None
        self._error_log_facility = None
        self._ssl_log_facility = None
        self._operation_log_facility = None
        self._http_log_facility = None
        self._nat_log_facility = None
        self._ipro_log_facility = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if servers is not None:
            self.servers = servers
        if message_encode is not None:
            self.message_encode = message_encode
        if information_log_facility is not None:
            self.information_log_facility = information_log_facility
        if alarm_log_facility is not None:
            self.alarm_log_facility = alarm_log_facility
        if error_log_facility is not None:
            self.error_log_facility = error_log_facility
        if ssl_log_facility is not None:
            self.ssl_log_facility = ssl_log_facility
        if operation_log_facility is not None:
            self.operation_log_facility = operation_log_facility
        if http_log_facility is not None:
            self.http_log_facility = http_log_facility
        if nat_log_facility is not None:
            self.nat_log_facility = nat_log_facility
        if ipro_log_facility is not None:
            self.ipro_log_facility = ipro_log_facility

    @property
    def state(self):
        """Gets the state of this ConfigSyslog.  # noqa: E501

        可选参数；启/禁用（enable-启用/disable-禁用）  # noqa: E501

        :return: The state of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigSyslog.

        可选参数；启/禁用（enable-启用/disable-禁用）  # noqa: E501

        :param state: The state of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def servers(self):
        """Gets the servers of this ConfigSyslog.  # noqa: E501

        可选参数；Syslog服务器列表  # noqa: E501

        :return: The servers of this ConfigSyslog.  # noqa: E501
        :rtype: list[ConfigSyslogServers]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this ConfigSyslog.

        可选参数；Syslog服务器列表  # noqa: E501

        :param servers: The servers of this ConfigSyslog.  # noqa: E501
        :type: list[ConfigSyslogServers]
        """

        self._servers = servers

    @property
    def message_encode(self):
        """Gets the message_encode of this ConfigSyslog.  # noqa: E501

        可选参数；日志编码格式（ascii/utf8/gbk/gb2312），默认为utf8  # noqa: E501

        :return: The message_encode of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._message_encode

    @message_encode.setter
    def message_encode(self, message_encode):
        """Sets the message_encode of this ConfigSyslog.

        可选参数；日志编码格式（ascii/utf8/gbk/gb2312），默认为utf8  # noqa: E501

        :param message_encode: The message_encode of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASCII", "UTF8", "GBK", "GB2312"]  # noqa: E501
        if message_encode not in allowed_values:
            raise ValueError(
                "Invalid value for `message_encode` ({0}), must be one of {1}"  # noqa: E501
                .format(message_encode, allowed_values)
            )

        self._message_encode = message_encode

    @property
    def information_log_facility(self):
        """Gets the information_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；信息日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The information_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._information_log_facility

    @information_log_facility.setter
    def information_log_facility(self, information_log_facility):
        """Sets the information_log_facility of this ConfigSyslog.

        可选参数；信息日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param information_log_facility: The information_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if information_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `information_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(information_log_facility, allowed_values)
            )

        self._information_log_facility = information_log_facility

    @property
    def alarm_log_facility(self):
        """Gets the alarm_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；告警日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The alarm_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._alarm_log_facility

    @alarm_log_facility.setter
    def alarm_log_facility(self, alarm_log_facility):
        """Sets the alarm_log_facility of this ConfigSyslog.

        可选参数；告警日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param alarm_log_facility: The alarm_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if alarm_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `alarm_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(alarm_log_facility, allowed_values)
            )

        self._alarm_log_facility = alarm_log_facility

    @property
    def error_log_facility(self):
        """Gets the error_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；错误日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The error_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._error_log_facility

    @error_log_facility.setter
    def error_log_facility(self, error_log_facility):
        """Sets the error_log_facility of this ConfigSyslog.

        可选参数；错误日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param error_log_facility: The error_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if error_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `error_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(error_log_facility, allowed_values)
            )

        self._error_log_facility = error_log_facility

    @property
    def ssl_log_facility(self):
        """Gets the ssl_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；SSL日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The ssl_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._ssl_log_facility

    @ssl_log_facility.setter
    def ssl_log_facility(self, ssl_log_facility):
        """Sets the ssl_log_facility of this ConfigSyslog.

        可选参数；SSL日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param ssl_log_facility: The ssl_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if ssl_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_log_facility, allowed_values)
            )

        self._ssl_log_facility = ssl_log_facility

    @property
    def operation_log_facility(self):
        """Gets the operation_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；管理日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The operation_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._operation_log_facility

    @operation_log_facility.setter
    def operation_log_facility(self, operation_log_facility):
        """Sets the operation_log_facility of this ConfigSyslog.

        可选参数；管理日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param operation_log_facility: The operation_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if operation_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_log_facility, allowed_values)
            )

        self._operation_log_facility = operation_log_facility

    @property
    def http_log_facility(self):
        """Gets the http_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；HTTP日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The http_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._http_log_facility

    @http_log_facility.setter
    def http_log_facility(self, http_log_facility):
        """Sets the http_log_facility of this ConfigSyslog.

        可选参数；HTTP日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param http_log_facility: The http_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if http_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `http_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(http_log_facility, allowed_values)
            )

        self._http_log_facility = http_log_facility

    @property
    def nat_log_facility(self):
        """Gets the nat_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；NAT日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The nat_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._nat_log_facility

    @nat_log_facility.setter
    def nat_log_facility(self, nat_log_facility):
        """Sets the nat_log_facility of this ConfigSyslog.

        可选参数；NAT日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param nat_log_facility: The nat_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if nat_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `nat_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(nat_log_facility, allowed_values)
            )

        self._nat_log_facility = nat_log_facility

    @property
    def ipro_log_facility(self):
        """Gets the ipro_log_facility of this ConfigSyslog.  # noqa: E501

        可选参数；iPro日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :return: The ipro_log_facility of this ConfigSyslog.  # noqa: E501
        :rtype: str
        """
        return self._ipro_log_facility

    @ipro_log_facility.setter
    def ipro_log_facility(self, ipro_log_facility):
        """Sets the ipro_log_facility of this ConfigSyslog.

        可选参数；iPro日志facility配置（none/local0/local1/local2/local3/local4/local5/local6/local7），默认为none  # noqa: E501

        :param ipro_log_facility: The ipro_log_facility of this ConfigSyslog.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"]  # noqa: E501
        if ipro_log_facility not in allowed_values:
            raise ValueError(
                "Invalid value for `ipro_log_facility` ({0}), must be one of {1}"  # noqa: E501
                .format(ipro_log_facility, allowed_values)
            )

        self._ipro_log_facility = ipro_log_facility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSyslog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSyslog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
