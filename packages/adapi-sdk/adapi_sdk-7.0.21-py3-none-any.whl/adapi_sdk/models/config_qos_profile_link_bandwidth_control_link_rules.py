# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigQosProfileLinkBandwidthControlLinkRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'upstream_bandwidth_precent': 'int',
        'downstream_bandwidth_precent': 'int'
    }

    attribute_map = {
        'link': 'link',
        'upstream_bandwidth_precent': 'upstream_bandwidth_precent',
        'downstream_bandwidth_precent': 'downstream_bandwidth_precent'
    }

    def __init__(self, link=None, upstream_bandwidth_precent=None, downstream_bandwidth_precent=None):  # noqa: E501
        """ConfigQosProfileLinkBandwidthControlLinkRules - a model defined in Swagger"""  # noqa: E501

        self._link = None
        self._upstream_bandwidth_precent = None
        self._downstream_bandwidth_precent = None
        self.discriminator = None

        self.link = link
        if upstream_bandwidth_precent is not None:
            self.upstream_bandwidth_precent = upstream_bandwidth_precent
        if downstream_bandwidth_precent is not None:
            self.downstream_bandwidth_precent = downstream_bandwidth_precent

    @property
    def link(self):
        """Gets the link of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501

        可选参数;指定链路名称  # noqa: E501

        :return: The link of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ConfigQosProfileLinkBandwidthControlLinkRules.

        可选参数;指定链路名称  # noqa: E501

        :param link: The link of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def upstream_bandwidth_precent(self):
        """Gets the upstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501

        可选参数;指定上行带宽最大占用百分比,取值范围[1,100],单位为%  # noqa: E501

        :return: The upstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :rtype: int
        """
        return self._upstream_bandwidth_precent

    @upstream_bandwidth_precent.setter
    def upstream_bandwidth_precent(self, upstream_bandwidth_precent):
        """Sets the upstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.

        可选参数;指定上行带宽最大占用百分比,取值范围[1,100],单位为%  # noqa: E501

        :param upstream_bandwidth_precent: The upstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :type: int
        """
        if upstream_bandwidth_precent is not None and upstream_bandwidth_precent > 100:  # noqa: E501
            raise ValueError("Invalid value for `upstream_bandwidth_precent`, must be a value less than or equal to `100`")  # noqa: E501
        if upstream_bandwidth_precent is not None and upstream_bandwidth_precent < 0:  # noqa: E501
            raise ValueError("Invalid value for `upstream_bandwidth_precent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._upstream_bandwidth_precent = upstream_bandwidth_precent

    @property
    def downstream_bandwidth_precent(self):
        """Gets the downstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501

        可选参数;指定下行带宽最大占用百分比,取值范围[1,100],单位为%  # noqa: E501

        :return: The downstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :rtype: int
        """
        return self._downstream_bandwidth_precent

    @downstream_bandwidth_precent.setter
    def downstream_bandwidth_precent(self, downstream_bandwidth_precent):
        """Sets the downstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.

        可选参数;指定下行带宽最大占用百分比,取值范围[1,100],单位为%  # noqa: E501

        :param downstream_bandwidth_precent: The downstream_bandwidth_precent of this ConfigQosProfileLinkBandwidthControlLinkRules.  # noqa: E501
        :type: int
        """
        if downstream_bandwidth_precent is not None and downstream_bandwidth_precent > 100:  # noqa: E501
            raise ValueError("Invalid value for `downstream_bandwidth_precent`, must be a value less than or equal to `100`")  # noqa: E501
        if downstream_bandwidth_precent is not None and downstream_bandwidth_precent < 0:  # noqa: E501
            raise ValueError("Invalid value for `downstream_bandwidth_precent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._downstream_bandwidth_precent = downstream_bandwidth_precent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfileLinkBandwidthControlLinkRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfileLinkBandwidthControlLinkRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
