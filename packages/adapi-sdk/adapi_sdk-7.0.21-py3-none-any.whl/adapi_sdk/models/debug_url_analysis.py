# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugUrlAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'url': 'str',
        'access_times': 'int',
        'timeout_times': 'int',
        'response': 'str',
        'detail': 'str'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'access_times': 'access_times',
        'timeout_times': 'timeout_times',
        'response': 'response',
        'detail': 'detail'
    }

    def __init__(self, id=None, url=None, access_times=None, timeout_times=None, response=None, detail=None):  # noqa: E501
        """DebugUrlAnalysis - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._url = None
        self._access_times = None
        self._timeout_times = None
        self._response = None
        self._detail = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if access_times is not None:
            self.access_times = access_times
        if timeout_times is not None:
            self.timeout_times = timeout_times
        if response is not None:
            self.response = response
        if detail is not None:
            self.detail = detail

    @property
    def id(self):
        """Gets the id of this DebugUrlAnalysis.  # noqa: E501

        url分析项id  # noqa: E501

        :return: The id of this DebugUrlAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DebugUrlAnalysis.

        url分析项id  # noqa: E501

        :param id: The id of this DebugUrlAnalysis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this DebugUrlAnalysis.  # noqa: E501

        分析url  # noqa: E501

        :return: The url of this DebugUrlAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DebugUrlAnalysis.

        分析url  # noqa: E501

        :param url: The url of this DebugUrlAnalysis.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def access_times(self):
        """Gets the access_times of this DebugUrlAnalysis.  # noqa: E501

        访问次数  # noqa: E501

        :return: The access_times of this DebugUrlAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._access_times

    @access_times.setter
    def access_times(self, access_times):
        """Sets the access_times of this DebugUrlAnalysis.

        访问次数  # noqa: E501

        :param access_times: The access_times of this DebugUrlAnalysis.  # noqa: E501
        :type: int
        """

        self._access_times = access_times

    @property
    def timeout_times(self):
        """Gets the timeout_times of this DebugUrlAnalysis.  # noqa: E501

        超时次数  # noqa: E501

        :return: The timeout_times of this DebugUrlAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._timeout_times

    @timeout_times.setter
    def timeout_times(self, timeout_times):
        """Sets the timeout_times of this DebugUrlAnalysis.

        超时次数  # noqa: E501

        :param timeout_times: The timeout_times of this DebugUrlAnalysis.  # noqa: E501
        :type: int
        """

        self._timeout_times = timeout_times

    @property
    def response(self):
        """Gets the response of this DebugUrlAnalysis.  # noqa: E501

        响应  # noqa: E501

        :return: The response of this DebugUrlAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this DebugUrlAnalysis.

        响应  # noqa: E501

        :param response: The response of this DebugUrlAnalysis.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def detail(self):
        """Gets the detail of this DebugUrlAnalysis.  # noqa: E501

        详细信息  # noqa: E501

        :return: The detail of this DebugUrlAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DebugUrlAnalysis.

        详细信息  # noqa: E501

        :param detail: The detail of this DebugUrlAnalysis.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugUrlAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugUrlAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
