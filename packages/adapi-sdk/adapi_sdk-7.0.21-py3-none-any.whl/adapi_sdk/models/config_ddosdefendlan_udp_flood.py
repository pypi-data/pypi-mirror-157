# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDdosdefendlanUdpFlood(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'packet_pre_second_threshold': 'int',
        'drop_empty_packet': 'str',
        'receive_packet_size_control': 'str',
        'receive_packet_minimum_size': 'int',
        'receive_packet_maximum_size': 'int'
    }

    attribute_map = {
        'state': 'state',
        'packet_pre_second_threshold': 'packet_pre_second_threshold',
        'drop_empty_packet': 'drop_empty_packet',
        'receive_packet_size_control': 'receive_packet_size_control',
        'receive_packet_minimum_size': 'receive_packet_minimum_size',
        'receive_packet_maximum_size': 'receive_packet_maximum_size'
    }

    def __init__(self, state='DISABLE', packet_pre_second_threshold=None, drop_empty_packet='ENABLE', receive_packet_size_control='DISABLE', receive_packet_minimum_size=None, receive_packet_maximum_size=None):  # noqa: E501
        """ConfigDdosdefendlanUdpFlood - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._packet_pre_second_threshold = None
        self._drop_empty_packet = None
        self._receive_packet_size_control = None
        self._receive_packet_minimum_size = None
        self._receive_packet_maximum_size = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if packet_pre_second_threshold is not None:
            self.packet_pre_second_threshold = packet_pre_second_threshold
        if drop_empty_packet is not None:
            self.drop_empty_packet = drop_empty_packet
        if receive_packet_size_control is not None:
            self.receive_packet_size_control = receive_packet_size_control
        if receive_packet_minimum_size is not None:
            self.receive_packet_minimum_size = receive_packet_minimum_size
        if receive_packet_maximum_size is not None:
            self.receive_packet_maximum_size = receive_packet_maximum_size

    @property
    def state(self):
        """Gets the state of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定syn flood防护的状态，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The state of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定syn flood防护的状态，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param state: The state of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def packet_pre_second_threshold(self):
        """Gets the packet_pre_second_threshold of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定每目的IP阈值，当udp_flood启用时需要指定此值  # noqa: E501

        :return: The packet_pre_second_threshold of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: int
        """
        return self._packet_pre_second_threshold

    @packet_pre_second_threshold.setter
    def packet_pre_second_threshold(self, packet_pre_second_threshold):
        """Sets the packet_pre_second_threshold of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定每目的IP阈值，当udp_flood启用时需要指定此值  # noqa: E501

        :param packet_pre_second_threshold: The packet_pre_second_threshold of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: int
        """
        if packet_pre_second_threshold is not None and packet_pre_second_threshold > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `packet_pre_second_threshold`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if packet_pre_second_threshold is not None and packet_pre_second_threshold < 0:  # noqa: E501
            raise ValueError("Invalid value for `packet_pre_second_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._packet_pre_second_threshold = packet_pre_second_threshold

    @property
    def drop_empty_packet(self):
        """Gets the drop_empty_packet of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定是否丢弃空数据包，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The drop_empty_packet of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: str
        """
        return self._drop_empty_packet

    @drop_empty_packet.setter
    def drop_empty_packet(self, drop_empty_packet):
        """Sets the drop_empty_packet of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定是否丢弃空数据包，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param drop_empty_packet: The drop_empty_packet of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if drop_empty_packet not in allowed_values:
            raise ValueError(
                "Invalid value for `drop_empty_packet` ({0}), must be one of {1}"  # noqa: E501
                .format(drop_empty_packet, allowed_values)
            )

        self._drop_empty_packet = drop_empty_packet

    @property
    def receive_packet_size_control(self):
        """Gets the receive_packet_size_control of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定是否丢弃指定长度以外的包，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The receive_packet_size_control of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: str
        """
        return self._receive_packet_size_control

    @receive_packet_size_control.setter
    def receive_packet_size_control(self, receive_packet_size_control):
        """Sets the receive_packet_size_control of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定是否丢弃指定长度以外的包，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param receive_packet_size_control: The receive_packet_size_control of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if receive_packet_size_control not in allowed_values:
            raise ValueError(
                "Invalid value for `receive_packet_size_control` ({0}), must be one of {1}"  # noqa: E501
                .format(receive_packet_size_control, allowed_values)
            )

        self._receive_packet_size_control = receive_packet_size_control

    @property
    def receive_packet_minimum_size(self):
        """Gets the receive_packet_minimum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定丢弃指定长度以外的包的最小长度，当receive_packet_size_control启用时需要指定此值，默认为8  # noqa: E501

        :return: The receive_packet_minimum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: int
        """
        return self._receive_packet_minimum_size

    @receive_packet_minimum_size.setter
    def receive_packet_minimum_size(self, receive_packet_minimum_size):
        """Sets the receive_packet_minimum_size of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定丢弃指定长度以外的包的最小长度，当receive_packet_size_control启用时需要指定此值，默认为8  # noqa: E501

        :param receive_packet_minimum_size: The receive_packet_minimum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: int
        """
        if receive_packet_minimum_size is not None and receive_packet_minimum_size > 65535:  # noqa: E501
            raise ValueError("Invalid value for `receive_packet_minimum_size`, must be a value less than or equal to `65535`")  # noqa: E501
        if receive_packet_minimum_size is not None and receive_packet_minimum_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `receive_packet_minimum_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._receive_packet_minimum_size = receive_packet_minimum_size

    @property
    def receive_packet_maximum_size(self):
        """Gets the receive_packet_maximum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501

        可选参数；指定丢弃指定长度以外的包的最大长度，当receive_packet_size_control启用时需要指定此值，默认为65535  # noqa: E501

        :return: The receive_packet_maximum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :rtype: int
        """
        return self._receive_packet_maximum_size

    @receive_packet_maximum_size.setter
    def receive_packet_maximum_size(self, receive_packet_maximum_size):
        """Sets the receive_packet_maximum_size of this ConfigDdosdefendlanUdpFlood.

        可选参数；指定丢弃指定长度以外的包的最大长度，当receive_packet_size_control启用时需要指定此值，默认为65535  # noqa: E501

        :param receive_packet_maximum_size: The receive_packet_maximum_size of this ConfigDdosdefendlanUdpFlood.  # noqa: E501
        :type: int
        """
        if receive_packet_maximum_size is not None and receive_packet_maximum_size > 65535:  # noqa: E501
            raise ValueError("Invalid value for `receive_packet_maximum_size`, must be a value less than or equal to `65535`")  # noqa: E501
        if receive_packet_maximum_size is not None and receive_packet_maximum_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `receive_packet_maximum_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._receive_packet_maximum_size = receive_packet_maximum_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDdosdefendlanUdpFlood, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDdosdefendlanUdpFlood):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
