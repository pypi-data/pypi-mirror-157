# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigVipPoolBestResourceRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'str',
        'threshold': 'int',
        'weight': 'int'
    }

    attribute_map = {
        'resource': 'resource',
        'threshold': 'threshold',
        'weight': 'weight'
    }

    def __init__(self, resource=None, threshold=None, weight=None):  # noqa: E501
        """ConfigVipPoolBestResourceRules - a model defined in Swagger"""  # noqa: E501

        self._resource = None
        self._threshold = None
        self._weight = None
        self.discriminator = None

        self.resource = resource
        self.threshold = threshold
        self.weight = weight

    @property
    def resource(self):
        """Gets the resource of this ConfigVipPoolBestResourceRules.  # noqa: E501

        资源类型  # noqa: E501

        :return: The resource of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ConfigVipPoolBestResourceRules.

        资源类型  # noqa: E501

        :param resource: The resource of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501
        allowed_values = ["CPU-USAGE", "CONNECTION", "CONNECTION-RATE", "UPSTREAM-THROUGHPUT", "DOWNSTREAM-THROUGHPUT", "VIRTUAL-SERVICE-NUMBER", "VIRTUAL-SERVICE-CONNECTION", "VIRTUAL-SERVICE-CONNECTION-RATE", "VIRTUAL-SERVICE-UPSTREAM-THROUGHPUT", "VIRTUAL-SERVICE-DOWNSTREAM-THROUGHPUT", "HEALTH-NODE"]  # noqa: E501
        if resource not in allowed_values:
            raise ValueError(
                "Invalid value for `resource` ({0}), must be one of {1}"  # noqa: E501
                .format(resource, allowed_values)
            )

        self._resource = resource

    @property
    def threshold(self):
        """Gets the threshold of this ConfigVipPoolBestResourceRules.  # noqa: E501

        阈值  # noqa: E501

        :return: The threshold of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ConfigVipPoolBestResourceRules.

        阈值  # noqa: E501

        :param threshold: The threshold of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :type: int
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501
        if threshold is not None and threshold > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `threshold`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if threshold is not None and threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._threshold = threshold

    @property
    def weight(self):
        """Gets the weight of this ConfigVipPoolBestResourceRules.  # noqa: E501

        权重  # noqa: E501

        :return: The weight of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigVipPoolBestResourceRules.

        权重  # noqa: E501

        :param weight: The weight of this ConfigVipPoolBestResourceRules.  # noqa: E501
        :type: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVipPoolBestResourceRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVipPoolBestResourceRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
