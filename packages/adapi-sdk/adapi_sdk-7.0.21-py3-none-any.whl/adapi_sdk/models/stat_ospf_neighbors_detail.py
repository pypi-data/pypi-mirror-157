# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatOspfNeighborsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_id': 'str',
        'priority': 'int',
        'state': 'str',
        'timeout': 'str',
        'neighbor_ip': 'str',
        'local_interface': 'str'
    }

    attribute_map = {
        'route_id': 'route_id',
        'priority': 'priority',
        'state': 'state',
        'timeout': 'timeout',
        'neighbor_ip': 'neighbor_ip',
        'local_interface': 'local_interface'
    }

    def __init__(self, route_id=None, priority=None, state=None, timeout=None, neighbor_ip=None, local_interface=None):  # noqa: E501
        """StatOspfNeighborsDetail - a model defined in Swagger"""  # noqa: E501

        self._route_id = None
        self._priority = None
        self._state = None
        self._timeout = None
        self._neighbor_ip = None
        self._local_interface = None
        self.discriminator = None

        if route_id is not None:
            self.route_id = route_id
        if priority is not None:
            self.priority = priority
        if state is not None:
            self.state = state
        if timeout is not None:
            self.timeout = timeout
        if neighbor_ip is not None:
            self.neighbor_ip = neighbor_ip
        if local_interface is not None:
            self.local_interface = local_interface

    @property
    def route_id(self):
        """Gets the route_id of this StatOspfNeighborsDetail.  # noqa: E501

        路由器ID  # noqa: E501

        :return: The route_id of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this StatOspfNeighborsDetail.

        路由器ID  # noqa: E501

        :param route_id: The route_id of this StatOspfNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._route_id = route_id

    @property
    def priority(self):
        """Gets the priority of this StatOspfNeighborsDetail.  # noqa: E501

        优先级  # noqa: E501

        :return: The priority of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this StatOspfNeighborsDetail.

        优先级  # noqa: E501

        :param priority: The priority of this StatOspfNeighborsDetail.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this StatOspfNeighborsDetail.  # noqa: E501

        邻接状态  # noqa: E501

        :return: The state of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatOspfNeighborsDetail.

        邻接状态  # noqa: E501

        :param state: The state of this StatOspfNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def timeout(self):
        """Gets the timeout of this StatOspfNeighborsDetail.  # noqa: E501

        超时时间  # noqa: E501

        :return: The timeout of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this StatOspfNeighborsDetail.

        超时时间  # noqa: E501

        :param timeout: The timeout of this StatOspfNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def neighbor_ip(self):
        """Gets the neighbor_ip of this StatOspfNeighborsDetail.  # noqa: E501

        邻居邻接IP  # noqa: E501

        :return: The neighbor_ip of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_ip

    @neighbor_ip.setter
    def neighbor_ip(self, neighbor_ip):
        """Sets the neighbor_ip of this StatOspfNeighborsDetail.

        邻居邻接IP  # noqa: E501

        :param neighbor_ip: The neighbor_ip of this StatOspfNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._neighbor_ip = neighbor_ip

    @property
    def local_interface(self):
        """Gets the local_interface of this StatOspfNeighborsDetail.  # noqa: E501

        邻接网口  # noqa: E501

        :return: The local_interface of this StatOspfNeighborsDetail.  # noqa: E501
        :rtype: str
        """
        return self._local_interface

    @local_interface.setter
    def local_interface(self, local_interface):
        """Sets the local_interface of this StatOspfNeighborsDetail.

        邻接网口  # noqa: E501

        :param local_interface: The local_interface of this StatOspfNeighborsDetail.  # noqa: E501
        :type: str
        """

        self._local_interface = local_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatOspfNeighborsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatOspfNeighborsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
