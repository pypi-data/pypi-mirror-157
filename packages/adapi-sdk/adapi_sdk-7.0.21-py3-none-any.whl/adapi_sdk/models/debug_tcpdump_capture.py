# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.debug_tcpdump_capture_interfaces import DebugTcpdumpCaptureInterfaces  # noqa: F401,E501


class DebugTcpdumpCapture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_count': 'int',
        'interfaces': 'list[DebugTcpdumpCaptureInterfaces]',
        'option': 'str'
    }

    attribute_map = {
        'maximum_count': 'maximum_count',
        'interfaces': 'interfaces',
        'option': 'option'
    }

    def __init__(self, maximum_count=None, interfaces=None, option=None):  # noqa: E501
        """DebugTcpdumpCapture - a model defined in Swagger"""  # noqa: E501

        self._maximum_count = None
        self._interfaces = None
        self._option = None
        self.discriminator = None

        if maximum_count is not None:
            self.maximum_count = maximum_count
        if interfaces is not None:
            self.interfaces = interfaces
        if option is not None:
            self.option = option

    @property
    def maximum_count(self):
        """Gets the maximum_count of this DebugTcpdumpCapture.  # noqa: E501

        最大抓包数,必须为1~10000之间的整数  # noqa: E501

        :return: The maximum_count of this DebugTcpdumpCapture.  # noqa: E501
        :rtype: int
        """
        return self._maximum_count

    @maximum_count.setter
    def maximum_count(self, maximum_count):
        """Sets the maximum_count of this DebugTcpdumpCapture.

        最大抓包数,必须为1~10000之间的整数  # noqa: E501

        :param maximum_count: The maximum_count of this DebugTcpdumpCapture.  # noqa: E501
        :type: int
        """
        if maximum_count is not None and maximum_count > 10000:  # noqa: E501
            raise ValueError("Invalid value for `maximum_count`, must be a value less than or equal to `10000`")  # noqa: E501
        if maximum_count is not None and maximum_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `maximum_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_count = maximum_count

    @property
    def interfaces(self):
        """Gets the interfaces of this DebugTcpdumpCapture.  # noqa: E501

        引用网口  # noqa: E501

        :return: The interfaces of this DebugTcpdumpCapture.  # noqa: E501
        :rtype: list[DebugTcpdumpCaptureInterfaces]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this DebugTcpdumpCapture.

        引用网口  # noqa: E501

        :param interfaces: The interfaces of this DebugTcpdumpCapture.  # noqa: E501
        :type: list[DebugTcpdumpCaptureInterfaces]
        """

        self._interfaces = interfaces

    @property
    def option(self):
        """Gets the option of this DebugTcpdumpCapture.  # noqa: E501

        过滤表达式,不能包含& | \" ' , % < > / \\等特殊字符  # noqa: E501

        :return: The option of this DebugTcpdumpCapture.  # noqa: E501
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this DebugTcpdumpCapture.

        过滤表达式,不能包含& | \" ' , % < > / \\等特殊字符  # noqa: E501

        :param option: The option of this DebugTcpdumpCapture.  # noqa: E501
        :type: str
        """

        self._option = option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugTcpdumpCapture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugTcpdumpCapture):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
