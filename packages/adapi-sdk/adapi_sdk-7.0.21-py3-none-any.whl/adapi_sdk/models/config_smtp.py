# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_smtp_authentication import ConfigSmtpAuthentication  # noqa: F401,E501


class ConfigSmtp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'ip_address': 'str',
        'port': 'int',
        'network': 'str',
        'ssl': 'str',
        'authentication': 'ConfigSmtpAuthentication'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'ip_address': 'ip_address',
        'port': 'port',
        'network': 'network',
        'ssl': 'ssl',
        'authentication': 'authentication'
    }

    def __init__(self, name=None, description=None, ip_address=None, port=None, network='AUTO', ssl='DISABLE', authentication=None):  # noqa: E501
        """ConfigSmtp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._ip_address = None
        self._port = None
        self._network = None
        self._ssl = None
        self._authentication = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.ip_address = ip_address
        if port is not None:
            self.port = port
        if network is not None:
            self.network = network
        if ssl is not None:
            self.ssl = ssl
        if authentication is not None:
            self.authentication = authentication

    @property
    def name(self):
        """Gets the name of this ConfigSmtp.  # noqa: E501

        必选参数；指定SMTP配置的名称，在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigSmtp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSmtp.

        必选参数；指定SMTP配置的名称，在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigSmtp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigSmtp.  # noqa: E501

        可选参数；用于对此配置增加备注  # noqa: E501

        :return: The description of this ConfigSmtp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSmtp.

        可选参数；用于对此配置增加备注  # noqa: E501

        :param description: The description of this ConfigSmtp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_address(self):
        """Gets the ip_address of this ConfigSmtp.  # noqa: E501

        必选参数；指定SMTP主机地址  # noqa: E501

        :return: The ip_address of this ConfigSmtp.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ConfigSmtp.

        必选参数；指定SMTP主机地址  # noqa: E501

        :param ip_address: The ip_address of this ConfigSmtp.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this ConfigSmtp.  # noqa: E501

        可选参数；指定SMTP端口，默认为25  # noqa: E501

        :return: The port of this ConfigSmtp.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigSmtp.

        可选参数；指定SMTP端口，默认为25  # noqa: E501

        :param port: The port of this ConfigSmtp.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def network(self):
        """Gets the network of this ConfigSmtp.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigSmtp.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigSmtp.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigSmtp.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def ssl(self):
        """Gets the ssl of this ConfigSmtp.  # noqa: E501

        SSL加密传输  # noqa: E501

        :return: The ssl of this ConfigSmtp.  # noqa: E501
        :rtype: str
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ConfigSmtp.

        SSL加密传输  # noqa: E501

        :param ssl: The ssl of this ConfigSmtp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl, allowed_values)
            )

        self._ssl = ssl

    @property
    def authentication(self):
        """Gets the authentication of this ConfigSmtp.  # noqa: E501


        :return: The authentication of this ConfigSmtp.  # noqa: E501
        :rtype: ConfigSmtpAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ConfigSmtp.


        :param authentication: The authentication of this ConfigSmtp.  # noqa: E501
        :type: ConfigSmtpAuthentication
        """

        self._authentication = authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSmtp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSmtp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
