# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_policy_route_advanced_detect_rtt import ConfigPolicyRouteAdvancedDetectRtt  # noqa: F401,E501
from adapi_sdk.models.config_policy_route_advanced_persist import ConfigPolicyRouteAdvancedPersist  # noqa: F401,E501


class ConfigPolicyRouteAdvanced(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'persist': 'ConfigPolicyRouteAdvancedPersist',
        'detect_rtt': 'ConfigPolicyRouteAdvancedDetectRtt'
    }

    attribute_map = {
        'persist': 'persist',
        'detect_rtt': 'detect_rtt'
    }

    def __init__(self, persist=None, detect_rtt=None):  # noqa: E501
        """ConfigPolicyRouteAdvanced - a model defined in Swagger"""  # noqa: E501

        self._persist = None
        self._detect_rtt = None
        self.discriminator = None

        if persist is not None:
            self.persist = persist
        if detect_rtt is not None:
            self.detect_rtt = detect_rtt

    @property
    def persist(self):
        """Gets the persist of this ConfigPolicyRouteAdvanced.  # noqa: E501


        :return: The persist of this ConfigPolicyRouteAdvanced.  # noqa: E501
        :rtype: ConfigPolicyRouteAdvancedPersist
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this ConfigPolicyRouteAdvanced.


        :param persist: The persist of this ConfigPolicyRouteAdvanced.  # noqa: E501
        :type: ConfigPolicyRouteAdvancedPersist
        """

        self._persist = persist

    @property
    def detect_rtt(self):
        """Gets the detect_rtt of this ConfigPolicyRouteAdvanced.  # noqa: E501


        :return: The detect_rtt of this ConfigPolicyRouteAdvanced.  # noqa: E501
        :rtype: ConfigPolicyRouteAdvancedDetectRtt
        """
        return self._detect_rtt

    @detect_rtt.setter
    def detect_rtt(self, detect_rtt):
        """Sets the detect_rtt of this ConfigPolicyRouteAdvanced.


        :param detect_rtt: The detect_rtt of this ConfigPolicyRouteAdvanced.  # noqa: E501
        :type: ConfigPolicyRouteAdvancedDetectRtt
        """

        self._detect_rtt = detect_rtt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPolicyRouteAdvanced, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPolicyRouteAdvanced):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
