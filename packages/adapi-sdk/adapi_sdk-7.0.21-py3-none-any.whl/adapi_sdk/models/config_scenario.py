# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_scenario_dns_homepage_option import ConfigScenarioDnsHomepageOption  # noqa: F401,E501
from adapi_sdk.models.config_scenario_lc_homepage_option import ConfigScenarioLcHomepageOption  # noqa: F401,E501
from adapi_sdk.models.config_scenario_slb_homepage_option import ConfigScenarioSlbHomepageOption  # noqa: F401,E501


class ConfigScenario(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slb_scenario': 'str',
        'slb_homepage_option': 'ConfigScenarioSlbHomepageOption',
        'prior_virtual_services': 'list[str]',
        'lc_scenario': 'str',
        'lc_homepage_option': 'ConfigScenarioLcHomepageOption',
        'prior_links': 'list[str]',
        'dns_scenario': 'str',
        'dns_homepage_option': 'ConfigScenarioDnsHomepageOption'
    }

    attribute_map = {
        'slb_scenario': 'slb_scenario',
        'slb_homepage_option': 'slb_homepage_option',
        'prior_virtual_services': 'prior_virtual_services',
        'lc_scenario': 'lc_scenario',
        'lc_homepage_option': 'lc_homepage_option',
        'prior_links': 'prior_links',
        'dns_scenario': 'dns_scenario',
        'dns_homepage_option': 'dns_homepage_option'
    }

    def __init__(self, slb_scenario='DISABLE', slb_homepage_option=None, prior_virtual_services=None, lc_scenario='DISABLE', lc_homepage_option=None, prior_links=None, dns_scenario='DISABLE', dns_homepage_option=None):  # noqa: E501
        """ConfigScenario - a model defined in Swagger"""  # noqa: E501

        self._slb_scenario = None
        self._slb_homepage_option = None
        self._prior_virtual_services = None
        self._lc_scenario = None
        self._lc_homepage_option = None
        self._prior_links = None
        self._dns_scenario = None
        self._dns_homepage_option = None
        self.discriminator = None

        if slb_scenario is not None:
            self.slb_scenario = slb_scenario
        if slb_homepage_option is not None:
            self.slb_homepage_option = slb_homepage_option
        if prior_virtual_services is not None:
            self.prior_virtual_services = prior_virtual_services
        if lc_scenario is not None:
            self.lc_scenario = lc_scenario
        if lc_homepage_option is not None:
            self.lc_homepage_option = lc_homepage_option
        if prior_links is not None:
            self.prior_links = prior_links
        if dns_scenario is not None:
            self.dns_scenario = dns_scenario
        if dns_homepage_option is not None:
            self.dns_homepage_option = dns_homepage_option

    @property
    def slb_scenario(self):
        """Gets the slb_scenario of this ConfigScenario.  # noqa: E501

        应用负载场景使能，默认ENABLE  # noqa: E501

        :return: The slb_scenario of this ConfigScenario.  # noqa: E501
        :rtype: str
        """
        return self._slb_scenario

    @slb_scenario.setter
    def slb_scenario(self, slb_scenario):
        """Sets the slb_scenario of this ConfigScenario.

        应用负载场景使能，默认ENABLE  # noqa: E501

        :param slb_scenario: The slb_scenario of this ConfigScenario.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if slb_scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `slb_scenario` ({0}), must be one of {1}"  # noqa: E501
                .format(slb_scenario, allowed_values)
            )

        self._slb_scenario = slb_scenario

    @property
    def slb_homepage_option(self):
        """Gets the slb_homepage_option of this ConfigScenario.  # noqa: E501


        :return: The slb_homepage_option of this ConfigScenario.  # noqa: E501
        :rtype: ConfigScenarioSlbHomepageOption
        """
        return self._slb_homepage_option

    @slb_homepage_option.setter
    def slb_homepage_option(self, slb_homepage_option):
        """Sets the slb_homepage_option of this ConfigScenario.


        :param slb_homepage_option: The slb_homepage_option of this ConfigScenario.  # noqa: E501
        :type: ConfigScenarioSlbHomepageOption
        """

        self._slb_homepage_option = slb_homepage_option

    @property
    def prior_virtual_services(self):
        """Gets the prior_virtual_services of this ConfigScenario.  # noqa: E501

        关注应用名称列表  # noqa: E501

        :return: The prior_virtual_services of this ConfigScenario.  # noqa: E501
        :rtype: list[str]
        """
        return self._prior_virtual_services

    @prior_virtual_services.setter
    def prior_virtual_services(self, prior_virtual_services):
        """Sets the prior_virtual_services of this ConfigScenario.

        关注应用名称列表  # noqa: E501

        :param prior_virtual_services: The prior_virtual_services of this ConfigScenario.  # noqa: E501
        :type: list[str]
        """

        self._prior_virtual_services = prior_virtual_services

    @property
    def lc_scenario(self):
        """Gets the lc_scenario of this ConfigScenario.  # noqa: E501

        链路负载场景使能，默认ENABLE  # noqa: E501

        :return: The lc_scenario of this ConfigScenario.  # noqa: E501
        :rtype: str
        """
        return self._lc_scenario

    @lc_scenario.setter
    def lc_scenario(self, lc_scenario):
        """Sets the lc_scenario of this ConfigScenario.

        链路负载场景使能，默认ENABLE  # noqa: E501

        :param lc_scenario: The lc_scenario of this ConfigScenario.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if lc_scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `lc_scenario` ({0}), must be one of {1}"  # noqa: E501
                .format(lc_scenario, allowed_values)
            )

        self._lc_scenario = lc_scenario

    @property
    def lc_homepage_option(self):
        """Gets the lc_homepage_option of this ConfigScenario.  # noqa: E501


        :return: The lc_homepage_option of this ConfigScenario.  # noqa: E501
        :rtype: ConfigScenarioLcHomepageOption
        """
        return self._lc_homepage_option

    @lc_homepage_option.setter
    def lc_homepage_option(self, lc_homepage_option):
        """Sets the lc_homepage_option of this ConfigScenario.


        :param lc_homepage_option: The lc_homepage_option of this ConfigScenario.  # noqa: E501
        :type: ConfigScenarioLcHomepageOption
        """

        self._lc_homepage_option = lc_homepage_option

    @property
    def prior_links(self):
        """Gets the prior_links of this ConfigScenario.  # noqa: E501

        关注链路名称列表  # noqa: E501

        :return: The prior_links of this ConfigScenario.  # noqa: E501
        :rtype: list[str]
        """
        return self._prior_links

    @prior_links.setter
    def prior_links(self, prior_links):
        """Sets the prior_links of this ConfigScenario.

        关注链路名称列表  # noqa: E501

        :param prior_links: The prior_links of this ConfigScenario.  # noqa: E501
        :type: list[str]
        """

        self._prior_links = prior_links

    @property
    def dns_scenario(self):
        """Gets the dns_scenario of this ConfigScenario.  # noqa: E501

        全局负载场景使能，默认ENABLE  # noqa: E501

        :return: The dns_scenario of this ConfigScenario.  # noqa: E501
        :rtype: str
        """
        return self._dns_scenario

    @dns_scenario.setter
    def dns_scenario(self, dns_scenario):
        """Sets the dns_scenario of this ConfigScenario.

        全局负载场景使能，默认ENABLE  # noqa: E501

        :param dns_scenario: The dns_scenario of this ConfigScenario.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if dns_scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_scenario` ({0}), must be one of {1}"  # noqa: E501
                .format(dns_scenario, allowed_values)
            )

        self._dns_scenario = dns_scenario

    @property
    def dns_homepage_option(self):
        """Gets the dns_homepage_option of this ConfigScenario.  # noqa: E501


        :return: The dns_homepage_option of this ConfigScenario.  # noqa: E501
        :rtype: ConfigScenarioDnsHomepageOption
        """
        return self._dns_homepage_option

    @dns_homepage_option.setter
    def dns_homepage_option(self, dns_homepage_option):
        """Sets the dns_homepage_option of this ConfigScenario.


        :param dns_homepage_option: The dns_homepage_option of this ConfigScenario.  # noqa: E501
        :type: ConfigScenarioDnsHomepageOption
        """

        self._dns_homepage_option = dns_homepage_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigScenario, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigScenario):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
