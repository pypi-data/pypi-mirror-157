# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigPartitionActivate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'migrate_config': 'str',
        'username': 'str',
        'password': 'str',
        'pk_password': 'str'
    }

    attribute_map = {
        'migrate_config': 'migrate_config',
        'username': 'username',
        'password': 'password',
        'pk_password': 'pk_password'
    }

    def __init__(self, migrate_config=None, username=None, password=None, pk_password=None):  # noqa: E501
        """ConfigPartitionActivate - a model defined in Swagger"""  # noqa: E501

        self._migrate_config = None
        self._username = None
        self._password = None
        self._pk_password = None
        self.discriminator = None

        self.migrate_config = migrate_config
        self.username = username
        if password is not None:
            self.password = password
        if pk_password is not None:
            self.pk_password = pk_password

    @property
    def migrate_config(self):
        """Gets the migrate_config of this ConfigPartitionActivate.  # noqa: E501

        必选参数；是否迁移当前活动分区配置文件到激活目标分区  # noqa: E501

        :return: The migrate_config of this ConfigPartitionActivate.  # noqa: E501
        :rtype: str
        """
        return self._migrate_config

    @migrate_config.setter
    def migrate_config(self, migrate_config):
        """Sets the migrate_config of this ConfigPartitionActivate.

        必选参数；是否迁移当前活动分区配置文件到激活目标分区  # noqa: E501

        :param migrate_config: The migrate_config of this ConfigPartitionActivate.  # noqa: E501
        :type: str
        """
        if migrate_config is None:
            raise ValueError("Invalid value for `migrate_config`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if migrate_config not in allowed_values:
            raise ValueError(
                "Invalid value for `migrate_config` ({0}), must be one of {1}"  # noqa: E501
                .format(migrate_config, allowed_values)
            )

        self._migrate_config = migrate_config

    @property
    def username(self):
        """Gets the username of this ConfigPartitionActivate.  # noqa: E501

        必选参数；鉴权操作人用户名  # noqa: E501

        :return: The username of this ConfigPartitionActivate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigPartitionActivate.

        必选参数；鉴权操作人用户名  # noqa: E501

        :param username: The username of this ConfigPartitionActivate.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigPartitionActivate.  # noqa: E501

        必选参数；鉴权操作人密码, password和pk_password二选一  # noqa: E501

        :return: The password of this ConfigPartitionActivate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigPartitionActivate.

        必选参数；鉴权操作人密码, password和pk_password二选一  # noqa: E501

        :param password: The password of this ConfigPartitionActivate.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pk_password(self):
        """Gets the pk_password of this ConfigPartitionActivate.  # noqa: E501

        激活分区需要当前用户输入密码, password和pk_password二选一  # noqa: E501

        :return: The pk_password of this ConfigPartitionActivate.  # noqa: E501
        :rtype: str
        """
        return self._pk_password

    @pk_password.setter
    def pk_password(self, pk_password):
        """Sets the pk_password of this ConfigPartitionActivate.

        激活分区需要当前用户输入密码, password和pk_password二选一  # noqa: E501

        :param pk_password: The pk_password of this ConfigPartitionActivate.  # noqa: E501
        :type: str
        """

        self._pk_password = pk_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPartitionActivate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPartitionActivate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
