# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigLinkMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'timeout': 'int',
        'interval': 'int',
        'debug_mode': 'str',
        'port': 'int',
        'send_content': 'str',
        'receive_cache_size': 'int',
        'receive_content_match': 'str',
        'send_content_before_disconnect': 'str',
        'hexadecimal_mode': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'timeout': 'timeout',
        'interval': 'interval',
        'debug_mode': 'debug_mode',
        'port': 'port',
        'send_content': 'send_content',
        'receive_cache_size': 'receive_cache_size',
        'receive_content_match': 'receive_content_match',
        'send_content_before_disconnect': 'send_content_before_disconnect',
        'hexadecimal_mode': 'hexadecimal_mode'
    }

    def __init__(self, name=None, description=None, type=None, timeout=None, interval=None, debug_mode='DISABLE', port=None, send_content=None, receive_cache_size=None, receive_content_match=None, send_content_before_disconnect=None, hexadecimal_mode='DISABLE'):  # noqa: E501
        """ConfigLinkMonitor - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._timeout = None
        self._interval = None
        self._debug_mode = None
        self._port = None
        self._send_content = None
        self._receive_cache_size = None
        self._receive_content_match = None
        self._send_content_before_disconnect = None
        self._hexadecimal_mode = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.type = type
        if timeout is not None:
            self.timeout = timeout
        if interval is not None:
            self.interval = interval
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if port is not None:
            self.port = port
        if send_content is not None:
            self.send_content = send_content
        if receive_cache_size is not None:
            self.receive_cache_size = receive_cache_size
        if receive_content_match is not None:
            self.receive_content_match = receive_content_match
        if send_content_before_disconnect is not None:
            self.send_content_before_disconnect = send_content_before_disconnect
        if hexadecimal_mode is not None:
            self.hexadecimal_mode = hexadecimal_mode

    @property
    def name(self):
        """Gets the name of this ConfigLinkMonitor.  # noqa: E501


        :return: The name of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigLinkMonitor.


        :param name: The name of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigLinkMonitor.  # noqa: E501


        :return: The description of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigLinkMonitor.


        :param description: The description of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigLinkMonitor.  # noqa: E501


        :return: The type of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigLinkMonitor.


        :param type: The type of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ICMP", "ICMPV6", "CONNECT-TCP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timeout(self):
        """Gets the timeout of this ConfigLinkMonitor.  # noqa: E501


        :return: The timeout of this ConfigLinkMonitor.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigLinkMonitor.


        :param timeout: The timeout of this ConfigLinkMonitor.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this ConfigLinkMonitor.  # noqa: E501


        :return: The interval of this ConfigLinkMonitor.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConfigLinkMonitor.


        :param interval: The interval of this ConfigLinkMonitor.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigLinkMonitor.  # noqa: E501


        :return: The debug_mode of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigLinkMonitor.


        :param debug_mode: The debug_mode of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def port(self):
        """Gets the port of this ConfigLinkMonitor.  # noqa: E501


        :return: The port of this ConfigLinkMonitor.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigLinkMonitor.


        :param port: The port of this ConfigLinkMonitor.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def send_content(self):
        """Gets the send_content of this ConfigLinkMonitor.  # noqa: E501


        :return: The send_content of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._send_content

    @send_content.setter
    def send_content(self, send_content):
        """Sets the send_content of this ConfigLinkMonitor.


        :param send_content: The send_content of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """

        self._send_content = send_content

    @property
    def receive_cache_size(self):
        """Gets the receive_cache_size of this ConfigLinkMonitor.  # noqa: E501


        :return: The receive_cache_size of this ConfigLinkMonitor.  # noqa: E501
        :rtype: int
        """
        return self._receive_cache_size

    @receive_cache_size.setter
    def receive_cache_size(self, receive_cache_size):
        """Sets the receive_cache_size of this ConfigLinkMonitor.


        :param receive_cache_size: The receive_cache_size of this ConfigLinkMonitor.  # noqa: E501
        :type: int
        """

        self._receive_cache_size = receive_cache_size

    @property
    def receive_content_match(self):
        """Gets the receive_content_match of this ConfigLinkMonitor.  # noqa: E501


        :return: The receive_content_match of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._receive_content_match

    @receive_content_match.setter
    def receive_content_match(self, receive_content_match):
        """Sets the receive_content_match of this ConfigLinkMonitor.


        :param receive_content_match: The receive_content_match of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """

        self._receive_content_match = receive_content_match

    @property
    def send_content_before_disconnect(self):
        """Gets the send_content_before_disconnect of this ConfigLinkMonitor.  # noqa: E501


        :return: The send_content_before_disconnect of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._send_content_before_disconnect

    @send_content_before_disconnect.setter
    def send_content_before_disconnect(self, send_content_before_disconnect):
        """Sets the send_content_before_disconnect of this ConfigLinkMonitor.


        :param send_content_before_disconnect: The send_content_before_disconnect of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """

        self._send_content_before_disconnect = send_content_before_disconnect

    @property
    def hexadecimal_mode(self):
        """Gets the hexadecimal_mode of this ConfigLinkMonitor.  # noqa: E501


        :return: The hexadecimal_mode of this ConfigLinkMonitor.  # noqa: E501
        :rtype: str
        """
        return self._hexadecimal_mode

    @hexadecimal_mode.setter
    def hexadecimal_mode(self, hexadecimal_mode):
        """Sets the hexadecimal_mode of this ConfigLinkMonitor.


        :param hexadecimal_mode: The hexadecimal_mode of this ConfigLinkMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if hexadecimal_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `hexadecimal_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(hexadecimal_mode, allowed_values)
            )

        self._hexadecimal_mode = hexadecimal_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLinkMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLinkMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
