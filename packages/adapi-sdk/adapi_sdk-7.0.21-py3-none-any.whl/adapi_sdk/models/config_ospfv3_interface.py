# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigOspfv3Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'link': 'str',
        'hello_interval': 'int',
        'retransmit_interval': 'int',
        'dead_interval': 'int',
        'transmit_delay': 'int',
        'priority': 'int',
        'cost': 'int',
        'instance_id': 'int',
        'area_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'link': 'link',
        'hello_interval': 'hello_interval',
        'retransmit_interval': 'retransmit_interval',
        'dead_interval': 'dead_interval',
        'transmit_delay': 'transmit_delay',
        'priority': 'priority',
        'cost': 'cost',
        'instance_id': 'instance_id',
        'area_id': 'area_id'
    }

    def __init__(self, name=None, description=None, link=None, hello_interval=None, retransmit_interval=None, dead_interval=None, transmit_delay=None, priority=None, cost=None, instance_id=None, area_id=None):  # noqa: E501
        """ConfigOspfv3Interface - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._link = None
        self._hello_interval = None
        self._retransmit_interval = None
        self._dead_interval = None
        self._transmit_delay = None
        self._priority = None
        self._cost = None
        self._instance_id = None
        self._area_id = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.link = link
        if hello_interval is not None:
            self.hello_interval = hello_interval
        if retransmit_interval is not None:
            self.retransmit_interval = retransmit_interval
        if dead_interval is not None:
            self.dead_interval = dead_interval
        if transmit_delay is not None:
            self.transmit_delay = transmit_delay
        if priority is not None:
            self.priority = priority
        if cost is not None:
            self.cost = cost
        if instance_id is not None:
            self.instance_id = instance_id
        self.area_id = area_id

    @property
    def name(self):
        """Gets the name of this ConfigOspfv3Interface.  # noqa: E501

        指定ospfv3接口配置的名称, 在ospfv3接口配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigOspfv3Interface.

        指定ospfv3接口配置的名称, 在ospfv3接口配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigOspfv3Interface.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 511:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `511`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigOspfv3Interface.  # noqa: E501

        可以对该ospfv3接口配置进行额外的信息补充。  # noqa: E501

        :return: The description of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigOspfv3Interface.

        可以对该ospfv3接口配置进行额外的信息补充。  # noqa: E501

        :param description: The description of this ConfigOspfv3Interface.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this ConfigOspfv3Interface.  # noqa: E501

        ospfv3接口配置引用的系统链路，必须为已经存在的链路名称。  # noqa: E501

        :return: The link of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ConfigOspfv3Interface.

        ospfv3接口配置引用的系统链路，必须为已经存在的链路名称。  # noqa: E501

        :param link: The link of this ConfigOspfv3Interface.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501
        if link is not None and len(link) > 511:
            raise ValueError("Invalid value for `link`, length must be less than or equal to `511`")  # noqa: E501
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")  # noqa: E501

        self._link = link

    @property
    def hello_interval(self):
        """Gets the hello_interval of this ConfigOspfv3Interface.  # noqa: E501

        hello包发送间隔，必须为1~65535之间的整数。  # noqa: E501

        :return: The hello_interval of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._hello_interval

    @hello_interval.setter
    def hello_interval(self, hello_interval):
        """Sets the hello_interval of this ConfigOspfv3Interface.

        hello包发送间隔，必须为1~65535之间的整数。  # noqa: E501

        :param hello_interval: The hello_interval of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if hello_interval is not None and hello_interval > 65535:  # noqa: E501
            raise ValueError("Invalid value for `hello_interval`, must be a value less than or equal to `65535`")  # noqa: E501
        if hello_interval is not None and hello_interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `hello_interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._hello_interval = hello_interval

    @property
    def retransmit_interval(self):
        """Gets the retransmit_interval of this ConfigOspfv3Interface.  # noqa: E501

        hello包重传间隔，必须为3~65535之间的整数。  # noqa: E501

        :return: The retransmit_interval of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._retransmit_interval

    @retransmit_interval.setter
    def retransmit_interval(self, retransmit_interval):
        """Sets the retransmit_interval of this ConfigOspfv3Interface.

        hello包重传间隔，必须为3~65535之间的整数。  # noqa: E501

        :param retransmit_interval: The retransmit_interval of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if retransmit_interval is not None and retransmit_interval > 65535:  # noqa: E501
            raise ValueError("Invalid value for `retransmit_interval`, must be a value less than or equal to `65535`")  # noqa: E501
        if retransmit_interval is not None and retransmit_interval < 3:  # noqa: E501
            raise ValueError("Invalid value for `retransmit_interval`, must be a value greater than or equal to `3`")  # noqa: E501

        self._retransmit_interval = retransmit_interval

    @property
    def dead_interval(self):
        """Gets the dead_interval of this ConfigOspfv3Interface.  # noqa: E501

        hello包死亡时间，必须为1~65535之间的整数。  # noqa: E501

        :return: The dead_interval of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._dead_interval

    @dead_interval.setter
    def dead_interval(self, dead_interval):
        """Sets the dead_interval of this ConfigOspfv3Interface.

        hello包死亡时间，必须为1~65535之间的整数。  # noqa: E501

        :param dead_interval: The dead_interval of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if dead_interval is not None and dead_interval > 65535:  # noqa: E501
            raise ValueError("Invalid value for `dead_interval`, must be a value less than or equal to `65535`")  # noqa: E501
        if dead_interval is not None and dead_interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `dead_interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._dead_interval = dead_interval

    @property
    def transmit_delay(self):
        """Gets the transmit_delay of this ConfigOspfv3Interface.  # noqa: E501

        传输延时，必须为1~65535之间的整数。  # noqa: E501

        :return: The transmit_delay of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._transmit_delay

    @transmit_delay.setter
    def transmit_delay(self, transmit_delay):
        """Sets the transmit_delay of this ConfigOspfv3Interface.

        传输延时，必须为1~65535之间的整数。  # noqa: E501

        :param transmit_delay: The transmit_delay of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if transmit_delay is not None and transmit_delay > 65535:  # noqa: E501
            raise ValueError("Invalid value for `transmit_delay`, must be a value less than or equal to `65535`")  # noqa: E501
        if transmit_delay is not None and transmit_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `transmit_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._transmit_delay = transmit_delay

    @property
    def priority(self):
        """Gets the priority of this ConfigOspfv3Interface.  # noqa: E501

        优先级，必须为0~255之间的整数。  # noqa: E501

        :return: The priority of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigOspfv3Interface.

        优先级，必须为0~255之间的整数。  # noqa: E501

        :param priority: The priority of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 255:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `255`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def cost(self):
        """Gets the cost of this ConfigOspfv3Interface.  # noqa: E501

        链路代价值，必须为1~65535之间的整数。  # noqa: E501

        :return: The cost of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ConfigOspfv3Interface.

        链路代价值，必须为1~65535之间的整数。  # noqa: E501

        :param cost: The cost of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if cost is not None and cost > 65535:  # noqa: E501
            raise ValueError("Invalid value for `cost`, must be a value less than or equal to `65535`")  # noqa: E501
        if cost is not None and cost < 1:  # noqa: E501
            raise ValueError("Invalid value for `cost`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cost = cost

    @property
    def instance_id(self):
        """Gets the instance_id of this ConfigOspfv3Interface.  # noqa: E501

        instance id，必须为0~255之间的整数。  # noqa: E501

        :return: The instance_id of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ConfigOspfv3Interface.

        instance id，必须为0~255之间的整数。  # noqa: E501

        :param instance_id: The instance_id of this ConfigOspfv3Interface.  # noqa: E501
        :type: int
        """
        if instance_id is not None and instance_id > 255:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must be a value less than or equal to `255`")  # noqa: E501
        if instance_id is not None and instance_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def area_id(self):
        """Gets the area_id of this ConfigOspfv3Interface.  # noqa: E501

        区域 id，必须为IPV4地址。  # noqa: E501

        :return: The area_id of this ConfigOspfv3Interface.  # noqa: E501
        :rtype: str
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this ConfigOspfv3Interface.

        区域 id，必须为IPV4地址。  # noqa: E501

        :param area_id: The area_id of this ConfigOspfv3Interface.  # noqa: E501
        :type: str
        """
        if area_id is None:
            raise ValueError("Invalid value for `area_id`, must not be `None`")  # noqa: E501

        self._area_id = area_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigOspfv3Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigOspfv3Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
