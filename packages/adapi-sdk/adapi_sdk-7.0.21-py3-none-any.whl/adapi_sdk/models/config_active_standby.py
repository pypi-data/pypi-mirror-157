# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_active_standby_alternate_ha import ConfigActiveStandbyAlternateHa  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_arp_linkage import ConfigActiveStandbyArpLinkage  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_brain_split_detect import ConfigActiveStandbyBrainSplitDetect  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_fault_detect import ConfigActiveStandbyFaultDetect  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_ha import ConfigActiveStandbyHa  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_mac_synchronize import ConfigActiveStandbyMacSynchronize  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_session_synchronize import ConfigActiveStandbySessionSynchronize  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_standby_interface_poweroff import ConfigActiveStandbyStandbyInterfacePoweroff  # noqa: F401,E501


class ConfigActiveStandby(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'state': 'str',
        'heartbeat_timeout_ms': 'int',
        'heartbeat_interval_ms': 'int',
        'ha': 'ConfigActiveStandbyHa',
        'alternate_ha': 'ConfigActiveStandbyAlternateHa',
        'brain_split_detect': 'ConfigActiveStandbyBrainSplitDetect',
        'session_synchronize': 'ConfigActiveStandbySessionSynchronize',
        'mac_synchronize': 'ConfigActiveStandbyMacSynchronize',
        'fault_detect': 'ConfigActiveStandbyFaultDetect',
        'interface_linkage': 'str',
        'standby_interface_poweroff': 'ConfigActiveStandbyStandbyInterfacePoweroff',
        'standby_bridge_interface': 'str',
        'preempt_mode': 'str',
        'arp_linkage': 'ConfigActiveStandbyArpLinkage'
    }

    attribute_map = {
        'host_name': 'host_name',
        'state': 'state',
        'heartbeat_timeout_ms': 'heartbeat_timeout_ms',
        'heartbeat_interval_ms': 'heartbeat_interval_ms',
        'ha': 'ha',
        'alternate_ha': 'alternate_ha',
        'brain_split_detect': 'brain_split_detect',
        'session_synchronize': 'session_synchronize',
        'mac_synchronize': 'mac_synchronize',
        'fault_detect': 'fault_detect',
        'interface_linkage': 'interface_linkage',
        'standby_interface_poweroff': 'standby_interface_poweroff',
        'standby_bridge_interface': 'standby_bridge_interface',
        'preempt_mode': 'preempt_mode',
        'arp_linkage': 'arp_linkage'
    }

    def __init__(self, host_name=None, state='ENABLE', heartbeat_timeout_ms=None, heartbeat_interval_ms=None, ha=None, alternate_ha=None, brain_split_detect=None, session_synchronize=None, mac_synchronize=None, fault_detect=None, interface_linkage='DISABLE', standby_interface_poweroff=None, standby_bridge_interface='DISABLE', preempt_mode='DISABLE', arp_linkage=None):  # noqa: E501
        """ConfigActiveStandby - a model defined in Swagger"""  # noqa: E501

        self._host_name = None
        self._state = None
        self._heartbeat_timeout_ms = None
        self._heartbeat_interval_ms = None
        self._ha = None
        self._alternate_ha = None
        self._brain_split_detect = None
        self._session_synchronize = None
        self._mac_synchronize = None
        self._fault_detect = None
        self._interface_linkage = None
        self._standby_interface_poweroff = None
        self._standby_bridge_interface = None
        self._preempt_mode = None
        self._arp_linkage = None
        self.discriminator = None

        if host_name is not None:
            self.host_name = host_name
        if state is not None:
            self.state = state
        if heartbeat_timeout_ms is not None:
            self.heartbeat_timeout_ms = heartbeat_timeout_ms
        if heartbeat_interval_ms is not None:
            self.heartbeat_interval_ms = heartbeat_interval_ms
        if ha is not None:
            self.ha = ha
        if alternate_ha is not None:
            self.alternate_ha = alternate_ha
        if brain_split_detect is not None:
            self.brain_split_detect = brain_split_detect
        if session_synchronize is not None:
            self.session_synchronize = session_synchronize
        if mac_synchronize is not None:
            self.mac_synchronize = mac_synchronize
        if fault_detect is not None:
            self.fault_detect = fault_detect
        if interface_linkage is not None:
            self.interface_linkage = interface_linkage
        if standby_interface_poweroff is not None:
            self.standby_interface_poweroff = standby_interface_poweroff
        if standby_bridge_interface is not None:
            self.standby_bridge_interface = standby_bridge_interface
        if preempt_mode is not None:
            self.preempt_mode = preempt_mode
        if arp_linkage is not None:
            self.arp_linkage = arp_linkage

    @property
    def host_name(self):
        """Gets the host_name of this ConfigActiveStandby.  # noqa: E501

        设备名称  # noqa: E501

        :return: The host_name of this ConfigActiveStandby.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ConfigActiveStandby.

        设备名称  # noqa: E501

        :param host_name: The host_name of this ConfigActiveStandby.  # noqa: E501
        :type: str
        """
        if host_name is not None and len(host_name) > 63:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `63`")  # noqa: E501
        if host_name is not None and len(host_name) < 1:
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._host_name = host_name

    @property
    def state(self):
        """Gets the state of this ConfigActiveStandby.  # noqa: E501

        双机的启禁用状态，enable表示启用，disable表示禁用  # noqa: E501

        :return: The state of this ConfigActiveStandby.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigActiveStandby.

        双机的启禁用状态，enable表示启用，disable表示禁用  # noqa: E501

        :param state: The state of this ConfigActiveStandby.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def heartbeat_timeout_ms(self):
        """Gets the heartbeat_timeout_ms of this ConfigActiveStandby.  # noqa: E501

        心跳超时时间，单位毫秒  # noqa: E501

        :return: The heartbeat_timeout_ms of this ConfigActiveStandby.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_timeout_ms

    @heartbeat_timeout_ms.setter
    def heartbeat_timeout_ms(self, heartbeat_timeout_ms):
        """Sets the heartbeat_timeout_ms of this ConfigActiveStandby.

        心跳超时时间，单位毫秒  # noqa: E501

        :param heartbeat_timeout_ms: The heartbeat_timeout_ms of this ConfigActiveStandby.  # noqa: E501
        :type: int
        """
        if heartbeat_timeout_ms is not None and heartbeat_timeout_ms > 20000:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_timeout_ms`, must be a value less than or equal to `20000`")  # noqa: E501
        if heartbeat_timeout_ms is not None and heartbeat_timeout_ms < 100:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_timeout_ms`, must be a value greater than or equal to `100`")  # noqa: E501

        self._heartbeat_timeout_ms = heartbeat_timeout_ms

    @property
    def heartbeat_interval_ms(self):
        """Gets the heartbeat_interval_ms of this ConfigActiveStandby.  # noqa: E501

        心跳间隔时间，单位毫秒  # noqa: E501

        :return: The heartbeat_interval_ms of this ConfigActiveStandby.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_interval_ms

    @heartbeat_interval_ms.setter
    def heartbeat_interval_ms(self, heartbeat_interval_ms):
        """Sets the heartbeat_interval_ms of this ConfigActiveStandby.

        心跳间隔时间，单位毫秒  # noqa: E501

        :param heartbeat_interval_ms: The heartbeat_interval_ms of this ConfigActiveStandby.  # noqa: E501
        :type: int
        """
        if heartbeat_interval_ms is not None and heartbeat_interval_ms > 10000:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_interval_ms`, must be a value less than or equal to `10000`")  # noqa: E501
        if heartbeat_interval_ms is not None and heartbeat_interval_ms < 100:  # noqa: E501
            raise ValueError("Invalid value for `heartbeat_interval_ms`, must be a value greater than or equal to `100`")  # noqa: E501

        self._heartbeat_interval_ms = heartbeat_interval_ms

    @property
    def ha(self):
        """Gets the ha of this ConfigActiveStandby.  # noqa: E501


        :return: The ha of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyHa
        """
        return self._ha

    @ha.setter
    def ha(self, ha):
        """Sets the ha of this ConfigActiveStandby.


        :param ha: The ha of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyHa
        """

        self._ha = ha

    @property
    def alternate_ha(self):
        """Gets the alternate_ha of this ConfigActiveStandby.  # noqa: E501


        :return: The alternate_ha of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyAlternateHa
        """
        return self._alternate_ha

    @alternate_ha.setter
    def alternate_ha(self, alternate_ha):
        """Sets the alternate_ha of this ConfigActiveStandby.


        :param alternate_ha: The alternate_ha of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyAlternateHa
        """

        self._alternate_ha = alternate_ha

    @property
    def brain_split_detect(self):
        """Gets the brain_split_detect of this ConfigActiveStandby.  # noqa: E501


        :return: The brain_split_detect of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyBrainSplitDetect
        """
        return self._brain_split_detect

    @brain_split_detect.setter
    def brain_split_detect(self, brain_split_detect):
        """Sets the brain_split_detect of this ConfigActiveStandby.


        :param brain_split_detect: The brain_split_detect of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyBrainSplitDetect
        """

        self._brain_split_detect = brain_split_detect

    @property
    def session_synchronize(self):
        """Gets the session_synchronize of this ConfigActiveStandby.  # noqa: E501


        :return: The session_synchronize of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbySessionSynchronize
        """
        return self._session_synchronize

    @session_synchronize.setter
    def session_synchronize(self, session_synchronize):
        """Sets the session_synchronize of this ConfigActiveStandby.


        :param session_synchronize: The session_synchronize of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbySessionSynchronize
        """

        self._session_synchronize = session_synchronize

    @property
    def mac_synchronize(self):
        """Gets the mac_synchronize of this ConfigActiveStandby.  # noqa: E501


        :return: The mac_synchronize of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyMacSynchronize
        """
        return self._mac_synchronize

    @mac_synchronize.setter
    def mac_synchronize(self, mac_synchronize):
        """Sets the mac_synchronize of this ConfigActiveStandby.


        :param mac_synchronize: The mac_synchronize of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyMacSynchronize
        """

        self._mac_synchronize = mac_synchronize

    @property
    def fault_detect(self):
        """Gets the fault_detect of this ConfigActiveStandby.  # noqa: E501


        :return: The fault_detect of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyFaultDetect
        """
        return self._fault_detect

    @fault_detect.setter
    def fault_detect(self, fault_detect):
        """Sets the fault_detect of this ConfigActiveStandby.


        :param fault_detect: The fault_detect of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyFaultDetect
        """

        self._fault_detect = fault_detect

    @property
    def interface_linkage(self):
        """Gets the interface_linkage of this ConfigActiveStandby.  # noqa: E501

        网口联动，enable表示启用，disable表示禁用。当网口掉电情况满足故障切换条件时，down网口列表中的所有网口将被联动掉电  # noqa: E501

        :return: The interface_linkage of this ConfigActiveStandby.  # noqa: E501
        :rtype: str
        """
        return self._interface_linkage

    @interface_linkage.setter
    def interface_linkage(self, interface_linkage):
        """Sets the interface_linkage of this ConfigActiveStandby.

        网口联动，enable表示启用，disable表示禁用。当网口掉电情况满足故障切换条件时，down网口列表中的所有网口将被联动掉电  # noqa: E501

        :param interface_linkage: The interface_linkage of this ConfigActiveStandby.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if interface_linkage not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_linkage` ({0}), must be one of {1}"  # noqa: E501
                .format(interface_linkage, allowed_values)
            )

        self._interface_linkage = interface_linkage

    @property
    def standby_interface_poweroff(self):
        """Gets the standby_interface_poweroff of this ConfigActiveStandby.  # noqa: E501


        :return: The standby_interface_poweroff of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyStandbyInterfacePoweroff
        """
        return self._standby_interface_poweroff

    @standby_interface_poweroff.setter
    def standby_interface_poweroff(self, standby_interface_poweroff):
        """Sets the standby_interface_poweroff of this ConfigActiveStandby.


        :param standby_interface_poweroff: The standby_interface_poweroff of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyStandbyInterfacePoweroff
        """

        self._standby_interface_poweroff = standby_interface_poweroff

    @property
    def standby_bridge_interface(self):
        """Gets the standby_bridge_interface of this ConfigActiveStandby.  # noqa: E501

        备机交换口，启用时，备机交换口能够转发数据包  # noqa: E501

        :return: The standby_bridge_interface of this ConfigActiveStandby.  # noqa: E501
        :rtype: str
        """
        return self._standby_bridge_interface

    @standby_bridge_interface.setter
    def standby_bridge_interface(self, standby_bridge_interface):
        """Sets the standby_bridge_interface of this ConfigActiveStandby.

        备机交换口，启用时，备机交换口能够转发数据包  # noqa: E501

        :param standby_bridge_interface: The standby_bridge_interface of this ConfigActiveStandby.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if standby_bridge_interface not in allowed_values:
            raise ValueError(
                "Invalid value for `standby_bridge_interface` ({0}), must be one of {1}"  # noqa: E501
                .format(standby_bridge_interface, allowed_values)
            )

        self._standby_bridge_interface = standby_bridge_interface

    @property
    def preempt_mode(self):
        """Gets the preempt_mode of this ConfigActiveStandby.  # noqa: E501

        抢占模式，可选择disable：禁用，local：本端抢占，peer：对端抢占  # noqa: E501

        :return: The preempt_mode of this ConfigActiveStandby.  # noqa: E501
        :rtype: str
        """
        return self._preempt_mode

    @preempt_mode.setter
    def preempt_mode(self, preempt_mode):
        """Sets the preempt_mode of this ConfigActiveStandby.

        抢占模式，可选择disable：禁用，local：本端抢占，peer：对端抢占  # noqa: E501

        :param preempt_mode: The preempt_mode of this ConfigActiveStandby.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE", "LOCAL", "PEER"]  # noqa: E501
        if preempt_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `preempt_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(preempt_mode, allowed_values)
            )

        self._preempt_mode = preempt_mode

    @property
    def arp_linkage(self):
        """Gets the arp_linkage of this ConfigActiveStandby.  # noqa: E501


        :return: The arp_linkage of this ConfigActiveStandby.  # noqa: E501
        :rtype: ConfigActiveStandbyArpLinkage
        """
        return self._arp_linkage

    @arp_linkage.setter
    def arp_linkage(self, arp_linkage):
        """Sets the arp_linkage of this ConfigActiveStandby.


        :param arp_linkage: The arp_linkage of this ConfigActiveStandby.  # noqa: E501
        :type: ConfigActiveStandbyArpLinkage
        """

        self._arp_linkage = arp_linkage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigActiveStandby, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigActiveStandby):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
