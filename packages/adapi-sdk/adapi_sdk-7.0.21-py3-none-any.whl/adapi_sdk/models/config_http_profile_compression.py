# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHttpProfileCompression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'stream_compress': 'str',
        'node_compress_offload': 'str',
        'cache_compress': 'str',
        'minimum_original_size_kb': 'int',
        'maximum_original_size_kb': 'int',
        'compress_mimes': 'list[str]',
        'compress_mime_unknow': 'str'
    }

    attribute_map = {
        'state': 'state',
        'stream_compress': 'stream_compress',
        'node_compress_offload': 'node_compress_offload',
        'cache_compress': 'cache_compress',
        'minimum_original_size_kb': 'minimum_original_size_kb',
        'maximum_original_size_kb': 'maximum_original_size_kb',
        'compress_mimes': 'compress_mimes',
        'compress_mime_unknow': 'compress_mime_unknow'
    }

    def __init__(self, state='DISABLE', stream_compress='ENABLE', node_compress_offload='DISABLE', cache_compress='DISABLE', minimum_original_size_kb=None, maximum_original_size_kb=None, compress_mimes=None, compress_mime_unknow='ENABLE'):  # noqa: E501
        """ConfigHttpProfileCompression - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._stream_compress = None
        self._node_compress_offload = None
        self._cache_compress = None
        self._minimum_original_size_kb = None
        self._maximum_original_size_kb = None
        self._compress_mimes = None
        self._compress_mime_unknow = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if stream_compress is not None:
            self.stream_compress = stream_compress
        if node_compress_offload is not None:
            self.node_compress_offload = node_compress_offload
        if cache_compress is not None:
            self.cache_compress = cache_compress
        if minimum_original_size_kb is not None:
            self.minimum_original_size_kb = minimum_original_size_kb
        if maximum_original_size_kb is not None:
            self.maximum_original_size_kb = maximum_original_size_kb
        if compress_mimes is not None:
            self.compress_mimes = compress_mimes
        if compress_mime_unknow is not None:
            self.compress_mime_unknow = compress_mime_unknow

    @property
    def state(self):
        """Gets the state of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定压缩的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :return: The state of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigHttpProfileCompression.

        可选参数; 指定压缩的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :param state: The state of this ConfigHttpProfileCompression.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stream_compress(self):
        """Gets the stream_compress of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定实时压缩的开关,enable表示启用,disable表示禁用,默认enable  # noqa: E501

        :return: The stream_compress of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: str
        """
        return self._stream_compress

    @stream_compress.setter
    def stream_compress(self, stream_compress):
        """Sets the stream_compress of this ConfigHttpProfileCompression.

        可选参数; 指定实时压缩的开关,enable表示启用,disable表示禁用,默认enable  # noqa: E501

        :param stream_compress: The stream_compress of this ConfigHttpProfileCompression.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if stream_compress not in allowed_values:
            raise ValueError(
                "Invalid value for `stream_compress` ({0}), must be one of {1}"  # noqa: E501
                .format(stream_compress, allowed_values)
            )

        self._stream_compress = stream_compress

    @property
    def node_compress_offload(self):
        """Gets the node_compress_offload of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定压缩卸载的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :return: The node_compress_offload of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: str
        """
        return self._node_compress_offload

    @node_compress_offload.setter
    def node_compress_offload(self, node_compress_offload):
        """Sets the node_compress_offload of this ConfigHttpProfileCompression.

        可选参数; 指定压缩卸载的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :param node_compress_offload: The node_compress_offload of this ConfigHttpProfileCompression.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if node_compress_offload not in allowed_values:
            raise ValueError(
                "Invalid value for `node_compress_offload` ({0}), must be one of {1}"  # noqa: E501
                .format(node_compress_offload, allowed_values)
            )

        self._node_compress_offload = node_compress_offload

    @property
    def cache_compress(self):
        """Gets the cache_compress of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定缓存压缩的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :return: The cache_compress of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: str
        """
        return self._cache_compress

    @cache_compress.setter
    def cache_compress(self, cache_compress):
        """Sets the cache_compress of this ConfigHttpProfileCompression.

        可选参数; 指定缓存压缩的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :param cache_compress: The cache_compress of this ConfigHttpProfileCompression.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if cache_compress not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_compress` ({0}), must be one of {1}"  # noqa: E501
                .format(cache_compress, allowed_values)
            )

        self._cache_compress = cache_compress

    @property
    def minimum_original_size_kb(self):
        """Gets the minimum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定最小压缩长度,默认为1,单位为KB  # noqa: E501

        :return: The minimum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: int
        """
        return self._minimum_original_size_kb

    @minimum_original_size_kb.setter
    def minimum_original_size_kb(self, minimum_original_size_kb):
        """Sets the minimum_original_size_kb of this ConfigHttpProfileCompression.

        可选参数; 指定最小压缩长度,默认为1,单位为KB  # noqa: E501

        :param minimum_original_size_kb: The minimum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501
        :type: int
        """
        if minimum_original_size_kb is not None and minimum_original_size_kb > 8192:  # noqa: E501
            raise ValueError("Invalid value for `minimum_original_size_kb`, must be a value less than or equal to `8192`")  # noqa: E501
        if minimum_original_size_kb is not None and minimum_original_size_kb < 1:  # noqa: E501
            raise ValueError("Invalid value for `minimum_original_size_kb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._minimum_original_size_kb = minimum_original_size_kb

    @property
    def maximum_original_size_kb(self):
        """Gets the maximum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定最大压缩长度,默认为2048,单位为KB  # noqa: E501

        :return: The maximum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: int
        """
        return self._maximum_original_size_kb

    @maximum_original_size_kb.setter
    def maximum_original_size_kb(self, maximum_original_size_kb):
        """Sets the maximum_original_size_kb of this ConfigHttpProfileCompression.

        可选参数; 指定最大压缩长度,默认为2048,单位为KB  # noqa: E501

        :param maximum_original_size_kb: The maximum_original_size_kb of this ConfigHttpProfileCompression.  # noqa: E501
        :type: int
        """
        if maximum_original_size_kb is not None and maximum_original_size_kb > 8192:  # noqa: E501
            raise ValueError("Invalid value for `maximum_original_size_kb`, must be a value less than or equal to `8192`")  # noqa: E501
        if maximum_original_size_kb is not None and maximum_original_size_kb < 1:  # noqa: E501
            raise ValueError("Invalid value for `maximum_original_size_kb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_original_size_kb = maximum_original_size_kb

    @property
    def compress_mimes(self):
        """Gets the compress_mimes of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数;指定压缩文件类型,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :return: The compress_mimes of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: list[str]
        """
        return self._compress_mimes

    @compress_mimes.setter
    def compress_mimes(self, compress_mimes):
        """Sets the compress_mimes of this ConfigHttpProfileCompression.

        可选参数;指定压缩文件类型,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :param compress_mimes: The compress_mimes of this ConfigHttpProfileCompression.  # noqa: E501
        :type: list[str]
        """

        self._compress_mimes = compress_mimes

    @property
    def compress_mime_unknow(self):
        """Gets the compress_mime_unknow of this ConfigHttpProfileCompression.  # noqa: E501

        可选参数; 指定未知文件类型压缩的开关,enable表示启用,disable表示禁用,默认enable  # noqa: E501

        :return: The compress_mime_unknow of this ConfigHttpProfileCompression.  # noqa: E501
        :rtype: str
        """
        return self._compress_mime_unknow

    @compress_mime_unknow.setter
    def compress_mime_unknow(self, compress_mime_unknow):
        """Sets the compress_mime_unknow of this ConfigHttpProfileCompression.

        可选参数; 指定未知文件类型压缩的开关,enable表示启用,disable表示禁用,默认enable  # noqa: E501

        :param compress_mime_unknow: The compress_mime_unknow of this ConfigHttpProfileCompression.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if compress_mime_unknow not in allowed_values:
            raise ValueError(
                "Invalid value for `compress_mime_unknow` ({0}), must be one of {1}"  # noqa: E501
                .format(compress_mime_unknow, allowed_values)
            )

        self._compress_mime_unknow = compress_mime_unknow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpProfileCompression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpProfileCompression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
