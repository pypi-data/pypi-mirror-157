# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigDomainMapVipPools(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vip_pool': 'str',
        'weight': 'int',
        'priority': 'int'
    }

    attribute_map = {
        'vip_pool': 'vip_pool',
        'weight': 'weight',
        'priority': 'priority'
    }

    def __init__(self, vip_pool=None, weight=None, priority=None):  # noqa: E501
        """ConfigDomainMapVipPools - a model defined in Swagger"""  # noqa: E501

        self._vip_pool = None
        self._weight = None
        self._priority = None
        self.discriminator = None

        self.vip_pool = vip_pool
        if weight is not None:
            self.weight = weight
        if priority is not None:
            self.priority = priority

    @property
    def vip_pool(self):
        """Gets the vip_pool of this ConfigDomainMapVipPools.  # noqa: E501

        虚拟IP池，必须已存在  # noqa: E501

        :return: The vip_pool of this ConfigDomainMapVipPools.  # noqa: E501
        :rtype: str
        """
        return self._vip_pool

    @vip_pool.setter
    def vip_pool(self, vip_pool):
        """Sets the vip_pool of this ConfigDomainMapVipPools.

        虚拟IP池，必须已存在  # noqa: E501

        :param vip_pool: The vip_pool of this ConfigDomainMapVipPools.  # noqa: E501
        :type: str
        """
        if vip_pool is None:
            raise ValueError("Invalid value for `vip_pool`, must not be `None`")  # noqa: E501

        self._vip_pool = vip_pool

    @property
    def weight(self):
        """Gets the weight of this ConfigDomainMapVipPools.  # noqa: E501

        权重  # noqa: E501

        :return: The weight of this ConfigDomainMapVipPools.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConfigDomainMapVipPools.

        权重  # noqa: E501

        :param weight: The weight of this ConfigDomainMapVipPools.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `100`")  # noqa: E501
        if weight is not None and weight < 1:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")  # noqa: E501

        self._weight = weight

    @property
    def priority(self):
        """Gets the priority of this ConfigDomainMapVipPools.  # noqa: E501

        优先级  # noqa: E501

        :return: The priority of this ConfigDomainMapVipPools.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConfigDomainMapVipPools.

        优先级  # noqa: E501

        :param priority: The priority of this ConfigDomainMapVipPools.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDomainMapVipPools, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDomainMapVipPools):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
