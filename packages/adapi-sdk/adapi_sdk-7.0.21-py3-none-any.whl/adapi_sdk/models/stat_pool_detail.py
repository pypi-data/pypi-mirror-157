# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_pool_detail_node import StatPoolDetailNode  # noqa: F401,E501
from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatPoolDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'health': 'str',
        'node': 'StatPoolDetailNode',
        'connection': 'StatStatisticInstant',
        'connection_established': 'StatStatisticInstant',
        'connection_rate': 'StatStatisticInstant',
        'http_request_rate': 'StatStatisticInstant',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant',
        'general_throughput': 'StatStatisticInstant',
        'netns': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'health': 'health',
        'node': 'node',
        'connection': 'connection',
        'connection_established': 'connection_established',
        'connection_rate': 'connection_rate',
        'http_request_rate': 'http_request_rate',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput',
        'general_throughput': 'general_throughput',
        'netns': 'netns'
    }

    def __init__(self, name=None, description=None, health=None, node=None, connection=None, connection_established=None, connection_rate=None, http_request_rate=None, upstream_throughput=None, downstream_throughput=None, general_throughput=None, netns='default'):  # noqa: E501
        """StatPoolDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._health = None
        self._node = None
        self._connection = None
        self._connection_established = None
        self._connection_rate = None
        self._http_request_rate = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self._general_throughput = None
        self._netns = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if health is not None:
            self.health = health
        if node is not None:
            self.node = node
        if connection is not None:
            self.connection = connection
        if connection_established is not None:
            self.connection_established = connection_established
        if connection_rate is not None:
            self.connection_rate = connection_rate
        if http_request_rate is not None:
            self.http_request_rate = http_request_rate
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput
        if general_throughput is not None:
            self.general_throughput = general_throughput
        if netns is not None:
            self.netns = netns

    @property
    def name(self):
        """Gets the name of this StatPoolDetail.  # noqa: E501

        配置名称  # noqa: E501

        :return: The name of this StatPoolDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatPoolDetail.

        配置名称  # noqa: E501

        :param name: The name of this StatPoolDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this StatPoolDetail.  # noqa: E501

        管理标签及备注描述信息  # noqa: E501

        :return: The description of this StatPoolDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatPoolDetail.

        管理标签及备注描述信息  # noqa: E501

        :param description: The description of this StatPoolDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def health(self):
        """Gets the health of this StatPoolDetail.  # noqa: E501

        健康状态（NORMAL-正常/FAILURE-故障/BUSY-繁忙/ALERT-告警）  # noqa: E501

        :return: The health of this StatPoolDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatPoolDetail.

        健康状态（NORMAL-正常/FAILURE-故障/BUSY-繁忙/ALERT-告警）  # noqa: E501

        :param health: The health of this StatPoolDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "FAILURE", "BUSY", "ALERT"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def node(self):
        """Gets the node of this StatPoolDetail.  # noqa: E501


        :return: The node of this StatPoolDetail.  # noqa: E501
        :rtype: StatPoolDetailNode
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this StatPoolDetail.


        :param node: The node of this StatPoolDetail.  # noqa: E501
        :type: StatPoolDetailNode
        """

        self._node = node

    @property
    def connection(self):
        """Gets the connection of this StatPoolDetail.  # noqa: E501

        并发连接数  # noqa: E501

        :return: The connection of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatPoolDetail.

        并发连接数  # noqa: E501

        :param connection: The connection of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def connection_established(self):
        """Gets the connection_established of this StatPoolDetail.  # noqa: E501

        Established并发连接数  # noqa: E501

        :return: The connection_established of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_established

    @connection_established.setter
    def connection_established(self, connection_established):
        """Sets the connection_established of this StatPoolDetail.

        Established并发连接数  # noqa: E501

        :param connection_established: The connection_established of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_established = connection_established

    @property
    def connection_rate(self):
        """Gets the connection_rate of this StatPoolDetail.  # noqa: E501

        新建连接数  # noqa: E501

        :return: The connection_rate of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection_rate

    @connection_rate.setter
    def connection_rate(self, connection_rate):
        """Sets the connection_rate of this StatPoolDetail.

        新建连接数  # noqa: E501

        :param connection_rate: The connection_rate of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection_rate = connection_rate

    @property
    def http_request_rate(self):
        """Gets the http_request_rate of this StatPoolDetail.  # noqa: E501

        HTTP请求速率  # noqa: E501

        :return: The http_request_rate of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._http_request_rate

    @http_request_rate.setter
    def http_request_rate(self, http_request_rate):
        """Sets the http_request_rate of this StatPoolDetail.

        HTTP请求速率  # noqa: E501

        :param http_request_rate: The http_request_rate of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._http_request_rate = http_request_rate

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatPoolDetail.  # noqa: E501

        上行吞吐速率  # noqa: E501

        :return: The upstream_throughput of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatPoolDetail.

        上行吞吐速率  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatPoolDetail.  # noqa: E501

        下行吞吐速率  # noqa: E501

        :return: The downstream_throughput of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatPoolDetail.

        下行吞吐速率  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    @property
    def general_throughput(self):
        """Gets the general_throughput of this StatPoolDetail.  # noqa: E501

        上/下行总吞吐速率  # noqa: E501

        :return: The general_throughput of this StatPoolDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._general_throughput

    @general_throughput.setter
    def general_throughput(self, general_throughput):
        """Sets the general_throughput of this StatPoolDetail.

        上/下行总吞吐速率  # noqa: E501

        :param general_throughput: The general_throughput of this StatPoolDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._general_throughput = general_throughput

    @property
    def netns(self):
        """Gets the netns of this StatPoolDetail.  # noqa: E501

        netns名称  # noqa: E501

        :return: The netns of this StatPoolDetail.  # noqa: E501
        :rtype: str
        """
        return self._netns

    @netns.setter
    def netns(self, netns):
        """Sets the netns of this StatPoolDetail.

        netns名称  # noqa: E501

        :param netns: The netns of this StatPoolDetail.  # noqa: E501
        :type: str
        """

        self._netns = netns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatPoolDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatPoolDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
