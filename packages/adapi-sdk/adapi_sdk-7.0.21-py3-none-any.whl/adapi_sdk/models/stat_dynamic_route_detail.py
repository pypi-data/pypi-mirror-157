# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatDynamicRouteDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'next_hop': 'str',
        'outbound_link': 'str',
        'protocol': 'str',
        'cost': 'int'
    }

    attribute_map = {
        'destination': 'destination',
        'next_hop': 'next_hop',
        'outbound_link': 'outbound_link',
        'protocol': 'protocol',
        'cost': 'cost'
    }

    def __init__(self, destination=None, next_hop=None, outbound_link=None, protocol=None, cost=None):  # noqa: E501
        """StatDynamicRouteDetail - a model defined in Swagger"""  # noqa: E501

        self._destination = None
        self._next_hop = None
        self._outbound_link = None
        self._protocol = None
        self._cost = None
        self.discriminator = None

        if destination is not None:
            self.destination = destination
        if next_hop is not None:
            self.next_hop = next_hop
        if outbound_link is not None:
            self.outbound_link = outbound_link
        if protocol is not None:
            self.protocol = protocol
        if cost is not None:
            self.cost = cost

    @property
    def destination(self):
        """Gets the destination of this StatDynamicRouteDetail.  # noqa: E501

        目的地址  # noqa: E501

        :return: The destination of this StatDynamicRouteDetail.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this StatDynamicRouteDetail.

        目的地址  # noqa: E501

        :param destination: The destination of this StatDynamicRouteDetail.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def next_hop(self):
        """Gets the next_hop of this StatDynamicRouteDetail.  # noqa: E501

        下一跳地址  # noqa: E501

        :return: The next_hop of this StatDynamicRouteDetail.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this StatDynamicRouteDetail.

        下一跳地址  # noqa: E501

        :param next_hop: The next_hop of this StatDynamicRouteDetail.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def outbound_link(self):
        """Gets the outbound_link of this StatDynamicRouteDetail.  # noqa: E501

        出接口链路名称  # noqa: E501

        :return: The outbound_link of this StatDynamicRouteDetail.  # noqa: E501
        :rtype: str
        """
        return self._outbound_link

    @outbound_link.setter
    def outbound_link(self, outbound_link):
        """Sets the outbound_link of this StatDynamicRouteDetail.

        出接口链路名称  # noqa: E501

        :param outbound_link: The outbound_link of this StatDynamicRouteDetail.  # noqa: E501
        :type: str
        """

        self._outbound_link = outbound_link

    @property
    def protocol(self):
        """Gets the protocol of this StatDynamicRouteDetail.  # noqa: E501

        路由协议  # noqa: E501

        :return: The protocol of this StatDynamicRouteDetail.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StatDynamicRouteDetail.

        路由协议  # noqa: E501

        :param protocol: The protocol of this StatDynamicRouteDetail.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def cost(self):
        """Gets the cost of this StatDynamicRouteDetail.  # noqa: E501

        代价值  # noqa: E501

        :return: The cost of this StatDynamicRouteDetail.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this StatDynamicRouteDetail.

        代价值  # noqa: E501

        :param cost: The cost of this StatDynamicRouteDetail.  # noqa: E501
        :type: int
        """

        self._cost = cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDynamicRouteDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDynamicRouteDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
