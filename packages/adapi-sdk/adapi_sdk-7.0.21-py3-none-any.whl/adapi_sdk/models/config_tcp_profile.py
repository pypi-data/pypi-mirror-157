# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_tcp_profile_connection_pool import ConfigTcpProfileConnectionPool  # noqa: F401,E501
from adapi_sdk.models.config_tcp_profile_tcp_options import ConfigTcpProfileTcpOptions  # noqa: F401,E501


class ConfigTcpProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'default': 'str',
        'type': 'str',
        'loose_initiation': 'str',
        'loose_close': 'str',
        'loose_close_timeout_ms': 'int',
        'idle_timeout': 'int',
        'timewait_timeout_ms': 'int',
        'time_stamp': 'str',
        'seq_adjust': 'str',
        'syn_timeout': 'int',
        'maximum_segment_size': 'int',
        'idle_timeout_reset_connection': 'str',
        'close_node_connection_with_rst': 'str',
        'close_client_connection_with_rst': 'str',
        'node_fault_close_connection': 'str',
        'timewait_recycle': 'str',
        'delay_ack': 'str',
        'sack_support': 'str',
        'dsack_support': 'str',
        'maximum_syn_retransmission_times': 'int',
        'maximum_seg_retransmission_times': 'int',
        'maximum_fin_retransmission_times': 'int',
        'receive_window_scale': 'int',
        'initial_receive_window_size': 'int',
        'tcp_options': 'list[ConfigTcpProfileTcpOptions]',
        'fast_tcp': 'str',
        'connection_pool': 'ConfigTcpProfileConnectionPool',
        'service_unavailable_refuse_connection': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'default': 'default',
        'type': 'type',
        'loose_initiation': 'loose_initiation',
        'loose_close': 'loose_close',
        'loose_close_timeout_ms': 'loose_close_timeout_ms',
        'idle_timeout': 'idle_timeout',
        'timewait_timeout_ms': 'timewait_timeout_ms',
        'time_stamp': 'time_stamp',
        'seq_adjust': 'seq_adjust',
        'syn_timeout': 'syn_timeout',
        'maximum_segment_size': 'maximum_segment_size',
        'idle_timeout_reset_connection': 'idle_timeout_reset_connection',
        'close_node_connection_with_rst': 'close_node_connection_with_rst',
        'close_client_connection_with_rst': 'close_client_connection_with_rst',
        'node_fault_close_connection': 'node_fault_close_connection',
        'timewait_recycle': 'timewait_recycle',
        'delay_ack': 'delay_ack',
        'sack_support': 'sack_support',
        'dsack_support': 'dsack_support',
        'maximum_syn_retransmission_times': 'maximum_syn_retransmission_times',
        'maximum_seg_retransmission_times': 'maximum_seg_retransmission_times',
        'maximum_fin_retransmission_times': 'maximum_fin_retransmission_times',
        'receive_window_scale': 'receive_window_scale',
        'initial_receive_window_size': 'initial_receive_window_size',
        'tcp_options': 'tcp_options',
        'fast_tcp': 'fast_tcp',
        'connection_pool': 'connection_pool',
        'service_unavailable_refuse_connection': 'service_unavailable_refuse_connection'
    }

    def __init__(self, name=None, description=None, default='NON-DEFAULT', type=None, loose_initiation='DISABLE', loose_close='DISABLE', loose_close_timeout_ms=None, idle_timeout=None, timewait_timeout_ms=None, time_stamp='PRESERVE', seq_adjust='DISABLE', syn_timeout=None, maximum_segment_size=None, idle_timeout_reset_connection='DISABLE', close_node_connection_with_rst='ENABLE', close_client_connection_with_rst='ENABLE', node_fault_close_connection='DISABLE', timewait_recycle='ENABLE', delay_ack='ENABLE', sack_support='ENABLE', dsack_support='DISABLE', maximum_syn_retransmission_times=None, maximum_seg_retransmission_times=None, maximum_fin_retransmission_times=None, receive_window_scale=None, initial_receive_window_size=None, tcp_options=None, fast_tcp='DISABLE', connection_pool=None, service_unavailable_refuse_connection='NONE'):  # noqa: E501
        """ConfigTcpProfile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._default = None
        self._type = None
        self._loose_initiation = None
        self._loose_close = None
        self._loose_close_timeout_ms = None
        self._idle_timeout = None
        self._timewait_timeout_ms = None
        self._time_stamp = None
        self._seq_adjust = None
        self._syn_timeout = None
        self._maximum_segment_size = None
        self._idle_timeout_reset_connection = None
        self._close_node_connection_with_rst = None
        self._close_client_connection_with_rst = None
        self._node_fault_close_connection = None
        self._timewait_recycle = None
        self._delay_ack = None
        self._sack_support = None
        self._dsack_support = None
        self._maximum_syn_retransmission_times = None
        self._maximum_seg_retransmission_times = None
        self._maximum_fin_retransmission_times = None
        self._receive_window_scale = None
        self._initial_receive_window_size = None
        self._tcp_options = None
        self._fast_tcp = None
        self._connection_pool = None
        self._service_unavailable_refuse_connection = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if default is not None:
            self.default = default
        if type is not None:
            self.type = type
        if loose_initiation is not None:
            self.loose_initiation = loose_initiation
        if loose_close is not None:
            self.loose_close = loose_close
        if loose_close_timeout_ms is not None:
            self.loose_close_timeout_ms = loose_close_timeout_ms
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if timewait_timeout_ms is not None:
            self.timewait_timeout_ms = timewait_timeout_ms
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if seq_adjust is not None:
            self.seq_adjust = seq_adjust
        if syn_timeout is not None:
            self.syn_timeout = syn_timeout
        if maximum_segment_size is not None:
            self.maximum_segment_size = maximum_segment_size
        if idle_timeout_reset_connection is not None:
            self.idle_timeout_reset_connection = idle_timeout_reset_connection
        if close_node_connection_with_rst is not None:
            self.close_node_connection_with_rst = close_node_connection_with_rst
        if close_client_connection_with_rst is not None:
            self.close_client_connection_with_rst = close_client_connection_with_rst
        if node_fault_close_connection is not None:
            self.node_fault_close_connection = node_fault_close_connection
        if timewait_recycle is not None:
            self.timewait_recycle = timewait_recycle
        if delay_ack is not None:
            self.delay_ack = delay_ack
        if sack_support is not None:
            self.sack_support = sack_support
        if dsack_support is not None:
            self.dsack_support = dsack_support
        if maximum_syn_retransmission_times is not None:
            self.maximum_syn_retransmission_times = maximum_syn_retransmission_times
        if maximum_seg_retransmission_times is not None:
            self.maximum_seg_retransmission_times = maximum_seg_retransmission_times
        if maximum_fin_retransmission_times is not None:
            self.maximum_fin_retransmission_times = maximum_fin_retransmission_times
        if receive_window_scale is not None:
            self.receive_window_scale = receive_window_scale
        if initial_receive_window_size is not None:
            self.initial_receive_window_size = initial_receive_window_size
        if tcp_options is not None:
            self.tcp_options = tcp_options
        if fast_tcp is not None:
            self.fast_tcp = fast_tcp
        if connection_pool is not None:
            self.connection_pool = connection_pool
        if service_unavailable_refuse_connection is not None:
            self.service_unavailable_refuse_connection = service_unavailable_refuse_connection

    @property
    def name(self):
        """Gets the name of this ConfigTcpProfile.  # noqa: E501

        必选参数；指定TCP策略的名称, 在配置中必须唯一  # noqa: E501

        :return: The name of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigTcpProfile.

        必选参数；指定TCP策略的名称, 在配置中必须唯一  # noqa: E501

        :param name: The name of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigTcpProfile.  # noqa: E501

        可选参数；用来对此配置增加额外的备注  # noqa: E501

        :return: The description of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigTcpProfile.

        可选参数；用来对此配置增加额外的备注  # noqa: E501

        :param description: The description of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default(self):
        """Gets the default of this ConfigTcpProfile.  # noqa: E501

        只读参数；用来说明此配置是否是默认配置，是否可修改  # noqa: E501

        :return: The default of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ConfigTcpProfile.

        只读参数；用来说明此配置是否是默认配置，是否可修改  # noqa: E501

        :param default: The default of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["NON-DEFAULT", "READONLY", "MODIFIABLE"]  # noqa: E501
        if default not in allowed_values:
            raise ValueError(
                "Invalid value for `default` ({0}), must be one of {1}"  # noqa: E501
                .format(default, allowed_values)
            )

        self._default = default

    @property
    def type(self):
        """Gets the type of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定TCP策略的服务类型，默认为L7-PROXY  # noqa: E501

        :return: The type of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigTcpProfile.

        可选参数；指定TCP策略的服务类型，默认为L7-PROXY  # noqa: E501

        :param type: The type of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["L3-FORWARD", "L4-FORWARD", "L7-PROXY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def loose_initiation(self):
        """Gets the loose_initiation of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否允许传入未经过三次握手的TCP连接，enable表示启用，disable表示禁用；默认为禁用  # noqa: E501

        :return: The loose_initiation of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._loose_initiation

    @loose_initiation.setter
    def loose_initiation(self, loose_initiation):
        """Sets the loose_initiation of this ConfigTcpProfile.

        可选参数；指定是否允许传入未经过三次握手的TCP连接，enable表示启用，disable表示禁用；默认为禁用  # noqa: E501

        :param loose_initiation: The loose_initiation of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if loose_initiation not in allowed_values:
            raise ValueError(
                "Invalid value for `loose_initiation` ({0}), must be one of {1}"  # noqa: E501
                .format(loose_initiation, allowed_values)
            )

        self._loose_initiation = loose_initiation

    @property
    def loose_close(self):
        """Gets the loose_close of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否快速关闭未经过三次握手的TCP连接，enable表示启用，disable表示禁用；默认为禁用  # noqa: E501

        :return: The loose_close of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._loose_close

    @loose_close.setter
    def loose_close(self, loose_close):
        """Sets the loose_close of this ConfigTcpProfile.

        可选参数；指定是否快速关闭未经过三次握手的TCP连接，enable表示启用，disable表示禁用；默认为禁用  # noqa: E501

        :param loose_close: The loose_close of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if loose_close not in allowed_values:
            raise ValueError(
                "Invalid value for `loose_close` ({0}), must be one of {1}"  # noqa: E501
                .format(loose_close, allowed_values)
            )

        self._loose_close = loose_close

    @property
    def loose_close_timeout_ms(self):
        """Gets the loose_close_timeout_ms of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定关闭的超时时间，默认为5000ms  # noqa: E501

        :return: The loose_close_timeout_ms of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._loose_close_timeout_ms

    @loose_close_timeout_ms.setter
    def loose_close_timeout_ms(self, loose_close_timeout_ms):
        """Sets the loose_close_timeout_ms of this ConfigTcpProfile.

        可选参数；指定关闭的超时时间，默认为5000ms  # noqa: E501

        :param loose_close_timeout_ms: The loose_close_timeout_ms of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._loose_close_timeout_ms = loose_close_timeout_ms

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定会话超时时间，默认为600s  # noqa: E501

        :return: The idle_timeout of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this ConfigTcpProfile.

        可选参数；指定会话超时时间，默认为600s  # noqa: E501

        :param idle_timeout: The idle_timeout of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def timewait_timeout_ms(self):
        """Gets the timewait_timeout_ms of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定timewait超时时间，默认为10000ms  # noqa: E501

        :return: The timewait_timeout_ms of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._timewait_timeout_ms

    @timewait_timeout_ms.setter
    def timewait_timeout_ms(self, timewait_timeout_ms):
        """Sets the timewait_timeout_ms of this ConfigTcpProfile.

        可选参数；指定timewait超时时间，默认为10000ms  # noqa: E501

        :param timewait_timeout_ms: The timewait_timeout_ms of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._timewait_timeout_ms = timewait_timeout_ms

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定时间戳状态，enable表示启用，disable表示禁用，strip表示抹除，rewrite表示改写，preserve表示保持不变，默认为保持不变  # noqa: E501

        :return: The time_stamp of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ConfigTcpProfile.

        可选参数；指定时间戳状态，enable表示启用，disable表示禁用，strip表示抹除，rewrite表示改写，preserve表示保持不变，默认为保持不变  # noqa: E501

        :param time_stamp: The time_stamp of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE", "STRIP", "REWRITE", "PRESERVE"]  # noqa: E501
        if time_stamp not in allowed_values:
            raise ValueError(
                "Invalid value for `time_stamp` ({0}), must be one of {1}"  # noqa: E501
                .format(time_stamp, allowed_values)
            )

        self._time_stamp = time_stamp

    @property
    def seq_adjust(self):
        """Gets the seq_adjust of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否调整序列号，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The seq_adjust of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._seq_adjust

    @seq_adjust.setter
    def seq_adjust(self, seq_adjust):
        """Sets the seq_adjust of this ConfigTcpProfile.

        可选参数；指定是否调整序列号，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param seq_adjust: The seq_adjust of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if seq_adjust not in allowed_values:
            raise ValueError(
                "Invalid value for `seq_adjust` ({0}), must be one of {1}"  # noqa: E501
                .format(seq_adjust, allowed_values)
            )

        self._seq_adjust = seq_adjust

    @property
    def syn_timeout(self):
        """Gets the syn_timeout of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定syn超时时间，默认为75  # noqa: E501

        :return: The syn_timeout of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._syn_timeout

    @syn_timeout.setter
    def syn_timeout(self, syn_timeout):
        """Sets the syn_timeout of this ConfigTcpProfile.

        可选参数；指定syn超时时间，默认为75  # noqa: E501

        :param syn_timeout: The syn_timeout of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._syn_timeout = syn_timeout

    @property
    def maximum_segment_size(self):
        """Gets the maximum_segment_size of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定MSS大小，默认为1460  # noqa: E501

        :return: The maximum_segment_size of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._maximum_segment_size

    @maximum_segment_size.setter
    def maximum_segment_size(self, maximum_segment_size):
        """Sets the maximum_segment_size of this ConfigTcpProfile.

        可选参数；指定MSS大小，默认为1460  # noqa: E501

        :param maximum_segment_size: The maximum_segment_size of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._maximum_segment_size = maximum_segment_size

    @property
    def idle_timeout_reset_connection(self):
        """Gets the idle_timeout_reset_connection of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否会话超时重置连接，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The idle_timeout_reset_connection of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._idle_timeout_reset_connection

    @idle_timeout_reset_connection.setter
    def idle_timeout_reset_connection(self, idle_timeout_reset_connection):
        """Sets the idle_timeout_reset_connection of this ConfigTcpProfile.

        可选参数；指定是否会话超时重置连接，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param idle_timeout_reset_connection: The idle_timeout_reset_connection of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if idle_timeout_reset_connection not in allowed_values:
            raise ValueError(
                "Invalid value for `idle_timeout_reset_connection` ({0}), must be one of {1}"  # noqa: E501
                .format(idle_timeout_reset_connection, allowed_values)
            )

        self._idle_timeout_reset_connection = idle_timeout_reset_connection

    @property
    def close_node_connection_with_rst(self):
        """Gets the close_node_connection_with_rst of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否强制关闭服务端连接，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The close_node_connection_with_rst of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._close_node_connection_with_rst

    @close_node_connection_with_rst.setter
    def close_node_connection_with_rst(self, close_node_connection_with_rst):
        """Sets the close_node_connection_with_rst of this ConfigTcpProfile.

        可选参数；指定是否强制关闭服务端连接，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param close_node_connection_with_rst: The close_node_connection_with_rst of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if close_node_connection_with_rst not in allowed_values:
            raise ValueError(
                "Invalid value for `close_node_connection_with_rst` ({0}), must be one of {1}"  # noqa: E501
                .format(close_node_connection_with_rst, allowed_values)
            )

        self._close_node_connection_with_rst = close_node_connection_with_rst

    @property
    def close_client_connection_with_rst(self):
        """Gets the close_client_connection_with_rst of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否强制关闭客户端连接，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The close_client_connection_with_rst of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._close_client_connection_with_rst

    @close_client_connection_with_rst.setter
    def close_client_connection_with_rst(self, close_client_connection_with_rst):
        """Sets the close_client_connection_with_rst of this ConfigTcpProfile.

        可选参数；指定是否强制关闭客户端连接，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param close_client_connection_with_rst: The close_client_connection_with_rst of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if close_client_connection_with_rst not in allowed_values:
            raise ValueError(
                "Invalid value for `close_client_connection_with_rst` ({0}), must be one of {1}"  # noqa: E501
                .format(close_client_connection_with_rst, allowed_values)
            )

        self._close_client_connection_with_rst = close_client_connection_with_rst

    @property
    def node_fault_close_connection(self):
        """Gets the node_fault_close_connection of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否节点失效关闭连接，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The node_fault_close_connection of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._node_fault_close_connection

    @node_fault_close_connection.setter
    def node_fault_close_connection(self, node_fault_close_connection):
        """Sets the node_fault_close_connection of this ConfigTcpProfile.

        可选参数；指定是否节点失效关闭连接，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param node_fault_close_connection: The node_fault_close_connection of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if node_fault_close_connection not in allowed_values:
            raise ValueError(
                "Invalid value for `node_fault_close_connection` ({0}), must be one of {1}"  # noqa: E501
                .format(node_fault_close_connection, allowed_values)
            )

        self._node_fault_close_connection = node_fault_close_connection

    @property
    def timewait_recycle(self):
        """Gets the timewait_recycle of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否timewait资源快速回收，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The timewait_recycle of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._timewait_recycle

    @timewait_recycle.setter
    def timewait_recycle(self, timewait_recycle):
        """Sets the timewait_recycle of this ConfigTcpProfile.

        可选参数；指定是否timewait资源快速回收，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param timewait_recycle: The timewait_recycle of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if timewait_recycle not in allowed_values:
            raise ValueError(
                "Invalid value for `timewait_recycle` ({0}), must be one of {1}"  # noqa: E501
                .format(timewait_recycle, allowed_values)
            )

        self._timewait_recycle = timewait_recycle

    @property
    def delay_ack(self):
        """Gets the delay_ack of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否延迟ack，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The delay_ack of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._delay_ack

    @delay_ack.setter
    def delay_ack(self, delay_ack):
        """Sets the delay_ack of this ConfigTcpProfile.

        可选参数；指定是否延迟ack，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param delay_ack: The delay_ack of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if delay_ack not in allowed_values:
            raise ValueError(
                "Invalid value for `delay_ack` ({0}), must be one of {1}"  # noqa: E501
                .format(delay_ack, allowed_values)
            )

        self._delay_ack = delay_ack

    @property
    def sack_support(self):
        """Gets the sack_support of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否支持sack，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :return: The sack_support of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._sack_support

    @sack_support.setter
    def sack_support(self, sack_support):
        """Sets the sack_support of this ConfigTcpProfile.

        可选参数；指定是否支持sack，enable表示启用，disable表示禁用，默认为启用  # noqa: E501

        :param sack_support: The sack_support of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if sack_support not in allowed_values:
            raise ValueError(
                "Invalid value for `sack_support` ({0}), must be one of {1}"  # noqa: E501
                .format(sack_support, allowed_values)
            )

        self._sack_support = sack_support

    @property
    def dsack_support(self):
        """Gets the dsack_support of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否支持dsack，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The dsack_support of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._dsack_support

    @dsack_support.setter
    def dsack_support(self, dsack_support):
        """Sets the dsack_support of this ConfigTcpProfile.

        可选参数；指定是否支持dsack，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param dsack_support: The dsack_support of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if dsack_support not in allowed_values:
            raise ValueError(
                "Invalid value for `dsack_support` ({0}), must be one of {1}"  # noqa: E501
                .format(dsack_support, allowed_values)
            )

        self._dsack_support = dsack_support

    @property
    def maximum_syn_retransmission_times(self):
        """Gets the maximum_syn_retransmission_times of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定最大SYN重传次数，默认为15  # noqa: E501

        :return: The maximum_syn_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._maximum_syn_retransmission_times

    @maximum_syn_retransmission_times.setter
    def maximum_syn_retransmission_times(self, maximum_syn_retransmission_times):
        """Sets the maximum_syn_retransmission_times of this ConfigTcpProfile.

        可选参数；指定最大SYN重传次数，默认为15  # noqa: E501

        :param maximum_syn_retransmission_times: The maximum_syn_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._maximum_syn_retransmission_times = maximum_syn_retransmission_times

    @property
    def maximum_seg_retransmission_times(self):
        """Gets the maximum_seg_retransmission_times of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定分段最大重传次数，默认为15  # noqa: E501

        :return: The maximum_seg_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._maximum_seg_retransmission_times

    @maximum_seg_retransmission_times.setter
    def maximum_seg_retransmission_times(self, maximum_seg_retransmission_times):
        """Sets the maximum_seg_retransmission_times of this ConfigTcpProfile.

        可选参数；指定分段最大重传次数，默认为15  # noqa: E501

        :param maximum_seg_retransmission_times: The maximum_seg_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._maximum_seg_retransmission_times = maximum_seg_retransmission_times

    @property
    def maximum_fin_retransmission_times(self):
        """Gets the maximum_fin_retransmission_times of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定Closing状态下重传次数，默认为15  # noqa: E501

        :return: The maximum_fin_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._maximum_fin_retransmission_times

    @maximum_fin_retransmission_times.setter
    def maximum_fin_retransmission_times(self, maximum_fin_retransmission_times):
        """Sets the maximum_fin_retransmission_times of this ConfigTcpProfile.

        可选参数；指定Closing状态下重传次数，默认为15  # noqa: E501

        :param maximum_fin_retransmission_times: The maximum_fin_retransmission_times of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._maximum_fin_retransmission_times = maximum_fin_retransmission_times

    @property
    def receive_window_scale(self):
        """Gets the receive_window_scale of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定窗口扩大因子，默认为2  # noqa: E501

        :return: The receive_window_scale of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._receive_window_scale

    @receive_window_scale.setter
    def receive_window_scale(self, receive_window_scale):
        """Sets the receive_window_scale of this ConfigTcpProfile.

        可选参数；指定窗口扩大因子，默认为2  # noqa: E501

        :param receive_window_scale: The receive_window_scale of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._receive_window_scale = receive_window_scale

    @property
    def initial_receive_window_size(self):
        """Gets the initial_receive_window_size of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定初始接收窗口大小，默认为65535  # noqa: E501

        :return: The initial_receive_window_size of this ConfigTcpProfile.  # noqa: E501
        :rtype: int
        """
        return self._initial_receive_window_size

    @initial_receive_window_size.setter
    def initial_receive_window_size(self, initial_receive_window_size):
        """Sets the initial_receive_window_size of this ConfigTcpProfile.

        可选参数；指定初始接收窗口大小，默认为65535  # noqa: E501

        :param initial_receive_window_size: The initial_receive_window_size of this ConfigTcpProfile.  # noqa: E501
        :type: int
        """

        self._initial_receive_window_size = initial_receive_window_size

    @property
    def tcp_options(self):
        """Gets the tcp_options of this ConfigTcpProfile.  # noqa: E501


        :return: The tcp_options of this ConfigTcpProfile.  # noqa: E501
        :rtype: list[ConfigTcpProfileTcpOptions]
        """
        return self._tcp_options

    @tcp_options.setter
    def tcp_options(self, tcp_options):
        """Sets the tcp_options of this ConfigTcpProfile.


        :param tcp_options: The tcp_options of this ConfigTcpProfile.  # noqa: E501
        :type: list[ConfigTcpProfileTcpOptions]
        """

        self._tcp_options = tcp_options

    @property
    def fast_tcp(self):
        """Gets the fast_tcp of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定是否tcp单边加速，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :return: The fast_tcp of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._fast_tcp

    @fast_tcp.setter
    def fast_tcp(self, fast_tcp):
        """Sets the fast_tcp of this ConfigTcpProfile.

        可选参数；指定是否tcp单边加速，enable表示启用，disable表示禁用，默认为禁用  # noqa: E501

        :param fast_tcp: The fast_tcp of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if fast_tcp not in allowed_values:
            raise ValueError(
                "Invalid value for `fast_tcp` ({0}), must be one of {1}"  # noqa: E501
                .format(fast_tcp, allowed_values)
            )

        self._fast_tcp = fast_tcp

    @property
    def connection_pool(self):
        """Gets the connection_pool of this ConfigTcpProfile.  # noqa: E501


        :return: The connection_pool of this ConfigTcpProfile.  # noqa: E501
        :rtype: ConfigTcpProfileConnectionPool
        """
        return self._connection_pool

    @connection_pool.setter
    def connection_pool(self, connection_pool):
        """Sets the connection_pool of this ConfigTcpProfile.


        :param connection_pool: The connection_pool of this ConfigTcpProfile.  # noqa: E501
        :type: ConfigTcpProfileConnectionPool
        """

        self._connection_pool = connection_pool

    @property
    def service_unavailable_refuse_connection(self):
        """Gets the service_unavailable_refuse_connection of this ConfigTcpProfile.  # noqa: E501

        可选参数；指定虚拟服务离线策略，none表示无，reset表示重连，drop表示丢掉，默认为无  # noqa: E501

        :return: The service_unavailable_refuse_connection of this ConfigTcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._service_unavailable_refuse_connection

    @service_unavailable_refuse_connection.setter
    def service_unavailable_refuse_connection(self, service_unavailable_refuse_connection):
        """Sets the service_unavailable_refuse_connection of this ConfigTcpProfile.

        可选参数；指定虚拟服务离线策略，none表示无，reset表示重连，drop表示丢掉，默认为无  # noqa: E501

        :param service_unavailable_refuse_connection: The service_unavailable_refuse_connection of this ConfigTcpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "RESET", "DROP"]  # noqa: E501
        if service_unavailable_refuse_connection not in allowed_values:
            raise ValueError(
                "Invalid value for `service_unavailable_refuse_connection` ({0}), must be one of {1}"  # noqa: E501
                .format(service_unavailable_refuse_connection, allowed_values)
            )

        self._service_unavailable_refuse_connection = service_unavailable_refuse_connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigTcpProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigTcpProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
