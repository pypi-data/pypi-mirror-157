# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_active_standby_device_status_last_failover import StatActiveStandbyDeviceStatusLastFailover  # noqa: F401,E501


class StatApplicationGroupDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'active_member': 'str',
        'standby_member': 'str',
        'session_sync': 'str',
        'last_failover': 'StatActiveStandbyDeviceStatusLastFailover'
    }

    attribute_map = {
        'name': 'name',
        'active_member': 'active_member',
        'standby_member': 'standby_member',
        'session_sync': 'session_sync',
        'last_failover': 'last_failover'
    }

    def __init__(self, name=None, active_member=None, standby_member=None, session_sync=None, last_failover=None):  # noqa: E501
        """StatApplicationGroupDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._active_member = None
        self._standby_member = None
        self._session_sync = None
        self._last_failover = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if active_member is not None:
            self.active_member = active_member
        if standby_member is not None:
            self.standby_member = standby_member
        if session_sync is not None:
            self.session_sync = session_sync
        if last_failover is not None:
            self.last_failover = last_failover

    @property
    def name(self):
        """Gets the name of this StatApplicationGroupDetail.  # noqa: E501

        应用组名称  # noqa: E501

        :return: The name of this StatApplicationGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatApplicationGroupDetail.

        应用组名称  # noqa: E501

        :param name: The name of this StatApplicationGroupDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def active_member(self):
        """Gets the active_member of this StatApplicationGroupDetail.  # noqa: E501

        生效设备  # noqa: E501

        :return: The active_member of this StatApplicationGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._active_member

    @active_member.setter
    def active_member(self, active_member):
        """Sets the active_member of this StatApplicationGroupDetail.

        生效设备  # noqa: E501

        :param active_member: The active_member of this StatApplicationGroupDetail.  # noqa: E501
        :type: str
        """

        self._active_member = active_member

    @property
    def standby_member(self):
        """Gets the standby_member of this StatApplicationGroupDetail.  # noqa: E501

        备份设备  # noqa: E501

        :return: The standby_member of this StatApplicationGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._standby_member

    @standby_member.setter
    def standby_member(self, standby_member):
        """Sets the standby_member of this StatApplicationGroupDetail.

        备份设备  # noqa: E501

        :param standby_member: The standby_member of this StatApplicationGroupDetail.  # noqa: E501
        :type: str
        """

        self._standby_member = standby_member

    @property
    def session_sync(self):
        """Gets the session_sync of this StatApplicationGroupDetail.  # noqa: E501

        会话同步状态（PROCESSION-同步中/COMPLETED-完成/INCOMPLETE-未完成/DISABLE-禁用）  # noqa: E501

        :return: The session_sync of this StatApplicationGroupDetail.  # noqa: E501
        :rtype: str
        """
        return self._session_sync

    @session_sync.setter
    def session_sync(self, session_sync):
        """Sets the session_sync of this StatApplicationGroupDetail.

        会话同步状态（PROCESSION-同步中/COMPLETED-完成/INCOMPLETE-未完成/DISABLE-禁用）  # noqa: E501

        :param session_sync: The session_sync of this StatApplicationGroupDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROCESSING", "COMPLETED", "INCOMPLETE", "DISABLE"]  # noqa: E501
        if session_sync not in allowed_values:
            raise ValueError(
                "Invalid value for `session_sync` ({0}), must be one of {1}"  # noqa: E501
                .format(session_sync, allowed_values)
            )

        self._session_sync = session_sync

    @property
    def last_failover(self):
        """Gets the last_failover of this StatApplicationGroupDetail.  # noqa: E501


        :return: The last_failover of this StatApplicationGroupDetail.  # noqa: E501
        :rtype: StatActiveStandbyDeviceStatusLastFailover
        """
        return self._last_failover

    @last_failover.setter
    def last_failover(self, last_failover):
        """Sets the last_failover of this StatApplicationGroupDetail.


        :param last_failover: The last_failover of this StatApplicationGroupDetail.  # noqa: E501
        :type: StatActiveStandbyDeviceStatusLastFailover
        """

        self._last_failover = last_failover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatApplicationGroupDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatApplicationGroupDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
