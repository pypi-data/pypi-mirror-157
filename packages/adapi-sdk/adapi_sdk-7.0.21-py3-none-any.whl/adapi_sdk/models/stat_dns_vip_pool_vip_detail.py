# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatDnsVipPoolVipDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'health': 'str',
        'failure_reason': 'str',
        'connection': 'StatStatisticInstant',
        'upstream_throughput': 'StatStatisticInstant',
        'downstream_throughput': 'StatStatisticInstant'
    }

    attribute_map = {
        'name': 'name',
        'health': 'health',
        'failure_reason': 'failure_reason',
        'connection': 'connection',
        'upstream_throughput': 'upstream_throughput',
        'downstream_throughput': 'downstream_throughput'
    }

    def __init__(self, name=None, health=None, failure_reason=None, connection=None, upstream_throughput=None, downstream_throughput=None):  # noqa: E501
        """StatDnsVipPoolVipDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._health = None
        self._failure_reason = None
        self._connection = None
        self._upstream_throughput = None
        self._downstream_throughput = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if health is not None:
            self.health = health
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if connection is not None:
            self.connection = connection
        if upstream_throughput is not None:
            self.upstream_throughput = upstream_throughput
        if downstream_throughput is not None:
            self.downstream_throughput = downstream_throughput

    @property
    def name(self):
        """Gets the name of this StatDnsVipPoolVipDetail.  # noqa: E501

        虚拟ip名称  # noqa: E501

        :return: The name of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatDnsVipPoolVipDetail.

        虚拟ip名称  # noqa: E501

        :param name: The name of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def health(self):
        """Gets the health of this StatDnsVipPoolVipDetail.  # noqa: E501

        虚拟ip健康状态（NORMAL-正常/BUSY-繁忙/FAILURE-故障）  # noqa: E501

        :return: The health of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StatDnsVipPoolVipDetail.

        虚拟ip健康状态（NORMAL-正常/BUSY-繁忙/FAILURE-故障）  # noqa: E501

        :param health: The health of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "BUSY", "FAILURE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def failure_reason(self):
        """Gets the failure_reason of this StatDnsVipPoolVipDetail.  # noqa: E501

        虚拟ip故障原因  # noqa: E501

        :return: The failure_reason of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this StatDnsVipPoolVipDetail.

        虚拟ip故障原因  # noqa: E501

        :param failure_reason: The failure_reason of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def connection(self):
        """Gets the connection of this StatDnsVipPoolVipDetail.  # noqa: E501

        连接数实时统计数据  # noqa: E501

        :return: The connection of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this StatDnsVipPoolVipDetail.

        连接数实时统计数据  # noqa: E501

        :param connection: The connection of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._connection = connection

    @property
    def upstream_throughput(self):
        """Gets the upstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501

        上行吞吐量实时统计数据  # noqa: E501

        :return: The upstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._upstream_throughput

    @upstream_throughput.setter
    def upstream_throughput(self, upstream_throughput):
        """Sets the upstream_throughput of this StatDnsVipPoolVipDetail.

        上行吞吐量实时统计数据  # noqa: E501

        :param upstream_throughput: The upstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._upstream_throughput = upstream_throughput

    @property
    def downstream_throughput(self):
        """Gets the downstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501

        下行量吞吐实时统计数据  # noqa: E501

        :return: The downstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._downstream_throughput

    @downstream_throughput.setter
    def downstream_throughput(self, downstream_throughput):
        """Sets the downstream_throughput of this StatDnsVipPoolVipDetail.

        下行量吞吐实时统计数据  # noqa: E501

        :param downstream_throughput: The downstream_throughput of this StatDnsVipPoolVipDetail.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._downstream_throughput = downstream_throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDnsVipPoolVipDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDnsVipPoolVipDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
