# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CgiFileResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_token': 'str',
        'file_name': 'str',
        'file_type': 'str',
        'expired': 'int',
        'flag': 'str'
    }

    attribute_map = {
        'file_token': 'file_token',
        'file_name': 'file_name',
        'file_type': 'file_type',
        'expired': 'expired',
        'flag': 'flag'
    }

    def __init__(self, file_token=None, file_name=None, file_type=None, expired=None, flag=None):  # noqa: E501
        """CgiFileResource - a model defined in Swagger"""  # noqa: E501

        self._file_token = None
        self._file_name = None
        self._file_type = None
        self._expired = None
        self._flag = None
        self.discriminator = None

        if file_token is not None:
            self.file_token = file_token
        if file_name is not None:
            self.file_name = file_name
        if file_type is not None:
            self.file_type = file_type
        if expired is not None:
            self.expired = expired
        if flag is not None:
            self.flag = flag

    @property
    def file_token(self):
        """Gets the file_token of this CgiFileResource.  # noqa: E501

        资源文件令牌  # noqa: E501

        :return: The file_token of this CgiFileResource.  # noqa: E501
        :rtype: str
        """
        return self._file_token

    @file_token.setter
    def file_token(self, file_token):
        """Sets the file_token of this CgiFileResource.

        资源文件令牌  # noqa: E501

        :param file_token: The file_token of this CgiFileResource.  # noqa: E501
        :type: str
        """

        self._file_token = file_token

    @property
    def file_name(self):
        """Gets the file_name of this CgiFileResource.  # noqa: E501

        资源文件名  # noqa: E501

        :return: The file_name of this CgiFileResource.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CgiFileResource.

        资源文件名  # noqa: E501

        :param file_name: The file_name of this CgiFileResource.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_type(self):
        """Gets the file_type of this CgiFileResource.  # noqa: E501

        资源类型  # noqa: E501

        :return: The file_type of this CgiFileResource.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this CgiFileResource.

        资源类型  # noqa: E501

        :param file_type: The file_type of this CgiFileResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["JSON", "CSV", "TEXT", "BINARY", "ZIP", "GZIP", "SSU", "OTHER"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def expired(self):
        """Gets the expired of this CgiFileResource.  # noqa: E501

        过期时间戳  # noqa: E501

        :return: The expired of this CgiFileResource.  # noqa: E501
        :rtype: int
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this CgiFileResource.

        过期时间戳  # noqa: E501

        :param expired: The expired of this CgiFileResource.  # noqa: E501
        :type: int
        """

        self._expired = expired

    @property
    def flag(self):
        """Gets the flag of this CgiFileResource.  # noqa: E501

        上传结果  # noqa: E501

        :return: The flag of this CgiFileResource.  # noqa: E501
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this CgiFileResource.

        上传结果  # noqa: E501

        :param flag: The flag of this CgiFileResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["BAD_PARAM", "FILE_EXIST", "DIRECT_UPLOAD_OK", "OUT_OF_SIZE", "WRITE_FILE_FAIL", "SPLIT_TOO_SMALL", "PARTITION_UPLOAD_OK", "SPLIT_UPLOAD_OK", "SPLIT_EXIST", "FILE_NOT_EXIST", "PARTITION_FILE_EXIST", "SERVER_ERROR", "NO_PERMISSION"]  # noqa: E501
        if flag not in allowed_values:
            raise ValueError(
                "Invalid value for `flag` ({0}), must be one of {1}"  # noqa: E501
                .format(flag, allowed_values)
            )

        self._flag = flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CgiFileResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CgiFileResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
