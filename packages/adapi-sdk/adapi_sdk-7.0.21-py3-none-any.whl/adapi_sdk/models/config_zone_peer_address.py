# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigZonePeerAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'tsig_key': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'tsig_key': 'tsig_key',
        'policy': 'policy'
    }

    def __init__(self, address=None, port=None, tsig_key=None, policy='RECEIVE'):  # noqa: E501
        """ConfigZonePeerAddress - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._port = None
        self._tsig_key = None
        self._policy = None
        self.discriminator = None

        self.address = address
        if port is not None:
            self.port = port
        if tsig_key is not None:
            self.tsig_key = tsig_key
        if policy is not None:
            self.policy = policy

    @property
    def address(self):
        """Gets the address of this ConfigZonePeerAddress.  # noqa: E501

        主（辅）服务器地址。其校验格式为单个IPv4/IPv6地址  # noqa: E501

        :return: The address of this ConfigZonePeerAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigZonePeerAddress.

        主（辅）服务器地址。其校验格式为单个IPv4/IPv6地址  # noqa: E501

        :param address: The address of this ConfigZonePeerAddress.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this ConfigZonePeerAddress.  # noqa: E501

        必须为1~65535之间的整数  # noqa: E501

        :return: The port of this ConfigZonePeerAddress.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigZonePeerAddress.

        必须为1~65535之间的整数  # noqa: E501

        :param port: The port of this ConfigZonePeerAddress.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def tsig_key(self):
        """Gets the tsig_key of this ConfigZonePeerAddress.  # noqa: E501

        TSIG密钥。下拉单选，选项内容为用户已创建的tsig密钥名称，默认为NONE  # noqa: E501

        :return: The tsig_key of this ConfigZonePeerAddress.  # noqa: E501
        :rtype: str
        """
        return self._tsig_key

    @tsig_key.setter
    def tsig_key(self, tsig_key):
        """Sets the tsig_key of this ConfigZonePeerAddress.

        TSIG密钥。下拉单选，选项内容为用户已创建的tsig密钥名称，默认为NONE  # noqa: E501

        :param tsig_key: The tsig_key of this ConfigZonePeerAddress.  # noqa: E501
        :type: str
        """

        self._tsig_key = tsig_key

    @property
    def policy(self):
        """Gets the policy of this ConfigZonePeerAddress.  # noqa: E501

        动作。SLAVE服务器可选择NOTIFY和RECEIVE动作；而MASTER服务器默认仅支持NOTIFY，无policy配置项  # noqa: E501

        :return: The policy of this ConfigZonePeerAddress.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigZonePeerAddress.

        动作。SLAVE服务器可选择NOTIFY和RECEIVE动作；而MASTER服务器默认仅支持NOTIFY，无policy配置项  # noqa: E501

        :param policy: The policy of this ConfigZonePeerAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOTIFY", "RECEIVE"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigZonePeerAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigZonePeerAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
