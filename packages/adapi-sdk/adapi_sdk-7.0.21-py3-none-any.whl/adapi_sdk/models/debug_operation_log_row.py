# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugOperationLogRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_log_id': 'int',
        '_date': 'str',
        'time': 'str',
        'accsee_type': 'str',
        'source_address': 'str',
        'username': 'str',
        'method': 'str',
        'path': 'str',
        'module': 'str',
        'description': 'str',
        'command': 'str',
        'result': 'str',
        'detail': 'str'
    }

    attribute_map = {
        'operation_log_id': 'operation_log_id',
        '_date': 'date',
        'time': 'time',
        'accsee_type': 'accsee_type',
        'source_address': 'source_address',
        'username': 'username',
        'method': 'method',
        'path': 'path',
        'module': 'module',
        'description': 'description',
        'command': 'command',
        'result': 'result',
        'detail': 'detail'
    }

    def __init__(self, operation_log_id=None, _date=None, time=None, accsee_type=None, source_address=None, username=None, method=None, path=None, module=None, description=None, command=None, result=None, detail=None):  # noqa: E501
        """DebugOperationLogRow - a model defined in Swagger"""  # noqa: E501

        self._operation_log_id = None
        self.__date = None
        self._time = None
        self._accsee_type = None
        self._source_address = None
        self._username = None
        self._method = None
        self._path = None
        self._module = None
        self._description = None
        self._command = None
        self._result = None
        self._detail = None
        self.discriminator = None

        if operation_log_id is not None:
            self.operation_log_id = operation_log_id
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if accsee_type is not None:
            self.accsee_type = accsee_type
        if source_address is not None:
            self.source_address = source_address
        if username is not None:
            self.username = username
        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if module is not None:
            self.module = module
        if description is not None:
            self.description = description
        if command is not None:
            self.command = command
        if result is not None:
            self.result = result
        if detail is not None:
            self.detail = detail

    @property
    def operation_log_id(self):
        """Gets the operation_log_id of this DebugOperationLogRow.  # noqa: E501

        管理日志ID  # noqa: E501

        :return: The operation_log_id of this DebugOperationLogRow.  # noqa: E501
        :rtype: int
        """
        return self._operation_log_id

    @operation_log_id.setter
    def operation_log_id(self, operation_log_id):
        """Sets the operation_log_id of this DebugOperationLogRow.

        管理日志ID  # noqa: E501

        :param operation_log_id: The operation_log_id of this DebugOperationLogRow.  # noqa: E501
        :type: int
        """

        self._operation_log_id = operation_log_id

    @property
    def _date(self):
        """Gets the _date of this DebugOperationLogRow.  # noqa: E501

        日期  # noqa: E501

        :return: The _date of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DebugOperationLogRow.

        日期  # noqa: E501

        :param _date: The _date of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this DebugOperationLogRow.  # noqa: E501

        时间  # noqa: E501

        :return: The time of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DebugOperationLogRow.

        时间  # noqa: E501

        :param time: The time of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def accsee_type(self):
        """Gets the accsee_type of this DebugOperationLogRow.  # noqa: E501

        操作方式  # noqa: E501

        :return: The accsee_type of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._accsee_type

    @accsee_type.setter
    def accsee_type(self, accsee_type):
        """Sets the accsee_type of this DebugOperationLogRow.

        操作方式  # noqa: E501

        :param accsee_type: The accsee_type of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["WEB-CONSOLE", "SSH-CONSOLE", "RESTFUL-API"]  # noqa: E501
        if accsee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accsee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(accsee_type, allowed_values)
            )

        self._accsee_type = accsee_type

    @property
    def source_address(self):
        """Gets the source_address of this DebugOperationLogRow.  # noqa: E501

        用户源IP地址  # noqa: E501

        :return: The source_address of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this DebugOperationLogRow.

        用户源IP地址  # noqa: E501

        :param source_address: The source_address of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def username(self):
        """Gets the username of this DebugOperationLogRow.  # noqa: E501

        用户名  # noqa: E501

        :return: The username of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DebugOperationLogRow.

        用户名  # noqa: E501

        :param username: The username of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def method(self):
        """Gets the method of this DebugOperationLogRow.  # noqa: E501

        操作类型  # noqa: E501

        :return: The method of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DebugOperationLogRow.

        操作类型  # noqa: E501

        :param method: The method of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def path(self):
        """Gets the path of this DebugOperationLogRow.  # noqa: E501

        该配置对应的API地址  # noqa: E501

        :return: The path of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DebugOperationLogRow.

        该配置对应的API地址  # noqa: E501

        :param path: The path of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def module(self):
        """Gets the module of this DebugOperationLogRow.  # noqa: E501

        日志所属模块  # noqa: E501

        :return: The module of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this DebugOperationLogRow.

        日志所属模块  # noqa: E501

        :param module: The module of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["STAT", "SLB", "LC", "DNS", "RC", "NET", "SYS", "HA"]  # noqa: E501
        if module not in allowed_values:
            raise ValueError(
                "Invalid value for `module` ({0}), must be one of {1}"  # noqa: E501
                .format(module, allowed_values)
            )

        self._module = module

    @property
    def description(self):
        """Gets the description of this DebugOperationLogRow.  # noqa: E501

        描述  # noqa: E501

        :return: The description of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DebugOperationLogRow.

        描述  # noqa: E501

        :param description: The description of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def command(self):
        """Gets the command of this DebugOperationLogRow.  # noqa: E501

        命令行的命令  # noqa: E501

        :return: The command of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DebugOperationLogRow.

        命令行的命令  # noqa: E501

        :param command: The command of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def result(self):
        """Gets the result of this DebugOperationLogRow.  # noqa: E501

        命令执行结果  # noqa: E501

        :return: The result of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DebugOperationLogRow.

        命令执行结果  # noqa: E501

        :param result: The result of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILURE"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def detail(self):
        """Gets the detail of this DebugOperationLogRow.  # noqa: E501

        日志详情  # noqa: E501

        :return: The detail of this DebugOperationLogRow.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DebugOperationLogRow.

        日志详情  # noqa: E501

        :param detail: The detail of this DebugOperationLogRow.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugOperationLogRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugOperationLogRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
