# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_active_standby_fault_detect_health_level import ConfigActiveStandbyFaultDetectHealthLevel  # noqa: F401,E501
from adapi_sdk.models.config_active_standby_fault_detect_link_fault_requirement import ConfigActiveStandbyFaultDetectLinkFaultRequirement  # noqa: F401,E501


class ConfigActiveStandbyFaultDetect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'method': 'str',
        'link_fault_requirement': 'ConfigActiveStandbyFaultDetectLinkFaultRequirement',
        'link_fault_rules': 'list[list[str]]',
        'health_level': 'ConfigActiveStandbyFaultDetectHealthLevel',
        'link_monitor_reset_delay_minute': 'int'
    }

    attribute_map = {
        'state': 'state',
        'method': 'method',
        'link_fault_requirement': 'link_fault_requirement',
        'link_fault_rules': 'link_fault_rules',
        'health_level': 'health_level',
        'link_monitor_reset_delay_minute': 'link_monitor_reset_delay_minute'
    }

    def __init__(self, state='DISABLE', method='FAULT-REQUIREMENT', link_fault_requirement=None, link_fault_rules=None, health_level=None, link_monitor_reset_delay_minute=None):  # noqa: E501
        """ConfigActiveStandbyFaultDetect - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._method = None
        self._link_fault_requirement = None
        self._link_fault_rules = None
        self._health_level = None
        self._link_monitor_reset_delay_minute = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if method is not None:
            self.method = method
        if link_fault_requirement is not None:
            self.link_fault_requirement = link_fault_requirement
        if link_fault_rules is not None:
            self.link_fault_rules = link_fault_rules
        if health_level is not None:
            self.health_level = health_level
        if link_monitor_reset_delay_minute is not None:
            self.link_monitor_reset_delay_minute = link_monitor_reset_delay_minute

    @property
    def state(self):
        """Gets the state of this ConfigActiveStandbyFaultDetect.  # noqa: E501

        故障切换开关，enable表示启用，disable表示禁用  # noqa: E501

        :return: The state of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigActiveStandbyFaultDetect.

        故障切换开关，enable表示启用，disable表示禁用  # noqa: E501

        :param state: The state of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def method(self):
        """Gets the method of this ConfigActiveStandbyFaultDetect.  # noqa: E501

        故障切换方式，可选择fault-requirement：按数量切换方式，和fault-rule：按自定义规则切换方式  # noqa: E501

        :return: The method of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigActiveStandbyFaultDetect.

        故障切换方式，可选择fault-requirement：按数量切换方式，和fault-rule：按自定义规则切换方式  # noqa: E501

        :param method: The method of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAULT-REQUIREMENT", "FAULT-RULE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def link_fault_requirement(self):
        """Gets the link_fault_requirement of this ConfigActiveStandbyFaultDetect.  # noqa: E501


        :return: The link_fault_requirement of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: ConfigActiveStandbyFaultDetectLinkFaultRequirement
        """
        return self._link_fault_requirement

    @link_fault_requirement.setter
    def link_fault_requirement(self, link_fault_requirement):
        """Sets the link_fault_requirement of this ConfigActiveStandbyFaultDetect.


        :param link_fault_requirement: The link_fault_requirement of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: ConfigActiveStandbyFaultDetectLinkFaultRequirement
        """

        self._link_fault_requirement = link_fault_requirement

    @property
    def link_fault_rules(self):
        """Gets the link_fault_rules of this ConfigActiveStandbyFaultDetect.  # noqa: E501

        自定义切换规则  # noqa: E501

        :return: The link_fault_rules of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._link_fault_rules

    @link_fault_rules.setter
    def link_fault_rules(self, link_fault_rules):
        """Sets the link_fault_rules of this ConfigActiveStandbyFaultDetect.

        自定义切换规则  # noqa: E501

        :param link_fault_rules: The link_fault_rules of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: list[list[str]]
        """

        self._link_fault_rules = link_fault_rules

    @property
    def health_level(self):
        """Gets the health_level of this ConfigActiveStandbyFaultDetect.  # noqa: E501


        :return: The health_level of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: ConfigActiveStandbyFaultDetectHealthLevel
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this ConfigActiveStandbyFaultDetect.


        :param health_level: The health_level of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: ConfigActiveStandbyFaultDetectHealthLevel
        """

        self._health_level = health_level

    @property
    def link_monitor_reset_delay_minute(self):
        """Gets the link_monitor_reset_delay_minute of this ConfigActiveStandbyFaultDetect.  # noqa: E501

        自动清除备机监视器故障的时间，由于备机没有监视器检测能力，当检测级别为link-monitor的设备切换为备机时，会自动在此时间后清除备机的监视器故障状态  # noqa: E501

        :return: The link_monitor_reset_delay_minute of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :rtype: int
        """
        return self._link_monitor_reset_delay_minute

    @link_monitor_reset_delay_minute.setter
    def link_monitor_reset_delay_minute(self, link_monitor_reset_delay_minute):
        """Sets the link_monitor_reset_delay_minute of this ConfigActiveStandbyFaultDetect.

        自动清除备机监视器故障的时间，由于备机没有监视器检测能力，当检测级别为link-monitor的设备切换为备机时，会自动在此时间后清除备机的监视器故障状态  # noqa: E501

        :param link_monitor_reset_delay_minute: The link_monitor_reset_delay_minute of this ConfigActiveStandbyFaultDetect.  # noqa: E501
        :type: int
        """
        if link_monitor_reset_delay_minute is not None and link_monitor_reset_delay_minute > 60:  # noqa: E501
            raise ValueError("Invalid value for `link_monitor_reset_delay_minute`, must be a value less than or equal to `60`")  # noqa: E501
        if link_monitor_reset_delay_minute is not None and link_monitor_reset_delay_minute < 0:  # noqa: E501
            raise ValueError("Invalid value for `link_monitor_reset_delay_minute`, must be a value greater than or equal to `0`")  # noqa: E501

        self._link_monitor_reset_delay_minute = link_monitor_reset_delay_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigActiveStandbyFaultDetect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigActiveStandbyFaultDetect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
