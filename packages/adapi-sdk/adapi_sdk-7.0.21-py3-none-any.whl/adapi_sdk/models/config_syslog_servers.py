# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigSyslogServers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'language_type': 'str',
        'message_encode': 'str',
        'network': 'str'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'language_type': 'language_type',
        'message_encode': 'message_encode',
        'network': 'network'
    }

    def __init__(self, address=None, port=None, language_type='LANGUAGE_ZH_CN', message_encode='UTF8', network='AUTO'):  # noqa: E501
        """ConfigSyslogServers - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._port = None
        self._language_type = None
        self._message_encode = None
        self._network = None
        self.discriminator = None

        self.address = address
        if port is not None:
            self.port = port
        if language_type is not None:
            self.language_type = language_type
        if message_encode is not None:
            self.message_encode = message_encode
        if network is not None:
            self.network = network

    @property
    def address(self):
        """Gets the address of this ConfigSyslogServers.  # noqa: E501

        可选参数；服务器地址  # noqa: E501

        :return: The address of this ConfigSyslogServers.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigSyslogServers.

        可选参数；服务器地址  # noqa: E501

        :param address: The address of this ConfigSyslogServers.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this ConfigSyslogServers.  # noqa: E501

        可选参数；服务器端口  # noqa: E501

        :return: The port of this ConfigSyslogServers.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigSyslogServers.

        可选参数；服务器端口  # noqa: E501

        :param port: The port of this ConfigSyslogServers.  # noqa: E501
        :type: int
        """
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def language_type(self):
        """Gets the language_type of this ConfigSyslogServers.  # noqa: E501

        日志语言  # noqa: E501

        :return: The language_type of this ConfigSyslogServers.  # noqa: E501
        :rtype: str
        """
        return self._language_type

    @language_type.setter
    def language_type(self, language_type):
        """Sets the language_type of this ConfigSyslogServers.

        日志语言  # noqa: E501

        :param language_type: The language_type of this ConfigSyslogServers.  # noqa: E501
        :type: str
        """
        allowed_values = ["LANGUAGE_ZH_CN", "LANGUAGE_EN_US"]  # noqa: E501
        if language_type not in allowed_values:
            raise ValueError(
                "Invalid value for `language_type` ({0}), must be one of {1}"  # noqa: E501
                .format(language_type, allowed_values)
            )

        self._language_type = language_type

    @property
    def message_encode(self):
        """Gets the message_encode of this ConfigSyslogServers.  # noqa: E501

        日志编码格式  # noqa: E501

        :return: The message_encode of this ConfigSyslogServers.  # noqa: E501
        :rtype: str
        """
        return self._message_encode

    @message_encode.setter
    def message_encode(self, message_encode):
        """Sets the message_encode of this ConfigSyslogServers.

        日志编码格式  # noqa: E501

        :param message_encode: The message_encode of this ConfigSyslogServers.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASCII", "UTF8", "GBK", "GB2312"]  # noqa: E501
        if message_encode not in allowed_values:
            raise ValueError(
                "Invalid value for `message_encode` ({0}), must be one of {1}"  # noqa: E501
                .format(message_encode, allowed_values)
            )

        self._message_encode = message_encode

    @property
    def network(self):
        """Gets the network of this ConfigSyslogServers.  # noqa: E501

        选择的网络  # noqa: E501

        :return: The network of this ConfigSyslogServers.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConfigSyslogServers.

        选择的网络  # noqa: E501

        :param network: The network of this ConfigSyslogServers.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGE_NET", "SERVICE_NET", "AUTO"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"  # noqa: E501
                .format(network, allowed_values)
            )

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSyslogServers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSyslogServers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
