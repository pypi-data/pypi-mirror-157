# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigActiveStandbyFaultDetectLinkFaultRequirement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objects': 'list[str]',
        'fault_object_count': 'int'
    }

    attribute_map = {
        'objects': 'objects',
        'fault_object_count': 'fault_object_count'
    }

    def __init__(self, objects=None, fault_object_count=None):  # noqa: E501
        """ConfigActiveStandbyFaultDetectLinkFaultRequirement - a model defined in Swagger"""  # noqa: E501

        self._objects = None
        self._fault_object_count = None
        self.discriminator = None

        if objects is not None:
            self.objects = objects
        if fault_object_count is not None:
            self.fault_object_count = fault_object_count

    @property
    def objects(self):
        """Gets the objects of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501

        检测的链路列表  # noqa: E501

        :return: The objects of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501
        :rtype: list[str]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.

        检测的链路列表  # noqa: E501

        :param objects: The objects of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501
        :type: list[str]
        """

        self._objects = objects

    @property
    def fault_object_count(self):
        """Gets the fault_object_count of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501

        引起切换的最少故障链路数量  # noqa: E501

        :return: The fault_object_count of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501
        :rtype: int
        """
        return self._fault_object_count

    @fault_object_count.setter
    def fault_object_count(self, fault_object_count):
        """Sets the fault_object_count of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.

        引起切换的最少故障链路数量  # noqa: E501

        :param fault_object_count: The fault_object_count of this ConfigActiveStandbyFaultDetectLinkFaultRequirement.  # noqa: E501
        :type: int
        """
        if fault_object_count is not None and fault_object_count > 200:  # noqa: E501
            raise ValueError("Invalid value for `fault_object_count`, must be a value less than or equal to `200`")  # noqa: E501
        if fault_object_count is not None and fault_object_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `fault_object_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fault_object_count = fault_object_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigActiveStandbyFaultDetectLinkFaultRequirement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigActiveStandbyFaultDetectLinkFaultRequirement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
