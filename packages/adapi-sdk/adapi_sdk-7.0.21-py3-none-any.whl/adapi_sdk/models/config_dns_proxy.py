# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_dns_proxy_dns6to4_query import ConfigDnsProxyDns6to4Query  # noqa: F401,E501
from adapi_sdk.models.config_dns_proxy_dns_cache import ConfigDnsProxyDnsCache  # noqa: F401,E501
from adapi_sdk.models.config_dns_proxy_dns_servers import ConfigDnsProxyDnsServers  # noqa: F401,E501


class ConfigDnsProxy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'proxy_source_address': 'str',
        'proxy_source_address_subnet': 'list[str]',
        'proxy_destination': 'str',
        'listen_ipv4': 'str',
        'listen_ipv6': 'str',
        'listen_port': 'int',
        'dns_cache': 'ConfigDnsProxyDnsCache',
        'persist': 'str',
        'concurrent_query': 'str',
        'schedule_policy': 'str',
        'pre_rule': 'str',
        'link_busy_protect': 'str',
        'health_detect_domains': 'list[str]',
        'dns_6to4_query': 'ConfigDnsProxyDns6to4Query',
        'dns_servers': 'list[ConfigDnsProxyDnsServers]'
    }

    attribute_map = {
        'state': 'state',
        'proxy_source_address': 'proxy_source_address',
        'proxy_source_address_subnet': 'proxy_source_address_subnet',
        'proxy_destination': 'proxy_destination',
        'listen_ipv4': 'listen_ipv4',
        'listen_ipv6': 'listen_ipv6',
        'listen_port': 'listen_port',
        'dns_cache': 'dns_cache',
        'persist': 'persist',
        'concurrent_query': 'concurrent_query',
        'schedule_policy': 'schedule_policy',
        'pre_rule': 'pre_rule',
        'link_busy_protect': 'link_busy_protect',
        'health_detect_domains': 'health_detect_domains',
        'dns_6to4_query': 'dns_6to4_query',
        'dns_servers': 'dns_servers'
    }

    def __init__(self, state='ENABLE', proxy_source_address='ALL', proxy_source_address_subnet=None, proxy_destination='LINK-DNS-SERVERS', listen_ipv4=None, listen_ipv6=None, listen_port=None, dns_cache=None, persist='ENABLE', concurrent_query='DISABLE', schedule_policy='ROUND-ROBIN', pre_rule='ENABLE', link_busy_protect='DISABLE', health_detect_domains=None, dns_6to4_query=None, dns_servers=None):  # noqa: E501
        """ConfigDnsProxy - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._proxy_source_address = None
        self._proxy_source_address_subnet = None
        self._proxy_destination = None
        self._listen_ipv4 = None
        self._listen_ipv6 = None
        self._listen_port = None
        self._dns_cache = None
        self._persist = None
        self._concurrent_query = None
        self._schedule_policy = None
        self._pre_rule = None
        self._link_busy_protect = None
        self._health_detect_domains = None
        self._dns_6to4_query = None
        self._dns_servers = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if proxy_source_address is not None:
            self.proxy_source_address = proxy_source_address
        if proxy_source_address_subnet is not None:
            self.proxy_source_address_subnet = proxy_source_address_subnet
        if proxy_destination is not None:
            self.proxy_destination = proxy_destination
        if listen_ipv4 is not None:
            self.listen_ipv4 = listen_ipv4
        if listen_ipv6 is not None:
            self.listen_ipv6 = listen_ipv6
        if listen_port is not None:
            self.listen_port = listen_port
        if dns_cache is not None:
            self.dns_cache = dns_cache
        if persist is not None:
            self.persist = persist
        if concurrent_query is not None:
            self.concurrent_query = concurrent_query
        if schedule_policy is not None:
            self.schedule_policy = schedule_policy
        if pre_rule is not None:
            self.pre_rule = pre_rule
        if link_busy_protect is not None:
            self.link_busy_protect = link_busy_protect
        if health_detect_domains is not None:
            self.health_detect_domains = health_detect_domains
        if dns_6to4_query is not None:
            self.dns_6to4_query = dns_6to4_query
        if dns_servers is not None:
            self.dns_servers = dns_servers

    @property
    def state(self):
        """Gets the state of this ConfigDnsProxy.  # noqa: E501

        可选参数；DNS代理的状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :return: The state of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigDnsProxy.

        可选参数；DNS代理的状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :param state: The state of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def proxy_source_address(self):
        """Gets the proxy_source_address of this ConfigDnsProxy.  # noqa: E501

        可选参数；代理内网网段，可选值有：all（所有网段），subnet（部分网段）；默认为所有网段。  # noqa: E501

        :return: The proxy_source_address of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_source_address

    @proxy_source_address.setter
    def proxy_source_address(self, proxy_source_address):
        """Sets the proxy_source_address of this ConfigDnsProxy.

        可选参数；代理内网网段，可选值有：all（所有网段），subnet（部分网段）；默认为所有网段。  # noqa: E501

        :param proxy_source_address: The proxy_source_address of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "SUBNET"]  # noqa: E501
        if proxy_source_address not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_source_address` ({0}), must be one of {1}"  # noqa: E501
                .format(proxy_source_address, allowed_values)
            )

        self._proxy_source_address = proxy_source_address

    @property
    def proxy_source_address_subnet(self):
        """Gets the proxy_source_address_subnet of this ConfigDnsProxy.  # noqa: E501

        可选参数；网段列表，类型为数组。  # noqa: E501

        :return: The proxy_source_address_subnet of this ConfigDnsProxy.  # noqa: E501
        :rtype: list[str]
        """
        return self._proxy_source_address_subnet

    @proxy_source_address_subnet.setter
    def proxy_source_address_subnet(self, proxy_source_address_subnet):
        """Sets the proxy_source_address_subnet of this ConfigDnsProxy.

        可选参数；网段列表，类型为数组。  # noqa: E501

        :param proxy_source_address_subnet: The proxy_source_address_subnet of this ConfigDnsProxy.  # noqa: E501
        :type: list[str]
        """

        self._proxy_source_address_subnet = proxy_source_address_subnet

    @property
    def proxy_destination(self):
        """Gets the proxy_destination of this ConfigDnsProxy.  # noqa: E501

        可选参数；代理目标范围，可选的有all（全部dns请求）、link-dns-servers（dns服务器列表）、pre-rule-and_intranet-record(指定域名)，默认为全部dns请求。  # noqa: E501

        :return: The proxy_destination of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._proxy_destination

    @proxy_destination.setter
    def proxy_destination(self, proxy_destination):
        """Sets the proxy_destination of this ConfigDnsProxy.

        可选参数；代理目标范围，可选的有all（全部dns请求）、link-dns-servers（dns服务器列表）、pre-rule-and_intranet-record(指定域名)，默认为全部dns请求。  # noqa: E501

        :param proxy_destination: The proxy_destination of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "LINK-DNS-SERVERS", "PRE-RULE-AND-INTRANET-RECORD"]  # noqa: E501
        if proxy_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(proxy_destination, allowed_values)
            )

        self._proxy_destination = proxy_destination

    @property
    def listen_ipv4(self):
        """Gets the listen_ipv4 of this ConfigDnsProxy.  # noqa: E501

        可选参数；IPv4监听地址，如1.1.1.1。  # noqa: E501

        :return: The listen_ipv4 of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._listen_ipv4

    @listen_ipv4.setter
    def listen_ipv4(self, listen_ipv4):
        """Sets the listen_ipv4 of this ConfigDnsProxy.

        可选参数；IPv4监听地址，如1.1.1.1。  # noqa: E501

        :param listen_ipv4: The listen_ipv4 of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """

        self._listen_ipv4 = listen_ipv4

    @property
    def listen_ipv6(self):
        """Gets the listen_ipv6 of this ConfigDnsProxy.  # noqa: E501

        可选参数；IPv6监听地址，如2001::78。  # noqa: E501

        :return: The listen_ipv6 of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._listen_ipv6

    @listen_ipv6.setter
    def listen_ipv6(self, listen_ipv6):
        """Sets the listen_ipv6 of this ConfigDnsProxy.

        可选参数；IPv6监听地址，如2001::78。  # noqa: E501

        :param listen_ipv6: The listen_ipv6 of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """

        self._listen_ipv6 = listen_ipv6

    @property
    def listen_port(self):
        """Gets the listen_port of this ConfigDnsProxy.  # noqa: E501

        可选参数；监听端口，默认为5353。  # noqa: E501

        :return: The listen_port of this ConfigDnsProxy.  # noqa: E501
        :rtype: int
        """
        return self._listen_port

    @listen_port.setter
    def listen_port(self, listen_port):
        """Sets the listen_port of this ConfigDnsProxy.

        可选参数；监听端口，默认为5353。  # noqa: E501

        :param listen_port: The listen_port of this ConfigDnsProxy.  # noqa: E501
        :type: int
        """
        if listen_port is not None and listen_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `listen_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if listen_port is not None and listen_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `listen_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._listen_port = listen_port

    @property
    def dns_cache(self):
        """Gets the dns_cache of this ConfigDnsProxy.  # noqa: E501


        :return: The dns_cache of this ConfigDnsProxy.  # noqa: E501
        :rtype: ConfigDnsProxyDnsCache
        """
        return self._dns_cache

    @dns_cache.setter
    def dns_cache(self, dns_cache):
        """Sets the dns_cache of this ConfigDnsProxy.


        :param dns_cache: The dns_cache of this ConfigDnsProxy.  # noqa: E501
        :type: ConfigDnsProxyDnsCache
        """

        self._dns_cache = dns_cache

    @property
    def persist(self):
        """Gets the persist of this ConfigDnsProxy.  # noqa: E501

        可选参数；会话保持状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :return: The persist of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this ConfigDnsProxy.

        可选参数；会话保持状态，可选值有：enalbe（启用），disable（禁用）；默认为启用。  # noqa: E501

        :param persist: The persist of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if persist not in allowed_values:
            raise ValueError(
                "Invalid value for `persist` ({0}), must be one of {1}"  # noqa: E501
                .format(persist, allowed_values)
            )

        self._persist = persist

    @property
    def concurrent_query(self):
        """Gets the concurrent_query of this ConfigDnsProxy.  # noqa: E501

        可选参数；并发查询状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :return: The concurrent_query of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._concurrent_query

    @concurrent_query.setter
    def concurrent_query(self, concurrent_query):
        """Sets the concurrent_query of this ConfigDnsProxy.

        可选参数；并发查询状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :param concurrent_query: The concurrent_query of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if concurrent_query not in allowed_values:
            raise ValueError(
                "Invalid value for `concurrent_query` ({0}), must be one of {1}"  # noqa: E501
                .format(concurrent_query, allowed_values)
            )

        self._concurrent_query = concurrent_query

    @property
    def schedule_policy(self):
        """Gets the schedule_policy of this ConfigDnsProxy.  # noqa: E501

        可选参数；DNS服务器选择策略，可选值有：round-robin（轮询）、weighted_round-robin（加权轮询）、weighted-least-flow（加权最小流量）、priority（优先级）；默认为轮询。  # noqa: E501

        :return: The schedule_policy of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._schedule_policy

    @schedule_policy.setter
    def schedule_policy(self, schedule_policy):
        """Sets the schedule_policy of this ConfigDnsProxy.

        可选参数；DNS服务器选择策略，可选值有：round-robin（轮询）、weighted_round-robin（加权轮询）、weighted-least-flow（加权最小流量）、priority（优先级）；默认为轮询。  # noqa: E501

        :param schedule_policy: The schedule_policy of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "WEIGHTED-ROUND-ROBIN", "WEIGHTED-LEAST-FLOW", "PRIOROTY"]  # noqa: E501
        if schedule_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_policy, allowed_values)
            )

        self._schedule_policy = schedule_policy

    @property
    def pre_rule(self):
        """Gets the pre_rule of this ConfigDnsProxy.  # noqa: E501

        可选参数；优先代理策略状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :return: The pre_rule of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._pre_rule

    @pre_rule.setter
    def pre_rule(self, pre_rule):
        """Sets the pre_rule of this ConfigDnsProxy.

        可选参数；优先代理策略状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :param pre_rule: The pre_rule of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if pre_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `pre_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(pre_rule, allowed_values)
            )

        self._pre_rule = pre_rule

    @property
    def link_busy_protect(self):
        """Gets the link_busy_protect of this ConfigDnsProxy.  # noqa: E501

        可选参数；链路繁忙保护状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :return: The link_busy_protect of this ConfigDnsProxy.  # noqa: E501
        :rtype: str
        """
        return self._link_busy_protect

    @link_busy_protect.setter
    def link_busy_protect(self, link_busy_protect):
        """Sets the link_busy_protect of this ConfigDnsProxy.

        可选参数；链路繁忙保护状态，可选值有：enalbe（启用），disable（禁用）；默认为禁用。  # noqa: E501

        :param link_busy_protect: The link_busy_protect of this ConfigDnsProxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if link_busy_protect not in allowed_values:
            raise ValueError(
                "Invalid value for `link_busy_protect` ({0}), must be one of {1}"  # noqa: E501
                .format(link_busy_protect, allowed_values)
            )

        self._link_busy_protect = link_busy_protect

    @property
    def health_detect_domains(self):
        """Gets the health_detect_domains of this ConfigDnsProxy.  # noqa: E501

        可选参数；监视域名列表，类型为数组。  # noqa: E501

        :return: The health_detect_domains of this ConfigDnsProxy.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_detect_domains

    @health_detect_domains.setter
    def health_detect_domains(self, health_detect_domains):
        """Sets the health_detect_domains of this ConfigDnsProxy.

        可选参数；监视域名列表，类型为数组。  # noqa: E501

        :param health_detect_domains: The health_detect_domains of this ConfigDnsProxy.  # noqa: E501
        :type: list[str]
        """

        self._health_detect_domains = health_detect_domains

    @property
    def dns_6to4_query(self):
        """Gets the dns_6to4_query of this ConfigDnsProxy.  # noqa: E501


        :return: The dns_6to4_query of this ConfigDnsProxy.  # noqa: E501
        :rtype: ConfigDnsProxyDns6to4Query
        """
        return self._dns_6to4_query

    @dns_6to4_query.setter
    def dns_6to4_query(self, dns_6to4_query):
        """Sets the dns_6to4_query of this ConfigDnsProxy.


        :param dns_6to4_query: The dns_6to4_query of this ConfigDnsProxy.  # noqa: E501
        :type: ConfigDnsProxyDns6to4Query
        """

        self._dns_6to4_query = dns_6to4_query

    @property
    def dns_servers(self):
        """Gets the dns_servers of this ConfigDnsProxy.  # noqa: E501

        可选参数；DNS代理的DSN服务器列表，类型为数组。  # noqa: E501

        :return: The dns_servers of this ConfigDnsProxy.  # noqa: E501
        :rtype: list[ConfigDnsProxyDnsServers]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this ConfigDnsProxy.

        可选参数；DNS代理的DSN服务器列表，类型为数组。  # noqa: E501

        :param dns_servers: The dns_servers of this ConfigDnsProxy.  # noqa: E501
        :type: list[ConfigDnsProxyDnsServers]
        """

        self._dns_servers = dns_servers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigDnsProxy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigDnsProxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
