# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatVirtualServiceDdosLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial': 'int',
        'timestamp': 'int',
        'virtual_service': 'str',
        'source_address': 'str',
        'attack_type': 'str',
        'detail': 'str',
        'target_url': 'str',
        'count': 'int',
        'action': 'str'
    }

    attribute_map = {
        'serial': 'serial',
        'timestamp': 'timestamp',
        'virtual_service': 'virtual_service',
        'source_address': 'source_address',
        'attack_type': 'attack_type',
        'detail': 'detail',
        'target_url': 'target_url',
        'count': 'count',
        'action': 'action'
    }

    def __init__(self, serial=None, timestamp=None, virtual_service=None, source_address=None, attack_type=None, detail=None, target_url=None, count=None, action=None):  # noqa: E501
        """StatVirtualServiceDdosLog - a model defined in Swagger"""  # noqa: E501

        self._serial = None
        self._timestamp = None
        self._virtual_service = None
        self._source_address = None
        self._attack_type = None
        self._detail = None
        self._target_url = None
        self._count = None
        self._action = None
        self.discriminator = None

        if serial is not None:
            self.serial = serial
        if timestamp is not None:
            self.timestamp = timestamp
        if virtual_service is not None:
            self.virtual_service = virtual_service
        if source_address is not None:
            self.source_address = source_address
        if attack_type is not None:
            self.attack_type = attack_type
        if detail is not None:
            self.detail = detail
        if target_url is not None:
            self.target_url = target_url
        if count is not None:
            self.count = count
        if action is not None:
            self.action = action

    @property
    def serial(self):
        """Gets the serial of this StatVirtualServiceDdosLog.  # noqa: E501

        ddos_log序号  # noqa: E501

        :return: The serial of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this StatVirtualServiceDdosLog.

        ddos_log序号  # noqa: E501

        :param serial: The serial of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: int
        """

        self._serial = serial

    @property
    def timestamp(self):
        """Gets the timestamp of this StatVirtualServiceDdosLog.  # noqa: E501

        时间戳信息  # noqa: E501

        :return: The timestamp of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StatVirtualServiceDdosLog.

        时间戳信息  # noqa: E501

        :param timestamp: The timestamp of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def virtual_service(self):
        """Gets the virtual_service of this StatVirtualServiceDdosLog.  # noqa: E501

        虚拟服务名称  # noqa: E501

        :return: The virtual_service of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this StatVirtualServiceDdosLog.

        虚拟服务名称  # noqa: E501

        :param virtual_service: The virtual_service of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """

        self._virtual_service = virtual_service

    @property
    def source_address(self):
        """Gets the source_address of this StatVirtualServiceDdosLog.  # noqa: E501

        源IP地址  # noqa: E501

        :return: The source_address of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this StatVirtualServiceDdosLog.

        源IP地址  # noqa: E501

        :param source_address: The source_address of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def attack_type(self):
        """Gets the attack_type of this StatVirtualServiceDdosLog.  # noqa: E501

        攻击类型  # noqa: E501

        :return: The attack_type of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._attack_type

    @attack_type.setter
    def attack_type(self, attack_type):
        """Sets the attack_type of this StatVirtualServiceDdosLog.

        攻击类型  # noqa: E501

        :param attack_type: The attack_type of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """

        self._attack_type = attack_type

    @property
    def detail(self):
        """Gets the detail of this StatVirtualServiceDdosLog.  # noqa: E501

        详细信息  # noqa: E501

        :return: The detail of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this StatVirtualServiceDdosLog.

        详细信息  # noqa: E501

        :param detail: The detail of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def target_url(self):
        """Gets the target_url of this StatVirtualServiceDdosLog.  # noqa: E501

        目标url  # noqa: E501

        :return: The target_url of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this StatVirtualServiceDdosLog.

        目标url  # noqa: E501

        :param target_url: The target_url of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """

        self._target_url = target_url

    @property
    def count(self):
        """Gets the count of this StatVirtualServiceDdosLog.  # noqa: E501

        攻击次数  # noqa: E501

        :return: The count of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StatVirtualServiceDdosLog.

        攻击次数  # noqa: E501

        :param count: The count of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def action(self):
        """Gets the action of this StatVirtualServiceDdosLog.  # noqa: E501

        采取防护动作（WARN/告警，BLOCK/拦截，WARN-AND-BLOCK/告警和拦截）  # noqa: E501

        :return: The action of this StatVirtualServiceDdosLog.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StatVirtualServiceDdosLog.

        采取防护动作（WARN/告警，BLOCK/拦截，WARN-AND-BLOCK/告警和拦截）  # noqa: E501

        :param action: The action of this StatVirtualServiceDdosLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["WARN", "BLOCK", "WARN-AND-BLOCK"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatVirtualServiceDdosLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatVirtualServiceDdosLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
