# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigNetworkSettingAlg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ftp': 'str',
        'h323': 'str',
        'pptp': 'str',
        'sip': 'str',
        'tftp': 'str'
    }

    attribute_map = {
        'ftp': 'ftp',
        'h323': 'h323',
        'pptp': 'pptp',
        'sip': 'sip',
        'tftp': 'tftp'
    }

    def __init__(self, ftp='ENABLE', h323='ENABLE', pptp='ENABLE', sip='ENABLE', tftp='ENABLE'):  # noqa: E501
        """ConfigNetworkSettingAlg - a model defined in Swagger"""  # noqa: E501

        self._ftp = None
        self._h323 = None
        self._pptp = None
        self._sip = None
        self._tftp = None
        self.discriminator = None

        if ftp is not None:
            self.ftp = ftp
        if h323 is not None:
            self.h323 = h323
        if pptp is not None:
            self.pptp = pptp
        if sip is not None:
            self.sip = sip
        if tftp is not None:
            self.tftp = tftp

    @property
    def ftp(self):
        """Gets the ftp of this ConfigNetworkSettingAlg.  # noqa: E501

        ftp开关  # noqa: E501

        :return: The ftp of this ConfigNetworkSettingAlg.  # noqa: E501
        :rtype: str
        """
        return self._ftp

    @ftp.setter
    def ftp(self, ftp):
        """Sets the ftp of this ConfigNetworkSettingAlg.

        ftp开关  # noqa: E501

        :param ftp: The ftp of this ConfigNetworkSettingAlg.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ftp not in allowed_values:
            raise ValueError(
                "Invalid value for `ftp` ({0}), must be one of {1}"  # noqa: E501
                .format(ftp, allowed_values)
            )

        self._ftp = ftp

    @property
    def h323(self):
        """Gets the h323 of this ConfigNetworkSettingAlg.  # noqa: E501

        h323开关  # noqa: E501

        :return: The h323 of this ConfigNetworkSettingAlg.  # noqa: E501
        :rtype: str
        """
        return self._h323

    @h323.setter
    def h323(self, h323):
        """Sets the h323 of this ConfigNetworkSettingAlg.

        h323开关  # noqa: E501

        :param h323: The h323 of this ConfigNetworkSettingAlg.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if h323 not in allowed_values:
            raise ValueError(
                "Invalid value for `h323` ({0}), must be one of {1}"  # noqa: E501
                .format(h323, allowed_values)
            )

        self._h323 = h323

    @property
    def pptp(self):
        """Gets the pptp of this ConfigNetworkSettingAlg.  # noqa: E501

        pptp开关  # noqa: E501

        :return: The pptp of this ConfigNetworkSettingAlg.  # noqa: E501
        :rtype: str
        """
        return self._pptp

    @pptp.setter
    def pptp(self, pptp):
        """Sets the pptp of this ConfigNetworkSettingAlg.

        pptp开关  # noqa: E501

        :param pptp: The pptp of this ConfigNetworkSettingAlg.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if pptp not in allowed_values:
            raise ValueError(
                "Invalid value for `pptp` ({0}), must be one of {1}"  # noqa: E501
                .format(pptp, allowed_values)
            )

        self._pptp = pptp

    @property
    def sip(self):
        """Gets the sip of this ConfigNetworkSettingAlg.  # noqa: E501

        sip开关  # noqa: E501

        :return: The sip of this ConfigNetworkSettingAlg.  # noqa: E501
        :rtype: str
        """
        return self._sip

    @sip.setter
    def sip(self, sip):
        """Sets the sip of this ConfigNetworkSettingAlg.

        sip开关  # noqa: E501

        :param sip: The sip of this ConfigNetworkSettingAlg.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if sip not in allowed_values:
            raise ValueError(
                "Invalid value for `sip` ({0}), must be one of {1}"  # noqa: E501
                .format(sip, allowed_values)
            )

        self._sip = sip

    @property
    def tftp(self):
        """Gets the tftp of this ConfigNetworkSettingAlg.  # noqa: E501

        tftp开关  # noqa: E501

        :return: The tftp of this ConfigNetworkSettingAlg.  # noqa: E501
        :rtype: str
        """
        return self._tftp

    @tftp.setter
    def tftp(self, tftp):
        """Sets the tftp of this ConfigNetworkSettingAlg.

        tftp开关  # noqa: E501

        :param tftp: The tftp of this ConfigNetworkSettingAlg.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if tftp not in allowed_values:
            raise ValueError(
                "Invalid value for `tftp` ({0}), must be one of {1}"  # noqa: E501
                .format(tftp, allowed_values)
            )

        self._tftp = tftp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNetworkSettingAlg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNetworkSettingAlg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
