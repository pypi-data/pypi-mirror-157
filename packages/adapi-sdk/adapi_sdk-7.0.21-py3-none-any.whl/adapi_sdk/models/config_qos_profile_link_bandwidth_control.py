# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_qos_profile_link_bandwidth_control_link_rules import ConfigQosProfileLinkBandwidthControlLinkRules  # noqa: F401,E501


class ConfigQosProfileLinkBandwidthControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'link_rules': 'list[ConfigQosProfileLinkBandwidthControlLinkRules]'
    }

    attribute_map = {
        'state': 'state',
        'link_rules': 'link_rules'
    }

    def __init__(self, state='DISABLE', link_rules=None):  # noqa: E501
        """ConfigQosProfileLinkBandwidthControl - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._link_rules = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if link_rules is not None:
            self.link_rules = link_rules

    @property
    def state(self):
        """Gets the state of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501

        可选参数;指定是否启用链路带宽控制，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The state of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigQosProfileLinkBandwidthControl.

        可选参数;指定是否启用链路带宽控制，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param state: The state of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def link_rules(self):
        """Gets the link_rules of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501

        可选参数;指定具体链路的上下行带宽占用百分比,该参数为对象列表参数,可通过add/delete进行添加/删除链路带宽策略  # noqa: E501

        :return: The link_rules of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501
        :rtype: list[ConfigQosProfileLinkBandwidthControlLinkRules]
        """
        return self._link_rules

    @link_rules.setter
    def link_rules(self, link_rules):
        """Sets the link_rules of this ConfigQosProfileLinkBandwidthControl.

        可选参数;指定具体链路的上下行带宽占用百分比,该参数为对象列表参数,可通过add/delete进行添加/删除链路带宽策略  # noqa: E501

        :param link_rules: The link_rules of this ConfigQosProfileLinkBandwidthControl.  # noqa: E501
        :type: list[ConfigQosProfileLinkBandwidthControlLinkRules]
        """

        self._link_rules = link_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigQosProfileLinkBandwidthControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigQosProfileLinkBandwidthControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
