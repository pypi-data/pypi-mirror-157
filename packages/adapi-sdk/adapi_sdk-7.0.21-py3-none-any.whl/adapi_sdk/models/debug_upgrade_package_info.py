# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DebugUpgradePackageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'file_size': 'int',
        'build': 'str',
        'description': 'str',
        'final_reboot': 'str',
        'check_licence': 'str'
    }

    attribute_map = {
        'version': 'version',
        'file_size': 'file_size',
        'build': 'build',
        'description': 'description',
        'final_reboot': 'final_reboot',
        'check_licence': 'check_licence'
    }

    def __init__(self, version=None, file_size=None, build=None, description=None, final_reboot=None, check_licence=None):  # noqa: E501
        """DebugUpgradePackageInfo - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._file_size = None
        self._build = None
        self._description = None
        self._final_reboot = None
        self._check_licence = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if file_size is not None:
            self.file_size = file_size
        if build is not None:
            self.build = build
        if description is not None:
            self.description = description
        if final_reboot is not None:
            self.final_reboot = final_reboot
        if check_licence is not None:
            self.check_licence = check_licence

    @property
    def version(self):
        """Gets the version of this DebugUpgradePackageInfo.  # noqa: E501

        ssu版本信息  # noqa: E501

        :return: The version of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DebugUpgradePackageInfo.

        ssu版本信息  # noqa: E501

        :param version: The version of this DebugUpgradePackageInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def file_size(self):
        """Gets the file_size of this DebugUpgradePackageInfo.  # noqa: E501

        文件大小  # noqa: E501

        :return: The file_size of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this DebugUpgradePackageInfo.

        文件大小  # noqa: E501

        :param file_size: The file_size of this DebugUpgradePackageInfo.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def build(self):
        """Gets the build of this DebugUpgradePackageInfo.  # noqa: E501

        文件生成时间  # noqa: E501

        :return: The build of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this DebugUpgradePackageInfo.

        文件生成时间  # noqa: E501

        :param build: The build of this DebugUpgradePackageInfo.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def description(self):
        """Gets the description of this DebugUpgradePackageInfo.  # noqa: E501

        升级文件描述  # noqa: E501

        :return: The description of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DebugUpgradePackageInfo.

        升级文件描述  # noqa: E501

        :param description: The description of this DebugUpgradePackageInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def final_reboot(self):
        """Gets the final_reboot of this DebugUpgradePackageInfo.  # noqa: E501

        升级完是否重启  # noqa: E501

        :return: The final_reboot of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: str
        """
        return self._final_reboot

    @final_reboot.setter
    def final_reboot(self, final_reboot):
        """Sets the final_reboot of this DebugUpgradePackageInfo.

        升级完是否重启  # noqa: E501

        :param final_reboot: The final_reboot of this DebugUpgradePackageInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if final_reboot not in allowed_values:
            raise ValueError(
                "Invalid value for `final_reboot` ({0}), must be one of {1}"  # noqa: E501
                .format(final_reboot, allowed_values)
            )

        self._final_reboot = final_reboot

    @property
    def check_licence(self):
        """Gets the check_licence of this DebugUpgradePackageInfo.  # noqa: E501

        是否检查证书  # noqa: E501

        :return: The check_licence of this DebugUpgradePackageInfo.  # noqa: E501
        :rtype: str
        """
        return self._check_licence

    @check_licence.setter
    def check_licence(self, check_licence):
        """Sets the check_licence of this DebugUpgradePackageInfo.

        是否检查证书  # noqa: E501

        :param check_licence: The check_licence of this DebugUpgradePackageInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if check_licence not in allowed_values:
            raise ValueError(
                "Invalid value for `check_licence` ({0}), must be one of {1}"  # noqa: E501
                .format(check_licence, allowed_values)
            )

        self._check_licence = check_licence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugUpgradePackageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugUpgradePackageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
