# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.stat_statistic_instant import StatStatisticInstant  # noqa: F401,E501


class StatDnsQueryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'a_record': 'StatStatisticInstant',
        'ns_record': 'StatStatisticInstant',
        'mx_record': 'StatStatisticInstant',
        'cname_record': 'StatStatisticInstant',
        'soa_record': 'StatStatisticInstant',
        'srv_record': 'StatStatisticInstant',
        'ptr_record': 'StatStatisticInstant',
        'txt_record': 'StatStatisticInstant'
    }

    attribute_map = {
        'a_record': 'a_record',
        'ns_record': 'ns_record',
        'mx_record': 'mx_record',
        'cname_record': 'cname_record',
        'soa_record': 'soa_record',
        'srv_record': 'srv_record',
        'ptr_record': 'ptr_record',
        'txt_record': 'txt_record'
    }

    def __init__(self, a_record=None, ns_record=None, mx_record=None, cname_record=None, soa_record=None, srv_record=None, ptr_record=None, txt_record=None):  # noqa: E501
        """StatDnsQueryType - a model defined in Swagger"""  # noqa: E501

        self._a_record = None
        self._ns_record = None
        self._mx_record = None
        self._cname_record = None
        self._soa_record = None
        self._srv_record = None
        self._ptr_record = None
        self._txt_record = None
        self.discriminator = None

        if a_record is not None:
            self.a_record = a_record
        if ns_record is not None:
            self.ns_record = ns_record
        if mx_record is not None:
            self.mx_record = mx_record
        if cname_record is not None:
            self.cname_record = cname_record
        if soa_record is not None:
            self.soa_record = soa_record
        if srv_record is not None:
            self.srv_record = srv_record
        if ptr_record is not None:
            self.ptr_record = ptr_record
        if txt_record is not None:
            self.txt_record = txt_record

    @property
    def a_record(self):
        """Gets the a_record of this StatDnsQueryType.  # noqa: E501

        A记录查询的实时统计数据  # noqa: E501

        :return: The a_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._a_record

    @a_record.setter
    def a_record(self, a_record):
        """Sets the a_record of this StatDnsQueryType.

        A记录查询的实时统计数据  # noqa: E501

        :param a_record: The a_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._a_record = a_record

    @property
    def ns_record(self):
        """Gets the ns_record of this StatDnsQueryType.  # noqa: E501

        NS记录查询的实时统计数据  # noqa: E501

        :return: The ns_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._ns_record

    @ns_record.setter
    def ns_record(self, ns_record):
        """Sets the ns_record of this StatDnsQueryType.

        NS记录查询的实时统计数据  # noqa: E501

        :param ns_record: The ns_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._ns_record = ns_record

    @property
    def mx_record(self):
        """Gets the mx_record of this StatDnsQueryType.  # noqa: E501

        MX记录查询的实时统计数据  # noqa: E501

        :return: The mx_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._mx_record

    @mx_record.setter
    def mx_record(self, mx_record):
        """Sets the mx_record of this StatDnsQueryType.

        MX记录查询的实时统计数据  # noqa: E501

        :param mx_record: The mx_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._mx_record = mx_record

    @property
    def cname_record(self):
        """Gets the cname_record of this StatDnsQueryType.  # noqa: E501

        CNAME记录查询的实时统计数据  # noqa: E501

        :return: The cname_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._cname_record

    @cname_record.setter
    def cname_record(self, cname_record):
        """Sets the cname_record of this StatDnsQueryType.

        CNAME记录查询的实时统计数据  # noqa: E501

        :param cname_record: The cname_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._cname_record = cname_record

    @property
    def soa_record(self):
        """Gets the soa_record of this StatDnsQueryType.  # noqa: E501

        SOA记录查询的实时统计数据  # noqa: E501

        :return: The soa_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._soa_record

    @soa_record.setter
    def soa_record(self, soa_record):
        """Sets the soa_record of this StatDnsQueryType.

        SOA记录查询的实时统计数据  # noqa: E501

        :param soa_record: The soa_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._soa_record = soa_record

    @property
    def srv_record(self):
        """Gets the srv_record of this StatDnsQueryType.  # noqa: E501

        SRV记录查询的实时统计数据  # noqa: E501

        :return: The srv_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._srv_record

    @srv_record.setter
    def srv_record(self, srv_record):
        """Sets the srv_record of this StatDnsQueryType.

        SRV记录查询的实时统计数据  # noqa: E501

        :param srv_record: The srv_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._srv_record = srv_record

    @property
    def ptr_record(self):
        """Gets the ptr_record of this StatDnsQueryType.  # noqa: E501

        PTR记录查询的实时统计数据  # noqa: E501

        :return: The ptr_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._ptr_record

    @ptr_record.setter
    def ptr_record(self, ptr_record):
        """Sets the ptr_record of this StatDnsQueryType.

        PTR记录查询的实时统计数据  # noqa: E501

        :param ptr_record: The ptr_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._ptr_record = ptr_record

    @property
    def txt_record(self):
        """Gets the txt_record of this StatDnsQueryType.  # noqa: E501

        TXT记录查询的实时统计数据  # noqa: E501

        :return: The txt_record of this StatDnsQueryType.  # noqa: E501
        :rtype: StatStatisticInstant
        """
        return self._txt_record

    @txt_record.setter
    def txt_record(self, txt_record):
        """Sets the txt_record of this StatDnsQueryType.

        TXT记录查询的实时统计数据  # noqa: E501

        :param txt_record: The txt_record of this StatDnsQueryType.  # noqa: E501
        :type: StatStatisticInstant
        """

        self._txt_record = txt_record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatDnsQueryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatDnsQueryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
