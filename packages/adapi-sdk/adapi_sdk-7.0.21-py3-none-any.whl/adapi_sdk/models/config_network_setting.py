# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_network_setting_alg import ConfigNetworkSettingAlg  # noqa: F401,E501
from adapi_sdk.models.config_network_setting_connection_setting import ConfigNetworkSettingConnectionSetting  # noqa: F401,E501
from adapi_sdk.models.config_network_setting_performance_setting import ConfigNetworkSettingPerformanceSetting  # noqa: F401,E501
from adapi_sdk.models.config_network_setting_route_forwarding import ConfigNetworkSettingRouteForwarding  # noqa: F401,E501
from adapi_sdk.models.config_network_setting_tcp_protocol import ConfigNetworkSettingTcpProtocol  # noqa: F401,E501


class ConfigNetworkSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_forwarding': 'ConfigNetworkSettingRouteForwarding',
        'connection_setting': 'ConfigNetworkSettingConnectionSetting',
        'tcp_protocol': 'ConfigNetworkSettingTcpProtocol',
        'performance_setting': 'ConfigNetworkSettingPerformanceSetting',
        'alg': 'ConfigNetworkSettingAlg'
    }

    attribute_map = {
        'route_forwarding': 'route_forwarding',
        'connection_setting': 'connection_setting',
        'tcp_protocol': 'tcp_protocol',
        'performance_setting': 'performance_setting',
        'alg': 'alg'
    }

    def __init__(self, route_forwarding=None, connection_setting=None, tcp_protocol=None, performance_setting=None, alg=None):  # noqa: E501
        """ConfigNetworkSetting - a model defined in Swagger"""  # noqa: E501

        self._route_forwarding = None
        self._connection_setting = None
        self._tcp_protocol = None
        self._performance_setting = None
        self._alg = None
        self.discriminator = None

        if route_forwarding is not None:
            self.route_forwarding = route_forwarding
        if connection_setting is not None:
            self.connection_setting = connection_setting
        if tcp_protocol is not None:
            self.tcp_protocol = tcp_protocol
        if performance_setting is not None:
            self.performance_setting = performance_setting
        if alg is not None:
            self.alg = alg

    @property
    def route_forwarding(self):
        """Gets the route_forwarding of this ConfigNetworkSetting.  # noqa: E501


        :return: The route_forwarding of this ConfigNetworkSetting.  # noqa: E501
        :rtype: ConfigNetworkSettingRouteForwarding
        """
        return self._route_forwarding

    @route_forwarding.setter
    def route_forwarding(self, route_forwarding):
        """Sets the route_forwarding of this ConfigNetworkSetting.


        :param route_forwarding: The route_forwarding of this ConfigNetworkSetting.  # noqa: E501
        :type: ConfigNetworkSettingRouteForwarding
        """

        self._route_forwarding = route_forwarding

    @property
    def connection_setting(self):
        """Gets the connection_setting of this ConfigNetworkSetting.  # noqa: E501


        :return: The connection_setting of this ConfigNetworkSetting.  # noqa: E501
        :rtype: ConfigNetworkSettingConnectionSetting
        """
        return self._connection_setting

    @connection_setting.setter
    def connection_setting(self, connection_setting):
        """Sets the connection_setting of this ConfigNetworkSetting.


        :param connection_setting: The connection_setting of this ConfigNetworkSetting.  # noqa: E501
        :type: ConfigNetworkSettingConnectionSetting
        """

        self._connection_setting = connection_setting

    @property
    def tcp_protocol(self):
        """Gets the tcp_protocol of this ConfigNetworkSetting.  # noqa: E501


        :return: The tcp_protocol of this ConfigNetworkSetting.  # noqa: E501
        :rtype: ConfigNetworkSettingTcpProtocol
        """
        return self._tcp_protocol

    @tcp_protocol.setter
    def tcp_protocol(self, tcp_protocol):
        """Sets the tcp_protocol of this ConfigNetworkSetting.


        :param tcp_protocol: The tcp_protocol of this ConfigNetworkSetting.  # noqa: E501
        :type: ConfigNetworkSettingTcpProtocol
        """

        self._tcp_protocol = tcp_protocol

    @property
    def performance_setting(self):
        """Gets the performance_setting of this ConfigNetworkSetting.  # noqa: E501


        :return: The performance_setting of this ConfigNetworkSetting.  # noqa: E501
        :rtype: ConfigNetworkSettingPerformanceSetting
        """
        return self._performance_setting

    @performance_setting.setter
    def performance_setting(self, performance_setting):
        """Sets the performance_setting of this ConfigNetworkSetting.


        :param performance_setting: The performance_setting of this ConfigNetworkSetting.  # noqa: E501
        :type: ConfigNetworkSettingPerformanceSetting
        """

        self._performance_setting = performance_setting

    @property
    def alg(self):
        """Gets the alg of this ConfigNetworkSetting.  # noqa: E501


        :return: The alg of this ConfigNetworkSetting.  # noqa: E501
        :rtype: ConfigNetworkSettingAlg
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this ConfigNetworkSetting.


        :param alg: The alg of this ConfigNetworkSetting.  # noqa: E501
        :type: ConfigNetworkSettingAlg
        """

        self._alg = alg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNetworkSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNetworkSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
