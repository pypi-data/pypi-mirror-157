# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigResponsePolicyZonesRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_child': 'str',
        'domain': 'str',
        'ttl': 'int',
        '_class': 'str',
        'record_type': 'str',
        'v4': 'str',
        'v6': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'record_child': 'record_child',
        'domain': 'domain',
        'ttl': 'ttl',
        '_class': 'class',
        'record_type': 'record_type',
        'v4': 'v4',
        'v6': 'v6',
        'policy': 'policy'
    }

    def __init__(self, record_child=None, domain=None, ttl=None, _class='IN', record_type=None, v4=None, v6=None, policy=None):  # noqa: E501
        """ConfigResponsePolicyZonesRecord - a model defined in Swagger"""  # noqa: E501

        self._record_child = None
        self._domain = None
        self._ttl = None
        self.__class = None
        self._record_type = None
        self._v4 = None
        self._v6 = None
        self._policy = None
        self.discriminator = None

        if record_child is not None:
            self.record_child = record_child
        if domain is not None:
            self.domain = domain
        if ttl is not None:
            self.ttl = ttl
        if _class is not None:
            self._class = _class
        if record_type is not None:
            self.record_type = record_type
        if v4 is not None:
            self.v4 = v4
        if v6 is not None:
            self.v6 = v6
        if policy is not None:
            self.policy = policy

    @property
    def record_child(self):
        """Gets the record_child of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        RFC标准的防火墙记录,如“example.com IN CNAME *. ;NODATA”  # noqa: E501

        :return: The record_child of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_child

    @record_child.setter
    def record_child(self, record_child):
        """Sets the record_child of this ConfigResponsePolicyZonesRecord.

        RFC标准的防火墙记录,如“example.com IN CNAME *. ;NODATA”  # noqa: E501

        :param record_child: The record_child of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._record_child = record_child

    @property
    def domain(self):
        """Gets the domain of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        防火墙记录中的域名  # noqa: E501

        :return: The domain of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConfigResponsePolicyZonesRecord.

        防火墙记录中的域名  # noqa: E501

        :param domain: The domain of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ttl(self):
        """Gets the ttl of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        TTL超时时间范围为0-86400  # noqa: E501

        :return: The ttl of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ConfigResponsePolicyZonesRecord.

        TTL超时时间范围为0-86400  # noqa: E501

        :param ttl: The ttl of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: int
        """
        if ttl is not None and ttl > 86400:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `86400`")  # noqa: E501
        if ttl is not None and ttl < 0:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ttl = ttl

    @property
    def _class(self):
        """Gets the _class of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        DNS记录中的CLASS  # noqa: E501

        :return: The _class of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ConfigResponsePolicyZonesRecord.

        DNS记录中的CLASS  # noqa: E501

        :param _class: The _class of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def record_type(self):
        """Gets the record_type of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        DNS记录中的DNS记录类型  # noqa: E501

        :return: The record_type of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ConfigResponsePolicyZonesRecord.

        DNS记录中的DNS记录类型  # noqa: E501

        :param record_type: The record_type of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def v4(self):
        """Gets the v4 of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        A记录中的IPV4地址  # noqa: E501

        :return: The v4 of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._v4

    @v4.setter
    def v4(self, v4):
        """Sets the v4 of this ConfigResponsePolicyZonesRecord.

        A记录中的IPV4地址  # noqa: E501

        :param v4: The v4 of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._v4 = v4

    @property
    def v6(self):
        """Gets the v6 of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        AAAA记录中的IPV6地址  # noqa: E501

        :return: The v6 of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._v6

    @v6.setter
    def v6(self, v6):
        """Sets the v6 of this ConfigResponsePolicyZonesRecord.

        AAAA记录中的IPV6地址  # noqa: E501

        :param v6: The v6 of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._v6 = v6

    @property
    def policy(self):
        """Gets the policy of this ConfigResponsePolicyZonesRecord.  # noqa: E501

        防火墙动作  # noqa: E501

        :return: The policy of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ConfigResponsePolicyZonesRecord.

        防火墙动作  # noqa: E501

        :param policy: The policy of this ConfigResponsePolicyZonesRecord.  # noqa: E501
        :type: str
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigResponsePolicyZonesRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigResponsePolicyZonesRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
