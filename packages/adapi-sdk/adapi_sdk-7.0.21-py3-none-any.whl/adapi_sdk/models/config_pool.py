# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_node import ConfigNode  # noqa: F401,E501


class ConfigPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'method': 'str',
        'priority_level_available_node': 'int',
        'persist': 'str',
        'alternate_persist': 'str',
        'schedule_by_connect': 'str',
        'service_monitors': 'list[str]',
        'available_requirement': 'int',
        'node_up_delay': 'int',
        'slow_ramp_time': 'int',
        'nodes': 'list[ConfigNode]',
        'recover_by_manual': 'str',
        'recover_by_timer': 'str',
        'recover_time_min': 'int',
        'connection_statistic': 'str',
        'busy_process_policy': 'str',
        'connection_queue_length': 'int',
        'connection_queue_timeout_ms': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'method': 'method',
        'priority_level_available_node': 'priority_level_available_node',
        'persist': 'persist',
        'alternate_persist': 'alternate_persist',
        'schedule_by_connect': 'schedule_by_connect',
        'service_monitors': 'service_monitors',
        'available_requirement': 'available_requirement',
        'node_up_delay': 'node_up_delay',
        'slow_ramp_time': 'slow_ramp_time',
        'nodes': 'nodes',
        'recover_by_manual': 'recover_by_manual',
        'recover_by_timer': 'recover_by_timer',
        'recover_time_min': 'recover_time_min',
        'connection_statistic': 'connection_statistic',
        'busy_process_policy': 'busy_process_policy',
        'connection_queue_length': 'connection_queue_length',
        'connection_queue_timeout_ms': 'connection_queue_timeout_ms'
    }

    def __init__(self, name=None, description=None, method='WEIGHTED-LEAST-CONNECTIONS', priority_level_available_node=None, persist='NONE', alternate_persist='NONE', schedule_by_connect='DISABLE', service_monitors=None, available_requirement=None, node_up_delay=None, slow_ramp_time=None, nodes=None, recover_by_manual='DISABLE', recover_by_timer='DISABLE', recover_time_min=None, connection_statistic='COMPLETED', busy_process_policy='RETURN-FAILED', connection_queue_length=None, connection_queue_timeout_ms=None):  # noqa: E501
        """ConfigPool - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._method = None
        self._priority_level_available_node = None
        self._persist = None
        self._alternate_persist = None
        self._schedule_by_connect = None
        self._service_monitors = None
        self._available_requirement = None
        self._node_up_delay = None
        self._slow_ramp_time = None
        self._nodes = None
        self._recover_by_manual = None
        self._recover_by_timer = None
        self._recover_time_min = None
        self._connection_statistic = None
        self._busy_process_policy = None
        self._connection_queue_length = None
        self._connection_queue_timeout_ms = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if method is not None:
            self.method = method
        if priority_level_available_node is not None:
            self.priority_level_available_node = priority_level_available_node
        if persist is not None:
            self.persist = persist
        if alternate_persist is not None:
            self.alternate_persist = alternate_persist
        if schedule_by_connect is not None:
            self.schedule_by_connect = schedule_by_connect
        if service_monitors is not None:
            self.service_monitors = service_monitors
        if available_requirement is not None:
            self.available_requirement = available_requirement
        if node_up_delay is not None:
            self.node_up_delay = node_up_delay
        if slow_ramp_time is not None:
            self.slow_ramp_time = slow_ramp_time
        if nodes is not None:
            self.nodes = nodes
        if recover_by_manual is not None:
            self.recover_by_manual = recover_by_manual
        if recover_by_timer is not None:
            self.recover_by_timer = recover_by_timer
        if recover_time_min is not None:
            self.recover_time_min = recover_time_min
        if connection_statistic is not None:
            self.connection_statistic = connection_statistic
        if busy_process_policy is not None:
            self.busy_process_policy = busy_process_policy
        if connection_queue_length is not None:
            self.connection_queue_length = connection_queue_length
        if connection_queue_timeout_ms is not None:
            self.connection_queue_timeout_ms = connection_queue_timeout_ms

    @property
    def name(self):
        """Gets the name of this ConfigPool.  # noqa: E501

        指定节点池的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigPool.

        指定节点池的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigPool.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigPool.  # noqa: E501

        用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigPool.

        用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigPool.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def method(self):
        """Gets the method of this ConfigPool.  # noqa: E501

        节点选择策略，默认weighted-least-conn。round-robin表示轮询；weighted-round-robin加权轮询；weighted-least-connections表示加权最小连接；weighted-least-flow表示加权最小流量；fastest表示最快响应时间；hash-host表示按HOST哈希；hash-srcip表示按源IP哈希；hash-srcipport表示按源IP源端口哈希；hash-uri表示按URI哈希；snmp-evaluate表示动态反馈；host-based-weighted-least-connections表示主机加权最小连接；host-based-weighted-least-flow表示主机加权最小流量；host-based-weighted-round-robin表示主机加权轮询。  # noqa: E501

        :return: The method of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigPool.

        节点选择策略，默认weighted-least-conn。round-robin表示轮询；weighted-round-robin加权轮询；weighted-least-connections表示加权最小连接；weighted-least-flow表示加权最小流量；fastest表示最快响应时间；hash-host表示按HOST哈希；hash-srcip表示按源IP哈希；hash-srcipport表示按源IP源端口哈希；hash-uri表示按URI哈希；snmp-evaluate表示动态反馈；host-based-weighted-least-connections表示主机加权最小连接；host-based-weighted-least-flow表示主机加权最小流量；host-based-weighted-round-robin表示主机加权轮询。  # noqa: E501

        :param method: The method of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROUND-ROBIN", "WEIGHTED-ROUND-ROBIN", "WEIGHTED-LEAST-CONNECTIONS", "WEIGHTED-LEAST-FLOW", "FASTEST", "SNMP-EVALUATE", "HASH-SRCIP", "HASH-SRCIPPORT", "HASH-URI", "HASH-HOST", "HOST-BASED-WEIGHTED-ROUND-ROBIN", "HOST-BASED-WEIGHTED-LEAST-CONNECTIONS", "HOST-BASED-WEIGHTED-LEAST-FLOW"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def priority_level_available_node(self):
        """Gets the priority_level_available_node of this ConfigPool.  # noqa: E501

        优先级调度最少可用节点条件，0表示禁用优先级调度，默认为0  # noqa: E501

        :return: The priority_level_available_node of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._priority_level_available_node

    @priority_level_available_node.setter
    def priority_level_available_node(self, priority_level_available_node):
        """Sets the priority_level_available_node of this ConfigPool.

        优先级调度最少可用节点条件，0表示禁用优先级调度，默认为0  # noqa: E501

        :param priority_level_available_node: The priority_level_available_node of this ConfigPool.  # noqa: E501
        :type: int
        """
        if priority_level_available_node is not None and priority_level_available_node > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority_level_available_node`, must be a value less than or equal to `100`")  # noqa: E501
        if priority_level_available_node is not None and priority_level_available_node < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority_level_available_node`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority_level_available_node = priority_level_available_node

    @property
    def persist(self):
        """Gets the persist of this ConfigPool.  # noqa: E501

        指定首选会话保持方法，默认为none,表示不启用会话保持  # noqa: E501

        :return: The persist of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this ConfigPool.

        指定首选会话保持方法，默认为none,表示不启用会话保持  # noqa: E501

        :param persist: The persist of this ConfigPool.  # noqa: E501
        :type: str
        """

        self._persist = persist

    @property
    def alternate_persist(self):
        """Gets the alternate_persist of this ConfigPool.  # noqa: E501

        指定备用会话保持方法，默认为none,表示不启用会话保持  # noqa: E501

        :return: The alternate_persist of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._alternate_persist

    @alternate_persist.setter
    def alternate_persist(self, alternate_persist):
        """Sets the alternate_persist of this ConfigPool.

        指定备用会话保持方法，默认为none,表示不启用会话保持  # noqa: E501

        :param alternate_persist: The alternate_persist of this ConfigPool.  # noqa: E501
        :type: str
        """

        self._alternate_persist = alternate_persist

    @property
    def schedule_by_connect(self):
        """Gets the schedule_by_connect of this ConfigPool.  # noqa: E501

        按连接调度开关，开启后可提高调度效率  # noqa: E501

        :return: The schedule_by_connect of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._schedule_by_connect

    @schedule_by_connect.setter
    def schedule_by_connect(self, schedule_by_connect):
        """Sets the schedule_by_connect of this ConfigPool.

        按连接调度开关，开启后可提高调度效率  # noqa: E501

        :param schedule_by_connect: The schedule_by_connect of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if schedule_by_connect not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_by_connect` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_by_connect, allowed_values)
            )

        self._schedule_by_connect = schedule_by_connect

    @property
    def service_monitors(self):
        """Gets the service_monitors of this ConfigPool.  # noqa: E501

        引用节点健康检查方法列表，为对象参数列表，支持add/delete指令添加/删除健康检查方法，默认为空,表示节点永远在线  # noqa: E501

        :return: The service_monitors of this ConfigPool.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_monitors

    @service_monitors.setter
    def service_monitors(self, service_monitors):
        """Sets the service_monitors of this ConfigPool.

        引用节点健康检查方法列表，为对象参数列表，支持add/delete指令添加/删除健康检查方法，默认为空,表示节点永远在线  # noqa: E501

        :param service_monitors: The service_monitors of this ConfigPool.  # noqa: E501
        :type: list[str]
        """

        self._service_monitors = service_monitors

    @property
    def available_requirement(self):
        """Gets the available_requirement of this ConfigPool.  # noqa: E501

        节点有效条件，健康检查方法有效数不足该数量时判定节点故障，0表示全部，默认为0  # noqa: E501

        :return: The available_requirement of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._available_requirement

    @available_requirement.setter
    def available_requirement(self, available_requirement):
        """Sets the available_requirement of this ConfigPool.

        节点有效条件，健康检查方法有效数不足该数量时判定节点故障，0表示全部，默认为0  # noqa: E501

        :param available_requirement: The available_requirement of this ConfigPool.  # noqa: E501
        :type: int
        """
        if available_requirement is not None and available_requirement < 0:  # noqa: E501
            raise ValueError("Invalid value for `available_requirement`, must be a value greater than or equal to `0`")  # noqa: E501

        self._available_requirement = available_requirement

    @property
    def node_up_delay(self):
        """Gets the node_up_delay of this ConfigPool.  # noqa: E501

        指定温暖上线的恢复时间，用于控制节点上线前的等候准备时间，取值范围[0,300],默认为0  # noqa: E501

        :return: The node_up_delay of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._node_up_delay

    @node_up_delay.setter
    def node_up_delay(self, node_up_delay):
        """Sets the node_up_delay of this ConfigPool.

        指定温暖上线的恢复时间，用于控制节点上线前的等候准备时间，取值范围[0,300],默认为0  # noqa: E501

        :param node_up_delay: The node_up_delay of this ConfigPool.  # noqa: E501
        :type: int
        """
        if node_up_delay is not None and node_up_delay > 300:  # noqa: E501
            raise ValueError("Invalid value for `node_up_delay`, must be a value less than or equal to `300`")  # noqa: E501
        if node_up_delay is not None and node_up_delay < 0:  # noqa: E501
            raise ValueError("Invalid value for `node_up_delay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._node_up_delay = node_up_delay

    @property
    def slow_ramp_time(self):
        """Gets the slow_ramp_time of this ConfigPool.  # noqa: E501

        指定温暖上线的爬坡时间，用于控制节点上线起始阶段的业务压力逐步递增,取值范围[0,300],默认为0  # noqa: E501

        :return: The slow_ramp_time of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._slow_ramp_time

    @slow_ramp_time.setter
    def slow_ramp_time(self, slow_ramp_time):
        """Sets the slow_ramp_time of this ConfigPool.

        指定温暖上线的爬坡时间，用于控制节点上线起始阶段的业务压力逐步递增,取值范围[0,300],默认为0  # noqa: E501

        :param slow_ramp_time: The slow_ramp_time of this ConfigPool.  # noqa: E501
        :type: int
        """
        if slow_ramp_time is not None and slow_ramp_time > 300:  # noqa: E501
            raise ValueError("Invalid value for `slow_ramp_time`, must be a value less than or equal to `300`")  # noqa: E501
        if slow_ramp_time is not None and slow_ramp_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `slow_ramp_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._slow_ramp_time = slow_ramp_time

    @property
    def nodes(self):
        """Gets the nodes of this ConfigPool.  # noqa: E501

        节点  # noqa: E501

        :return: The nodes of this ConfigPool.  # noqa: E501
        :rtype: list[ConfigNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ConfigPool.

        节点  # noqa: E501

        :param nodes: The nodes of this ConfigPool.  # noqa: E501
        :type: list[ConfigNode]
        """

        self._nodes = nodes

    @property
    def recover_by_manual(self):
        """Gets the recover_by_manual of this ConfigPool.  # noqa: E501

        使用被动健康检查方法时允许被动健康检查故障状态手动恢复，enable表示启用，disable表示禁用，默认enable  # noqa: E501

        :return: The recover_by_manual of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._recover_by_manual

    @recover_by_manual.setter
    def recover_by_manual(self, recover_by_manual):
        """Sets the recover_by_manual of this ConfigPool.

        使用被动健康检查方法时允许被动健康检查故障状态手动恢复，enable表示启用，disable表示禁用，默认enable  # noqa: E501

        :param recover_by_manual: The recover_by_manual of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if recover_by_manual not in allowed_values:
            raise ValueError(
                "Invalid value for `recover_by_manual` ({0}), must be one of {1}"  # noqa: E501
                .format(recover_by_manual, allowed_values)
            )

        self._recover_by_manual = recover_by_manual

    @property
    def recover_by_timer(self):
        """Gets the recover_by_timer of this ConfigPool.  # noqa: E501

        使用被动健康检查方法时允许被动健康检查故障状态定时恢复，enable表示启用，disable表示禁用，默认disable  # noqa: E501

        :return: The recover_by_timer of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._recover_by_timer

    @recover_by_timer.setter
    def recover_by_timer(self, recover_by_timer):
        """Sets the recover_by_timer of this ConfigPool.

        使用被动健康检查方法时允许被动健康检查故障状态定时恢复，enable表示启用，disable表示禁用，默认disable  # noqa: E501

        :param recover_by_timer: The recover_by_timer of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if recover_by_timer not in allowed_values:
            raise ValueError(
                "Invalid value for `recover_by_timer` ({0}), must be one of {1}"  # noqa: E501
                .format(recover_by_timer, allowed_values)
            )

        self._recover_by_timer = recover_by_timer

    @property
    def recover_time_min(self):
        """Gets the recover_time_min of this ConfigPool.  # noqa: E501

        节点定时恢复时间，用于被动健康检查方法的定时恢复，取值范围[1, 15300],默认为3  # noqa: E501

        :return: The recover_time_min of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._recover_time_min

    @recover_time_min.setter
    def recover_time_min(self, recover_time_min):
        """Sets the recover_time_min of this ConfigPool.

        节点定时恢复时间，用于被动健康检查方法的定时恢复，取值范围[1, 15300],默认为3  # noqa: E501

        :param recover_time_min: The recover_time_min of this ConfigPool.  # noqa: E501
        :type: int
        """
        if recover_time_min is not None and recover_time_min > 15300:  # noqa: E501
            raise ValueError("Invalid value for `recover_time_min`, must be a value less than or equal to `15300`")  # noqa: E501
        if recover_time_min is not None and recover_time_min < 1:  # noqa: E501
            raise ValueError("Invalid value for `recover_time_min`, must be a value greater than or equal to `1`")  # noqa: E501

        self._recover_time_min = recover_time_min

    @property
    def connection_statistic(self):
        """Gets the connection_statistic of this ConfigPool.  # noqa: E501

        指定连接数统计方法，默认为completed  # noqa: E501

        :return: The connection_statistic of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._connection_statistic

    @connection_statistic.setter
    def connection_statistic(self, connection_statistic):
        """Sets the connection_statistic of this ConfigPool.

        指定连接数统计方法，默认为completed  # noqa: E501

        :param connection_statistic: The connection_statistic of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["ESTABLISHED", "COMPLETED"]  # noqa: E501
        if connection_statistic not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_statistic` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_statistic, allowed_values)
            )

        self._connection_statistic = connection_statistic

    @property
    def busy_process_policy(self):
        """Gets the busy_process_policy of this ConfigPool.  # noqa: E501

        指定节点繁忙的处理策略，return-failed表示调度失败，connection-queue表示排队等候，ignore-busy表示强制调度，默认为return-failed  # noqa: E501

        :return: The busy_process_policy of this ConfigPool.  # noqa: E501
        :rtype: str
        """
        return self._busy_process_policy

    @busy_process_policy.setter
    def busy_process_policy(self, busy_process_policy):
        """Sets the busy_process_policy of this ConfigPool.

        指定节点繁忙的处理策略，return-failed表示调度失败，connection-queue表示排队等候，ignore-busy表示强制调度，默认为return-failed  # noqa: E501

        :param busy_process_policy: The busy_process_policy of this ConfigPool.  # noqa: E501
        :type: str
        """
        allowed_values = ["RETURN-FAILED", "CONNECTION-QUEUE", "IGNORE-BUSY"]  # noqa: E501
        if busy_process_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_process_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_process_policy, allowed_values)
            )

        self._busy_process_policy = busy_process_policy

    @property
    def connection_queue_length(self):
        """Gets the connection_queue_length of this ConfigPool.  # noqa: E501

        连接排队时的队列容量，取值范围为[1,100000],默认为1  # noqa: E501

        :return: The connection_queue_length of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._connection_queue_length

    @connection_queue_length.setter
    def connection_queue_length(self, connection_queue_length):
        """Sets the connection_queue_length of this ConfigPool.

        连接排队时的队列容量，取值范围为[1,100000],默认为1  # noqa: E501

        :param connection_queue_length: The connection_queue_length of this ConfigPool.  # noqa: E501
        :type: int
        """
        if connection_queue_length is not None and connection_queue_length > 100000:  # noqa: E501
            raise ValueError("Invalid value for `connection_queue_length`, must be a value less than or equal to `100000`")  # noqa: E501
        if connection_queue_length is not None and connection_queue_length < 1:  # noqa: E501
            raise ValueError("Invalid value for `connection_queue_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._connection_queue_length = connection_queue_length

    @property
    def connection_queue_timeout_ms(self):
        """Gets the connection_queue_timeout_ms of this ConfigPool.  # noqa: E501

        连接排队超时时间，取值范围为[1,60]，默认为1  # noqa: E501

        :return: The connection_queue_timeout_ms of this ConfigPool.  # noqa: E501
        :rtype: int
        """
        return self._connection_queue_timeout_ms

    @connection_queue_timeout_ms.setter
    def connection_queue_timeout_ms(self, connection_queue_timeout_ms):
        """Sets the connection_queue_timeout_ms of this ConfigPool.

        连接排队超时时间，取值范围为[1,60]，默认为1  # noqa: E501

        :param connection_queue_timeout_ms: The connection_queue_timeout_ms of this ConfigPool.  # noqa: E501
        :type: int
        """
        if connection_queue_timeout_ms is not None and connection_queue_timeout_ms > 60:  # noqa: E501
            raise ValueError("Invalid value for `connection_queue_timeout_ms`, must be a value less than or equal to `60`")  # noqa: E501
        if connection_queue_timeout_ms is not None and connection_queue_timeout_ms < 1:  # noqa: E501
            raise ValueError("Invalid value for `connection_queue_timeout_ms`, must be a value greater than or equal to `1`")  # noqa: E501

        self._connection_queue_timeout_ms = connection_queue_timeout_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
