# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigRoleAccessType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_console': 'str',
        'ssh_console': 'str',
        'restful_api': 'str'
    }

    attribute_map = {
        'web_console': 'web_console',
        'ssh_console': 'ssh_console',
        'restful_api': 'restful_api'
    }

    def __init__(self, web_console='ENABLE', ssh_console='DISABLE', restful_api='DISABLE'):  # noqa: E501
        """ConfigRoleAccessType - a model defined in Swagger"""  # noqa: E501

        self._web_console = None
        self._ssh_console = None
        self._restful_api = None
        self.discriminator = None

        if web_console is not None:
            self.web_console = web_console
        if ssh_console is not None:
            self.ssh_console = ssh_console
        if restful_api is not None:
            self.restful_api = restful_api

    @property
    def web_console(self):
        """Gets the web_console of this ConfigRoleAccessType.  # noqa: E501

        web控制台登录权限  # noqa: E501

        :return: The web_console of this ConfigRoleAccessType.  # noqa: E501
        :rtype: str
        """
        return self._web_console

    @web_console.setter
    def web_console(self, web_console):
        """Sets the web_console of this ConfigRoleAccessType.

        web控制台登录权限  # noqa: E501

        :param web_console: The web_console of this ConfigRoleAccessType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if web_console not in allowed_values:
            raise ValueError(
                "Invalid value for `web_console` ({0}), must be one of {1}"  # noqa: E501
                .format(web_console, allowed_values)
            )

        self._web_console = web_console

    @property
    def ssh_console(self):
        """Gets the ssh_console of this ConfigRoleAccessType.  # noqa: E501

        命令行登录权限  # noqa: E501

        :return: The ssh_console of this ConfigRoleAccessType.  # noqa: E501
        :rtype: str
        """
        return self._ssh_console

    @ssh_console.setter
    def ssh_console(self, ssh_console):
        """Sets the ssh_console of this ConfigRoleAccessType.

        命令行登录权限  # noqa: E501

        :param ssh_console: The ssh_console of this ConfigRoleAccessType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if ssh_console not in allowed_values:
            raise ValueError(
                "Invalid value for `ssh_console` ({0}), must be one of {1}"  # noqa: E501
                .format(ssh_console, allowed_values)
            )

        self._ssh_console = ssh_console

    @property
    def restful_api(self):
        """Gets the restful_api of this ConfigRoleAccessType.  # noqa: E501

        api登录权限  # noqa: E501

        :return: The restful_api of this ConfigRoleAccessType.  # noqa: E501
        :rtype: str
        """
        return self._restful_api

    @restful_api.setter
    def restful_api(self, restful_api):
        """Sets the restful_api of this ConfigRoleAccessType.

        api登录权限  # noqa: E501

        :param restful_api: The restful_api of this ConfigRoleAccessType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if restful_api not in allowed_values:
            raise ValueError(
                "Invalid value for `restful_api` ({0}), must be one of {1}"  # noqa: E501
                .format(restful_api, allowed_values)
            )

        self._restful_api = restful_api

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigRoleAccessType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigRoleAccessType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
