# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigOspf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'route_id': 'str',
        'area_id': 'str',
        'redistribute_default_route': 'str',
        'redistribute_static_route': 'str',
        'redistribute_rip': 'str',
        'metric_type': 'int',
        'metric_type_1_value': 'int',
        'accept_non_as_route': 'str',
        'networks': 'list[str]'
    }

    attribute_map = {
        'state': 'state',
        'route_id': 'route_id',
        'area_id': 'area_id',
        'redistribute_default_route': 'redistribute_default_route',
        'redistribute_static_route': 'redistribute_static_route',
        'redistribute_rip': 'redistribute_rip',
        'metric_type': 'metric_type',
        'metric_type_1_value': 'metric_type_1_value',
        'accept_non_as_route': 'accept_non_as_route',
        'networks': 'networks'
    }

    def __init__(self, state='ENABLE', route_id=None, area_id='0', redistribute_default_route='DISABLE', redistribute_static_route='DISABLE', redistribute_rip='DISABLE', metric_type=None, metric_type_1_value=None, accept_non_as_route='ENABLE', networks=None):  # noqa: E501
        """ConfigOspf - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._route_id = None
        self._area_id = None
        self._redistribute_default_route = None
        self._redistribute_static_route = None
        self._redistribute_rip = None
        self._metric_type = None
        self._metric_type_1_value = None
        self._accept_non_as_route = None
        self._networks = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if route_id is not None:
            self.route_id = route_id
        if area_id is not None:
            self.area_id = area_id
        if redistribute_default_route is not None:
            self.redistribute_default_route = redistribute_default_route
        if redistribute_static_route is not None:
            self.redistribute_static_route = redistribute_static_route
        if redistribute_rip is not None:
            self.redistribute_rip = redistribute_rip
        if metric_type is not None:
            self.metric_type = metric_type
        if metric_type_1_value is not None:
            self.metric_type_1_value = metric_type_1_value
        if accept_non_as_route is not None:
            self.accept_non_as_route = accept_non_as_route
        if networks is not None:
            self.networks = networks

    @property
    def state(self):
        """Gets the state of this ConfigOspf.  # noqa: E501

        ospf全局配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The state of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigOspf.

        ospf全局配置状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param state: The state of this ConfigOspf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def route_id(self):
        """Gets the route_id of this ConfigOspf.  # noqa: E501

        路由器ID，必须为IPv4地址格式。  # noqa: E501

        :return: The route_id of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this ConfigOspf.

        路由器ID，必须为IPv4地址格式。  # noqa: E501

        :param route_id: The route_id of this ConfigOspf.  # noqa: E501
        :type: str
        """

        self._route_id = route_id

    @property
    def area_id(self):
        """Gets the area_id of this ConfigOspf.  # noqa: E501

        区域id，必须为字符串类型的0~4294967295之间的整数或点分十进制。  # noqa: E501

        :return: The area_id of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this ConfigOspf.

        区域id，必须为字符串类型的0~4294967295之间的整数或点分十进制。  # noqa: E501

        :param area_id: The area_id of this ConfigOspf.  # noqa: E501
        :type: str
        """

        self._area_id = area_id

    @property
    def redistribute_default_route(self):
        """Gets the redistribute_default_route of this ConfigOspf.  # noqa: E501

        默认路由强制重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_default_route of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_default_route

    @redistribute_default_route.setter
    def redistribute_default_route(self, redistribute_default_route):
        """Sets the redistribute_default_route of this ConfigOspf.

        默认路由强制重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_default_route: The redistribute_default_route of this ConfigOspf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_default_route not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_default_route` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_default_route, allowed_values)
            )

        self._redistribute_default_route = redistribute_default_route

    @property
    def redistribute_static_route(self):
        """Gets the redistribute_static_route of this ConfigOspf.  # noqa: E501

        静态路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_static_route of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_static_route

    @redistribute_static_route.setter
    def redistribute_static_route(self, redistribute_static_route):
        """Sets the redistribute_static_route of this ConfigOspf.

        静态路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_static_route: The redistribute_static_route of this ConfigOspf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_static_route not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_static_route` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_static_route, allowed_values)
            )

        self._redistribute_static_route = redistribute_static_route

    @property
    def redistribute_rip(self):
        """Gets the redistribute_rip of this ConfigOspf.  # noqa: E501

        RIP路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The redistribute_rip of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._redistribute_rip

    @redistribute_rip.setter
    def redistribute_rip(self, redistribute_rip):
        """Sets the redistribute_rip of this ConfigOspf.

        RIP路由重分发状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param redistribute_rip: The redistribute_rip of this ConfigOspf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if redistribute_rip not in allowed_values:
            raise ValueError(
                "Invalid value for `redistribute_rip` ({0}), must be one of {1}"  # noqa: E501
                .format(redistribute_rip, allowed_values)
            )

        self._redistribute_rip = redistribute_rip

    @property
    def metric_type(self):
        """Gets the metric_type of this ConfigOspf.  # noqa: E501

        metric type，合法输入为1或者2。  # noqa: E501

        :return: The metric_type of this ConfigOspf.  # noqa: E501
        :rtype: int
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this ConfigOspf.

        metric type，合法输入为1或者2。  # noqa: E501

        :param metric_type: The metric_type of this ConfigOspf.  # noqa: E501
        :type: int
        """
        if metric_type is not None and metric_type > 2:  # noqa: E501
            raise ValueError("Invalid value for `metric_type`, must be a value less than or equal to `2`")  # noqa: E501
        if metric_type is not None and metric_type < 1:  # noqa: E501
            raise ValueError("Invalid value for `metric_type`, must be a value greater than or equal to `1`")  # noqa: E501

        self._metric_type = metric_type

    @property
    def metric_type_1_value(self):
        """Gets the metric_type_1_value of this ConfigOspf.  # noqa: E501

        metric type1是的metric值，必须为0~16777214之间的整数。  # noqa: E501

        :return: The metric_type_1_value of this ConfigOspf.  # noqa: E501
        :rtype: int
        """
        return self._metric_type_1_value

    @metric_type_1_value.setter
    def metric_type_1_value(self, metric_type_1_value):
        """Sets the metric_type_1_value of this ConfigOspf.

        metric type1是的metric值，必须为0~16777214之间的整数。  # noqa: E501

        :param metric_type_1_value: The metric_type_1_value of this ConfigOspf.  # noqa: E501
        :type: int
        """
        if metric_type_1_value is not None and metric_type_1_value > 16777214:  # noqa: E501
            raise ValueError("Invalid value for `metric_type_1_value`, must be a value less than or equal to `16777214`")  # noqa: E501
        if metric_type_1_value is not None and metric_type_1_value < 0:  # noqa: E501
            raise ValueError("Invalid value for `metric_type_1_value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._metric_type_1_value = metric_type_1_value

    @property
    def accept_non_as_route(self):
        """Gets the accept_non_as_route of this ConfigOspf.  # noqa: E501

        接受自治系统外部路由状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :return: The accept_non_as_route of this ConfigOspf.  # noqa: E501
        :rtype: str
        """
        return self._accept_non_as_route

    @accept_non_as_route.setter
    def accept_non_as_route(self, accept_non_as_route):
        """Sets the accept_non_as_route of this ConfigOspf.

        接受自治系统外部路由状态,enable 表示启用;disable 表示禁用。  # noqa: E501

        :param accept_non_as_route: The accept_non_as_route of this ConfigOspf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if accept_non_as_route not in allowed_values:
            raise ValueError(
                "Invalid value for `accept_non_as_route` ({0}), must be one of {1}"  # noqa: E501
                .format(accept_non_as_route, allowed_values)
            )

        self._accept_non_as_route = accept_non_as_route

    @property
    def networks(self):
        """Gets the networks of this ConfigOspf.  # noqa: E501

        ospf发布网段列表  # noqa: E501

        :return: The networks of this ConfigOspf.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ConfigOspf.

        ospf发布网段列表  # noqa: E501

        :param networks: The networks of this ConfigOspf.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigOspf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigOspf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
