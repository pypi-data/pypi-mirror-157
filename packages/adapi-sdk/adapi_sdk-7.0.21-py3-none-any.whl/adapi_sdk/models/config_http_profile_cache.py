# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHttpProfileCache(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'capacity_mb': 'int',
        'time_range_minimum_min': 'int',
        'time_range_maximum_min': 'int',
        'time_default': 'int',
        'file_size_limit_kb': 'int',
        'allow_urls': 'list[str]',
        'deny_urls': 'list[str]',
        'force_cache_image': 'str',
        'cache_debug': 'str',
        'convert_image': 'str',
        'convert_to_jpeg': 'str',
        'convert_to_webp': 'str',
        'convert_minimum_orginal_size_kb': 'int',
        'convert_exclude_urls': 'list[str]'
    }

    attribute_map = {
        'state': 'state',
        'capacity_mb': 'capacity_mb',
        'time_range_minimum_min': 'time_range_minimum_min',
        'time_range_maximum_min': 'time_range_maximum_min',
        'time_default': 'time_default',
        'file_size_limit_kb': 'file_size_limit_kb',
        'allow_urls': 'allow_urls',
        'deny_urls': 'deny_urls',
        'force_cache_image': 'force_cache_image',
        'cache_debug': 'cache_debug',
        'convert_image': 'convert_image',
        'convert_to_jpeg': 'convert_to_jpeg',
        'convert_to_webp': 'convert_to_webp',
        'convert_minimum_orginal_size_kb': 'convert_minimum_orginal_size_kb',
        'convert_exclude_urls': 'convert_exclude_urls'
    }

    def __init__(self, state='DISABLE', capacity_mb=None, time_range_minimum_min=None, time_range_maximum_min=None, time_default=None, file_size_limit_kb=None, allow_urls=None, deny_urls=None, force_cache_image='ENABLE', cache_debug='DISABLE', convert_image='DISABLE', convert_to_jpeg='DISABLE', convert_to_webp='ENABLE', convert_minimum_orginal_size_kb=None, convert_exclude_urls=None):  # noqa: E501
        """ConfigHttpProfileCache - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._capacity_mb = None
        self._time_range_minimum_min = None
        self._time_range_maximum_min = None
        self._time_default = None
        self._file_size_limit_kb = None
        self._allow_urls = None
        self._deny_urls = None
        self._force_cache_image = None
        self._cache_debug = None
        self._convert_image = None
        self._convert_to_jpeg = None
        self._convert_to_webp = None
        self._convert_minimum_orginal_size_kb = None
        self._convert_exclude_urls = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if capacity_mb is not None:
            self.capacity_mb = capacity_mb
        if time_range_minimum_min is not None:
            self.time_range_minimum_min = time_range_minimum_min
        if time_range_maximum_min is not None:
            self.time_range_maximum_min = time_range_maximum_min
        if time_default is not None:
            self.time_default = time_default
        if file_size_limit_kb is not None:
            self.file_size_limit_kb = file_size_limit_kb
        if allow_urls is not None:
            self.allow_urls = allow_urls
        if deny_urls is not None:
            self.deny_urls = deny_urls
        if force_cache_image is not None:
            self.force_cache_image = force_cache_image
        if cache_debug is not None:
            self.cache_debug = cache_debug
        if convert_image is not None:
            self.convert_image = convert_image
        if convert_to_jpeg is not None:
            self.convert_to_jpeg = convert_to_jpeg
        if convert_to_webp is not None:
            self.convert_to_webp = convert_to_webp
        if convert_minimum_orginal_size_kb is not None:
            self.convert_minimum_orginal_size_kb = convert_minimum_orginal_size_kb
        if convert_exclude_urls is not None:
            self.convert_exclude_urls = convert_exclude_urls

    @property
    def state(self):
        """Gets the state of this ConfigHttpProfileCache.  # noqa: E501

        可选参数; 指定缓存的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :return: The state of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigHttpProfileCache.

        可选参数; 指定缓存的开关,enable表示启用,disable表示禁用,默认disable  # noqa: E501

        :param state: The state of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def capacity_mb(self):
        """Gets the capacity_mb of this ConfigHttpProfileCache.  # noqa: E501

        只读参数;显示缓存空间大小  # noqa: E501

        :return: The capacity_mb of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._capacity_mb

    @capacity_mb.setter
    def capacity_mb(self, capacity_mb):
        """Sets the capacity_mb of this ConfigHttpProfileCache.

        只读参数;显示缓存空间大小  # noqa: E501

        :param capacity_mb: The capacity_mb of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """

        self._capacity_mb = capacity_mb

    @property
    def time_range_minimum_min(self):
        """Gets the time_range_minimum_min of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定缓存最小时间,默认为5,单位为分钟  # noqa: E501

        :return: The time_range_minimum_min of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._time_range_minimum_min

    @time_range_minimum_min.setter
    def time_range_minimum_min(self, time_range_minimum_min):
        """Sets the time_range_minimum_min of this ConfigHttpProfileCache.

        可选参数;指定缓存最小时间,默认为5,单位为分钟  # noqa: E501

        :param time_range_minimum_min: The time_range_minimum_min of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """
        if time_range_minimum_min is not None and time_range_minimum_min > 1440:  # noqa: E501
            raise ValueError("Invalid value for `time_range_minimum_min`, must be a value less than or equal to `1440`")  # noqa: E501
        if time_range_minimum_min is not None and time_range_minimum_min < 1:  # noqa: E501
            raise ValueError("Invalid value for `time_range_minimum_min`, must be a value greater than or equal to `1`")  # noqa: E501

        self._time_range_minimum_min = time_range_minimum_min

    @property
    def time_range_maximum_min(self):
        """Gets the time_range_maximum_min of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定缓存最大时间,默认为1440,单位为分钟  # noqa: E501

        :return: The time_range_maximum_min of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._time_range_maximum_min

    @time_range_maximum_min.setter
    def time_range_maximum_min(self, time_range_maximum_min):
        """Sets the time_range_maximum_min of this ConfigHttpProfileCache.

        可选参数;指定缓存最大时间,默认为1440,单位为分钟  # noqa: E501

        :param time_range_maximum_min: The time_range_maximum_min of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """
        if time_range_maximum_min is not None and time_range_maximum_min > 1440:  # noqa: E501
            raise ValueError("Invalid value for `time_range_maximum_min`, must be a value less than or equal to `1440`")  # noqa: E501
        if time_range_maximum_min is not None and time_range_maximum_min < 1:  # noqa: E501
            raise ValueError("Invalid value for `time_range_maximum_min`, must be a value greater than or equal to `1`")  # noqa: E501

        self._time_range_maximum_min = time_range_maximum_min

    @property
    def time_default(self):
        """Gets the time_default of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定默认缓存时间,默认为60,单位为分钟  # noqa: E501

        :return: The time_default of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._time_default

    @time_default.setter
    def time_default(self, time_default):
        """Sets the time_default of this ConfigHttpProfileCache.

        可选参数;指定默认缓存时间,默认为60,单位为分钟  # noqa: E501

        :param time_default: The time_default of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """
        if time_default is not None and time_default > 1440:  # noqa: E501
            raise ValueError("Invalid value for `time_default`, must be a value less than or equal to `1440`")  # noqa: E501
        if time_default is not None and time_default < 0:  # noqa: E501
            raise ValueError("Invalid value for `time_default`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_default = time_default

    @property
    def file_size_limit_kb(self):
        """Gets the file_size_limit_kb of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定可缓存文件的最大大小,默认为2048,单位为KB  # noqa: E501

        :return: The file_size_limit_kb of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._file_size_limit_kb

    @file_size_limit_kb.setter
    def file_size_limit_kb(self, file_size_limit_kb):
        """Sets the file_size_limit_kb of this ConfigHttpProfileCache.

        可选参数;指定可缓存文件的最大大小,默认为2048,单位为KB  # noqa: E501

        :param file_size_limit_kb: The file_size_limit_kb of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """
        if file_size_limit_kb is not None and file_size_limit_kb > 8192:  # noqa: E501
            raise ValueError("Invalid value for `file_size_limit_kb`, must be a value less than or equal to `8192`")  # noqa: E501
        if file_size_limit_kb is not None and file_size_limit_kb < 1:  # noqa: E501
            raise ValueError("Invalid value for `file_size_limit_kb`, must be a value greater than or equal to `1`")  # noqa: E501

        self._file_size_limit_kb = file_size_limit_kb

    @property
    def allow_urls(self):
        """Gets the allow_urls of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定可缓存的URL列表,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :return: The allow_urls of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_urls

    @allow_urls.setter
    def allow_urls(self, allow_urls):
        """Sets the allow_urls of this ConfigHttpProfileCache.

        可选参数;指定可缓存的URL列表,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :param allow_urls: The allow_urls of this ConfigHttpProfileCache.  # noqa: E501
        :type: list[str]
        """

        self._allow_urls = allow_urls

    @property
    def deny_urls(self):
        """Gets the deny_urls of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定不可缓存的URL列表,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :return: The deny_urls of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: list[str]
        """
        return self._deny_urls

    @deny_urls.setter
    def deny_urls(self, deny_urls):
        """Sets the deny_urls of this ConfigHttpProfileCache.

        可选参数;指定不可缓存的URL列表,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :param deny_urls: The deny_urls of this ConfigHttpProfileCache.  # noqa: E501
        :type: list[str]
        """

        self._deny_urls = deny_urls

    @property
    def force_cache_image(self):
        """Gets the force_cache_image of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;强制缓存图片,enable表示启用,disable表示不启用,默认为enable  # noqa: E501

        :return: The force_cache_image of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._force_cache_image

    @force_cache_image.setter
    def force_cache_image(self, force_cache_image):
        """Sets the force_cache_image of this ConfigHttpProfileCache.

        可选参数;强制缓存图片,enable表示启用,disable表示不启用,默认为enable  # noqa: E501

        :param force_cache_image: The force_cache_image of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if force_cache_image not in allowed_values:
            raise ValueError(
                "Invalid value for `force_cache_image` ({0}), must be one of {1}"  # noqa: E501
                .format(force_cache_image, allowed_values)
            )

        self._force_cache_image = force_cache_image

    @property
    def cache_debug(self):
        """Gets the cache_debug of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定缓存调试开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :return: The cache_debug of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._cache_debug

    @cache_debug.setter
    def cache_debug(self, cache_debug):
        """Sets the cache_debug of this ConfigHttpProfileCache.

        可选参数;指定缓存调试开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :param cache_debug: The cache_debug of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if cache_debug not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_debug` ({0}), must be one of {1}"  # noqa: E501
                .format(cache_debug, allowed_values)
            )

        self._cache_debug = cache_debug

    @property
    def convert_image(self):
        """Gets the convert_image of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定图片转码开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :return: The convert_image of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._convert_image

    @convert_image.setter
    def convert_image(self, convert_image):
        """Sets the convert_image of this ConfigHttpProfileCache.

        可选参数;指定图片转码开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :param convert_image: The convert_image of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if convert_image not in allowed_values:
            raise ValueError(
                "Invalid value for `convert_image` ({0}), must be one of {1}"  # noqa: E501
                .format(convert_image, allowed_values)
            )

        self._convert_image = convert_image

    @property
    def convert_to_jpeg(self):
        """Gets the convert_to_jpeg of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;图片转换为jpeg格式开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :return: The convert_to_jpeg of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._convert_to_jpeg

    @convert_to_jpeg.setter
    def convert_to_jpeg(self, convert_to_jpeg):
        """Sets the convert_to_jpeg of this ConfigHttpProfileCache.

        可选参数;图片转换为jpeg格式开关,enable表示启用,disable表示不启用,默认为disable  # noqa: E501

        :param convert_to_jpeg: The convert_to_jpeg of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if convert_to_jpeg not in allowed_values:
            raise ValueError(
                "Invalid value for `convert_to_jpeg` ({0}), must be one of {1}"  # noqa: E501
                .format(convert_to_jpeg, allowed_values)
            )

        self._convert_to_jpeg = convert_to_jpeg

    @property
    def convert_to_webp(self):
        """Gets the convert_to_webp of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;图片转换为webp格式开关,enable表示启用,disable表示不启用,默认为enable  # noqa: E501

        :return: The convert_to_webp of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: str
        """
        return self._convert_to_webp

    @convert_to_webp.setter
    def convert_to_webp(self, convert_to_webp):
        """Sets the convert_to_webp of this ConfigHttpProfileCache.

        可选参数;图片转换为webp格式开关,enable表示启用,disable表示不启用,默认为enable  # noqa: E501

        :param convert_to_webp: The convert_to_webp of this ConfigHttpProfileCache.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if convert_to_webp not in allowed_values:
            raise ValueError(
                "Invalid value for `convert_to_webp` ({0}), must be one of {1}"  # noqa: E501
                .format(convert_to_webp, allowed_values)
            )

        self._convert_to_webp = convert_to_webp

    @property
    def convert_minimum_orginal_size_kb(self):
        """Gets the convert_minimum_orginal_size_kb of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定转换图片最小长度,取值范围为[1,8192],默认为32,单位为KB  # noqa: E501

        :return: The convert_minimum_orginal_size_kb of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: int
        """
        return self._convert_minimum_orginal_size_kb

    @convert_minimum_orginal_size_kb.setter
    def convert_minimum_orginal_size_kb(self, convert_minimum_orginal_size_kb):
        """Sets the convert_minimum_orginal_size_kb of this ConfigHttpProfileCache.

        可选参数;指定转换图片最小长度,取值范围为[1,8192],默认为32,单位为KB  # noqa: E501

        :param convert_minimum_orginal_size_kb: The convert_minimum_orginal_size_kb of this ConfigHttpProfileCache.  # noqa: E501
        :type: int
        """
        if convert_minimum_orginal_size_kb is not None and convert_minimum_orginal_size_kb > 8192:  # noqa: E501
            raise ValueError("Invalid value for `convert_minimum_orginal_size_kb`, must be a value less than or equal to `8192`")  # noqa: E501
        if convert_minimum_orginal_size_kb is not None and convert_minimum_orginal_size_kb < 0:  # noqa: E501
            raise ValueError("Invalid value for `convert_minimum_orginal_size_kb`, must be a value greater than or equal to `0`")  # noqa: E501

        self._convert_minimum_orginal_size_kb = convert_minimum_orginal_size_kb

    @property
    def convert_exclude_urls(self):
        """Gets the convert_exclude_urls of this ConfigHttpProfileCache.  # noqa: E501

        可选参数;指定不需转换的图片url,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :return: The convert_exclude_urls of this ConfigHttpProfileCache.  # noqa: E501
        :rtype: list[str]
        """
        return self._convert_exclude_urls

    @convert_exclude_urls.setter
    def convert_exclude_urls(self, convert_exclude_urls):
        """Sets the convert_exclude_urls of this ConfigHttpProfileCache.

        可选参数;指定不需转换的图片url,该参数为列表参数,可通过add/delete进行添加和删除  # noqa: E501

        :param convert_exclude_urls: The convert_exclude_urls of this ConfigHttpProfileCache.  # noqa: E501
        :type: list[str]
        """

        self._convert_exclude_urls = convert_exclude_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHttpProfileCache, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHttpProfileCache):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
