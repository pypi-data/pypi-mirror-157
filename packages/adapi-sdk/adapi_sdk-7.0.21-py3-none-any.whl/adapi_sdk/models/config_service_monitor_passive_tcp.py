# coding: utf-8

"""
    Sangfor AD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from adapi_sdk.models.config_service_monitor_passive_tcp_busy_protect import ConfigServiceMonitorPassiveTcpBusyProtect  # noqa: F401,E501


class ConfigServiceMonitorPassiveTcp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'debug_mode': 'str',
        'statistical_time': 'int',
        'statistical_object': 'str',
        'rst_packet_threshold': 'int',
        'zero_window_percent': 'int',
        'action': 'str',
        'busy_protect': 'ConfigServiceMonitorPassiveTcpBusyProtect'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'debug_mode': 'debug_mode',
        'statistical_time': 'statistical_time',
        'statistical_object': 'statistical_object',
        'rst_packet_threshold': 'rst_packet_threshold',
        'zero_window_percent': 'zero_window_percent',
        'action': 'action',
        'busy_protect': 'busy_protect'
    }

    def __init__(self, name=None, description=None, type='PASSIVE-TCP', debug_mode='DISABLE', statistical_time=None, statistical_object='RST-PACKET', rst_packet_threshold=None, zero_window_percent=None, action='BUSY-PROTECT', busy_protect=None):  # noqa: E501
        """ConfigServiceMonitorPassiveTcp - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._debug_mode = None
        self._statistical_time = None
        self._statistical_object = None
        self._rst_packet_threshold = None
        self._zero_window_percent = None
        self._action = None
        self._busy_protect = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if debug_mode is not None:
            self.debug_mode = debug_mode
        if statistical_time is not None:
            self.statistical_time = statistical_time
        if statistical_object is not None:
            self.statistical_object = statistical_object
        if rst_packet_threshold is not None:
            self.rst_packet_threshold = rst_packet_threshold
        if zero_window_percent is not None:
            self.zero_window_percent = zero_window_percent
        if action is not None:
            self.action = action
        if busy_protect is not None:
            self.busy_protect = busy_protect

    @property
    def name(self):
        """Gets the name of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :return: The name of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServiceMonitorPassiveTcp.

        必选参数；指定监视器的名称, 在配置中必须唯一。  # noqa: E501

        :param name: The name of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :return: The description of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigServiceMonitorPassiveTcp.

        可选参数；用来对此配置增加额外的备注。  # noqa: E501

        :param description: The description of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        只读参数；监视器类型。  # noqa: E501

        :return: The type of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigServiceMonitorPassiveTcp.

        只读参数；监视器类型。  # noqa: E501

        :param type: The type of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASSIVE-TCP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :return: The debug_mode of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ConfigServiceMonitorPassiveTcp.

        可选参数；调试模式开关，disable表示禁用，enable表示启用；默认禁用。  # noqa: E501

        :param debug_mode: The debug_mode of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if debug_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `debug_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(debug_mode, allowed_values)
            )

        self._debug_mode = debug_mode

    @property
    def statistical_time(self):
        """Gets the statistical_time of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数;指定统计时间,取值范围为[1,255],默认为10  # noqa: E501

        :return: The statistical_time of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: int
        """
        return self._statistical_time

    @statistical_time.setter
    def statistical_time(self, statistical_time):
        """Sets the statistical_time of this ConfigServiceMonitorPassiveTcp.

        可选参数;指定统计时间,取值范围为[1,255],默认为10  # noqa: E501

        :param statistical_time: The statistical_time of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: int
        """
        if statistical_time is not None and statistical_time > 255:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value less than or equal to `255`")  # noqa: E501
        if statistical_time is not None and statistical_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `statistical_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._statistical_time = statistical_time

    @property
    def statistical_object(self):
        """Gets the statistical_object of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数;指定监视类型,包括rst-packet和zero-window,默认为rst-packet  # noqa: E501

        :return: The statistical_object of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._statistical_object

    @statistical_object.setter
    def statistical_object(self, statistical_object):
        """Sets the statistical_object of this ConfigServiceMonitorPassiveTcp.

        可选参数;指定监视类型,包括rst-packet和zero-window,默认为rst-packet  # noqa: E501

        :param statistical_object: The statistical_object of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """
        allowed_values = ["RST-PACKET", "ZERO-WINDOW"]  # noqa: E501
        if statistical_object not in allowed_values:
            raise ValueError(
                "Invalid value for `statistical_object` ({0}), must be one of {1}"  # noqa: E501
                .format(statistical_object, allowed_values)
            )

        self._statistical_object = statistical_object

    @property
    def rst_packet_threshold(self):
        """Gets the rst_packet_threshold of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数;指定RST关闭连接上限,取值范围为[1,4294967295],默认为100000  # noqa: E501

        :return: The rst_packet_threshold of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: int
        """
        return self._rst_packet_threshold

    @rst_packet_threshold.setter
    def rst_packet_threshold(self, rst_packet_threshold):
        """Sets the rst_packet_threshold of this ConfigServiceMonitorPassiveTcp.

        可选参数;指定RST关闭连接上限,取值范围为[1,4294967295],默认为100000  # noqa: E501

        :param rst_packet_threshold: The rst_packet_threshold of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: int
        """
        if rst_packet_threshold is not None and rst_packet_threshold > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `rst_packet_threshold`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if rst_packet_threshold is not None and rst_packet_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `rst_packet_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._rst_packet_threshold = rst_packet_threshold

    @property
    def zero_window_percent(self):
        """Gets the zero_window_percent of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数;指定零窗口数据包百分比,取值范围为[1,100],默认为40,单位为%  # noqa: E501

        :return: The zero_window_percent of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: int
        """
        return self._zero_window_percent

    @zero_window_percent.setter
    def zero_window_percent(self, zero_window_percent):
        """Sets the zero_window_percent of this ConfigServiceMonitorPassiveTcp.

        可选参数;指定零窗口数据包百分比,取值范围为[1,100],默认为40,单位为%  # noqa: E501

        :param zero_window_percent: The zero_window_percent of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: int
        """
        if zero_window_percent is not None and zero_window_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `zero_window_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if zero_window_percent is not None and zero_window_percent < 1:  # noqa: E501
            raise ValueError("Invalid value for `zero_window_percent`, must be a value greater than or equal to `1`")  # noqa: E501

        self._zero_window_percent = zero_window_percent

    @property
    def action(self):
        """Gets the action of this ConfigServiceMonitorPassiveTcp.  # noqa: E501

        可选参数;指定异常动作,包括busy-protect和set-offline,默认为busy-protect  # noqa: E501

        :return: The action of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConfigServiceMonitorPassiveTcp.

        可选参数;指定异常动作,包括busy-protect和set-offline,默认为busy-protect  # noqa: E501

        :param action: The action of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUSY-PROTECT", "SET-OFFLINE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def busy_protect(self):
        """Gets the busy_protect of this ConfigServiceMonitorPassiveTcp.  # noqa: E501


        :return: The busy_protect of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :rtype: ConfigServiceMonitorPassiveTcpBusyProtect
        """
        return self._busy_protect

    @busy_protect.setter
    def busy_protect(self, busy_protect):
        """Sets the busy_protect of this ConfigServiceMonitorPassiveTcp.


        :param busy_protect: The busy_protect of this ConfigServiceMonitorPassiveTcp.  # noqa: E501
        :type: ConfigServiceMonitorPassiveTcpBusyProtect
        """

        self._busy_protect = busy_protect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServiceMonitorPassiveTcp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServiceMonitorPassiveTcp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
