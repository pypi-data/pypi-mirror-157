from __future__ import annotations
from dataclasses import dataclass
import datetime
from typing import Dict, Optional, Tuple
from cloud_init_server.exceptions import MissingConfigProperty
from cloud_init_server.utils import get_key, get_time_sec_age
from jinja2 import Template
from pydantic import BaseModel, Field
from fs import open_fs
from fs.base import FS
from typing import Any
import json
import yaml
from functools import lru_cache
from yaml import SafeLoader, SafeDumper

class ConfigRequestQueryParams(BaseModel):
    node_id: Optional[str] = Field(None, description="Optional string that identififes this node")

class ConfigRequest(ConfigRequestQueryParams):
    """
    Represents request for cloud-init configuration
    """
    config: str = Field(..., description="Path with dots that we want to generate the configuration for. The path is the unix path but with slash '/' replaced with a dot '.'. For example: folder1.folder2.node refers to folder1.folder2.node.yaml")
    extra_params: Optional[Dict[str, Any]] = Field(None, description="Any extra settings passed down to template variables")

    #@property
    #@lru_cache(maxsize=None)
    def __hash__(self) -> int:
        return sum([ord(ch) for ch in json.dumps(self.dict(), separators=(',', ':'))])

class CacheFlushStats(BaseModel):
    removed_cache_items_count: int

class RenderedConfiguration(BaseModel):
    hostname: str
    k3os_config: Dict[str, Any]
    config: Dict[str, Any]
    template_time: datetime.datetime
    vars_time: Optional[datetime.datetime]

    def to_yaml_obj(self) -> Dict[str, Any]:
        return {
            **self.config,
            **dict(
                hostname=self.hostname,
                k3os=self.k3os_config,
            ),
        }

@dataclass
class ConfigResponse:
    __root__: Dict[str, Any]
    request: ConfigRequest
    generated_time: datetime.datetime
    template_time: datetime.datetime
    vars_time: Optional[datetime.datetime]

    @property
    def yaml_header(self) -> str:
        now = datetime.datetime.now()
        return f"""
This yaml was generated by cloud_init_server
Config:          |  {self.request.config}
Node ID:         |  {self.request.node_id or "N/A"}
Response age:    |  {get_time_sec_age(self.generated_time, now=now)}
Template age:    |  {get_time_sec_age(self.template_time, now=now)}
Config age:      |  {get_time_sec_age(self.vars_time, now=now)}
"""

class ConfigGenerator:

    _template_cache: Dict[str, Tuple[Template, datetime.datetime]]
    _fs_path: str
    _fs: Optional[FS]
    _vars_fs_path: str
    _vars_path: str
    _vars: Dict[str, Any]
    _vars_time: Optional[datetime.datetime]
    _enable_cache: bool

    _response_cache: Dict[str, Tuple[Template, ConfigResponse]]

    def flush_cache(self) -> CacheFlushStats:
        removed_cache_items_count = len(self._template_cache) + len(self._response_cache) + 1

        self._template_cache = dict()
        self._vars = None
        self._vars_time = None
        self._response_cache = dict()
        
        return CacheFlushStats(removed_cache_items_count=removed_cache_items_count)

    def __init__(
        self,
        fs_path: str,
        vars_fs_path: str = ".",
        vars_path: str = "vars.yaml",
        enable_cache: bool = True,
    ) -> None:
        self._template_cache = dict()
        self._fs_path = fs_path
        self._fs = None        
        self._vars = None
        self._vars_fs_path = vars_fs_path
        self._vars_path = vars_path
        self._enable_cache = enable_cache
        self._response_cache = dict()

    def _read_vars(self) -> Dict[str, Any]:
        if not self._vars or (not self._enable_cache):
            fs = open_fs(self._vars_fs_path)
            self._vars = yaml.load(fs.readtext(self._vars_path), Loader=SafeLoader)
            self._vars_time = datetime.datetime.now()
            fs.close()
        return self._vars

    def _get_fs(self) -> FS:
        if not self._fs:
            self._fs = open_fs(self._fs_path)
        return self._fs

    def _resolve_template_path(self, config: str):
        return f'{config.replace(".", "/")}.yaml'

    def _get_template(self, config: str) -> Tuple[Template, datetime.datetime]:
        template_path = self._resolve_template_path(config)
        if config not in self._template_cache or (not self._enable_cache):
            template_text = self._get_fs().readtext(template_path)
            self._template_cache[config] = (Template(template_text), datetime.datetime.now())
        return self._template_cache[config]

    def _get_configuration(
        self,
        request: ConfigRequest,
    ) -> RenderedConfiguration:
        templ, templ_time = self._get_template(request.config)
        config_obj = yaml.load(templ.render(**{
            **self._read_vars(),
            **request.extra_params,
        }), Loader=SafeLoader)

        hostname: Optional[str] = get_key(config_obj, 'hostname')
        if not hostname:
            hostname = request.node_id
        if not hostname:
            raise MissingConfigProperty(f"Config must specify hostname or you must pass node_id in request query params like so: ?node_id=ABC")
        
        k3os_config: Optional[Dict[str, Any]] = get_key(config_obj, 'k3os')
        if k3os_config:
            labels: Optional[Dict[str, str]] = get_key(k3os_config, 'labels')
            if not labels:
                labels = dict()
            labels["cloud-resource-type"] = request.config
            labels["cloud-node-id"] = request.node_id or hostname or "N/A"
            k3os_config["labels"] = labels

        return RenderedConfiguration(
            hostname=hostname,
            k3os_config=k3os_config,
            config=config_obj,
            template_time=templ_time,
            vars_time=self._vars_time,
        )
    
    def get_configuration(
        self,
        request: ConfigRequest,
    ) -> ConfigResponse:
        if self._enable_cache and (request in self._response_cache):
            proto = self._response_cache[request]
            return proto
        response = self._get_configuration(request=request)
        yaml_obj = response.to_yaml_obj()
        config_response = ConfigResponse(
            __root__=yaml_obj,
            request=request,
            generated_time=datetime.datetime.now(),
            template_time=response.template_time,
            vars_time=self._vars_time,
        )
        if self._enable_cache:
            self._response_cache[request] = config_response
        return config_response

    @classmethod
    def create_from_config(cls, config_path: str) -> ConfigGenerator:
        with open(config_path, "r") as config_file:
            config = yaml.load(config_file.read(), Loader=SafeLoader)
        return ConfigGenerator(**config)