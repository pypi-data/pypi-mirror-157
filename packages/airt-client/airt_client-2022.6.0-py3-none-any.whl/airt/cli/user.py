# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI_User.ipynb (unless otherwise specified).

__all__ = ["logger"]

# Cell

from typing import *

# Internal Cell

import os

import typer
from typer import echo
from tabulate import tabulate
import datetime as dt
import pandas as pd
import qrcode

from ..client import Client
from . import helper
from ..logger import get_logger, set_level

# Internal Cell

app = typer.Typer(
    help="A set of commands for managing users and their authentication in the server."
)

# Cell

logger = get_logger(__name__)

# Internal Cell


@app.command()
@helper.requires_auth_token
def details() -> None:
    """Get details of the currently logged-in user"""

    from ..client import User

    df = pd.DataFrame(User.details(), index=[0])[User.USER_COLS]
    typer.echo(tabulate(df, headers="keys", tablefmt="plain"))


# Internal Cell


@app.command()
@helper.requires_auth_token
def create(
    username: str = typer.Option(
        ..., "--username", "-un", help="The username for the new user."
    ),
    first_name: str = typer.Option(
        ...,
        "--first_name",
        "-fn",
        help="The first name for the new user.",
    ),
    last_name: str = typer.Option(
        ...,
        "--last_name",
        "-ln",
        help="The last name for the new user.",
    ),
    email: str = typer.Option(
        ...,
        "--email",
        "-e",
        help="The email for the new user.",
    ),
    password: str = typer.Option(
        ...,
        "--password",
        "-p",
        help="The password for the new user.",
    ),
    subscription_type: str = typer.Option(
        ...,
        "--subscription_type",
        "-st",
        help="User subscription type. Currently, the API supports only the following subscription types **small**, **medium** and **large**.",
    ),
    super_user: bool = typer.Option(
        False,
        "--super_user",
        "-su",
        help="If set to **True**, then the new user will have super user privilages. If **None**, then the default value "
        "**False** will be used to create a non-super user.",
    ),
    quiet: bool = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output user id only.",
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Set logger level to DEBUG and output everything.",
    ),
) -> None:
    """Create a new user in the server."""

    from ..client import User

    df = User.create(
        username=username,
        first_name=first_name,
        last_name=last_name,
        email=email,
        subscription_type=subscription_type,
        super_user=super_user,
        password=password,
    )

    df["created"] = helper.humanize_date(df["created"])

    if quiet:
        typer.echo(df.iloc[0]["id"])
    else:
        typer.echo(tabulate(df, headers="keys", tablefmt="plain", showindex=False))


# Internal Cell


@app.command()
@helper.requires_auth_token
def ls(
    offset: int = typer.Option(
        0,
        "--offset",
        "-o",
        help="The number of users to offset at the beginning. If **None**, then the default value **0** will be used.",
    ),
    limit: int = typer.Option(
        100,
        "--limit",
        "-l",
        help="The maximum number of users to return from the server. If None, then the default value 100 will be used.",
    ),
    disabled: bool = typer.Option(
        False,
        "--disabled",
        help="If set to **True**, then only the deleted users will be returned. Else, the default value **False** will "
        "be used to return only the list of active users.",
    ),
    quiet: bool = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output only user ids separated by space",
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Set logger level to DEBUG and output everything.",
    ),
) -> None:
    """Return the list of users available in the server."""

    from ..client import User

    ux = User.ls(offset=offset, limit=limit, disabled=disabled)

    df = User.as_df(ux)

    df["created"] = helper.humanize_date(df["created"])

    if quiet:
        ids = df["id"].astype(str).to_list()
        typer.echo("\n".join(ids))
    else:
        typer.echo(tabulate(df, headers="keys", tablefmt="plain", showindex=False))


# Internal Cell


@app.command()
@helper.requires_auth_token
def disable(
    id: int = typer.Argument(
        ...,
        help="User id to disabled.",
    ),
    quiet: bool = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output user id only.",
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Set logger level to DEBUG and output everything.",
    ),
) -> None:
    """Disable a user in the server."""

    from ..client import User

    df = User.disable(user_id=int(id))

    df["created"] = helper.humanize_date(df["created"])

    if quiet:
        ids = df["id"].astype(str).to_list()
        typer.echo("\n".join(ids))
    else:
        typer.echo(tabulate(df, headers="keys", tablefmt="plain", showindex=False))


# Internal Cell


@app.command()
@helper.requires_auth_token
def enable(
    id: int = typer.Argument(
        ...,
        help="User id to enable.",
    ),
    quiet: bool = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output user id only.",
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Set logger level to DEBUG and output everything.",
    ),
) -> None:
    """Enable a disabled user in the server."""

    from ..client import User

    df = User.enable(user_id=int(id))

    df["created"] = helper.humanize_date(df["created"])

    if quiet:
        ids = df["id"].astype(str).to_list()
        typer.echo("\n".join(ids))
    else:
        typer.echo(tabulate(df, headers="keys", tablefmt="plain", showindex=False))


# Internal Cell


@app.command()
@helper.requires_auth_token
def update(
    user_id: Optional[int] = typer.Option(
        None,
        "--user_id",
        "-id",
        help="Account user_id to update. If not passed, then the default value None will be used to update the currently logged-in user details.",
    ),
    username: Optional[str] = typer.Option(
        None,
        "--username",
        "-un",
        help="New username for the user.",
    ),
    first_name: Optional[str] = typer.Option(
        None,
        "--first_name",
        "-fn",
        help="New first name for the user.",
    ),
    last_name: Optional[str] = typer.Option(
        None,
        "--last_name",
        "-ln",
        help="New last name for the user.",
    ),
    email: Optional[str] = typer.Option(
        None,
        "--email",
        "-e",
        help="New email for the user.",
    ),
    password: Optional[str] = typer.Option(
        None,
        "--password",
        "-p",
        help="New password for the user.",
    ),
    quiet: bool = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output user id only.",
    ),
    debug: bool = typer.Option(
        False,
        "--debug",
        "-d",
        help="Set logger level to DEBUG and output everything.",
    ),
) -> None:
    """Update existing user details in the server.

    Please do not pass the user_id argument unless you are a super user. Only a
    super user can update details for other users.

    """

    from ..client import User

    df = User.update(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        email=email,
        password=password,
    )

    df["created"] = helper.humanize_date(df["created"])

    if quiet:
        typer.echo(df.iloc[0]["id"])
    else:
        typer.echo(tabulate(df, headers="keys", tablefmt="plain", showindex=False))


# Internal Cell

mfa_app = typer.Typer(help="Commands for enabling and disabling MFA.")

# Internal Cell


@mfa_app.command()  # type: ignore
@helper.requires_auth_token
def enable() -> None:
    """Enable MFA for the user.

    This is an interactive command and will generate a QR code. You can use an authenticator app, such as Google Authenticator
    to scan the code and enter the valid six-digit verification code from the authenticator app in the interactive prompt to
    enable and activate MFA for your account.

    After three invalid attempts, you have to call this command again to generate a new QR code.
    """

    from ..client import User

    qr = qrcode.QRCode()
    qr.add_data(User._get_mfa_provision_url())

    typer.echo("Please open an authenticator app and scan the QR code below:")
    #     typer.echo(qr.print_ascii(invert=True))
    typer.echo(qr.print_ascii())

    for i in range(3):

        try:
            otp = typer.prompt(
                "Please enter the OTP displayed in the authenticator app"
            )
            response = User.activate_mfa(otp=otp)
            typer.echo(
                "MFA successfully activated. Please pass the OTP along with the username and password when creating a token."
            )
            break

        except ValueError as e:
            typer.echo(e)


# Internal Cell


@mfa_app.command()  # type: ignore
@helper.requires_auth_token
def disable(
    user_id: Optional[int] = typer.Option(
        None,
        "--user_id",
        "-id",
        help="Account user_id to disable MFA. If not passed, then the default value None will be used to disable MFA for the currently logged-in user.",
    ),
) -> None:
    """Disable MFA for the user.

    Please do not pass the user_id argument unless you are a super user. Only
    a super user can disable MFA for other users.
    """

    from ..client import User

    User.disable_mfa(user_id=user_id)

    typer.echo("MFA is successafully deactivated for the user.")


# Internal Cell

# Adding mfa as a subcommand for user command
app.add_typer(mfa_app, name="mfa")
