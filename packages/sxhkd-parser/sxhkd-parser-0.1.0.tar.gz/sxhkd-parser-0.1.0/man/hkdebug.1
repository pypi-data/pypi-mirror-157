.\" Generated by scdoc 1.11.1
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "hkdebug" "1" "2022-07-03"
.P
.SH NAME
.P
hkdebug - debug \fBsxhkd\fR(1) configs
.P
.SH SYNOPSIS
.P
\fBhkdebug\fR [global-options.\&.\&.\&] \fImode\fR [mode-options.\&.\&.\&]
.P
.SH DESCRIPTION
.P
\fBhkdebug\fR is a debugging tool for \fBsxhkd\fR(1) configs which shows the
internal state of the \fBsxhkd-parser\fR library backing \fBhkcheck\fR(1),
\fBhkfind\fR(1), \fBhkxargs\fR(1), \fBhkwatch\fR(1), etc.\&
.P
See \fBsxhkd-parser\fR(7) for important background information needed to
use this tool.\&
.P
.SH OPTIONS
.P
Run \fBhkdebug --help\fR for global options.\&
.br
Run \fBhkdebug\fR \fImode\fR \fB--help\fR for options specific to \fImode\fR.\&
.P
.SH MODE
.P
The behaviour of \fBhkdebug\fR depends entirely on the subcommands indicated
by \fImode\fR.\&
.P
.SS keybinds
.P
This mode prints relevant information for each hotkey-command unit
("keybind") found in the \fBsxhkd\fR(1) config.\&  It also includes the parsed
metadata and optionally the path of the section in which the keybind
is contained.\&
.P
.SS hotkey-tree
.P
A core data structure for the \fBsxhkd-parser\fR library is a tree of
key-chord nodes in which each path from root to leaf is a hotkey.\&
This tree can also contain internal nodes which aren't chord nodes.\&
They help to group subtrees by common sets of modifiers, keysyms, etc.\&
Use the \fB-I\fR option to define this.\&
.P
This mode prints the hotkey tree for the parsed \fBsxhkd\fR(1) config.\&
.P
.SS span-tree
.P
A core data structure for the \fBsxhkd-parser\fR library is a tree of spans
of text used to expand sequences of the form \fB{s1,s2,.\&.\&.\&,sn}\fR in hotkeys
and commands.\&  Since sequences cannot be nested, the span tree can be
implemented as a decision tree where every node on the same level has the
same children.\&  Consequently, its graphical tree representation contains
redundancies.\&  Use the \fB-L\fR option to see just the levels of the tree.\&
.P
For example, the span tree of "\fBsuper + {shift +,_} a\fR" has the levels:
.RS 4
.ie n \{\
\h'-04'1.\h'+03'\c
.\}
.el \{\
.IP 1. 4
.\}
"\fBsuper + \fR"
.RE
.RS 4
.ie n \{\
\h'-04'2.\h'+03'\c
.\}
.el \{\
.IP 2. 4
.\}
"\fBshift +\fR", "\fB_\fR"
.RE
.RS 4
.ie n \{\
\h'-04'3.\h'+03'\c
.\}
.el \{\
.IP 3. 4
.\}
"\fB a\fR"

.RE
Walking the tree then expands the sequences into:
.RS 4
.ie n \{\
\h'-04'1.\h'+03'\c
.\}
.el \{\
.IP 1. 4
.\}
"\fBsuper + shift + a\fR"
.RE
.RS 4
.ie n \{\
\h'-04'2.\h'+03'\c
.\}
.el \{\
.IP 2. 4
.\}
"\fBsuper +  a\fR" (recall: "\fB_\fR" is the empty sequence element)

.RE
In this case, the expanded text would then be tokenised and parsed into
a hotkey.\&
.P
Ranges are also expanded while a span tree is created; the span tree of
"\fBsuper + {0-9}\fR" has the levels:
.RS 4
.ie n \{\
\h'-04'1.\h'+03'\c
.\}
.el \{\
.IP 1. 4
.\}
"\fBsuper + \fR"
.RE
.RS 4
.ie n \{\
\h'-04'2.\h'+03'\c
.\}
.el \{\
.IP 2. 4
.\}
"\fB0\fR" , "\fB1\fR" , "\fB2\fR" , "\fB3\fR" , "\fB4\fR" , "\fB5\fR" , "\fB6\fR" , "\fB7\fR" , "\fB8\fR" , "\fB9\fR"

.RE
.P
This mode prints the span tree for the parsed \fBsxhkd\fR(1) config.\&
.P
.SH BUGS
.P
Since the purpose of \fBhkdebug\fR is for debugging configs by eye, its
output is not guaranteed to be stable across versions.\&  Use with caution
in scripts.\&
.P
.SH SEE ALSO
.P
\fBsxhkd\fR(1), \fBhkcheck\fR(1), \fBhkfind\fR(1), \fBhkxargs\fR(1), \fBhkwatch\fR(1), \fBsxhkd-parser\fR(7)
