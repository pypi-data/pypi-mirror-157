.\" Generated by scdoc 1.11.1
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "hkwatch" "1" "2022-07-03"
.P
.SH NAME
.P
hkwatch - keep track of the current mode of \fBsxhkd\fR(1) by tailing its status FIFO
.P
.SH SYNOPSIS
.P
hkwatch [options.\&.\&.\&] [-s \fIstatus-fifo\fR] [-m \fImode-field\fR]
.P
.SH DESCRIPTION
.P
\fBhkwatch\fR outputs status information in a similar format to the messages
that \fBsxhkd\fR(1) sends to its status FIFO.\&  Its main purpose is to use
the hotkey tree and the metadata gained from parsing the config so that
the current chord state of \fBsxhkd\fR(1) can be tracked for a status bar,
which includes the mode.\&
.P
\fBhkwatch\fR only uses the messages from the status FIFO that are prefixed
by \fBH\fR, \fBB\fR, or \fBE\fR.\&
.P
At startup, \fBhkwatch\fR is initialised to assume that \fBsxhkd\fR(1) is not
in a mode or mid-chain (i.\&e.\&, mode is set to \fBnormal\fR).\&
.P
When an \fBH\fR message is seen, the hotkey that follows the \fBH\fR prefix
is stored.\&  This hotkey must not contain embedded sequences of the form
\fB{s1,s2,.\&.\&.\&,sn}\fR.\&
.P
Upon seeing a \fBBBegin chain\fR message, the stored hotkey is parsed and
each chord in the parsed hotkey is matched to chord nodes on a path
along the hotkey tree (which came from parsing the config).\&
.P
First, \fBhkwatch\fR attempts to find a chord node that begins a mode with
the last chord in the parsed hotkey.\&  In the example below, if the parsed
hotkey is \fBsuper + a; super + a\fR, the second \fBsuper + a\fR node would be
matched, and \fBhkwatch\fR would print the name of the current mode (taken
from the metadata field specified by the \fB-m\fR option).\&
.P
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBsuper + a\fR
.RS 4
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBsuper + a\fR (starts mode)
.RS 4
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBa\fR
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBb\fR
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\&.\&.\&.\&

.RE
.P
.RE
.RE
If that fails to find a node, \fBhkwatch\fR attempts to find a chord node
that matches the parsed hotkey exactly.\&  In the example below, if the
parsed hotkey is \fBsuper + b; super + c\fR, the \fBsuper + c\fR node would be
matched, and \fBhkwatch\fR would print that \fBsxhkd\fR(1) is currently completing
a hotkey.\&
.P
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBsuper + b\fR
.RS 4
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBsuper + c\fR
.RS 4
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBa\fR
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\fBb\fR
.RE
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.IP \(bu 4
.\}
\&.\&.\&.\&

.RE
.P
.RE
.RE
Upon seeing an \fBEEnd chain\fR message, the mode is set to \fBnormal\fR again
(which is printed).\&
.P
\fBNOTE: The output is undefined when the parsed hotkey doesn't exist in the
config.\&\fR
.P
See \fBsxhkd-parser\fR(7) for important background information needed to
use this tool.\&
.P
.SH OPTIONS
.P
Run \fBhkwatch --help\fR.\&  Some important options for \fBhkwatch\fR are \fB-s\fR
and \fB-m\fR.\&
.P
.SH MESSAGE FORMAT
.P
Similarly to \fBsxhkd\fR(1), each message of \fBhkwatch\fR is prefixed by a
character indicating the message type.\&
.P
.SS Normal (N)
.P
\fBsxhkd\fR(1) is not currently completing a hotkey, nor is it in a mode.\&
.P
.SS Unknown (U)
.P
\fBsxhkd\fR(1) is in a mode with an unknown name.\&  The message content is
the hotkey (e.\&g.\&, \fBUsuper + a\fR when the mode specified by \fB-m\fR doesn't
exist in the metadata of the hotkey).\&
.P
.SS In-chain (C)
.P
\fBsxhkd\fR(1) has completed one or more chords but is not in a mode and it
hasn't yet completed a hotkey (i.\&e.\&, it's currently completing a hotkey).\&
.P
.SS User-mode (M)
.P
\fBsxhkd\fR(1) is currently in a mode.\&  The message content is the mode name
(e.\&g.\&, \fBMresize\fR).\&
.P
.SH EXIT STATUS
.P
\fBhkwatch\fR has no special exit status codes.\&  Simply 0 on success,
non-zero on failure.\&
.P
.SH SIGNALS
.P
Upon receiving these signals, \fBhkwatch\fR will take certain actions.\&
.P
\fBSIGUSR1\fR
.RS 4
Reload the config.\&
.P
.RE
\fBSIGUSR2\fR
.RS 4
Print the current mode.\&
.P
.RE
.SH SEE ALSO
.P
\fBsxhkd\fR(1), \fBsxhkd-parser\fR(7)
