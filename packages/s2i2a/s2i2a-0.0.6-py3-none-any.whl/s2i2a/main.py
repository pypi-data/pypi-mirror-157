import itertools
import os
import re
import sys
from collections import OrderedDict
import pathlib

import argparse


def extract_sweeps(sweeps):
    """

    :param sweeps: Sweep descriptor of shape `param1=val1,val2,val3 param2=val param3=val1,val2,val3,val4...`
    :return: ordered dict of shape `dict[parameter] = [possible_val_1, possible_val_2, ...]`
    """

    param_sweep = OrderedDict()

    for match in sweeps:
        parameter, sweep = match.split("=")
        sweep = sweep.split(',')
        param_sweep[parameter] = sweep

    return param_sweep


def paramsweep2arglist(param_sweep):
    """

    :param param_sweep: dict generated by extract_sweeps
    :return: ordered dict of shape `dict[param1] = [param1=val1, param1=val2, param3=val3]
    """

    arglist = OrderedDict()

    for arg, sweep in param_sweep.items():
        arglist[arg] = [f"{arg}={swee}" for swee in sweep]

    return arglist


def arglist2intfile(arglist, cmd):
    """
    does a cartesian product over the possible arguments.

    :param arglist: takes dict generated by paramsweep2arglist
    :return: ordered cartesian product list. Also writes to `s2i.txt`
    """

    all_sweeps = itertools.product(*arglist.values())
    all_sweeps = [' '.join(x) for x in all_sweeps]
    all_sweeps = "\n".join(all_sweeps)

    with open("s2i.txt", "w") as f:
        f.write(all_sweeps)
        f.write(f"\n{cmd}")


def s2i(sweep):
    contains_no_sweeps = True
    first_index_with_sweep = 0
    for i, swee in enumerate(sweep):
        if '=' in swee:
            first_index_with_sweep = i
            contains_no_sweeps = False
            break

    if contains_no_sweeps:
        with open("s2i.txt", "w") as f:
            f.write(" ".join(sweep))
            print("Done writing s2i.txt!")
            exit()

    command = sweep[:first_index_with_sweep]
    command = " ".join(command)
    sweep = sweep[first_index_with_sweep:]

    param_sweep = extract_sweeps(sweep)
    arglist = paramsweep2arglist(param_sweep)
    arglist2intfile(arglist, command)

    with open("s2i2a_sweep.txt", "w") as f:
        f.write(command + " " + " ".join(sweep))
    print("Done writing s2i.txt!")


def i2a(integer):
    integer = int(integer[0])

    try:
        with open("s2i.txt", "r") as f:
            file = f.readlines()

        arguments = file[integer].strip()
        no_sweep = False
        if '=' not in arguments:
            no_sweep = True
        arguments = arguments.split(" ")

        cmd = file[-1].strip()

    except FileNotFoundError as e:
        print("Could not find s2i.txt locally. Did you package it in your Docker/Singularity image?")
        exit(-1)

    cmd = cmd.split(" ")
    cmd_args = cmd[1:]
    cmd = cmd[0]

    print(f"s2i2a successfully parsed the arguments for integer {integer}")
    print(f"We will thus run:")
    print(f"\tCOMMAND `{cmd}`")
    print(f"\tARGUMENTS `{cmd_args}`")
    print(f"\tSWEEP ARGUMENTS `{arguments}`")
    print("Have a great day! Launching now using `execv`.")

    exec(cmd, cmd_args, arguments if not no_sweep else [])


def exec(cmd, cmd_args, arguments):
    if len(cmd_args) >= 1 and cmd_args[0] == "test_s2i2a.py":
        install_path = pathlib.Path(__file__).parent.resolve()
        cmd_args[0] = f"{install_path}/{cmd_args[0]}"

    try:
        os.execvp(cmd, [cmd] + cmd_args + arguments)
    except FileNotFoundError as e:
        print("Couldn't find the requested program. Did you forget to ask for python3 before your script?", file=sys.stderr)
        raise e


def main():
   # parser = argparse.ArgumentParser()
   ## parser.add_argument("direction", choices=['s2i', 'i2a'], help="Are we doing s2i or i2a")
    #parser.add_argument("other", type=str, metavar='N', nargs='*')
   # parser = parser.parse_args()

    direction = sys.argv[1]
    other = sys.argv[2:]

    if direction == 's2i':
        assert other, "You must define a sweep!"
        s2i(other)
    elif direction == 'i2a':
        i2a(other)
    else:
        raise NotImplementedError("Could not match your request?!")


if __name__ == "__main__":
    main()
