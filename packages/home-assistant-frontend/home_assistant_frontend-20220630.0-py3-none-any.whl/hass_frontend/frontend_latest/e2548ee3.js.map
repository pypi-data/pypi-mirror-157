{"version":3,"file":"e2548ee3.js","mappings":";;;;;;;;AAIA;;;;;ACqFA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;;;AAIA;;AAEA;;AAGA;AACA;AACA;;;;;;AAMA;;;AAIA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9GA","sources":["webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/panels/history/ha-panel-history.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  addDays,\n  endOfToday,\n  endOfWeek,\n  endOfYesterday,\n  startOfToday,\n  startOfWeek,\n  startOfYesterday,\n} from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket/dist/types\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParam,\n} from \"../../common/url/search-params\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/chart/state-history-charts\";\nimport \"../../components/ha-target-picker\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport type { DateRangePickerRanges } from \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport { computeHistory, fetchDateWS } from \"../../data/history\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\n\nclass HaPanelHistory extends SubscribeMixin(LitElement) {\n  @property() hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) narrow!: boolean;\n\n  @property() _startDate: Date;\n\n  @property() _endDate: Date;\n\n  @property() _targetPickerValue?;\n\n  @property() _isLoading = false;\n\n  @property() _stateHistory?;\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _ranges?: DateRangePickerRanges;\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _stateEntities?: EntityRegistryEntry[];\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 2, 0, 0, 0);\n    this._startDate = start;\n\n    const end = new Date();\n    end.setHours(end.getHours() + 1, 0, 0, 0);\n    this._endDate = end;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.history\")}</div>\n            <ha-icon-button\n              @click=${this._refreshHistory}\n              .disabled=${this._isLoading}\n              .path=${mdiRefresh}\n              .label=${this.hass.localize(\"ui.common.refresh\")}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"flex content\">\n          <div class=\"filters flex layout horizontal narrow-wrap\">\n            <ha-date-range-picker\n              .hass=${this.hass}\n              ?disabled=${this._isLoading}\n              .startDate=${this._startDate}\n              .endDate=${this._endDate}\n              .ranges=${this._ranges}\n              @change=${this._dateRangeChanged}\n            ></ha-date-range-picker>\n            <ha-target-picker\n              .hass=${this.hass}\n              .value=${this._targetPickerValue}\n              .disabled=${this._isLoading}\n              horizontal\n              @value-changed=${this._entitiesChanged}\n            ></ha-target-picker>\n          </div>\n          ${this._isLoading\n            ? html`<div class=\"progress-wrapper\">\n                <ha-circular-progress\n                  active\n                  alt=${this.hass.localize(\"ui.common.loading\")}\n                ></ha-circular-progress>\n              </div>`\n            : html`\n                <state-history-charts\n                  .hass=${this.hass}\n                  .historyData=${this._stateHistory}\n                  .endTime=${this._endDate}\n                  no-single\n                >\n                </state-history-charts>\n              `}\n        </div>\n        ${this._isLoading\n          ? html`<div class=\"progress-wrapper\">\n              <ha-circular-progress\n                active\n                alt=${this.hass.localize(\"ui.common.loading\")}\n              ></ha-circular-progress>\n            </div>`\n          : html`\n              <state-history-charts\n                virtualize\n                .hass=${this.hass}\n                .historyData=${this._stateHistory}\n                .endTime=${this._endDate}\n                .narrow=${this.narrow}\n                no-single\n              >\n              </state-history-charts>\n            `}\n      </ha-app-layout>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    const today = new Date();\n    const weekStart = startOfWeek(today);\n    const weekEnd = endOfWeek(today);\n\n    this._ranges = {\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.today\")]: [\n        startOfToday(),\n        endOfToday(),\n      ],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.yesterday\")]:\n        [startOfYesterday(), endOfYesterday()],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.this_week\")]:\n        [weekStart, weekEnd],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.last_week\")]:\n        [addDays(weekStart, -7), addDays(weekEnd, -7)],\n    };\n\n    const entityIds = extractSearchParam(\"entity_id\");\n    if (entityIds) {\n      const splitEntityIds = entityIds.split(\",\");\n      this._targetPickerValue = {\n        entity_id: splitEntityIds,\n      };\n    }\n\n    const startDate = extractSearchParam(\"start_date\");\n    if (startDate) {\n      this._startDate = new Date(startDate);\n    }\n    const endDate = extractSearchParam(\"end_date\");\n    if (endDate) {\n      this._endDate = new Date(endDate);\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"_startDate\") ||\n      changedProps.has(\"_endDate\") ||\n      changedProps.has(\"_targetPickerValue\") ||\n      changedProps.has(\"_entities\")\n    ) {\n      this._getHistory();\n    }\n\n    if (changedProps.has(\"hass\") || changedProps.has(\"_entities\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (!oldHass || oldHass.language !== this.hass.language) {\n        this.rtl = computeRTL(this.hass);\n      }\n      if (this._entities) {\n        const stateEntities: EntityRegistryEntry[] = [];\n        const regEntityIds = new Set(\n          this._entities.map((entity) => entity.entity_id)\n        );\n        for (const entityId of Object.keys(this.hass.states)) {\n          if (regEntityIds.has(entityId)) {\n            continue;\n          }\n          stateEntities.push({\n            name: computeStateName(this.hass.states[entityId]),\n            entity_id: entityId,\n            platform: computeDomain(entityId),\n            disabled_by: null,\n            hidden_by: null,\n            area_id: null,\n            config_entry_id: null,\n            device_id: null,\n            icon: null,\n            entity_category: null,\n          });\n        }\n        this._stateEntities = stateEntities;\n      }\n    }\n  }\n\n  private _refreshHistory() {\n    this._getHistory();\n  }\n\n  private async _getHistory() {\n    this._isLoading = true;\n    const entityIds = this._getEntityIds();\n    const dateHistory =\n      entityIds.length === 0\n        ? {}\n        : await fetchDateWS(\n            this.hass,\n            this._startDate,\n            this._endDate,\n            entityIds\n          );\n    this._stateHistory = computeHistory(\n      this.hass,\n      dateHistory,\n      this.hass.localize\n    );\n    this._isLoading = false;\n  }\n\n  private _filterEntity(entity: EntityRegistryEntry): boolean {\n    const { area_id, device_id, entity_id } = this._targetPickerValue;\n    if (area_id !== undefined) {\n      if (typeof area_id === \"string\" && area_id === entity.area_id) {\n        return true;\n      }\n      if (Array.isArray(area_id) && area_id.includes(entity.area_id)) {\n        return true;\n      }\n    }\n    if (device_id !== undefined) {\n      if (typeof device_id === \"string\" && device_id === entity.device_id) {\n        return true;\n      }\n      if (Array.isArray(device_id) && device_id.includes(entity.device_id)) {\n        return true;\n      }\n    }\n    if (entity_id !== undefined) {\n      if (typeof entity_id === \"string\" && entity_id === entity.entity_id) {\n        return true;\n      }\n      if (Array.isArray(entity_id) && entity_id.includes(entity.entity_id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _getEntityIds(): string[] {\n    if (\n      this._targetPickerValue === undefined ||\n      this._entities === undefined ||\n      this._stateEntities === undefined\n    ) {\n      return [];\n    }\n    const entityIds = this._entities\n      .filter((entity) => this._filterEntity(entity))\n      .map((entity) => entity.entity_id);\n    const stateEntityIds = this._stateEntities\n      .filter((entity) => this._filterEntity(entity))\n      .map((entity) => entity.entity_id);\n    return [...entityIds, ...stateEntityIds];\n  }\n\n  private _dateRangeChanged(ev) {\n    this._startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._endDate = endDate;\n\n    this._updatePath();\n  }\n\n  private _entitiesChanged(ev) {\n    this._targetPickerValue = ev.detail.value;\n\n    this._updatePath();\n  }\n\n  private _updatePath() {\n    const params: Record<string, string> = {};\n\n    if (this._targetPickerValue) {\n      params.entity_id = this._getEntityIds().join(\",\");\n    }\n\n    if (this._startDate) {\n      params.start_date = this._startDate.toISOString();\n    }\n\n    if (this._endDate) {\n      params.end_date = this._endDate.toISOString();\n    }\n\n    navigate(`/history?${createSearchParam(params)}`, { replace: true });\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 0 16px 16px;\n        }\n\n        state-history-charts {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) state-history-charts {\n          height: calc(100vh - 198px);\n        }\n\n        .progress-wrapper {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) .progress-wrapper {\n          height: calc(100vh - 198px);\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        :host([narrow]) .narrow-wrap {\n          flex-wrap: wrap;\n        }\n\n        .horizontal {\n          align-items: center;\n        }\n\n        :host(:not([narrow])) .selector-padding {\n          padding-left: 32px;\n        }\n\n        .progress-wrapper {\n          position: relative;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-end;\n          padding: 8px 16px 0;\n        }\n\n        :host([narrow]) .filters {\n          flex-wrap: wrap;\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          max-width: 100%;\n          direction: var(--direction);\n        }\n\n        :host([narrow]) ha-date-range-picker {\n          margin-right: 0;\n          margin-inline-end: 0;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n\n        ha-circular-progress {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n        }\n\n        ha-entity-picker {\n          display: inline-block;\n          flex-grow: 1;\n          max-width: 400px;\n        }\n\n        :host([narrow]) ha-entity-picker {\n          max-width: none;\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-history\", HaPanelHistory);\n"],"names":[],"sourceRoot":""}