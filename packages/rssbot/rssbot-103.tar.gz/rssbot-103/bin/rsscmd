#!/usr/bin/env python3
# This file is placed in the Public Domain.


"rss to irc feed fetcher"


import sys
import time


from rssbot.obj import Class, Config, Db, edit, find, fntime, format, last, save


Config.name = "rssbot"
Config.workdir = "/var/lib/rssbot/"


from rssbot.evt import Command
from rssbot.hdl import Callbacks, Commands, Handler, dispatch
from rssbot.rss import Fetcher, Rss
from rssbot.irc import Config



class CLI(Handler):

    def cmd(self, txt):
        e = Command()
        e.parse(txt, repr(self))
        self.handle(e)
        e.wait()

    def raw(self, txt):
        cprint(txt)


def cfg(event):
    c = Config()
    last(c)
    if not event.sets:
        event.reply(format(c))
        return
    edit(c, event.sets)
    save(c)
    event.reply("ok")


Commands.add(cfg)


def cmd(event):
    event.reply(",".join(sorted(Commands.cmd)))


Commands.add(cmd)


def dpl(event):
    if len(event.args) < 2:
        event.reply("dpl <stringinurl> <item1,item2>")
        return
    db = Db()
    setter = {"display_list": event.args[1]}
    names = Class.full("rss")
    if names:
        _fn, o = db.lastmatch(names[0], {"rss": event.args[0]})
        if o:
            edit(o, setter)
            save(o)
            event.reply("ok")


Commands.add(dpl)


def fnd(event):
    if not event.args:
        db = Db()
        res = ",".join(
            sorted({x.split(".")[-1].lower() for x in db.types()}))
        if res:
            event.reply(res)
        else:
            event.reply("no types yet.")
        return
    otype = event.args[0]
    nr = -1
    got = False
    for _fn, o in find(otype):
        nr += 1
        txt = "%s %s" % (str(nr), format(o))
        got = True
        event.reply(txt)
    if not got:
        event.reply("no result")


Commands.add(fnd)


def ftc(event):
    res = []
    thrs = []
    fetcher = Fetcher()
    fetcher.start(False)
    thrs = fetcher.run()
    for thr in thrs:
        res.append(thr.join())
    if res:
        event.reply(",".join([str(x) for x in res]))
        return


Commands.add(ftc)


def nme(event):
    if len(event.args) != 2:
        event.reply("name <stringinurl> <name>")
        return
    selector = {"rss": event.args[0]}
    nr = 0
    got = []
    for _fn, o in find("rss", selector):
        nr += 1
        o.name = event.args[1]
        got.append(o)
    for o in got:
        save(o)
    event.reply("ok")


Commands.add(nme)


def rem(event):
    if not event.args:
        event.reply("rem <stringinurl>")
        return
    selector = {"rss": event.args[0]}
    nr = 0
    got = []
    for _fn, o in find("rss", selector):
        nr += 1
        o._deleted = True
        got.append(o)
    for o in got:
        save(o)
    event.reply("ok")


Commands.add(rem)


def rss(event):
    if not event.args:
        event.reply("rss <url>")
        return
    url = event.args[0]
    if "http" not in url:
        event.reply("i need an url")
        return
    res = list(find("rss", {"rss": url}))
    if res:
        return
    o = Rss()
    o.rss = event.args[0]
    save(o)
    event.reply("ok")


Commands.add(rss)


def cprint(*args):
    print(*args)
    sys.stdout.flush()


def main():
    Callbacks.add("command", dispatch)
    Callbacks.threaded = False
    c = CLI()
    return c.cmd(" ".join(sys.argv[1:]))


main()
