
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCOLON COMMA DIVIDE DIVIDE2 DOT EKON EQUALS LBRACKET LPAREN MINUS NAME NUMBER PLUS RBRACKET RPAREN STRING TIMEStop : expressionsexpressions : expressionexpressions : COLONexpressions : expressions COMMA expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression COLON expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpressionsV : expressionsV : expressionsexpression : LPAREN expressions RPAREN\n                  | name LBRACKET expressions RBRACKET\n                  | name LPAREN expressionsV RPAREN\n    expression : NUMBERexpression : nameexpression : STRING name : name DOT NAME name : NAME'
    
_lr_action_items = {'COLON':([0,3,6,7,8,9,10,17,19,20,22,23,24,25,26,27,28,32,33,34,],[4,14,4,-17,-16,-18,-20,-10,4,4,14,-5,-6,14,-8,-9,-13,-19,-14,-15,]),'MINUS':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,22,23,24,25,26,27,28,32,33,34,],[5,13,5,5,-17,-16,-18,-20,5,5,5,5,5,5,-10,5,5,13,-5,-6,13,-8,-9,-13,-19,-14,-15,]),'LPAREN':([0,5,6,7,10,11,12,13,14,15,16,19,20,32,],[6,6,6,20,-20,6,6,6,6,6,6,6,6,-19,]),'NUMBER':([0,5,6,11,12,13,14,15,16,19,20,],[8,8,8,8,8,8,8,8,8,8,8,]),'STRING':([0,5,6,11,12,13,14,15,16,19,20,],[9,9,9,9,9,9,9,9,9,9,9,]),'NAME':([0,5,6,11,12,13,14,15,16,19,20,21,],[10,10,10,10,10,10,10,10,10,10,10,32,]),'$end':([1,2,3,4,7,8,9,10,17,22,23,24,25,26,27,28,32,33,34,],[0,-1,-2,-3,-17,-16,-18,-20,-10,-4,-5,-6,-7,-8,-9,-13,-19,-14,-15,]),'COMMA':([2,3,4,7,8,9,10,17,18,22,23,24,25,26,27,28,29,31,32,33,34,],[11,-2,-3,-17,-16,-18,-20,-10,11,-4,-5,-6,-7,-8,-9,-13,11,11,-19,-14,-15,]),'RPAREN':([3,4,7,8,9,10,17,18,20,22,23,24,25,26,27,28,30,31,32,33,34,],[-2,-3,-17,-16,-18,-20,-10,28,-11,-4,-5,-6,-7,-8,-9,-13,34,-12,-19,-14,-15,]),'RBRACKET':([3,4,7,8,9,10,17,22,23,24,25,26,27,28,29,32,33,34,],[-2,-3,-17,-16,-18,-20,-10,-4,-5,-6,-7,-8,-9,-13,33,-19,-14,-15,]),'PLUS':([3,7,8,9,10,17,22,23,24,25,26,27,28,32,33,34,],[12,-17,-16,-18,-20,-10,12,-5,-6,12,-8,-9,-13,-19,-14,-15,]),'TIMES':([3,7,8,9,10,17,22,23,24,25,26,27,28,32,33,34,],[15,-17,-16,-18,-20,-10,15,15,15,15,-8,-9,-13,-19,-14,-15,]),'DIVIDE':([3,7,8,9,10,17,22,23,24,25,26,27,28,32,33,34,],[16,-17,-16,-18,-20,-10,16,16,16,16,-8,-9,-13,-19,-14,-15,]),'LBRACKET':([7,10,32,],[19,-20,-19,]),'DOT':([7,10,32,],[21,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'top':([0,],[1,]),'expressions':([0,6,19,20,],[2,18,29,31,]),'expression':([0,5,6,11,12,13,14,15,16,19,20,],[3,17,3,22,23,24,25,26,27,3,3,]),'name':([0,5,6,11,12,13,14,15,16,19,20,],[7,7,7,7,7,7,7,7,7,7,7,]),'expressionsV':([20,],[30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> top","S'",1,None,None,None),
  ('top -> expressions','top',1,'p_top','utillc.py',132),
  ('expressions -> expression','expressions',1,'p_expressions_1','utillc.py',136),
  ('expressions -> COLON','expressions',1,'p_expressions_colon','utillc.py',140),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions_2','utillc.py',144),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','utillc.py',148),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','utillc.py',149),
  ('expression -> expression COLON expression','expression',3,'p_expression_binop','utillc.py',150),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','utillc.py',151),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','utillc.py',152),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','utillc.py',156),
  ('expressionsV -> <empty>','expressionsV',0,'p_expressionsV_1','utillc.py',160),
  ('expressionsV -> expressions','expressionsV',1,'p_expressionsV_2','utillc.py',164),
  ('expression -> LPAREN expressions RPAREN','expression',3,'p_expression_group','utillc.py',169),
  ('expression -> name LBRACKET expressions RBRACKET','expression',4,'p_expression_group','utillc.py',170),
  ('expression -> name LPAREN expressionsV RPAREN','expression',4,'p_expression_group','utillc.py',171),
  ('expression -> NUMBER','expression',1,'p_expression_number','utillc.py',181),
  ('expression -> name','expression',1,'p_expression_name','utillc.py',185),
  ('expression -> STRING','expression',1,'p_expression_string','utillc.py',189),
  ('name -> name DOT NAME','name',3,'p_name_2','utillc.py',193),
  ('name -> NAME','name',1,'p_name_1','utillc.py',197),
]
