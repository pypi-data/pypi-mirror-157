
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCOMMA DIVIDE EKON EQUALS LBRACKET LPAREN MINUS NAME NUMBER PLUS RBRACKET RPAREN STRING TIMEStop : expressionsexpressions : expressionexpressions : expressions COMMA expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expressions RPAREN\n                  | NAME LBRACKET expressions RBRACKET\n                  | NAME LPAREN expressions RPAREN\n    expression : NUMBERexpression : NAMEexpression : STRING'
    
_lr_action_items = {'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,26,27,],[4,11,4,4,-13,-12,-14,4,4,4,4,4,-8,4,4,11,-4,-5,-6,-7,-9,-10,-11,]),'LPAREN':([0,4,5,6,9,10,11,12,13,16,17,],[5,5,5,17,5,5,5,5,5,5,5,]),'NAME':([0,4,5,9,10,11,12,13,16,17,],[6,6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,4,5,9,10,11,12,13,16,17,],[7,7,7,7,7,7,7,7,7,7,]),'STRING':([0,4,5,9,10,11,12,13,16,17,],[8,8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,6,7,8,14,18,19,20,21,22,23,26,27,],[0,-1,-2,-13,-12,-14,-8,-3,-4,-5,-6,-7,-9,-10,-11,]),'COMMA':([2,3,6,7,8,14,15,18,19,20,21,22,23,24,25,26,27,],[9,-2,-13,-12,-14,-8,9,-3,-4,-5,-6,-7,-9,9,9,-10,-11,]),'RPAREN':([3,6,7,8,14,15,18,19,20,21,22,23,25,26,27,],[-2,-13,-12,-14,-8,23,-3,-4,-5,-6,-7,-9,27,-10,-11,]),'RBRACKET':([3,6,7,8,14,18,19,20,21,22,23,24,26,27,],[-2,-13,-12,-14,-8,-3,-4,-5,-6,-7,-9,26,-10,-11,]),'PLUS':([3,6,7,8,14,18,19,20,21,22,23,26,27,],[10,-13,-12,-14,-8,10,-4,-5,-6,-7,-9,-10,-11,]),'TIMES':([3,6,7,8,14,18,19,20,21,22,23,26,27,],[12,-13,-12,-14,-8,12,12,12,-6,-7,-9,-10,-11,]),'DIVIDE':([3,6,7,8,14,18,19,20,21,22,23,26,27,],[13,-13,-12,-14,-8,13,13,13,-6,-7,-9,-10,-11,]),'LBRACKET':([6,],[16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'top':([0,],[1,]),'expressions':([0,5,16,17,],[2,15,24,25,]),'expression':([0,4,5,9,10,11,12,13,16,17,],[3,14,3,18,19,20,21,22,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> top","S'",1,None,None,None),
  ('top -> expressions','top',1,'p_top','expression.py',67),
  ('expressions -> expression','expressions',1,'p_expressions_1','expression.py',71),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions_2','expression.py',75),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','expression.py',79),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','expression.py',80),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','expression.py',81),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','expression.py',82),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','expression.py',86),
  ('expression -> LPAREN expressions RPAREN','expression',3,'p_expression_group','expression.py',90),
  ('expression -> NAME LBRACKET expressions RBRACKET','expression',4,'p_expression_group','expression.py',91),
  ('expression -> NAME LPAREN expressions RPAREN','expression',4,'p_expression_group','expression.py',92),
  ('expression -> NUMBER','expression',1,'p_expression_number','expression.py',101),
  ('expression -> NAME','expression',1,'p_expression_name','expression.py',105),
  ('expression -> STRING','expression',1,'p_expression_string','expression.py',109),
]
