# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['docker_harbormaster']

package_data = \
{'': ['*']}

install_requires = \
['PyYAML>=5.4.1',
 'attrs>=21.2.0',
 'click-help-colors>=0.9.1',
 'click>=7.1.2',
 'docker-compose>=1.29.1']

entry_points = \
{'console_scripts': ['harbormaster = docker_harbormaster.cli:cli']}

setup_kwargs = {
    'name': 'docker-harbormaster',
    'version': '0.2.1',
    'description': 'A supervisor for docker-compose apps.',
    'long_description': 'Harbormaster\n============\n\n[![PyPI](https://img.shields.io/pypi/v/docker_harbormaster)](https://pypi.org/project/docker-harbormaster/)\n\nHarbormaster is a small utility that lets you easily deploy multiple\nDocker-Compose applications on a single host.\n\nIt does this by taking a list of git repository URLs that contain Docker\nCompose files and running the Compose apps they contain. It will also handle\nupdating/restarting the apps when the repositories change.\n\n\n## Rationale\n\nDo you have a home server you want to run a few apps on, but don\'t want everything to\nbreak every time you upgrade the OS? Do you want automatic updates but don\'t want to buy\nan extra 4 servers so you can run Kubernetes?\n\nDo you have a work server that you want to run a few small services on, but don\'t want\nto have to manually manage it? Do you find that having every deployment action be in\na git repo more tidy?\n\nHarbormaster is for you.\n\nAt its core, Harbormaster takes a YAML config file with a list of git repository URLs\ncontaining Docker Compose files, clones/pulls them, and starts the services they\ndescribe.\n\nYou run Harbormaster on a timer, pointing it to a directory, and it updates all the\nrepositories in its configuration, and restarts the Compose services if they have\nchanged. That\'s it!\n\nIt also cleanly stores data for all apps in a single `data/` directory, so you always\nhave one directory that holds all the state, which you can easily back up and restore.\n\n\n## Installation\n\nYou can run Harbormaster directly from Docker, without installing anything. Skip down to\nthe [Docker installation](#docker-installation) section.\n\nInstalling Harbormaster is simple. You can use `pipx` (recommended):\n\n```\n$ pipx install docker-harbormaster\n```\n\nOr `pip` (less recommended):\n\n```\n$ pip install docker-harbormaster\n```\n\nYou need to also make sure you have `git` installed on your system.\n\nYou can also download a standalone executable for Linux from the [pipelines\npage](https://gitlab.com/stavros/harbormaster/-/pipelines).\n\n\n## Docker installation\n\nYou can run Harbormaster by using just Docker. You need to follow a few simple steps to set\nup your configuration and SSH:\n\n* Your `harbormaster.yml` configuration file should be in a git repository. Check that\n  repository out into some directory, that we\'re going to call your "config" directory.\n* If you need an SSH key to pull the Harbormaster configuration file and the various\n  repositories, copy the private key into your config directory, to a file called\n  `ssh_private_key` (make sure it\'s not protected with a passphrase).\n* Make a directory for Harbormaster to work in somewhere. All your apps\' data is going\n  to reside in that directory.\n* Run the Harbormaster image:\n```bash\ndocker run -d \\\n    --restart unless-stopped \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v <the path to your config directory>:/config \\\n    -v <the path to your Harbormaster working directory>:/main \\\n    stavros/harbormaster\n```\n\nHarbormaster will now run every five minutes, pull your config repository (from whatever\nremote it has), and run the apps in the config.\n\nIf you want to run it immediately at some point, you can use the following command:\n\n```bash\n$ docker exec -i -t <container id> /usr/bin/run-harbormaster\n```\n\n\n## High-level architecture overview\n\nAt its core, Harbormaster works very simply: It takes a YAML file containing a list of\nrepositories, pulls/clones them as necessary, messes with their `docker-compose.yml`\nfiles in the way you specify, and tells Compose to start, stop, or restart them, as\nneeded.\n\nThat\'s all it does.\n\n\n## Usage\n\nHarbormaster uses a single YAML configuration file that\'s basically a list of\nrepositories containing `docker-compose.yml` files/apps to deploy:\n\n```yaml\nconfig:\n  # Prune *all unused* system images after a run. Good for saving space on the host.\n  # Careful, if you run this on a system with other Docker images, it will delete them.\n  prune: true\napps:\n  myapp:\n    # The git repository URL to clone.\n    url: https://github.com/someuser/somerepo.git\n    # Which branch to deploy.\n    branch: main\n    # The environment variables to run Compose with.\n    environment:\n      FOO: bar\n      MYVAR: 1\n    # A file to load environment variables from. The file must consist of lines\n    # in the form of key=value. The filename is relative to the Harbormaster\n    # config file (this file). This can also be a YAML file with the .yml extension,\n    # containing a single YAML collection of string values.\n    # Variables in the `environment` key above take precedence over variables\n    # in the file.\n    # Make sure all these variable names appear in the `environment` section of the\n    # app\'s `docker-compose.yml` file.\n    environment_file: "somefile.txt"\n  otherapp:\n    url: https://gitlab.com/otheruser/otherrepo.git\n    # The Compose config filename, if it\'s not docker-compose.yml, or if you\n    # want to use Harbormaster-specific overrides:\n    compose_config:\n      - docker-compose.yml\n      - docker-compose.harbormaster.yml\n    # A dictionary of replacements (see below).\n    replacements:\n      MYVOLUMENAME: volume\n    # A file containing replacements. Works in the exact same way as the\n    # `environment_file` above.\n    replacements_file: "otherfile.txt"\n    # A YAML environment file.\n    environment_file: "somefile.yml"\n  oldapp:\n    # This is an old app, so it shouldn\'t be run.\n    enabled: false\n    # Two apps can use the same repo.\n    url: https://gitlab.com/otheruser/otherrepo.git\n```\n\nThen, just execute `harbormaster run` in the same directory as that configuration file.\nHarbormaster will parse the file, automatically download the repositories\nmentioned in it (and keep them up to date).\n\nHarbormaster only ever writes to the working directory you specify, and nowhere\nelse. All the data for each Compose app is under `<workdir>/data/<appname>`, so\nyou can easily back up the entire data directory in one go.\n\n**WARNING:** Make sure the Compose config in each of the repos does not use the\n`container_name` directive, otherwise Harbormaster might not always be able to\nterminate your apps when necessary.\n\nIf you want to trigger Harbormaster via a webhook (perhaps whenever the config file\nrepository changes), you can use [Captain\nWebhook](https://captain-webhook.readthedocs.io/).\n\n\n## Testing\n\nWhen developing Harbormaster-compatible Compose files for our app, you usually need to\ntest them.  The naive way requires you to write a Harbormaster configuration file,\ncreate a repository for your app, commit the app\'s Compose file in it, and run\nHarbormaster with the configuration file to test.\n\nTo make this easier, Harbormaster includes the `harbormaster test` command, which will\ncreate a temporary directory for the data/cache/etc directories, and run the Compose\nfiles directly from your repository, without committing or writing a Harbormaster\nconfiguration file.\n\nRun `harbormaster test --help` to see the available options.\n\n\n## Recommended deployment\n\n**Note:** The Harbormaster Docker image mentioned in "Docker installation" is still\nrelatively new, but it\'s a very convenient way to deploy Harbormaster without installing\nanything. That may become the recommended way to deploy Harbormaster in the future.\n\nThe recommended way to run Harbormaster is on a timer. You can use systemd, with two\nfiles. Put the Harbormaster configuration YAML in a repository, and clone it somewhere.\nThen, use the two files to run Harbormaster in that repository.\n\n**/etc/systemd/system/harbormaster.service**:\n\n```toml\n[Unit]\nDescription=Run the Harbormaster updater\nWants=harbormaster.timer\n\n[Service]\nExecStart=/usr/local/bin/harbormaster run\nExecStartPre=/usr/bin/git pull\nWorkingDirectory=<the repository directory>\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**/etc/systemd/system/harbormaster.timer**:\n\n```toml\n[Unit]\nDescription=Run Harbormaster every few minutes.\nRequires=harbormaster.service\n\n[Timer]\nUnit=harbormaster.service\nOnUnitInactiveSec=5m\n\n[Install]\nWantedBy=timers.target\n```\n\nThen, run:\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable harbormaster\n\n# To run Harbormaster immediately:\nsudo service harbormaster start\n\n# To check the Harbormaster run logs:\nsudo journalctl -fu harbormaster\n```\n\nThis will run Harbormaster every five minutes, pulling your configuration repository\nbefore the run.\n\n\n## Recommended repository layout\n\nUsually, you will have one repository per app. However, for small apps, like ones that\nalready have a Docker container on the Docker Hub (and thus just need a Compose file),\nit might be more convenient to store the Compose file(s) in the same repository as the\nHarbormaster config, one branch per app.\n\nThat way, you can pull the Harbormaster configuration and all the app definitions in the\nsame way, from the same repository, and specify the branch to load the app from with the\n`branch` directive in the config.\n\n\n## Recommended secrets handling\n\nThe recommended way for handling secrets is to add plaintext files to\na `secrets/` subdirectory of the repository (e.g. `secrets/myservice.txt`) and use\n[git-crypt](https://github.com/AGWA/git-crypt) to encrypt them. That way, it\'s easy to\nadd more secrets to the repository, but also only authorized people and the deployment\nserver has access to the files.\n\n\n## Handling data directories\n\nDue to the way Compose files work, you need to do some extra work to properly\ntell Harbormaster about your volumes.\n\nHarbormaster provides two kinds of directories: Data and cache.\n\nData is anything that you want to keep. Data directories will never be deleted,\nif you remove an app later on, its corresponding data directory will be moved\nunder the `archives/` directory and renamed to `<appname>-<deletion date>`.\n\nCache is anything you don\'t care about. When you remove an app from the config,\nthe cache dir is deleted.\n\nHarbormaster will look for a file called `docker-compose.yml` at the root of the\nrepo, and look for some specific strings (you read more about this in the\n"replacements" section below).\n\nThe built-in strings to be replaced are:\n\n* `{{ HM_DATA_DIR }}` - The app\'s data that you want to persist. Will be stored in the\n  `data/` directory, under the main Harbormaster working directory.\n* `{{ HM_CACHE_DIR }}` - Any data you don\'t want to keep. Will be stored in the `cache/`\n  directory, under the main Harbormaster working directory.\n* `{{ HM_REPO_DIR }}` - The app\'s repository. Use this if you want to mount the app\'s\n  directory itself, for example to access some code that you don\'t want to copy into the\n  container.\n\nThey will be replaced with the proper directory names (without trailing\nslashes), so the `volumes` section of your Compose file in your repository\nshould look something like this:\n\n```yaml\nvolumes:\n  - {{ HM_DATA_DIR }}/my_data:/some_data_dir\n  - {{ HM_DATA_DIR }}/foo:/home/foo\n  - {{ HM_CACHE_DIR }}/my_cache:/some_cache_dir\n```\n\n\n### Replacements\n\nSometimes, the user needs to give access to paths that already exist on their\nsystem, or specify more parameters in the Dockerfile. This is where replacements\ncome in.\n\nReplacements are basically custom replacement strings (like the data directory\nstrings) that you can specify yourself.\n\nFor example, if the user needs to specify a directory with their media, you can\nask them to include a replacement called `MEDIA_DIR` in their Harbormaster\nconfig file, and then use the string `{{ HM_MEDIA_DIR }}` in your Compose file\nto mount the volume, like so:\n\n```yaml\nvolumes:\n  - {{ HM_MEDIA_DIR }}:/some_container_dir\n```\n\nHarbormaster will replace that string wherever in the file it finds it (not\njust the `volumes` section, and the user can specify it in their Harbormaster\nconfig like so:\n\n\n```yaml\nsomeapp:\n  url: https://gitlab.com/otheruser/otherrepo.git\n  replacements:\n    MEDIA_DIR: /media/my_media\n```\n\nKeep in mind that if the variable is called `VARNAME`, the string that will end\nup being replaced is `{{ HM_VARNAME }}`. If the variable is not found, it will\nnot be replaced or touched at all. This is to avoid messing with any unrelated\ntemplates in the Compose file.\n\nAlso, note that replacements will be written on disk, in the Compose config\nfile. If, for some reason, you want to avoid that (e.g. if you have secrets you\ndon\'t want exposed), try to use environment variables instead.\n\nOne experimental feature of replacements is the ability to specify defaults:\n\n```yaml\nservices:\n  app:\n    environment:\n      HTTP_PORT: {{ HM_PORT:80 }}\n      STACK: {{ HM_STACK:"production" }}\n```\n\nIf you don\'t specify the `PORT` variable in the Harbormaster config file, the\nreplacement will be replaced with `80`.\n\nThis feature is still experimental and may change.\n\n\n## Examples\n\nThis is an example of the configuration for a Harbormaster-compatible Compose\napp that adheres to some best practices.\n\nWe\'ll use two Compose files, mount volumes and pass secrets as environment\nvariables.\n\nThe `docker-compose.yml` file is pretty straighforward, doesn\'t mount any\nvolumes and uses an environment variable as a secret.\n\n`docker-compose.yml`:\n\n```yaml\nservices:\n  main:\n    command: ./myscript\n    image: myapp\n    build: .\n    stdin_open: true\n    tty: true\n    restart: unless-stopped\n    environment:\n      - SOME_SECRET\n```\n\nThe `docker-compose.harbormaster.yml` file is quite small, it overrides the\ncommand (so the script starts from the `/state` directory) and the volumes, so\nthe `/state` directory maps to the host\'s data directory.\n\n`docker-compose.harbormaster.yml`:\n\n```yaml\nservices:\n  main:\n    command: bash -c \'cd /state; /code/myscript\'\n    volumes:\n      - {{ HM_DATA_DIR }}:/state/\n```\n\nThe Harbormaster config file is very straightforward, it specifies a repo URL\nand the two Compose configuration files. The `docker-compose.yml` is specified\nfirst, and the Harbormaster override is second, so the command is overridden\nproperly.\n\n`harbormaster.yml`:\n\n```yaml\napps:\n  myapp:\n    url: https://github.com/myuser/myrepo.git\n    compose_config:\n      - docker-compose.yml\n      - docker-compose.harbormaster.yml\n```\n\nThis is a good way to add Harbormaster configuration files with very few lines\nof configuration. Keep in mind that you unfortunately cannot override volumes\nwith this technique, as Docker will complain that the volume has been specified\ntwice.\n\nIt\'s better to define a different volume and change your command to use that\ndirectory, as we\'ve done above.\n\n\n## Bundled apps\n\nHarbormaster includes some built-in apps in its repository, for your\nconvenience. Check out the [apps](apps) directory for the Compose files. You\ncan include them in your Harbormaster config directly, with no other\nconfiguration.\n\nHere\'s an example that includes the [Plex media server](https://www.plex.tv/) and\n[ZTNCUI](https://github.com/key-networks/ztncui):\n\n```yaml\napps:\n  plex:\n    url: https://gitlab.com/stavros/harbormaster.git\n    compose_config: apps/plex-bridge.yml\n    environment:\n      ADVERTISE_IP: "<the IP to advertise>"\n      TZ: "<your timezone, e.g. Europe/Athens>"\n      PLEX_CLAIM: "<your Plex claim code>"\n    replacements:\n      HOSTNAME: "<your hostname>"\n      MEDIA_DIR: "<your video directory on the host>"\n\n  ztncui:\n    url: https://gitlab.com/stavros/harbormaster.git\n    environment:\n      ZTNCUI_PASSWD: "<some password>"\n    compose_config: apps/ztncui/docker-compose.harbormaster.yml\n\n  octoprint:\n    url: https://gitlab.com/stavros/harbormaster.git\n    compose_config: apps/octoprint/docker-compose.harbormaster.yml\n```\n',
    'author': 'Stavros Korokithakis',
    'author_email': 'hi@stavros.io',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://gitlab.com/stavros/harbormaster',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
