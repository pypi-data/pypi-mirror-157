"""
    Abfallnavi API

    Termine für Leerung des Abfalls nach Abfallart (Papier, Restmüll, ...). Beispielswerte sind für das Rathaus Nürnberg (Hauptmarkt 18, Nürnberg).  # Kommunen / Regionen  Das System ist in diverse Regionen unterteilt. Zu einer `Region` gehören ein oder mehrere Kommunen.  * `aachen`: Aachen * `zew2`: AWA Entsorgungs GmbH * `aw-bgl2`: Bergisch Gladbach * `bav`: Bergischer Abfallwirtschaftverbund * `din`: Dinslaken * `dorsten`: Dorsten * `gt2`: Gütersloh * `hlv`: Halver * `coe`: Kreis Coesfeld * `krhs`: Kreis Heinsberg * `pi`: Kreis Pinneberg * `krwaf`: Kreis Warendorf * `lindlar`: Lindlar * `stl`: Lüdenscheid * `nds`: Norderstedt * `nuernberg`: Nürnberg * `roe`: Roetgen * `solingen`: Solingen * `wml2`: EGW Westmünsterland  # Benutzung  Für die Abfrage von Terminen ist eine Reihe von IDs (von Orten, Straßen und/oder Hausnummern) in Erfahrung zu bringen. Vorsicht:IDs können sich mit der Zeit ändern  1. Orte aus System holen 2. Mit Ort die Straßen abfragen 3. Mit Straße die Hausnummern abfragen 4. Mit Haunummer die möglichen Fraktionen (Müllsorten) abfragen 5. Mit Hausnummer und Fraktionen alle Termine abrufen  Manchmal wird nicht nach Hausnummer unterschieden   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.abfallnavi.api_client import ApiClient
from deutschland.abfallnavi.api_client import Endpoint as _Endpoint
from deutschland.abfallnavi.model.ort import Ort
from deutschland.abfallnavi.model.ort2 import Ort2
from deutschland.abfallnavi.model.strasse import Strasse
from deutschland.abfallnavi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class AbholpunkteApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.hausnummern_pro_strasse_endpoint = _Endpoint(
            settings={
                "response_type": (Strasse,),
                "auth": [],
                "endpoint_path": "/strassen/{strassenId}",
                "operation_id": "hausnummern_pro_strasse",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "strassen_id",
                ],
                "required": [
                    "strassen_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "strassen_id": (int,),
                },
                "attribute_map": {
                    "strassen_id": "strassenId",
                },
                "location_map": {
                    "strassen_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.ort_endpoint = _Endpoint(
            settings={
                "response_type": ([Ort2],),
                "auth": [],
                "endpoint_path": "/orte/{ortId}",
                "operation_id": "ort",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "ort_id",
                ],
                "required": [
                    "ort_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "ort_id": (int,),
                },
                "attribute_map": {
                    "ort_id": "ortId",
                },
                "location_map": {
                    "ort_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.orte_endpoint = _Endpoint(
            settings={
                "response_type": ([Ort],),
                "auth": [],
                "endpoint_path": "/orte",
                "operation_id": "orte",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.strassen_pro_ort_endpoint = _Endpoint(
            settings={
                "response_type": ([Strasse],),
                "auth": [],
                "endpoint_path": "/orte/{ortId}/strassen",
                "operation_id": "strassen_pro_ort",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "ort_id",
                ],
                "required": [
                    "ort_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "ort_id": (int,),
                },
                "attribute_map": {
                    "ort_id": "ortId",
                },
                "location_map": {
                    "ort_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def hausnummern_pro_strasse(self, strassen_id, **kwargs):
        """Hausnummern in Straße  # noqa: E501

        Hausnummern in Straße. Siehe id unter Pfad `/orte/{ortId}/strassen` für die strassenId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.hausnummern_pro_strasse(strassen_id, async_req=True)
        >>> result = thread.get()

        Args:
            strassen_id (int): Id der Straße

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Strasse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["strassen_id"] = strassen_id
        return self.hausnummern_pro_strasse_endpoint.call_with_http_info(**kwargs)

    def ort(self, ort_id, **kwargs):
        """Informationen zu Ort  # noqa: E501

        Informationen zu einem Ort  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ort(ort_id, async_req=True)
        >>> result = thread.get()

        Args:
            ort_id (int): Id des Ortes

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Ort2]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["ort_id"] = ort_id
        return self.ort_endpoint.call_with_http_info(**kwargs)

    def orte(self, **kwargs):
        """Orte im System  # noqa: E501

        Orte die von diesem API-Endpoint bedient werden.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.orte(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Ort]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.orte_endpoint.call_with_http_info(**kwargs)

    def strassen_pro_ort(self, ort_id, **kwargs):
        """Straßen im Ort  # noqa: E501

        Straßen im Ort. Siehe id unter Pfad `/orte` für die ortId.  **Warnung**: Die Antwort dieser Anfrage ist zu groß für Anzeige innerhalb der Webseite   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.strassen_pro_ort(ort_id, async_req=True)
        >>> result = thread.get()

        Args:
            ort_id (int): Id des Ortes

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Strasse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["ort_id"] = ort_id
        return self.strassen_pro_ort_endpoint.call_with_http_info(**kwargs)
