{"version":3,"sources":["GraphicSlider.tsx","index.tsx"],"names":["GraphicSlider","renderData","useRenderData","updateValues","values","index","nVals","Streamlit","setComponentValue","bgImg","args","defaults","base","theme","updateOn","classes","createUseStyles","wrapper","width","minHeight","height","backgroundImage","backgroundSize","zIndex","borderRadius","backgroundColor","display","flexDirection","justifyContent","alignItems","useStyles","className","defaultValue","thumbClassName","trackClassName","renderThumb","props","sliderState","v","valueNow","value","onChange","undefined","onAfterChange","pearling","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAuGeA,EA3FiB,WAC9B,IAAMC,EAAaC,0BAQbC,EAAe,SAACC,EAAkBC,GAEtC,IAAMC,EAAQ,CAACF,EAAO,GAAIA,EAAO,GAAKA,EAAO,GAAI,IAAMA,EAAO,IAC9DG,YAAUC,kBAAkBF,IAK1BG,EAAQR,EAAWS,KAAX,MACPD,IAEHA,EAAQ,CACN,oGACA,6EACA,kGAKJ,IAAME,EAAWV,EAAWS,KAAX,SAA8B,CAAC,GAAI,IAM9CE,EADYX,EAAVY,MACaD,MAAQ,QAGvBE,EAAWb,EAAWS,KAAX,UAA+B,MAmC1CK,EAjCYC,YAAgB,CAChCC,QAAS,CACPC,MAAO,OACP,uBAAwB,CACtBA,MAAO,OACPC,UAAW,QACX,WAAY,CACVC,OAAQ,OACRC,gBAAgB,QAAD,OAAUZ,EAAM,GAAhB,MACfa,eAAgB,QAChBC,OAAQ,EACRC,aAAc,OAEhB,aAAc,CACZH,gBAAgB,QAAD,OAAUZ,EAAM,GAAhB,MACfa,eAAgB,SAElB,aAAc,CACZD,gBAAgB,QAAD,OAAUZ,EAAM,GAAhB,MACfa,eAAgB,SAElB,WAAY,CACVJ,MAAO,OACPE,OAAQ,OACRK,gBAA0B,UAATb,EAAmB,QAAU,QAC9Cc,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,aAKJC,GAGhB,OACE,yBAAKC,UAAWhB,EAAQE,SACtB,kBAAC,IAAD,CACEc,UAAU,oBACVC,aAAc,CAACrB,EAAS,GAAIA,EAAS,GAAKA,EAAS,IACnDsB,eAAe,QACfC,eAAe,QACfC,YA/Ec,SAACC,EAAYC,GAE/B,IAAMC,EAA0B,IAAtBD,EAAYhC,MAAcgC,EAAYE,SAAWF,EAAYG,MAAM,GAAKH,EAAYG,MAAM,GACpG,OAAO,wBAASJ,EAAQE,EAAjB,MA6EHG,SAAqB,WAAX3B,EAAuBX,OAAeuC,EAChDC,cAA0B,QAAX7B,EAAmBX,OAAeuC,EACjDE,UAAQ,MC5FhBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,oBAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.50ae3759.chunk.js","sourcesContent":["import React from \"react\";\nimport { Streamlit } from \"streamlit-component-lib\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\n\nimport ReactSlider from 'react-slider';\nimport { createUseStyles } from \"react-jss\";\n//import './GraphicSlider.css'\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst GraphicSlider: React.FC = () => {\n  const renderData = useRenderData();\n\n  const renderThumb = (props: any, sliderState: {index: number, value: number[], valueNow: number}) => {\n    // switch the value\n    const v = sliderState.index === 0 ? sliderState.valueNow : sliderState.value[1] - sliderState.value[0];\n    return <div {...props}>{v}%</div>\n  }\n\n  const updateValues = (values: number[], index: number) => {\n    // calculate the values\n    const nVals = [values[0], values[1] - values[0], 100 - values[1]];\n    Streamlit.setComponentValue(nVals);\n  }\n\n\n  //const classes = useStyles();  \n  let bgImg = renderData.args['bgImg'];\n  if (!bgImg) {\n    // set defaults\n    bgImg = [\n      \"https://upload.wikimedia.org/wikipedia/commons/3/32/7824Grasslands_in_Santa_Cruz%2C_Laguna_10.jpg\",\n      \"https://upload.wikimedia.org/wikipedia/commons/7/7e/Reife_Weizenaehren.jpg\",\n      \"https://upload.wikimedia.org/wikipedia/commons/8/89/Trees_in_Prince_William_Park_Forest_2.jpg\"\n    ]\n  }\n\n  // calculate the default value\n  const defaults = renderData.args['default'] || [60, 20];\n\n  // Streamlit sends us a theme object via props that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const { theme } = renderData\n  const base  = theme!.base || 'light';\n\n  // get the updateOn handler\n  const updateOn = renderData.args['updateOn'] || 'end';\n\n  const useStyles = createUseStyles({\n    wrapper: {\n      width: '100%',\n      '& .horizontal-slider': {\n        width: '100%',\n        minHeight: '100px',\n        '& .track': {\n          height: '100%',\n          backgroundImage: `url(\"${bgImg[0]}\")`,\n          backgroundSize: 'cover',\n          zIndex: 0,\n          borderRadius: '5px'\n        },\n        '& .track-0': {\n          backgroundImage: `url(\"${bgImg[1]}\")`,\n          backgroundSize: 'cover'\n        },\n        '& .track-1': {\n          backgroundImage: `url(\"${bgImg[2]}\")`,\n          backgroundSize: 'cover',\n        },\n        '& .thumb': {\n          width: '33px',\n          height: '100%',\n          backgroundColor: base === 'light' ? 'white' : 'black',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      }\n    }\n  })\n  const classes = useStyles();\n\n\n  return (\n    <div className={classes.wrapper}>\n      <ReactSlider\n        className=\"horizontal-slider\"\n        defaultValue={[defaults[0], defaults[0] + defaults[1]]}\n        thumbClassName=\"thumb\"\n        trackClassName=\"track\"\n        renderThumb={renderThumb}\n        onChange={updateOn==='change' ?  updateValues : undefined}\n        onAfterChange={updateOn==='end' ? updateValues : undefined}\n        pearling\n      />\n    </div>\n  )\n}\n\nexport default GraphicSlider\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\";\nimport GraphicSlider from \"./GraphicSlider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <GraphicSlider />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}