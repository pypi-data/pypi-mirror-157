{"version":3,"sources":["CustomDataframe.tsx","index.tsx"],"names":["Table","state","checks","range","props","element","dataRows","map","index","content","getCell","evaluationColumn","formatedContent","Number","result","filename","returnClicked","i","length","String","smilesColumn","push","setState","date","Date","toISOString","split","toLocaleTimeString","replace","getMilliseconds","addClick","row","checked","render","table","hasHeader","headerRows","hasData","caption","width","height","size","overflow","style","isHeader","clickFunction","colSpan","columns","className","data","enclosingCharacter","React","PureComponent","TableRows","rows","startRow","endRow","tableRows","rowIndex","key","TableRow","passRow","e","target","id","cells","columnIndex","formattedContent","type","toString","scope","indexOf","dangerouslySetInnerHTML","__html","Error","Evaluation","style1","backgroundColor","color","border","name1","style2","name2","style3","name3","click","button1","document","getElementsByName","button2","button3","setOnClicked","setOnNotClicked","button","background","onClick","name","withStreamlitConnection","useEffect","Streamlit","setFrameHeight","args","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4975f502.chunk.js","sourcesContent":["import { range } from \"lodash\"\nimport React, { Fragment, ReactNode, useEffect } from \"react\"\nimport {\n  ArrowTable,\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { CSVLink, CSVDownload } from \"react-csv\"\n\n//the props of the Table class\ninterface TableProps {\n  element: ArrowTable,\n  evaluationColumn: number,\n  smilesColumn: number,\n  width: number,\n  height: number\n}\n\n//the type of the state\ntype MyState = {\n  checks: number[];\n  result: (string|number)[][];\n  filename: string;\n}\n\nclass Table extends React.PureComponent<TableProps> {\n  \n\n  state: MyState = {\n    //an array with the length of the number of data Rows is created\n    checks: range(0, this.props.element.dataRows).map((index) => {\n      //with a map function the array is filled with the booleans of the checkbox column\n      var content = this.props.element.getCell(index + 1, this.props.evaluationColumn + 1).content\n      var formatedContent = 0\n      if (content != null)\n        formatedContent = Number(content)\n      return formatedContent\n    }),\n    result: [[]],\n    filename: \"empty-rating.csv\"\n  }\n  public returnClicked = (): void => {\n    //Streamlit.setComponentValue(this.state.checks)\n    let result: (string|number)[][] = [['Row', 'Smiles', 'Rating']]\n    for (let i = 0; i < this.state.checks.length; i++) {\n      if (this.state.checks[i] != 0) {\n        let element: (string|number)[]  = [i]\n        const content = String(this.props.element.getCell(i + 1, this.props.smilesColumn+1).content)\n        element.push(content)\n        element.push(this.state.checks[i])\n        result.push(element)\n      }\n      \n    }\n    this.setState({result: result})\n\n    let date = new Date()\n    const myDate = date.toISOString().split('T')[0]\n    const myTime = date.toLocaleTimeString().replace(':','-').replace(':','-')\n    const filename = 'smiles_rating_'+myDate+'_'+myTime+'-'+date.getMilliseconds()+'.csv'\n    \n    this.setState({filename: filename})\n  }\n\n\n  public addClick = (row: number, checked: number): void => {\n    //the checks array is updated with the value of the clicked checkbox\n    this.state.checks[row - 1] = checked\n    this.returnClicked()\n  }\n\n\n\n  public render = (): ReactNode => {\n    const table = this.props.element //the arrow table\n    const hasHeader = table.headerRows > 0 //if there are over 0 headerRows the table has a header\n    const hasData = table.dataRows > 0 //if there are over 0 dataRows the table has data\n    const caption = table.caption ? <caption>{table.caption}</caption> : null\n\n    // the width and height that is passed through the props\n    const width = this.props.width + 'px'\n    const height = this.props.height + 'px'\n\n    let size = {}\n    if (this.props.width < 0) {\n      size = { height: height, overflow: 'scroll' }\n    }\n    else {\n      size = { height: height, width: width, overflow: 'scroll' }\n    }\n\n    return (\n\n      <html>\n        <body>\n          <div style={size} >\n            <table >\n              {caption}\n              {hasHeader && (\n                <thead>\n                  <TableRows isHeader={true} table={table} clickFunction={this.addClick} evaluationColumn={this.props.evaluationColumn + 1}\n                /*the addClick function is passed down so that lower classes can call it and it is executed here*/ />\n                </thead>\n              )}\n              <tbody>\n                {hasData ? (\n                  <TableRows isHeader={false} table={table} clickFunction={this.addClick} evaluationColumn={this.props.evaluationColumn + 1} />\n                ) : (\n                  <tr>\n                    <td colSpan={table.columns || 1}>empty</td>\n                  </tr>\n                )}\n              </tbody>\n            </table >\n          </div>\n          <CSVLink  className='myButton' data={this.state.result} enclosingCharacter={``} filename={this.state.filename}>Download Rating</CSVLink>\n        </body>\n      </html>\n    )\n  }\n\n}\n\n/**\n * Purely functional component returning a list of rows.\n *\n * isHeader     - Whether to display the header.\n * table        - The table to display.\n */\n\ninterface TableRowsProps {\n  isHeader: boolean\n  table: ArrowTable\n  clickFunction: any\n  evaluationColumn: number\n}\n\nconst TableRows: React.SFC<TableRowsProps> = (props) => {\n  const { isHeader, table } = props //the props deconstructed into isHeader and table\n  const { headerRows, rows } = table //the table deconstructed into headerRows and normal rows\n\n  //if the rows are header rows this elements uses the rows from 0 to the number of header rows\n  //if the rows are not header rows the rows from the number of header rows to the number of rows are used\n  const startRow = isHeader ? 0 : headerRows\n  const endRow = isHeader ? headerRows : rows\n\n  //an array is created from start to endRow and it is used to map over each row\n  const tableRows = range(startRow, endRow).map((rowIndex) => (\n    <tr key={rowIndex}>\n      <TableRow rowIndex={rowIndex} table={table} clickFunction={props.clickFunction} evaluationColumn={props.evaluationColumn} />\n    </tr>\n  ))\n\n  return <Fragment>{tableRows}</Fragment>\n}\n\n/**\n * Purely functional component returning a list entries for a row.\n *\n * rowIndex - The row index.\n * table    - The table to display.\n */\n\ninterface TableRowProps {\n  rowIndex: number\n  table: ArrowTable\n  clickFunction: any\n  evaluationColumn: number\n}\n\nconst TableRow: React.SFC<TableRowProps> = (props) => {\n  const { rowIndex, table } = props\n  const { columns } = table\n\n  //the function that was passed down from the table class is called with the row index and if the checkbox was checked\n  const passRow = (e: any) => {\n    props.clickFunction(rowIndex, Number(e.target.id))\n  }\n\n  // an array from 0 to the number of columns is created and used as a column index with map\n  const cells = range(0, columns).map((columnIndex) => {\n    //content is the data and type can either be blank, index, data or columns (titles)\n    const { content, type } = table.getCell(rowIndex, columnIndex)\n\n    //the content is formated so that it can be diplayed\n    let formattedContent\n    if (content != null) {\n      formattedContent = content.toString()\n    } else {\n      formattedContent = \"\"\n    }\n\n\n    const id = rowIndex + '-' + columnIndex\n    const checkboxID = 'checkbox_' + id\n\n    switch (type) {\n      case \"blank\": {\n        return <th key={id} />\n      }\n      case \"index\": {\n        return (\n          <th key={id} scope=\"row\" >\n            {formattedContent}\n          </th>\n        )\n      }\n      case \"columns\": {\n        return (\n          <th key={id} scope=\"col\" id={id}>\n            {formattedContent}\n          </th>\n        )\n      }\n      case \"data\": {\n        //if the content does not contain a html image\n        if (formattedContent.indexOf('<img src=') === -1) {\n          //either return a checked or unchecked checkbox depending on the data\n          if (columnIndex === props.evaluationColumn) {\n            return (\n              <td id={id} key={id} >\n                <Evaluation row={rowIndex} formattedContent={formattedContent} passRow={passRow} /></td>\n            )\n          }\n          //if there is no checkbox just diplay the content\n          return (\n            <td key={id} id={id}>\n              {formattedContent}\n            </td>\n          )\n        } else {\n          //display the content as HTML\n          return (\n            <td key={id} id={id}>\n              <div dangerouslySetInnerHTML={{ __html: formattedContent }} />\n            </td>\n          )\n        }\n      }\n      default: {\n        throw new Error(`Cannot parse type \"${type}\".`)\n      }\n    }\n  })\n\n  return <Fragment>{cells}</Fragment>\n}\n\ninterface EvaluationProps {\n  row: number,\n  formattedContent: string,\n  passRow: any\n}\n\nconst Evaluation: React.SFC<EvaluationProps> = (props) => {\n\n  let style1 = { backgroundColor: 'red', color: 'black', border: '2px solid black' }\n  let name1 = props.row + \"_1\"\n  let style2 = { backgroundColor: 'yellow', color: 'black', border: '2px solid black' }\n  let name2 = props.row + \"_2\"\n  let style3 = { backgroundColor: 'green', color: 'black', border: '2px solid black' }\n  let name3 = props.row + \"_3\"\n\n  if (props.formattedContent == '1')\n    style1 = { backgroundColor: 'black', color: 'white', border: '2px solid red' }\n  else if (props.formattedContent == '2')\n    style2 = { backgroundColor: 'black', color: 'white', border: '2px solid yellow' }\n  else if (props.formattedContent == '3')\n    style3 = { backgroundColor: 'black', color: 'white', border: '2px solid green' }\n\n  const click = (e: any) => {\n    props.passRow(e)\n    let button1 = document.getElementsByName(name1)[0]\n    let button2 = document.getElementsByName(name2)[0]\n    let button3 = document.getElementsByName(name3)[0]\n    if (button1 != null) {\n      if (e.target.id == '1') {\n        setOnClicked(button1)\n        setOnNotClicked(button2)\n        setOnNotClicked(button3)\n      } else if (e.target.id == '2') {\n        setOnClicked(button2)\n        setOnNotClicked(button1)\n        setOnNotClicked(button3)\n      } else {\n        setOnClicked(button3)\n        setOnNotClicked(button2)\n        setOnNotClicked(button1)\n      }\n    }\n\n  }\n\n  const setOnClicked = (button: any) => {\n    button.style.border = \"2px solid \" + button.style.backgroundColor\n    button.style.background = 'black'\n    button.style.color = 'white'\n  }\n  const setOnNotClicked = (button: any) => {\n    if (button.id == '1')\n      button.style.background = 'red'\n    else if (button.id == '2')\n      button.style.background = 'yellow'\n    else\n      button.style.background = 'green'\n    button.style.border = \"2px solid black\"\n    button.style.color = 'black'\n  }\n\n  return <body>\n    <button onClick={click} name={name1} id='1' style={style1}>1</button>\n    <button onClick={click} name={name2} id='2' style={style2}>2</button>\n    <button onClick={click} name={name3} id='3' style={style3}>3</button>\n  </body>\n}\n\n\n/**\n * Dataframe example using Apache Arrow.\n */\nconst CustomDataframe: React.FC<ComponentProps> = (props) => {\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  })\n\n  return <Table element={props.args.data} evaluationColumn={props.args.evaluationColumn} smilesColumn={props.args.smilesColumn} width={props.args.width} height={props.args.height} />\n}\n\nexport default withStreamlitConnection(CustomDataframe)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomDataframe from \"./CustomDataframe\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomDataframe />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}