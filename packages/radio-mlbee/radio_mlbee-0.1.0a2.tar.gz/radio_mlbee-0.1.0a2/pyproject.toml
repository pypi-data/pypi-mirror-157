[tool.poetry]
name = "radio_mlbee"
version = "0.1.0-alpha.2"
description = "mlbee via gradio"
authors = ["ffreemt"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ffreemt/radio-mlbee"

[tool.poetry.dependencies]
python = "^3.8.3"
logzero = "^1.7.0"
set-loglevel = "^0.1.2"
icecream = "^2.1.1"
install = "^1.3.5"
#torch = [
#  {url = "https://download.pytorch.org/whl/cpu/torch-1.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl", markers = "sys_platform == 'linux'"},
#  {url = "https://download.pytorch.org/whl/cpu/torch-1.11.0%2Bcpu-cp38-cp38-win_amd64.whl", markers = "sys_platform == 'win32'"}
#]
sentence-transformers = "^2.2.0"
hf-model-s-cpu = "^0.1.1"
gradio = "^3.0.15"
aset2pairs = "^0.1.0"
cmat2aset = "^0.1.0-alpha.7"
more-itertools = "^8.13.0"
cchardet = "^2.1.7"
typer = "^0.4.1"
seg-text = "^0.1.2"
joblib = "^1.1.0"

[tool.poe.executor]
type = "poetry"

[tool.poe.tasks]
memo = "echo poe test or poetry run poe test"
test = "pytest tests"
pyright = "pyright radio_mlbee"
flake8 = "flake8 radio_mlbee --ignore F401,E501,F841"
check = ["pyright", "flake8"]
export = "poetry export --without-hashes -f requirements.txt -o requirements.txt"
build = "poetry build"
publish = "poetry publish"
release = ["test", "build", "publish"]
lint = { cmd = "pylint radio_mlbee" }
isort = "isort tests radio_mlbee"
black = "black tests radio_mlbee"
formt = ["isort", "black"]
docstyle = "pydocstyle --convention=google tests radio_mlbee"
prerelease = {cmd = "poetry version prerelease && sync-version"}
tunnel = {cmd = "ssh -CN ip_or_hostname_defined_in_hosts -L 9091:127.0.0.1:9091"}

[tool.poetry.dev-dependencies]
pytest = "^7.1"
flake8 = "^3.9.2"
pydocstyle = "^6.1.1"
toml = "^0.10.2"
# tbump = "^6.3.2"
poethepoet = "^0.10.0"

[tool.poetry.scripts]
"radio-mlbee" = "radio_mlbee.__main__:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-modules"
log_cli = true
testpaths = [
    "tests",
    # "integration",
]

[tool.black]
skip-string-normalization = 0

[tool.isort]
profile = "black"
multi_line_output = 3
