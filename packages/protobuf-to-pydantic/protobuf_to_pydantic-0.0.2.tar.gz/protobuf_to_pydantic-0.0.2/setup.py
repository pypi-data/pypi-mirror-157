# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['protobuf_to_pydantic', 'protobuf_to_pydantic.contrib']

package_data = \
{'': ['*']}

install_requires = \
['grpcio-tools>=1.47.0,<2.0.0', 'pydantic>=1.7.3,<2.0.0']

setup_kwargs = {
    'name': 'protobuf-to-pydantic',
    'version': '0.0.2',
    'description': 'Convert Protobuf-generated Python objects to Pydantic.BaseModel objects with parameter checksum',
    'long_description': '# protobuf_to_pydantic\nConvert the `Python` Message object generated by the Protobuf file to a `pydantic.BaseModel` object with parameter validation.\n\n> NOTE: Only support proto3\n\n# 1.Installation\n```bash\npip install protobuf_to_pydantic\n```\n\n# 2.Use\n## 2.1.Transform objects at runtime\n`protobuf_to_pydantic` can generate the corresponding `pydantic.BaseModel` object from the `Message` object at runtime.\n\nFor example, the `UserMessage` in the following Protobuf file:\n```protobuf\nsyntax = "proto3";\npackage user;\n\nenum SexType {\n  man = 0;\n  women = 1;\n}\n\nmessage UserMessage {\n  string uid=1;\n  int32 age=2;\n  float height=3;\n  SexType sex=4;\n  bool is_adult=5;\n  string user_name=6;\n}\n```\n`protobuf_to_pydantic` can read the generated Message object at runtime and convert it to the corresponding `pydantic.BaseModel` object:\n```Python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.python_example_proto_code.example_proto.demo import demo_pb2\n\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(demo_pb2.UserMessage)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n\n# output\n# {\n#   \'uid\': FieldInfo(default=\'\', extra={}),\n#   \'age\': FieldInfo(default=0, extra={}),\n#   \'height\': FieldInfo(default=0.0, extra={}),\n#   \'sex\': FieldInfo(default=0, extra={}),\n#   \'is_adult\': FieldInfo(default=False, extra={}),\n#   \'user_name\': FieldInfo(default=\'\', extra={})\n#  }\n```\n## 2.2.PARAMETER VERIFICATION\nThe `Message` object generated according to the protobuf file only carries a small amount of information.\nThere is not enough information to make the generated `pydantic.BaseModel` have more detailed parameter verification functions, and some additional ways are needed to improve the data of the `Message` object.\n\nAt present, `protobuf_to_pydantic` supports multiple ways to obtain other information of Message, so that the generated `pydantic.BaseModel` object has the function of parameter verification.\n\n### 2.2.1.TEXT COMMENT\nUsers can write comments that meet the requirements of `protobuf_to_pydantic` for each field in the protobuf file to provide parameter verification information for `protobuf_to_pydantic`, such as the following example\n```protobuf\nsyntax = "proto3";\npackage user;\n\nenum SexType {\n  man = 0;\n  women = 1;\n}\n\n// user info\nmessage UserMessage {\n  // p2p: {"miss_default": true, "example": "10086"}\n  // p2p: {"title": "UID"}\n  string uid=1; // p2p: {"description": "user union id"}\n  // p2p: {"example": 18, "title": "use age", "ge": 0}\n  int32 age=2;\n  // p2p: {"ge": 0, "le": 2.5}\n  float height=3;\n  SexType sex=4;\n  bool is_adult=5;\n  // p2p: {"description": "user name"}\n  // p2p: {"default": "", "min_length": 1, "max_length": "10", "example": "so1n"}\n  string user_name=6;\n}\n```\nIn this example, every comment that can be used by `protobuf_to_pydantic` starts with `p2p:` and is followed by a full Json string. If you are familiar with the usage of `pydantic`, you can find This Json string contains the verification information of the corresponding field,\nFor example, the uid in `User Message` comes with the following 4 pieces of information:\n- miss_default: Indicates that the generated field does not have a default value\n- example: An example value representing the generated field is 10086\n- title: Indicates that the name of the field is UID\n- description: The documentation that represents the field is described as `user union id`\n\n> Note:\n>   - 1.Currently only supports single-line comments and comments must be a complete Json data (no line breaks)。\n>   - 2.multi line comments are not supported。\n\nWhen these annotations are written, `protobuf_to_pydantic` will bring the corresponding information for each field when converting the Message into the corresponding `Pydantic.BaseModel` object, as follows:\n```python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.python_example_proto_code.example_proto.demo import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(demo_pb2.UserMessage, parse_msg_desc_method=demo_pb2)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n# output\n# {\n#   \'uid\': FieldInfo(default=PydanticUndefined, title=\'UID\', description=\'user union id\', extra={\'example\': \'10086\'}),\n#   \'age\': FieldInfo(default=0, title=\'use age\', ge=0, extra={\'example\': 18}),\n#   \'height\': FieldInfo(default=0.0, ge=0, le=2, extra={}),\n#   \'sex\': FieldInfo(default=0, extra={}),\n#   \'is_adult\': FieldInfo(default=False, extra={}),\n#   \'user_name\': FieldInfo(default=\'\', description=\'user name\', min_length=1, max_length=10, extra={\'example\': \'so1n\'})\n# }\n```\n\n#### 2.2.1.1.By pyi file\n由于`Python.grpc_tools`把protobuf文件转为`Python`代码时并不会把Message的注释带到生成的`Python`代码中，所以上面的示例会把Message对象所属的模块传入`parse_msg_desc_method`中，\n使得`protobuf_to_pydantic`可以通过读取Message对应的pyi文件的注释来获取Message对象的附加信息。\n\nSince `Python.grpc_tools` converts the protobuf file to `Python` code, it does not bring the message\'s comments to the generated `Python` code,\nso the above example will pass the module to which the Message object belongs to `parse_msg_desc_method` ,\nso that `protobuf_to_pydantic` can obtain additional information of the Message object by reading the comments of the pyi file corresponding to the Message.\n\n> Note: This function requires the [mypy-protobuf](https:github.comnipunn 1313 mypy-protobuf) plugin when generating the corresponding `Python` code from the Protobuf file, and the specified output path of the pyi file is the same as the generated `Python` code path to take effect when\n\n#### 2.2.1.1.By Protobuf file\n\n> NOTE: Need to install lark library in advance\n\nIf the original Protobuf file that generates the Message exists in the project, you can set the value of `parse_msg_desc_method` to the root directory path specified when the Message is generated.\nIn this way, `protobuf_to_pydantic` can obtain the protobuf file path of the Message object through the path specified when Protobuf generates the corresponding `Python` object, and then obtain the accompanying information of the Message by parsing the comments of the protobuf file.\n\nFor example, the project structure of `protobuf to pydantic` is as follows:\n```bash\n./protobuf_to_pydantic/\n├── example/\n│ ├── python_example_proto_code/\n│ └── example_proto/\n├── protobuf_to_pydantic/\n└── /\n```\n其中protobuf文件存放在`example/example_proto`文件中，然后在`example`目录下通过如下命令生成protobuf对应的`Python`代码文件:\nThe protobuf file is stored in the `example/example_proto` file, and then the `Python` code file corresponding to protobuf is generated by the following command in the `example` directory:\n```bash\ncd example\n\npython -m grpc_tools.protoc\n  --python_out=./python_example_proto_code \\\n  --grpc_python_out=./python_example_proto_code \\\n  -I. \\\n```\nThen the path that needs to be filled in at this time is`./protobuf_to_pydantic/example`。\n```python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.python_example_proto_code.example_proto.demo import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(\n    demo_pb2.UserMessage, parse_msg_desc_method="./protobuf_to_pydantic/example"\n)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n# output\n# {\n#   \'uid\': FieldInfo(default=PydanticUndefined, title=\'UID\', description=\'user union id\', extra={\'example\': \'10086\'}),\n#   \'age\': FieldInfo(default=0, title=\'use age\', ge=0, extra={\'example\': 18}),\n#   \'height\': FieldInfo(default=0.0, ge=0, le=2, extra={}),\n#   \'sex\': FieldInfo(default=0, extra={}),\n#   \'is_adult\': FieldInfo(default=False, extra={}),\n#   \'user_name\': FieldInfo(default=\'\', description=\'user name\', min_length=1, max_length=10, extra={\'example\': \'so1n\'})\n# }\n```\n\n### 2.2.2.Protobuf Field Option(PGV)\n\n> Note in development...\n\nThis is the most recommended way, which refers to the [protoc-gen-validate](https://github.com/envoyproxy/protoc-gen-validate) project, and most Protobuf file APIs refer to [protoc-gen-validate](https:github. comenvoyproxyprotoc-gen-validate) project\n\n### 2.2.3.Other parameter support\nIn addition to the parameters of `FieldInfo`, `protobuf_to_pydantic` also supports the following parameters:\n- miss_default：By default, the default values generated for each field in the `pydantic.BaseModel` object are the same as the default values for each field in the Message. However, you can cancel the default value setting by setting `miss_default` to `true`. It should be noted that in the case of setting `miss_default` to `true`, the `default` parameter will be invalid.\n- enable: By default, `pydantic.BaseModel` will convert every field in the Message. If some fields do not want to be converted, you can set `enable` to `false`\n- type: Expand the current type, such as the following bank card number:\n  ```protobuf\n  message UserPayMessage {\n    string bank_number=1; // p2p: {"type": "p2p@import|PaymentCardNumber|pydantic.types"}\n  }\n  ```\n\n> Note See the parameters supported by `FieldInfo`:https://pydantic-docs.helpmanual.io/usage/types/#constrained-types\n\n### 2.2.4.Template\nIn some cases, the value we fill in is a method or function of a library, such as the value of the `type` parameter and the `default factory` parameter, but Json does not support it. In this case, template parameters can be used。\nCurrently `protobuf to pydantic` supports two template parameters, the first one is `p 2 p@import`, the usage is as follows：\n```protobuf\n  message UserPayMessage {\n    string bank_number=1; // p2p: {"type": "p2p@import|PaymentCardNumber|pydantic.types"}\n  }\n```\nThe comments here use the syntax of the `{p2p method}|{class to be imported or:A}|{class module:B}` format, where the method `p2p@import` at the beginning indicates that this needs to be passed ` from B import A` introduces an object，\nBy commenting, `protobuf to pydantic` will convert the corresponding Message to the following `pydantic.Base Model`:\n```python\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n# p2p@import|PaymentCardNumber|pydantic.types\nfrom pydantic.types import PaymentCardNumber\n\nclass UserPayMessage(BaseModel):\n    bank_number: PaymentCardNumber = FieldInfo(default="", extra={})\n```\n\nThe second method is `p2p@local`, which uses the syntax of `{p2p method}|{local variable to be used}` format, as follows：\n```protobuf\nmessage UserPayMessage {\n  google.protobuf.Timestamp exp=1; // p2p: {"default_factory": "p2p@local|exp_time"}\n}\n```\nThen register the corresponding value through the parameter `local_dict` when calling the `msg_to_pydantic_model` method, as follows：\n```Python\ndef exp_time() -> float:\n  return time.time()\n\nmsg_to_pydantic_model(\n    demo_pb2.NestedMessage,\n    parse_msg_desc_method="/home/so1n/github/protobuf_to_pydantic/example",\n    local_dict={"exp_time": exp_time},  # <----\n)\n```\nIn this way, `protobuf to pydantic` can generate a `pydantic.Base Model` that meets the requirements：\n```python\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n\nfrom example.simple_gen_code import exp_time\n\nclass UserPayMessage(BaseModel):\n    exp: str = FieldInfo(default_factory=exp_time, extra={})\n```\n\n> Note: See the sample code for specific invocation and generation methods.\n\n## 2.3.Generate the corresponding Python code\nIn addition to generating corresponding `pydantic.BaseModel` objects at runtime, `protobuf_to_pydantic` supports converting runtime `pydantic.BaseModel` objects to `Python` code literals (only for `pydantic.BaseModel` object).\n\nAmong them, `protobuf_to_pydantic.pydantic_model_to_py_code` is used to generate code text, `protobuf_to_pydantic.pydantic_model_to_py_file` is used to generate code file, the example of `protobuf_to_pydantic.pydantic_model_to_py_file` is as follows :\n```Python\nfrom protobuf_to_pydantic import msg_to_pydantic_model, pydantic_model_to_py_file\n\n# import protobuf gen python obj\nfrom example.python_example_proto_code.example_proto.demo import demo_pb2\n\n# gen code: url: https://github.com/so1n/protobuf_to_pydantic/blob/master/example/demo_gen_code.py\npydantic_model_to_py_file(\n    "./demo_gen_code.py",\n    msg_to_pydantic_model(demo_pb2.NestedMessage),\n)\n\n# gen code: url: https://github.com/so1n/protobuf_to_pydantic/blob/master/example/demo_gen_code_by_pyi.py\npydantic_model_to_py_file(\n    "./demo_gen_code_by_pyi.py",\n    msg_to_pydantic_model(demo_pb2.NestedMessage, parse_msg_desc_method=demo_pb2),\n)\n\n# gen code: url: https://github.com/so1n/protobuf_to_pydantic/blob/master/example/demo_gen_code_by_protobuf_field.py\npydantic_model_to_py_file(\n    "./demo_gen_code_by_protobuf_field.py",\n    msg_to_pydantic_model(\n        demo_pb2.NestedMessage, parse_msg_desc_method="/home/so1n/github/protobuf_to_pydantic/example"\n    ),\n)\n```\nThe specific generated code can be viewed through the corresponding url. It should be noted that if `protobuf_to_pydantic` checks that the current environment has `isort` and `autoflake` installed, the code will be formatted by them by default.\n',
    'author': 'So1n',
    'author_email': 'so1n897046026@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/so1n/protobuf_to_pydantic',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
