[tool.poetry]
name = "protobuf_to_pydantic"
version = "0.0.1"
description = "Convert Protobuf-generated Python objects to Pydantic.BaseModel objects with parameter checksum"
authors = ["So1n <so1n897046026@gmail.com>"]
license = "Apache Software License"
readme = "./README.md"
repository = "https://github.com/so1n/protobuf_to_pydantic"
homepage = "https://github.com/so1n/protobuf_to_pydantic"

[tool.poetry.dependencies]
python = "^3.7"
pydantic = "^1.7.3"
grpcio-tools = "^1.47.0"
lark = { version = "^1.1.2", optional = true }

[tool.poetry.dev-dependencies]
black = "20.8b1"
mypy = "0.790"
pytest = "6.1.2"
isort = "5.6.4"
coverage = "5.5"
pre-commit = "2.14.0"
autoflake = "1.4"
flake8 = "3.9.2"
mypy-protobuf = "^3.2.0"

[tool.black]
line-length = 120
target-version = ['py37']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.pytest]
testpaths = "tests"

[tool.coverage.run]
branch = true
source = ["protobuf_to_pydantic"]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "continue",

    # type hints
    "if TYPE_CHECKING:",
    "pass",
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
