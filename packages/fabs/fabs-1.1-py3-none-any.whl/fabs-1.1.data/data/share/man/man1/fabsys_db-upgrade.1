.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FABSYS_DB-UPGRADE 1"
.TH FABSYS_DB-UPGRADE 1 "2022-06-13" "FABS" "FABS Command Reference"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
fabsys_db\-upgrade \- Upgrade the SQL database for FABS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfabsys db-upgrade\fR [\fB\-\-sql\fR | \fB\-\-exec\fR] [\fB\-\-use\-builtin\fR=\fIwhen\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBfabsys db-upgrade\fR command helps with upgrading the \s-1SQL\s0 database that is
used by \s-1FABS.\s0 As \s-1FABS\s0 is updated with new versions and gains features, from
time to time the database format needs to change. Since changing the database
format may prevent tools from older \s-1FABS\s0 releases from reading the database,
upgrades between database formats are not done automatically. Instead you must
explicitly perform database upgrades by using \fBfabsys db-upgrade\fR.
.PP
Without additional arguments, \fBfabsys db-upgrade\fR will just tell you whether
you need to upgrade the database format. For example, if you need to perform a
database upgrade, you may see:
.PP
.Vb 1
\&    # fabsys db\-upgrade
\&
\&    Database MUST be upgraded (version 3 \-> 4)
\&
\&    See the documentation for the \-\-exec and \-\-sql options to perform the upgrade.
\&    Please make a backup copy of the database before upgrading!
.Ve
.PP
Or if the database format is already at the latest version:
.PP
.Vb 1
\&    # fabsys db\-upgrade
\&
\&    Database already at latest version 4
.Ve
.PP
To actually perform the upgrade, you can use the \fB\-\-exec\fR or \fB\-\-sql\fR options,
similar to \f(CW\*(C`fabsys_db\-init(1)\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-sql\fR" 4
.IX Item "--sql"
With this option, \fBfabsys db-upgrade\fR will print out the \s-1SQL\s0 to run to perform
the upgrade. This can be useful if \s-1FABS\s0 itself does not have the rights needed
to perform administrative operations like \s-1ALTER TABLE\s0 statements itself.
.IP "\fB\-\-exec\fR" 4
.IX Item "--exec"
With this option, \fBfabsys db-upgrade\fR will run the relevant \s-1SQL\s0 itself to
perform the upgrade. To do this, \s-1FABS\s0 must have enough rights in the database
to be able to issue statements such as \s-1ALTER TABLE.\s0 The db connection
information is specified in the \fBdb/url\fR configuration directive, described in
\&\f(CWfabsys_config(1)\fR.
.IP "\fB\-\-use\-builtin\fR=\fIwhen\fR" 4
.IX Item "--use-builtin=when"
This option indicates whether \fBfabsys db-upgrade\fR should use its builtin
hard-coded logic to perform the upgrade, or dynamically calculate the upgrade
using a library called Alembic. Usually the dynamic method with Alembic is
used, but Alembic is not easily available on all platforms, so \s-1FABS\s0 contains
hard-coded logic for some databases so they can still be upgraded without
Alembic.
.Sp
This option is generally not needed, since the default value, \f(CW\*(C`auto\*(C'\fR will
detect if Alembic is available and use the appropriate logic. Using either
logic should result in an identical upgrade, but of course the presence of bugs
may cause differences.
.Sp
The possible values for \fIwhen\fR are:
.RS 4
.ie n .IP """auto""" 4
.el .IP "\f(CWauto\fR" 4
.IX Item "auto"
The default value. Automatically detect which method to use, depending on what
libraries are available.
.ie n .IP """always""" 4
.el .IP "\f(CWalways\fR" 4
.IX Item "always"
Always use the builtin hard-coded logic for this upgrade.
.ie n .IP """never""" 4
.el .IP "\f(CWnever\fR" 4
.IX Item "never"
Never use the builtin hard-coded logic, and always use the dynamic method using
external libraries.
.RE
.RS 4
.RE
.SH "WARNING"
.IX Header "WARNING"
It is recommended to make a manual simple backup of the \s-1FABS\s0 database before
performing an upgrade, in case anything goes wrong. For SQLite databases, a
simple backup can be created with the following command:
.PP
.Vb 1
\&    # sqlite3 fabs.sqlite \*(Aq.backup fabs.backup.sqlite\*(Aq
.Ve
.PP
Which will make a copy of the database file \f(CW\*(C`fabs.sqlite\*(C'\fR into a new file
called \f(CW\*(C`fabs.backup.sqlite\*(C'\fR. If something goes wrong, you can restore the
backed-up database like so:
.PP
.Vb 1
\&    # sqlite3 fabs.sqlite \*(Aq.restore fabs.backup.sqlite\*(Aq
.Ve
.PP
To find the location of the database file used by \s-1FABS,\s0 run:
.PP
.Vb 2
\&    # fabsys config db/url
\&    sqlite:////var/lib/fabs/fabs.sqlite
.Ve
.PP
In this example, \s-1FABS\s0 is using a SQLite database in
\&\f(CW\*(C`/var/lib/fabs/fabs.sqlite\*(C'\fR.
.SH "PRIVILEGED REQUIRED"
.IX Header "PRIVILEGED REQUIRED"
The issuer of this command must be able to read the \s-1FABS\s0 configuration
(specifically, the database access information), typically in
\&\fB/etc/fabs/fabs.yaml.d/\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017, Sine Nomine Associates.
.PP
See the provided \s-1LICENSE\s0 file for licensing terms.
