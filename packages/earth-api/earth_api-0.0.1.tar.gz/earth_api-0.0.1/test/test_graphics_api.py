# coding: utf-8

"""
    ArcGIS Earth Automation API

    This is an ArcGIS Earth Automation API help page of Swagger. You can find out more about ArcGIS Earth Automation API at https://doc.arcgis.com/en/arcgis-earth/automation-api/get-started.htm  # noqa: E501

    OpenAPI spec version: 1.12-Alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import os
import sys
import json

expr_path = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '../'))

if  expr_path not in sys.path:
    sys.path.insert(0, expr_path)


import unittest
import json

import swagger_client
from swagger_client.api.graphics_api import GraphicsApi  # noqa: E501
from swagger_client.rest import ApiException
from test.utils import API_VERSION_CURRENT


class TestGraphicsApi(unittest.TestCase):
    """GraphicsApi unit test stubs"""

    def setUp(self):
        self.api = GraphicsApi()  # noqa: E501
        self.version = API_VERSION_CURRENT
        self.graphic_id = "point-picture-marker-graphic-js"

        self.post_graphic = {
            "id": "point-picture-marker-graphic-js",
            "geometry": {
                "type": "point",
                "x": -100,
                "y": 40
            },
            "symbol": {
                "type": "picture-marker",
                "url": "https://static.arcgis.com/images/Symbols/Shapes/BlackStarLargeB.png",
                "width": "64px",
                "height": "64px",
                "angle": 0,
                "xoffset": "10px",
                "yoffset": "10px"
            }
        }

        self.patch_size = 60

        self.patch_graphic = {
            "id": "point-picture-marker-graphic-js",
            "symbol": {
                "angle": 0,
                "height": self.patch_size,
                "type": "picture-marker",
                "url": "https://static.arcgis.com/images/Symbols/Basic/RedSphere.png",
                "width": self.patch_size,
            }
        }

    def tearDown(self):
        pass

    def test_5_arcgisearth_graphics_delete(self):
        """Test case for arcgisearth_graphics_delete

        Remove all graphics  # noqa: E501
        """
        self.test_1_arcgisearth_graphics_post()
        response_data = self.api.arcgisearth_graphics_delete(
            _preload_content=False,
            async_req=False,
            api_version=self.version)

        self.assertEqual(response_data.status, 204)


    def test_4_arcgisearth_graphics_id_delete(self):
        """Test case for arcgisearth_graphics_id_delete

        Delete a graphic by id  # noqa: E501
        """
        response_data = self.api.arcgisearth_graphics_id_delete(
            id=self.graphic_id,
            _preload_content=False,
            async_req=False,
            api_version=self.version)

        self.assertEqual(response_data.status, 204)


    def test_3_arcgisearth_graphics_id_get(self):
        """Test case for arcgisearth_graphics_id_get

        Get a graphic by id  # noqa: E501
        """
        response_data = self.api.arcgisearth_graphics_id_get(
            id=self.graphic_id,
            _preload_content=False,
            async_req=False,
            api_version=self.version)

        self.assertEqual(response_data.status, 200)

        content = response_data.data.decode('utf-8')
        results = json.loads(content)
        graphic_id = results["id"]
        self.assertEqual(graphic_id, self.graphic_id)



    def test_2_arcgisearth_graphics_patch(self):
        """Test case for arcgisearth_graphics_patch

        Update the graphic  # noqa: E501
        """
        response_data = self.api.arcgisearth_graphics_patch(
            _preload_content=False,
            async_req=False,
            body=self.patch_graphic,
            api_version=self.version)

        self.assertEqual(response_data.status, 204)



    def test_1_arcgisearth_graphics_post(self):
        """Test case for arcgisearth_graphics_post

        Add the graphic  # noqa: E501
        """
        response_data = self.api.arcgisearth_graphics_post(
            _preload_content=False,
            async_req=False,
            body=self.post_graphic,
            api_version=self.version)

        self.assertEqual(response_data.status, 201)

        content = response_data.data.decode('utf-8')
        results = json.loads(content)
        graphic_id = results["id"]
        self.assertEqual(graphic_id, self.graphic_id)



if __name__ == '__main__':
    unittest.main()
