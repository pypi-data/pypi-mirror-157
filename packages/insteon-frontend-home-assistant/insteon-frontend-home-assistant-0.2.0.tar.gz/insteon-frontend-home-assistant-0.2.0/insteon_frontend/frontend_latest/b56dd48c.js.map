{"version":3,"file":"b56dd48c.js","mappings":";;;AAqDA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;AAtBA;;;;;;;;;;AAnCA","sources":["webpack://insteon-panel-frontend/./src/device/dialog-insteon-add-device.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../homeassistant-frontend/src/components/ha-code-editor\";\nimport { createCloseHeading } from \"../../homeassistant-frontend/src/components/ha-dialog\";\nimport { haStyleDialog } from \"../../homeassistant-frontend/src/resources/styles\";\nimport { HomeAssistant } from \"../../homeassistant-frontend/src/types\";\nimport { Insteon, addDeviceSchema } from \"../data/insteon\";\nimport { check_address } from \"../tools/check_address\";\nimport \"../../homeassistant-frontend/src/components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../homeassistant-frontend/src/components/ha-form/types\";\nimport { InsteonAddDeviceDialogParams } from \"./show-dialog-insteon-add-device\";\n\n@customElement(\"dialog-insteon-add-device\")\nclass DialogInsteonAddDevice extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public insteon?: Insteon;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _title?: string;\n\n  @state() private _callback?: (address: string, multiple: boolean) => Promise<void>;\n\n  @state() private _errors?: { [key: string]: string };\n\n  @state() private _formData = { multiple: false, address: \"\" };\n\n  @state() private _opened = false;\n\n  public async showDialog(params: InsteonAddDeviceDialogParams): Promise<void> {\n    this.hass = params.hass;\n    this.insteon = params.insteon;\n    this._callback = params.callback;\n    this._title = params.title;\n    this._errors = {};\n    this._opened = true;\n    this._formData = { multiple: false, address: \"\" };\n  }\n\n  private _schema(multiple: boolean): HaFormSchema[] {\n    return addDeviceSchema(multiple);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=\"${this._close}\"\n        .heading=${createCloseHeading(this.hass!, this._title!)}\n      >\n        <div class=\"form\">\n          <ha-form\n            .data=${this._formData}\n            .schema=${this._schema(this._formData.multiple)}\n            .error=${this._errors}\n            @value-changed=${this._valueChanged}\n            .computeLabel=${this._computeLabel(this.insteon?.localize)}\n          ></ha-form>\n        </div>\n        <div class=\"buttons\">\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this.hass!.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n          <mwc-button @click=${this._submit} slot=\"primaryAction\">\n            ${this.hass!.localize(\"ui.dialogs.generic.ok\")}\n          </mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    this._close();\n  }\n\n  private _computeLabel(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) => localize(\"device.fields.\" + schema.name) || schema.name;\n  }\n\n  private async _submit(): Promise<void> {\n    if (this._checkData()) {\n      // eslint-disable-next-line no-console\n      console.info(\"Should be calling callback\");\n      this._close();\n      const address = this._formData.address == \"\" ? undefined : this._formData.address;\n      await this._callback!(address, this._formData.multiple);\n    } else {\n      this._errors!.base = this.insteon!.localize(\"common.error.base\");\n    }\n  }\n\n  private _close(): void {\n    this._opened = false;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this._formData = ev.detail.value;\n  }\n\n  private _checkData(): boolean {\n    if (this._formData.address == \"\" || check_address(this._formData.address)) return true;\n\n    this._errors = {};\n    this._errors.address = this.insteon!.localize(\"common.error.address\");\n    return false;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        table {\n          width: 100%;\n        }\n        ha-combo-box {\n          width: 20px;\n        }\n        .title {\n          width: 200px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-insteon-add-device\": DialogInsteonAddDevice;\n  }\n}\n"],"names":[],"sourceRoot":""}