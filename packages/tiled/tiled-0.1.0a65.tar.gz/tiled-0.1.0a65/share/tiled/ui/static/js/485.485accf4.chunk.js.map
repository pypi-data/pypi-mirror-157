{"version":3,"file":"static/js/485.485accf4.chunk.js","mappings":"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","sources":["client.ts","components/node-breadcrumbs.tsx","routes/browse.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { components } from \"./openapi_schemas\";\n\nconst apiURL = process.env.REACT_APP_API_PREFIX || \"../api\";\n\nvar axiosInstance = axios.create({\n  baseURL: apiURL,\n});\n\nexport const search = async (\n  segments: string[],\n  signal: AbortSignal,\n  fields: string[] = [],\n  selectMetadata: any = null,\n  pageOffset: number = 0,\n  pageLimit: number = 100\n): Promise<\n  components[\"schemas\"][\"Response_List_tiled.server.router.Resource_NodeAttributes__dict__dict____PaginationLinks__dict_\"]\n> => {\n  let url = `/node/search/${segments.join(\n    \"/\"\n  )}?page[offset]=${pageOffset}&page[limit]=${pageLimit}&fields=${fields.join(\n    \"&fields=\"\n  )}`;\n  if (selectMetadata !== null) {\n    url = url.concat(`&select_metadata=${selectMetadata}`);\n  }\n  const response = await axiosInstance.get(url, { signal: signal });\n  return response.data;\n};\n\nexport const metadata = async (\n  segments: string[],\n  signal: AbortSignal,\n  fields: string[] = []\n): Promise<\n  components[\"schemas\"][\"Response_Resource_NodeAttributes__dict__dict___dict__dict_\"]\n> => {\n  const response = await axiosInstance.get(\n    `/node/metadata/${segments.join(\"/\")}?fields=${fields.join(\"&fields=\")}`,\n    { signal: signal }\n  );\n  return response.data;\n};\n\nexport const about = async (): Promise<components[\"schemas\"][\"About\"]> => {\n  const response = await axiosInstance.get(\"/\");\n  return response.data;\n};\n\nexport { axiosInstance };\n","import * as React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Link from \"@mui/material/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\ninterface IProps {\n  segments: string[];\n}\n\nconst NodeBreadcrumbs: React.FunctionComponent<IProps> = (props) => {\n  if (props.segments !== undefined) {\n    return (\n      <Box mt={3} mb={2}>\n        <Breadcrumbs aria-label=\"breadcrumb\">\n          <Link key=\"breadcrumb-0\" component={RouterLink} to=\"/browse/\">\n            Top\n          </Link>\n          {props.segments.map((segment, index, segments) => (\n            <Link\n              component={RouterLink}\n              key={\"breadcrumb-{1 + i}\" + segment}\n              to={`/browse${segments\n                .slice(0, 1 + index)\n                .map((segment) => {\n                  return \"/\" + segment;\n                })\n                .join(\"\")}/`}\n            >\n              {segment}\n            </Link>\n          ))}\n        </Breadcrumbs>\n      </Box>\n    );\n  } else {\n    return <div>...</div>;\n  }\n};\n\nexport default NodeBreadcrumbs;\n","import * as React from \"react\";\n\nimport { Suspense, lazy } from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport ErrorBoundary from \"../components/error-boundary\";\nimport NodeBreadcrumbs from \"../components/node-breadcrumbs\";\nimport Paper from \"@mui/material/Paper\";\nimport PropTypes from \"prop-types\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport Tab from \"@mui/material/Tab\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Typography from \"@mui/material/Typography\";\nimport { components } from \"../openapi_schemas\";\nimport { metadata } from \"../client\";\nimport { useParams } from \"react-router-dom\";\n\nconst ArrayOverview = lazy(() => import(\"../components/overview-array\"));\nconst DataFrameOverview = lazy(\n  () => import(\"../components/overview-dataframe\")\n);\nconst DownloadArray = lazy(() => import(\"../components/download-array\"));\nconst DownloadDataFrame = lazy(\n  () => import(\"../components/download-dataframe\")\n);\nconst DownloadDataset = lazy(\n  () => import(\"../components/download-xarray-dataset\")\n);\nconst DownloadNode = lazy(() => import(\"../components/download-node\"));\nconst JSONViewer = lazy(() => import(\"../components/json-viewer\"));\nconst MetadataView = lazy(() => import(\"../components/metadata-view\"));\nconst NodeOverview = lazy(() => import(\"../components/overview-generic-node\"));\nconst XarrayDataArrayOverview = lazy(\n  () => import(\"../components/overview-xarray-data-array\")\n);\nconst XarrayDatasetOverview = lazy(\n  () => import(\"../components/overview-xarray-dataset\")\n);\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\ninterface IProps {\n  segments: string[];\n}\n\ninterface DispatchProps {\n  segments: string[];\n  item:\n    | components[\"schemas\"][\"Response_Resource_NodeAttributes__dict__dict___dict__dict_\"]\n    | undefined;\n}\n\nconst DownloadDispatch: React.FunctionComponent<DispatchProps> = (props) => {\n  // Dispatch to a specific overview component based on the structure family.\n  // In the future we will extend this to consider 'specs' as well.\n  if (props.item !== undefined) {\n    const attributes = props.item.data!.attributes!;\n    const structureFamily = attributes.structure_family;\n    switch (structureFamily) {\n      case \"node\":\n        return (\n          <DownloadNode\n            name={props.item.data!.id}\n            structureFamily={structureFamily}\n            specs={attributes.specs as string[]}\n            link={props.item.data!.links!.full! as string}\n          />\n        );\n      case \"array\":\n        return (\n          <DownloadArray\n            name={props.item.data!.id}\n            structureFamily={structureFamily}\n            macrostructure={attributes.structure!.macro!}\n            specs={attributes.specs as string[]}\n            link={props.item.data!.links!.full! as string}\n          />\n        );\n      case \"dataframe\":\n        return (\n          <DownloadDataFrame\n            name={props.item.data!.id}\n            structureFamily={structureFamily}\n            macrostructure={attributes.structure!.macro!}\n            specs={attributes.specs as string[]}\n            full_link={props.item.data!.links!.full! as string}\n            partition_link={props.item.data!.links!.partition! as string}\n          />\n        );\n      case \"xarray_data_array\":\n        // special case: handle this like an array\n        const structure = attributes!.structure! as any;\n        const macrostructure = structure.macro!.variable!.macro!;\n        return (\n          <DownloadArray\n            name={props.item.data!.id}\n            structureFamily=\"array\"\n            macrostructure={macrostructure}\n            specs={attributes.specs as string[]}\n            link={props.item.data!.links!.full_variable! as string}\n          />\n        );\n      case \"xarray_dataset\":\n        return (\n          <DownloadDataset\n            name={props.item.data!.id}\n            structureFamily={structureFamily}\n            macrostructure={attributes.structure!.macro!}\n            specs={attributes.specs as string[]}\n            link={props.item.data!.links!.full_dataset! as string}\n          />\n        );\n      default:\n        return <div>Unknown structure family \"{structureFamily}\"</div>;\n    }\n  }\n  return <Skeleton variant=\"rectangular\" />;\n};\n\nconst OverviewDispatch: React.FunctionComponent<DispatchProps> = (props) => {\n  // Dispatch to a specific overview component based on the structure family.\n  // In the future we will extend this to consider 'specs' as well.\n  if (props.item !== undefined) {\n    const structureFamily = props.item!.data!.attributes!.structure_family;\n    switch (structureFamily) {\n      case \"node\":\n        return <NodeOverview segments={props.segments} item={props.item} />;\n      case \"array\":\n        return (\n          <ArrayOverview\n            segments={props.segments}\n            item={props.item}\n            link={props.item.data!.links!.full as string}\n            structure={props.item.data!.attributes!.structure!}\n          />\n        );\n      case \"dataframe\":\n        return (\n          <DataFrameOverview segments={props.segments} item={props.item} />\n        );\n      case \"xarray_data_array\":\n        return (\n          <XarrayDataArrayOverview\n            segments={props.segments}\n            item={props.item}\n            link={props.item.data!.links!.full_variable as string}\n            structure={\n              props.item.data!.attributes!.structure!.macro!\n                .variable! as components[\"schemas\"][\"Structure\"]\n            }\n          />\n        );\n      case \"xarray_dataset\":\n        return (\n          <XarrayDatasetOverview segments={props.segments} item={props.item} />\n        );\n      default:\n        return <div>Unknown structure family \"{structureFamily}\"</div>;\n    }\n  }\n  return <Skeleton variant=\"rectangular\" />;\n};\n\nfunction Browse() {\n  // Extract from path from react-router.\n  const params = useParams<{ \"*\": string }>();\n  // Transform \"/a/b/c\" to [\"a\", \"b\", \"c\"].\n  const segments = (params[\"*\"] || \"\").split(\"/\").filter(function (segment) {\n    return segment;\n  });\n\n  if (segments !== undefined) {\n    return (\n      <Box sx={{ width: \"100%\" }}>\n        <NodeBreadcrumbs segments={segments} />\n        <NodeTabs segments={segments} />\n      </Box>\n    );\n  } else {\n    return <Skeleton variant=\"text\" />;\n  }\n}\n\nconst NodeTabs: React.FunctionComponent<IProps> = (props) => {\n  const [tabValue, setTabValue] = useState(0);\n  const handleTabChange = (event: React.ChangeEvent<any>, newValue: number) => {\n    setTabValue(newValue);\n  };\n  const [item, setItem] =\n    useState<\n      components[\"schemas\"][\"Response_Resource_NodeAttributes__dict__dict___dict__dict_\"]\n    >();\n  useEffect(() => {\n    setTabValue(0);\n  }, [props.segments]);\n  useEffect(() => {\n    setItem(undefined);\n    const controller = new AbortController();\n    async function loadData() {\n      // Request all the attributes.\n      var result = await metadata(props.segments, controller.signal, [\n        \"structure_family\",\n        \"structure.macro\",\n        \"structure.micro\",\n        \"specs\",\n      ]);\n      if (result !== undefined) {\n        setItem(result);\n      }\n    }\n    loadData();\n    return () => {\n      controller.abort();\n    };\n  }, [props.segments]);\n  const [fullItem, setFullItem] =\n    useState<\n      components[\"schemas\"][\"Response_Resource_NodeAttributes__dict__dict___dict__dict_\"]\n    >();\n  useEffect(() => {\n    const controller = new AbortController();\n    async function loadData() {\n      // Request all the attributes.\n      var result = await metadata(props.segments, controller.signal, [\n        \"structure_family\",\n        \"structure.macro\",\n        \"structure.micro\",\n        \"specs\",\n        \"metadata\",\n        \"sorting\",\n        \"count\",\n      ]);\n      if (result !== undefined) {\n        setFullItem(result);\n      }\n    }\n    loadData();\n    return () => {\n      controller.abort();\n    };\n  }, [props.segments]);\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab label=\"View\" {...a11yProps(0)} />\n          <Tab label=\"Download\" {...a11yProps(1)} />\n          <Tab label=\"Metadata\" {...a11yProps(2)} />\n          <Tab label=\"Detail\" {...a11yProps(3)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={tabValue} index={0}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          {props.segments.length > 0\n            ? props.segments[props.segments.length - 1]\n            : \"\"}\n        </Typography>\n        <Paper elevation={3} sx={{ px: 3, py: 3 }}>\n          <ErrorBoundary>\n            <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n              <OverviewDispatch segments={props.segments} item={item} />\n            </Suspense>\n          </ErrorBoundary>\n        </Paper>\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        <ErrorBoundary>\n          <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n            <DownloadDispatch segments={props.segments} item={item} />\n          </Suspense>\n        </ErrorBoundary>\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        <ErrorBoundary>\n          <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n            <MetadataView json={fullItem} />\n          </Suspense>\n        </ErrorBoundary>\n      </TabPanel>\n      <TabPanel value={tabValue} index={3}>\n        <ErrorBoundary>\n          <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n            <JSONViewer json={fullItem} />\n          </Suspense>\n        </ErrorBoundary>\n      </TabPanel>\n    </Box>\n  );\n};\n\nexport default Browse;\n"],"names":["apiURL","process","REACT_APP_API_PREFIX","axiosInstance","axios","baseURL","search","segments","signal","fields","selectMetadata","pageOffset","pageLimit","url","join","concat","get","response","data","metadata","about","props","undefined","Box","mt","mb","Breadcrumbs","Link","component","RouterLink","to","map","segment","index","slice","ArrayOverview","lazy","DataFrameOverview","DownloadArray","DownloadDataFrame","DownloadDataset","DownloadNode","JSONViewer","MetadataView","NodeOverview","XarrayDataArrayOverview","XarrayDatasetOverview","TabPanel","children","value","other","role","hidden","id","sx","p","a11yProps","DownloadDispatch","item","attributes","structureFamily","structure_family","name","specs","link","links","full","macrostructure","structure","macro","full_link","partition_link","partition","variable","full_variable","full_dataset","Skeleton","variant","OverviewDispatch","NodeTabs","useState","tabValue","setTabValue","setItem","useEffect","controller","AbortController","result","loadData","abort","fullItem","setFullItem","width","borderBottom","borderColor","Tabs","onChange","event","newValue","Tab","label","Typography","gutterBottom","length","Paper","elevation","px","py","Suspense","fallback","json","useParams","split","filter"],"sourceRoot":""}